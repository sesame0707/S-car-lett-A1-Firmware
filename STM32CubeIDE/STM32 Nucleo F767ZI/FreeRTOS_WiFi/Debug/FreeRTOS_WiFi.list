
FreeRTOS_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b404  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc70  0800bc70  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc78  0800bc78  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  0800bcec  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800bd8c  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005178  200001ac  0800be2c  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005324  0800be2c  00025324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022558  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004ebd  00000000  00000000  00042775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001bc8  00000000  00000000  00047638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000157f  00000000  00000000  00049200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002dfe8  00000000  00000000  0004a77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023496  00000000  00000000  00078767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011002a  00000000  00000000  0009bbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008240  00000000  00000000  001abc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000087  00000000  00000000  001b3e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b5ec 	.word	0x0800b5ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	0800b5ec 	.word	0x0800b5ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool	Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005fe:	d812      	bhi.n	8000626 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	461a      	mov	r2, r3
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <Wifi_SendRaw+0x44>)
 8000608:	f009 fc0a 	bl	8009e20 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <Wifi_SendRaw+0x48>)
 8000614:	f004 ff02 	bl	800541c <HAL_UART_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <Wifi_SendRaw+0x36>
			return true;
 800061e:	2301      	movs	r3, #1
 8000620:	e002      	b.n	8000628 <Wifi_SendRaw+0x3c>
		else
			return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200003d1 	.word	0x200003d1
 8000634:	20000ef8 	.word	0x20000ef8

08000638 <Wifi_SendString>:
//#########################################################################################################
bool	Wifi_SendString(char *data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fdfd 	bl	8000240 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29b      	uxth	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffcd 	bl	80005ec <Wifi_SendRaw>
 8000652:	4603      	mov	r3, r0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <Wifi_SendStringAndWait>:
//#########################################################################################################
bool	Wifi_SendStringAndWait(char *data,uint16_t DelayMs)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
	if(Wifi_SendRaw((uint8_t*)data,strlen(data))==false)
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fde9 	bl	8000240 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29b      	uxth	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffb9 	bl	80005ec <Wifi_SendRaw>
 800067a:	4603      	mov	r3, r0
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <Wifi_SendStringAndWait+0x2e>
		return false;
 8000686:	2300      	movs	r3, #0
 8000688:	e004      	b.n	8000694 <Wifi_SendStringAndWait+0x38>
	osDelay(DelayMs);
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	4618      	mov	r0, r3
 800068e:	f006 fd04 	bl	800709a <osDelay>
	return true;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Wifi_WaitForString>:
//#########################################################################################################
bool	Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 800069c:	b40c      	push	{r2, r3}
 800069e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	466b      	mov	r3, sp
 80006ac:	461e      	mov	r6, r3
	
	if(result == NULL)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <Wifi_WaitForString+0x1c>
		return false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e074      	b.n	80007a2 <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 80006b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <Wifi_WaitForString+0x28>
		return false;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e06e      	b.n	80007a2 <Wifi_WaitForString+0x106>

	*result=0;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 80006ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ce:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 80006d0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80006d4:	460b      	mov	r3, r1
 80006d6:	3b01      	subs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	b2cb      	uxtb	r3, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	4698      	mov	r8, r3
 80006e0:	4691      	mov	r9, r2
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	f04f 0300 	mov.w	r3, #0
 80006ea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80006ee:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80006f2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80006f6:	b2cb      	uxtb	r3, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	461c      	mov	r4, r3
 80006fc:	4615      	mov	r5, r2
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	016b      	lsls	r3, r5, #5
 8000708:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800070c:	0162      	lsls	r2, r4, #5
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	3307      	adds	r3, #7
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	ebad 0d03 	sub.w	sp, sp, r3
 800071c:	466b      	mov	r3, sp
 800071e:	3303      	adds	r3, #3
 8000720:	089b      	lsrs	r3, r3, #2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	77fb      	strb	r3, [r7, #31]
 800072a:	e00a      	b.n	8000742 <Wifi_WaitForString+0xa6>
		arg[i] = va_arg (tag, char *);	
 800072c:	7ffa      	ldrb	r2, [r7, #31]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1d19      	adds	r1, r3, #4
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800073c:	7ffb      	ldrb	r3, [r7, #31]
 800073e:	3301      	adds	r3, #1
 8000740:	77fb      	strb	r3, [r7, #31]
 8000742:	7ffa      	ldrb	r2, [r7, #31]
 8000744:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <Wifi_WaitForString+0x90>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	e022      	b.n	8000798 <Wifi_WaitForString+0xfc>
	{
		osDelay(50);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f006 fca1 	bl	800709a <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000758:	2300      	movs	r3, #0
 800075a:	75fb      	strb	r3, [r7, #23]
 800075c:	e014      	b.n	8000788 <Wifi_WaitForString+0xec>
		{			
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 800075e:	7dfa      	ldrb	r2, [r7, #23]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000766:	4619      	mov	r1, r3
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <Wifi_WaitForString+0x118>)
 800076a:	f009 fa73 	bl	8009c54 <strstr>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d006      	beq.n	8000782 <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	701a      	strb	r2, [r3, #0]
				return true;
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	3301      	adds	r3, #1
 8000786:	75fb      	strb	r3, [r7, #23]
 8000788:	7dfa      	ldrb	r2, [r7, #23]
 800078a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800078e:	429a      	cmp	r2, r3
 8000790:	d3e5      	bcc.n	800075e <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3332      	adds	r3, #50	; 0x32
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3d8      	bcc.n	8000752 <Wifi_WaitForString+0xb6>
			}				
		}				
	}
	// timeout
	return false;
 80007a0:	2300      	movs	r3, #0
 80007a2:	46b5      	mov	sp, r6
	
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3724      	adds	r7, #36	; 0x24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007ae:	b002      	add	sp, #8
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200001d1 	.word	0x200001d1

080007b8 <Wifi_ReturnString>:
//#########################################################################################################
bool	Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	460b      	mov	r3, r1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <Wifi_ReturnString+0x18>
		return false;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e02e      	b.n	800082e <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <Wifi_ReturnString+0x22>
		return false;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e029      	b.n	800082e <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <Wifi_ReturnString+0x80>)
 80007dc:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	6978      	ldr	r0, [r7, #20]
 80007e2:	f009 f9db 	bl	8009b9c <strtok>
 80007e6:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d118      	bne.n	8000820 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		return false;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e01a      	b.n	800082e <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	2000      	movs	r0, #0
 80007fc:	f009 f9ce 	bl	8009b9c <strtok>
 8000800:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	3b01      	subs	r3, #1
 800080c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d105      	bne.n	8000820 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8000814:	6979      	ldr	r1, [r7, #20]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f009 fafa 	bl	8009e10 <strcpy>
			return true;
 800081c:	2301      	movs	r3, #1
 800081e:	e006      	b.n	800082e <Wifi_ReturnString+0x76>
	while (str != NULL)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1e8      	bne.n	80007f8 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	return false;	
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001d1 	.word	0x200001d1

0800083c <Wifi_ReturnStrings>:

//#########################################################################################################
bool	Wifi_ReturnStrings(char *InputString,char *SplitterChars,uint8_t CountOfParameter,...)
{
 800083c:	b40c      	push	{r2, r3}
 800083e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	466b      	mov	r3, sp
 800084c:	461e      	mov	r6, r3
	if(CountOfParameter == 0)
 800084e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <Wifi_ReturnStrings+0x1e>
		return false;
 8000856:	2300      	movs	r3, #0
 8000858:	e06f      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	va_list tag;
	va_start (tag,CountOfParameter);
 800085a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800085e:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8000860:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000864:	460b      	mov	r3, r1
 8000866:	3b01      	subs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	b2cb      	uxtb	r3, r1
 800086c:	2200      	movs	r2, #0
 800086e:	4698      	mov	r8, r3
 8000870:	4691      	mov	r9, r2
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800087e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000882:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000886:	b2cb      	uxtb	r3, r1
 8000888:	2200      	movs	r2, #0
 800088a:	461c      	mov	r4, r3
 800088c:	4615      	mov	r5, r2
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	016b      	lsls	r3, r5, #5
 8000898:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800089c:	0162      	lsls	r2, r4, #5
 800089e:	460b      	mov	r3, r1
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	3307      	adds	r3, #7
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	ebad 0d03 	sub.w	sp, sp, r3
 80008ac:	466b      	mov	r3, sp
 80008ae:	3303      	adds	r3, #3
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	77fb      	strb	r3, [r7, #31]
 80008ba:	e00a      	b.n	80008d2 <Wifi_ReturnStrings+0x96>
		arg[i] = va_arg (tag, char *);	
 80008bc:	7ffa      	ldrb	r2, [r7, #31]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1d19      	adds	r1, r3, #4
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80008cc:	7ffb      	ldrb	r3, [r7, #31]
 80008ce:	3301      	adds	r3, #1
 80008d0:	77fb      	strb	r3, [r7, #31]
 80008d2:	7ffa      	ldrb	r2, [r7, #31]
 80008d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3ef      	bcc.n	80008bc <Wifi_ReturnStrings+0x80>
  va_end (tag);
	
	char *str;
	str = strtok (InputString,SplitterChars);
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f009 f95c 	bl	8009b9c <strtok>
 80008e4:	61b8      	str	r0, [r7, #24]
	if(str == NULL)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <Wifi_ReturnStrings+0xb4>
		return false;
 80008ec:	2300      	movs	r3, #0
 80008ee:	e024      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	uint8_t i=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]
	while (str != NULL)
 80008f4:	e01d      	b.n	8000932 <Wifi_ReturnStrings+0xf6>
  {
    str = strtok (NULL,SplitterChars);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	2000      	movs	r0, #0
 80008fa:	f009 f94f 	bl	8009b9c <strtok>
 80008fe:	61b8      	str	r0, [r7, #24]
		if(str != NULL)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <Wifi_ReturnStrings+0xd4>
			CountOfParameter--;
 8000906:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800090a:	3b01      	subs	r3, #1
 800090c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		strcpy(arg[i],str);
 8000910:	7dfa      	ldrb	r2, [r7, #23]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	69b9      	ldr	r1, [r7, #24]
 800091a:	4618      	mov	r0, r3
 800091c:	f009 fa78 	bl	8009e10 <strcpy>
		i++;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	3301      	adds	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
		if(CountOfParameter==0)
 8000926:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <Wifi_ReturnStrings+0xf6>
		{
			return true;
 800092e:	2301      	movs	r3, #1
 8000930:	e003      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	while (str != NULL)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1de      	bne.n	80008f6 <Wifi_ReturnStrings+0xba>
		}
  }
	return false;	
 8000938:	2300      	movs	r3, #0
 800093a:	46b5      	mov	sp, r6
	
}
 800093c:	4618      	mov	r0, r3
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000946:	b002      	add	sp, #8
 8000948:	4770      	bx	lr
	...

0800094c <Wifi_ReturnInteger>:
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	460b      	mov	r3, r1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <Wifi_ReturnInteger+0x40>)
 8000962:	f7ff ff29 	bl	80007b8 <Wifi_ReturnString>
 8000966:	4603      	mov	r3, r0
 8000968:	f083 0301 	eor.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <Wifi_ReturnInteger+0x2a>
		return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e006      	b.n	8000984 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <Wifi_ReturnInteger+0x40>)
 8000978:	f008 ff28 	bl	80097cc <atoi>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	601a      	str	r2, [r3, #0]
	return true;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001d1 	.word	0x200001d1

08000990 <Wifi_RemoveChar>:
	*result = atof((char*)Wifi.RxBuffer);
	return true;
}
//#########################################################################################################
void Wifi_RemoveChar(char *str, char garbage)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	char *src, *dst;
  for (src = dst = str; *src != '\0'; src++)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e00e      	b.n	80009c4 <Wifi_RemoveChar+0x34>
	{
		*dst = *src;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	701a      	strb	r2, [r3, #0]
		if (*dst != garbage)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d002      	beq.n	80009be <Wifi_RemoveChar+0x2e>
			dst++;
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
  for (src = dst = str; *src != '\0'; src++)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <Wifi_RemoveChar+0x16>
  }
  *dst = '\0';
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <Wifi_RxClear>:
//#########################################################################################################
void	Wifi_RxClear(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	2100      	movs	r1, #0
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <Wifi_RxClear+0x28>)
 80009ec:	f009 f8c1 	bl	8009b72 <memset>
	Wifi.RxIndex=0;	
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <Wifi_RxClear+0x2c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4904      	ldr	r1, [pc, #16]	; (8000a0c <Wifi_RxClear+0x2c>)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <Wifi_RxClear+0x30>)
 80009fe:	f004 fd90 	bl	8005522 <HAL_UART_Receive_IT>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001d1 	.word	0x200001d1
 8000a0c:	200001d0 	.word	0x200001d0
 8000a10:	20000ef8 	.word	0x20000ef8

08000a14 <Wifi_TxClear>:
//#########################################################################################################
void	Wifi_TxClear(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8000a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4802      	ldr	r0, [pc, #8]	; (8000a28 <Wifi_TxClear+0x14>)
 8000a20:	f009 f8a7 	bl	8009b72 <memset>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200003d1 	.word	0x200003d1

08000a2c <Wifi_RxCallBack>:
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8000a30:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a32:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8000a36:	f083 0301 	eor.w	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d018      	beq.n	8000a72 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8000a40:	4b96      	ldr	r3, [pc, #600]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a42:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a46:	4619      	mov	r1, r3
 8000a48:	4b94      	ldr	r3, [pc, #592]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b93      	ldr	r3, [pc, #588]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a4e:	440b      	add	r3, r1
 8000a50:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8000a52:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a54:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a5c:	f080 80ab 	bcs.w	8000bb6 <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8000a60:	4b8e      	ldr	r3, [pc, #568]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a62:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b8c      	ldr	r3, [pc, #560]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a6c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8000a70:	e0a1      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8000a72:	f002 f825 	bl	8002ac0 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b88      	ldr	r3, [pc, #544]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a7a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b32      	cmp	r3, #50	; 0x32
 8000a82:	d903      	bls.n	8000a8c <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8000a84:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 8000a8c:	4b83      	ldr	r3, [pc, #524]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a8e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d167      	bne.n	8000b66 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8000a96:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a98:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8000a9c:	f083 0301 	eor.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d028      	beq.n	8000af8 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000aa6:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000aa8:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b7a      	ldr	r3, [pc, #488]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ab4:	440b      	add	r3, r1
 8000ab6:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000aba:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000abc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b75      	ldr	r3, [pc, #468]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ac6:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000acc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	4a72      	ldr	r2, [pc, #456]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000ada:	2b3a      	cmp	r3, #58	; 0x3a
 8000adc:	d16b      	bne.n	8000bb6 <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 8000ade:	4b6f      	ldr	r3, [pc, #444]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 8000ae6:	486e      	ldr	r0, [pc, #440]	; (8000ca0 <Wifi_RxCallBack+0x274>)
 8000ae8:	f008 fe70 	bl	80097cc <atoi>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000af2:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000af6:	e05e      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000af8:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000afa:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b66      	ldr	r3, [pc, #408]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b65      	ldr	r3, [pc, #404]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b0e:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b61      	ldr	r3, [pc, #388]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b18:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b1e:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 8000b22:	2b2c      	cmp	r3, #44	; 0x2c
 8000b24:	d107      	bne.n	8000b36 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8000b26:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b28:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8000b2c:	3b30      	subs	r3, #48	; 0x30
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b32:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8000b36:	4b59      	ldr	r3, [pc, #356]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b38:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d93a      	bls.n	8000bb6 <Wifi_RxCallBack+0x18a>
 8000b40:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b42:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a54      	ldr	r2, [pc, #336]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000b50:	2b3a      	cmp	r3, #58	; 0x3a
 8000b52:	d130      	bne.n	8000bb6 <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8000b54:	4853      	ldr	r0, [pc, #332]	; (8000ca4 <Wifi_RxCallBack+0x278>)
 8000b56:	f008 fe39 	bl	80097cc <atoi>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b60:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000b64:	e027      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b68:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b74:	440b      	add	r3, r1
 8000b76:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 8000b7a:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b7c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b84:	d207      	bcs.n	8000b96 <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 8000b86:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b88:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b92:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b98:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b9e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d307      	bcc.n	8000bb6 <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4938      	ldr	r1, [pc, #224]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bba:	483b      	ldr	r0, [pc, #236]	; (8000ca8 <Wifi_RxCallBack+0x27c>)
 8000bbc:	f004 fcb1 	bl	8005522 <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bc2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d966      	bls.n	8000c98 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bcc:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bd0:	3b04      	subs	r3, #4
 8000bd2:	4a32      	ldr	r2, [pc, #200]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	785b      	ldrb	r3, [r3, #1]
 8000bd8:	2b2b      	cmp	r3, #43	; 0x2b
 8000bda:	d15d      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bde:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000be2:	3b03      	subs	r3, #3
 8000be4:	4a2d      	ldr	r2, [pc, #180]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000be6:	4413      	add	r3, r2
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	2b49      	cmp	r3, #73	; 0x49
 8000bec:	d154      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bf0:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bf4:	3b02      	subs	r3, #2
 8000bf6:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bf8:	4413      	add	r3, r2
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b50      	cmp	r3, #80	; 0x50
 8000bfe:	d14b      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c02:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c0a:	4413      	add	r3, r2
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	2b44      	cmp	r3, #68	; 0x44
 8000c10:	d142      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 8000c12:	2208      	movs	r2, #8
 8000c14:	2100      	movs	r1, #0
 8000c16:	4825      	ldr	r0, [pc, #148]	; (8000cac <Wifi_RxCallBack+0x280>)
 8000c18:	f008 ffab 	bl	8009b72 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c1e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c22:	3b04      	subs	r3, #4
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c2e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c32:	3b03      	subs	r3, #3
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c36:	4413      	add	r3, r2
 8000c38:	2200      	movs	r2, #0
 8000c3a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c3e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c42:	3b02      	subs	r3, #2
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c46:	4413      	add	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c4e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c56:	4413      	add	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c5e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c62:	3b04      	subs	r3, #4
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c68:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 8000c8c:	f001 ff18 	bl	8002ac0 <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c94:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer  
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001d0 	.word	0x200001d0
 8000ca0:	200008d5 	.word	0x200008d5
 8000ca4:	200008d7 	.word	0x200008d7
 8000ca8:	20000ef8 	.word	0x20000ef8
 8000cac:	200008d4 	.word	0x200008d4

08000cb0 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiTask(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 8000cb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cbc:	f006 f9ed 	bl	800709a <osDelay>
	Wifi_SendStringAndWait("AT\r\n",1000);
 8000cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc4:	4853      	ldr	r0, [pc, #332]	; (8000e14 <WifiTask+0x164>)
 8000cc6:	f7ff fcc9 	bl	800065c <Wifi_SendStringAndWait>
 	Wifi_SetRfPower(82);
 8000cca:	2052      	movs	r0, #82	; 0x52
 8000ccc:	f000 f8f0 	bl	8000eb0 <Wifi_SetRfPower>
  Wifi_TcpIp_GetMultiConnection();
 8000cd0:	f000 fd7c 	bl	80017cc <Wifi_TcpIp_GetMultiConnection>
  Wifi_TcpIp_Close(0);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 fe7d 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fe7a 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(2);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fe77 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(3);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 fe74 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(4);
 8000cec:	2004      	movs	r0, #4
 8000cee:	f000 fe71 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_SetMultiConnection(true);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fd16 	bl	8001724 <Wifi_TcpIp_SetMultiConnection>
	Wifi_GetMode();
 8000cf8:	f000 f97c 	bl	8000ff4 <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 8000cfc:	f000 fa7c 	bl	80011f8 <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();  
 8000d00:	f000 ffdc 	bl	8001cbc <Wifi_UserInit>
 
 
	//#######################		
	while(1)
	{	
		Wifi_GetMyIp();	
 8000d04:	f000 f9d6 	bl	80010b4 <Wifi_GetMyIp>
    if((Wifi.Mode==WifiMode_SoftAp) || (Wifi.Mode==WifiMode_StationAndSoftAp))
 8000d08:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <WifiTask+0x168>)
 8000d0a:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d004      	beq.n	8000d1c <WifiTask+0x6c>
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <WifiTask+0x168>)
 8000d14:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d101      	bne.n	8000d20 <WifiTask+0x70>
      Wifi_SoftAp_GetConnectedDevices();
 8000d1c:	f000 fafa 	bl	8001314 <Wifi_SoftAp_GetConnectedDevices>
		Wifi_TcpIp_GetConnectionStatus();
 8000d20:	f000 fc1c 	bl	800155c <Wifi_TcpIp_GetConnectionStatus>
    Wifi_RxClear();  
 8000d24:	f7ff fe5c 	bl	80009e0 <Wifi_RxClear>
		for(uint8_t i=0; i< 100; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e06b      	b.n	8000e06 <WifiTask+0x156>
    {
      if( Wifi.GotNewData==true)
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <WifiTask+0x168>)
 8000d30:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d060      	beq.n	8000dfa <WifiTask+0x14a>
      {
        Wifi.GotNewData=false;
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <WifiTask+0x168>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
        for(uint8_t ii=0; ii<5 ; ii++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73bb      	strb	r3, [r7, #14]
 8000d44:	e056      	b.n	8000df4 <WifiTask+0x144>
        {
          if((strstr(Wifi.TcpIpConnections[ii].Type,"UDP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 8000d46:	7bba      	ldrb	r2, [r7, #14]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <WifiTask+0x168>)
 8000d56:	4413      	add	r3, r2
 8000d58:	3306      	adds	r3, #6
 8000d5a:	4930      	ldr	r1, [pc, #192]	; (8000e1c <WifiTask+0x16c>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 ff79 	bl	8009c54 <strstr>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d018      	beq.n	8000d9a <WifiTask+0xea>
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <WifiTask+0x168>)
 8000d6a:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 8000d6e:	7bba      	ldrb	r2, [r7, #14]
 8000d70:	4829      	ldr	r0, [pc, #164]	; (8000e18 <WifiTask+0x168>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4403      	add	r3, r0
 8000d7c:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d109      	bne.n	8000d9a <WifiTask+0xea>
            Wifi_UserGetUdpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);        
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <WifiTask+0x168>)
 8000d88:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8000d8c:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <WifiTask+0x168>)
 8000d8e:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <WifiTask+0x170>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ffef 	bl	8001d78 <Wifi_UserGetUdpData>
          if((strstr(Wifi.TcpIpConnections[ii].Type,"TCP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 8000d9a:	7bba      	ldrb	r2, [r7, #14]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <WifiTask+0x168>)
 8000daa:	4413      	add	r3, r2
 8000dac:	3306      	adds	r3, #6
 8000dae:	491d      	ldr	r1, [pc, #116]	; (8000e24 <WifiTask+0x174>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 ff4f 	bl	8009c54 <strstr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d018      	beq.n	8000dee <WifiTask+0x13e>
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <WifiTask+0x168>)
 8000dbe:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 8000dc2:	7bba      	ldrb	r2, [r7, #14]
 8000dc4:	4814      	ldr	r0, [pc, #80]	; (8000e18 <WifiTask+0x168>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4403      	add	r3, r0
 8000dd0:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d109      	bne.n	8000dee <WifiTask+0x13e>
            Wifi_UserGetTcpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);        
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <WifiTask+0x168>)
 8000ddc:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <WifiTask+0x168>)
 8000de2:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <WifiTask+0x170>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 ffd9 	bl	8001da0 <Wifi_UserGetTcpData>
        for(uint8_t ii=0; ii<5 ; ii++)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73bb      	strb	r3, [r7, #14]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d9a5      	bls.n	8000d46 <WifiTask+0x96>
        }        
      }
      osDelay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f006 f94d 	bl	800709a <osDelay>
		for(uint8_t i=0; i< 100; i++)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	3301      	adds	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b63      	cmp	r3, #99	; 0x63
 8000e0a:	d990      	bls.n	8000d2e <WifiTask+0x7e>
    }
    Wifi_UserProcess();
 8000e0c:	f000 ff8e 	bl	8001d2c <Wifi_UserProcess>
		Wifi_GetMyIp();	
 8000e10:	e778      	b.n	8000d04 <WifiTask+0x54>
 8000e12:	bf00      	nop
 8000e14:	0800b604 	.word	0x0800b604
 8000e18:	200001d0 	.word	0x200001d0
 8000e1c:	0800b60c 	.word	0x0800b60c
 8000e20:	200004d4 	.word	0x200004d4
 8000e24:	0800b610 	.word	0x0800b610

08000e28 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void	Wifi_Init(osPriority	Priority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	4918      	ldr	r1, [pc, #96]	; (8000e98 <Wifi_Init+0x70>)
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <Wifi_Init+0x74>)
 8000e38:	f004 fb73 	bl	8005522 <HAL_UART_Receive_IT>
	Wifi_RxClear();
 8000e3c:	f7ff fdd0 	bl	80009e0 <Wifi_RxClear>
	Wifi_TxClear();
 8000e40:	f7ff fde8 	bl	8000a14 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 f935 	bl	80070c2 <osSemaphoreCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <Wifi_Init+0x78>)
 8000e5c:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <Wifi_Init+0x7c>)
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <Wifi_Init+0x80>)
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	82bb      	strh	r3, [r7, #20]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);	
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 f8bd 	bl	8007002 <osThreadCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <Wifi_Init+0x84>)
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001d0 	.word	0x200001d0
 8000e9c:	20000ef8 	.word	0x20000ef8
 8000ea0:	200001cc 	.word	0x200001cc
 8000ea4:	0800b614 	.word	0x0800b614
 8000ea8:	08000cb1 	.word	0x08000cb1
 8000eac:	200001c8 	.word	0x200001c8

08000eb0 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <Wifi_SetRfPower+0x88>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 f930 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000ecc:	f7ff fd88 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4919      	ldr	r1, [pc, #100]	; (8000f3c <Wifi_SetRfPower+0x8c>)
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <Wifi_SetRfPower+0x90>)
 8000ed8:	f008 fdba 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <Wifi_SetRfPower+0x90>)
 8000ede:	f7ff fbab 	bl	8000638 <Wifi_SendString>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d115      	bne.n	8000f1a <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000eee:	f107 010e 	add.w	r1, r7, #14
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <Wifi_SetRfPower+0x94>)
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <Wifi_SetRfPower+0x98>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f7ff fbcd 	bl	800069c <Wifi_WaitForString>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d006      	beq.n	8000f22 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e004      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;
 8000f1a:	bf00      	nop
 8000f1c:	e002      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;			
 8000f22:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <Wifi_SetRfPower+0x88>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 f94b 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001cc 	.word	0x200001cc
 8000f3c:	0800b66c 	.word	0x0800b66c
 8000f40:	200003d1 	.word	0x200003d1
 8000f44:	0800b634 	.word	0x0800b634
 8000f48:	0800b630 	.word	0x0800b630

08000f4c <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <Wifi_SetMode+0x90>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 f8e2 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000f68:	f7ff fd3a 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	491b      	ldr	r1, [pc, #108]	; (8000fe0 <Wifi_SetMode+0x94>)
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <Wifi_SetMode+0x98>)
 8000f74:	f008 fd6c 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000f78:	481a      	ldr	r0, [pc, #104]	; (8000fe4 <Wifi_SetMode+0x98>)
 8000f7a:	f7ff fb5d 	bl	8000638 <Wifi_SendString>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d119      	bne.n	8000fbe <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000f8a:	f107 010e 	add.w	r1, r7, #14
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <Wifi_SetMode+0x9c>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <Wifi_SetMode+0xa0>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f7ff fb7f 	bl	800069c <Wifi_WaitForString>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10b      	bne.n	8000fc2 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d00a      	beq.n	8000fc6 <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <Wifi_SetMode+0xa4>)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;
 8000fbe:	bf00      	nop
 8000fc0:	e002      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;			
 8000fc6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <Wifi_SetMode+0x90>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f8f9 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001cc 	.word	0x200001cc
 8000fe0:	0800b67c 	.word	0x0800b67c
 8000fe4:	200003d1 	.word	0x200003d1
 8000fe8:	0800b634 	.word	0x0800b634
 8000fec:	0800b630 	.word	0x0800b630
 8000ff0:	200001d0 	.word	0x200001d0

08000ff4 <Wifi_GetMode>:
//#########################################################################################################
bool	Wifi_GetMode(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <Wifi_GetMode+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8001002:	4618      	mov	r0, r3
 8001004:	f006 f890 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001008:	2300      	movs	r3, #0
 800100a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800100c:	f7ff fce8 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8001010:	4922      	ldr	r1, [pc, #136]	; (800109c <Wifi_GetMode+0xa8>)
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <Wifi_GetMode+0xac>)
 8001014:	f008 fd1c 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001018:	4821      	ldr	r0, [pc, #132]	; (80010a0 <Wifi_GetMode+0xac>)
 800101a:	f7ff fb0d 	bl	8000638 <Wifi_SendString>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d126      	bne.n	8001078 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800102a:	1db9      	adds	r1, r7, #6
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <Wifi_GetMode+0xb0>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <Wifi_GetMode+0xb4>)
 8001032:	2202      	movs	r2, #2
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f7ff fb30 	bl	800069c <Wifi_WaitForString>
 800103c:	4603      	mov	r3, r0
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d119      	bne.n	800107c <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d018      	beq.n	8001080 <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 800104e:	1dbb      	adds	r3, r7, #6
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <Wifi_GetMode+0xb8>)
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc79 	bl	800094c <Wifi_ReturnInteger>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <Wifi_GetMode+0xbc>)
 8001064:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8001068:	e003      	b.n	8001072 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <Wifi_GetMode+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8001072:	2301      	movs	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e004      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;			
 8001080:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Wifi_GetMode+0xa4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f006 f89c 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001cc 	.word	0x200001cc
 800109c:	0800b690 	.word	0x0800b690
 80010a0:	200003d1 	.word	0x200003d1
 80010a4:	0800b634 	.word	0x0800b634
 80010a8:	0800b630 	.word	0x0800b630
 80010ac:	0800b6a4 	.word	0x0800b6a4
 80010b0:	200001d0 	.word	0x200001d0

080010b4 <Wifi_GetMyIp>:
//#########################################################################################################
bool	Wifi_GetMyIp(void)
{	
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <Wifi_GetMyIp+0x110>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f04f 31ff 	mov.w	r1, #4294967295
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 f830 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80010cc:	f7ff fc88 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIFSR\r\n");
 80010d0:	493d      	ldr	r1, [pc, #244]	; (80011c8 <Wifi_GetMyIp+0x114>)
 80010d2:	483e      	ldr	r0, [pc, #248]	; (80011cc <Wifi_GetMyIp+0x118>)
 80010d4:	f008 fcbc 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80010d8:	483c      	ldr	r0, [pc, #240]	; (80011cc <Wifi_GetMyIp+0x118>)
 80010da:	f7ff faad 	bl	8000638 <Wifi_SendString>
 80010de:	4603      	mov	r3, r0
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d153      	bne.n	8001192 <Wifi_GetMyIp+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <Wifi_GetMyIp+0x11c>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <Wifi_GetMyIp+0x120>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f7ff fad0 	bl	800069c <Wifi_WaitForString>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d146      	bne.n	8001196 <Wifi_GetMyIp+0xe2>
			break;
		if(result == 2)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d045      	beq.n	800119a <Wifi_GetMyIp+0xe6>
			break;		
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <Wifi_GetMyIp+0x124>)
 8001110:	4932      	ldr	r1, [pc, #200]	; (80011dc <Wifi_GetMyIp+0x128>)
 8001112:	4833      	ldr	r0, [pc, #204]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 8001114:	f008 fcbc 	bl	8009a90 <siscanf>
    sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);			
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <Wifi_GetMyIp+0x124>)
 800111a:	4932      	ldr	r1, [pc, #200]	; (80011e4 <Wifi_GetMyIp+0x130>)
 800111c:	4830      	ldr	r0, [pc, #192]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 800111e:	f008 fcb7 	bl	8009a90 <siscanf>
    
    
    Wifi_RxClear();
 8001122:	f7ff fc5d 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTA?\r\n");
 8001126:	4930      	ldr	r1, [pc, #192]	; (80011e8 <Wifi_GetMyIp+0x134>)
 8001128:	4828      	ldr	r0, [pc, #160]	; (80011cc <Wifi_GetMyIp+0x118>)
 800112a:	f008 fc91 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800112e:	4827      	ldr	r0, [pc, #156]	; (80011cc <Wifi_GetMyIp+0x118>)
 8001130:	f7ff fa82 	bl	8000638 <Wifi_SendString>
 8001134:	4603      	mov	r3, r0
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d12e      	bne.n	800119e <Wifi_GetMyIp+0xea>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001140:	1df9      	adds	r1, r7, #7
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <Wifi_GetMyIp+0x11c>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Wifi_GetMyIp+0x120>)
 8001148:	2202      	movs	r2, #2
 800114a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114e:	f7ff faa5 	bl	800069c <Wifi_WaitForString>
 8001152:	4603      	mov	r3, r0
 8001154:	f083 0301 	eor.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d121      	bne.n	80011a2 <Wifi_GetMyIp+0xee>
			break;
		if(result == 2)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d020      	beq.n	80011a6 <Wifi_GetMyIp+0xf2>
			break;	
    
    char *str=strstr((char*)Wifi.RxBuffer,"gateway:");
 8001164:	4921      	ldr	r1, [pc, #132]	; (80011ec <Wifi_GetMyIp+0x138>)
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 8001168:	f008 fd74 	bl	8009c54 <strstr>
 800116c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01a      	beq.n	80011aa <Wifi_GetMyIp+0xf6>
      break;
    if(Wifi_ReturnStrings(str,"\"",1,Wifi.MyGateWay)==false)
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <Wifi_GetMyIp+0x13c>)
 8001176:	2201      	movs	r2, #1
 8001178:	491e      	ldr	r1, [pc, #120]	; (80011f4 <Wifi_GetMyIp+0x140>)
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff fb5e 	bl	800083c <Wifi_ReturnStrings>
 8001180:	4603      	mov	r3, r0
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d110      	bne.n	80011ae <Wifi_GetMyIp+0xfa>
      break;    
    
		returnVal=true;	
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e00e      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 8001192:	bf00      	nop
 8001194:	e00c      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 8001196:	bf00      	nop
 8001198:	e00a      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;		
 800119a:	bf00      	nop
 800119c:	e008      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 800119e:	bf00      	nop
 80011a0:	e006      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 80011a2:	bf00      	nop
 80011a4:	e004      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;	
 80011a6:	bf00      	nop
 80011a8:	e002      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
      break;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
      break;    
 80011ae:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <Wifi_GetMyIp+0x110>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 f805 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001cc 	.word	0x200001cc
 80011c8:	0800b6a8 	.word	0x0800b6a8
 80011cc:	200003d1 	.word	0x200003d1
 80011d0:	0800b634 	.word	0x0800b634
 80011d4:	0800b630 	.word	0x0800b630
 80011d8:	200008eb 	.word	0x200008eb
 80011dc:	0800b6b4 	.word	0x0800b6b4
 80011e0:	200001d1 	.word	0x200001d1
 80011e4:	0800b6d4 	.word	0x0800b6d4
 80011e8:	0800b6f4 	.word	0x0800b6f4
 80011ec:	0800b704 	.word	0x0800b704
 80011f0:	200008fb 	.word	0x200008fb
 80011f4:	0800b710 	.word	0x0800b710

080011f8 <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <Wifi_Station_DhcpIsEnable+0x100>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 31ff 	mov.w	r1, #4294967295
 8001206:	4618      	mov	r0, r3
 8001208:	f005 ff8e 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8001210:	f7ff fbe6 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 8001214:	4939      	ldr	r1, [pc, #228]	; (80012fc <Wifi_Station_DhcpIsEnable+0x104>)
 8001216:	483a      	ldr	r0, [pc, #232]	; (8001300 <Wifi_Station_DhcpIsEnable+0x108>)
 8001218:	f008 fc1a 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800121c:	4838      	ldr	r0, [pc, #224]	; (8001300 <Wifi_Station_DhcpIsEnable+0x108>)
 800121e:	f7ff fa0b 	bl	8000638 <Wifi_SendString>
 8001222:	4603      	mov	r3, r0
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d153      	bne.n	80012d6 <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800122e:	1db9      	adds	r1, r7, #6
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <Wifi_Station_DhcpIsEnable+0x10c>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <Wifi_Station_DhcpIsEnable+0x110>)
 8001236:	2202      	movs	r2, #2
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f7ff fa2e 	bl	800069c <Wifi_WaitForString>
 8001240:	4603      	mov	r3, r0
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d146      	bne.n	80012da <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d045      	beq.n	80012de <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <Wifi_Station_DhcpIsEnable+0x114>)
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb77 	bl	800094c <Wifi_ReturnInteger>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13b      	bne.n	80012e2 <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d82f      	bhi.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <Wifi_Station_DhcpIsEnable+0x80>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	0800129b 	.word	0x0800129b
 8001280:	080012ad 	.word	0x080012ad
 8001284:	080012bf 	.word	0x080012bf
		{
			case 0:
				Wifi.StationDhcp=false;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 800128a:	2200      	movs	r2, #0
 800128c:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001298:	e01a      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 80012aa:	e011      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 80012bc:	e008      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 80012ce:	bf00      	nop
		}
		returnVal=true;	
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	e006      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012d6:	bf00      	nop
 80012d8:	e004      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012da:	bf00      	nop
 80012dc:	e002      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012e2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <Wifi_Station_DhcpIsEnable+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 ff6b 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 80012ee:	79fb      	ldrb	r3, [r7, #7]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001cc 	.word	0x200001cc
 80012fc:	0800b794 	.word	0x0800b794
 8001300:	200003d1 	.word	0x200003d1
 8001304:	0800b634 	.word	0x0800b634
 8001308:	0800b630 	.word	0x0800b630
 800130c:	0800b6a4 	.word	0x0800b6a4
 8001310:	200001d0 	.word	0x200001d0

08001314 <Wifi_SoftAp_GetConnectedDevices>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_SoftAp_GetConnectedDevices(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af0a      	add	r7, sp, #40	; 0x28
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <Wifi_SoftAp_GetConnectedDevices+0x144>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f04f 31ff 	mov.w	r1, #4294967295
 8001322:	4618      	mov	r0, r3
 8001324:	f005 ff00 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800132c:	f7ff fb58 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWLIF\r\n");
 8001330:	494a      	ldr	r1, [pc, #296]	; (800145c <Wifi_SoftAp_GetConnectedDevices+0x148>)
 8001332:	484b      	ldr	r0, [pc, #300]	; (8001460 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 8001334:	f008 fb8c 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001338:	4849      	ldr	r0, [pc, #292]	; (8001460 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 800133a:	f7ff f97d 	bl	8000638 <Wifi_SendString>
 800133e:	4603      	mov	r3, r0
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d176      	bne.n	8001438 <Wifi_SoftAp_GetConnectedDevices+0x124>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800134a:	1d79      	adds	r1, r7, #5
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <Wifi_SoftAp_GetConnectedDevices+0x150>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4b45      	ldr	r3, [pc, #276]	; (8001468 <Wifi_SoftAp_GetConnectedDevices+0x154>)
 8001352:	2202      	movs	r2, #2
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f7ff f9a0 	bl	800069c <Wifi_WaitForString>
 800135c:	4603      	mov	r3, r0
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d169      	bne.n	800143c <Wifi_SoftAp_GetConnectedDevices+0x128>
			break;
		if(result == 2)
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d068      	beq.n	8001440 <Wifi_SoftAp_GetConnectedDevices+0x12c>
			break;		
		Wifi_RemoveChar((char*)Wifi.RxBuffer,'\r');
 800136e:	210d      	movs	r1, #13
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <Wifi_SoftAp_GetConnectedDevices+0x158>)
 8001372:	f7ff fb0d 	bl	8000990 <Wifi_RemoveChar>
    Wifi_ReturnStrings((char*)Wifi.RxBuffer,"\n,",10,Wifi.SoftApConnectedDevicesIp[0],Wifi.SoftApConnectedDevicesMac[0],Wifi.SoftApConnectedDevicesIp[1],Wifi.SoftApConnectedDevicesMac[1],Wifi.SoftApConnectedDevicesIp[2],Wifi.SoftApConnectedDevicesMac[2],Wifi.SoftApConnectedDevicesIp[3],Wifi.SoftApConnectedDevicesMac[3],Wifi.SoftApConnectedDevicesIp[4],Wifi.SoftApConnectedDevicesMac[4]);
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <Wifi_SoftAp_GetConnectedDevices+0x15c>)
 8001378:	9308      	str	r3, [sp, #32]
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <Wifi_SoftAp_GetConnectedDevices+0x160>)
 800137c:	9307      	str	r3, [sp, #28]
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <Wifi_SoftAp_GetConnectedDevices+0x164>)
 8001380:	9306      	str	r3, [sp, #24]
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <Wifi_SoftAp_GetConnectedDevices+0x168>)
 8001384:	9305      	str	r3, [sp, #20]
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <Wifi_SoftAp_GetConnectedDevices+0x16c>)
 8001388:	9304      	str	r3, [sp, #16]
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <Wifi_SoftAp_GetConnectedDevices+0x170>)
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <Wifi_SoftAp_GetConnectedDevices+0x174>)
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <Wifi_SoftAp_GetConnectedDevices+0x178>)
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <Wifi_SoftAp_GetConnectedDevices+0x17c>)
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <Wifi_SoftAp_GetConnectedDevices+0x180>)
 800139c:	220a      	movs	r2, #10
 800139e:	493e      	ldr	r1, [pc, #248]	; (8001498 <Wifi_SoftAp_GetConnectedDevices+0x184>)
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <Wifi_SoftAp_GetConnectedDevices+0x158>)
 80013a2:	f7ff fa4b 	bl	800083c <Wifi_ReturnStrings>
		for(uint8_t i=0 ; i<6 ; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	e03f      	b.n	800142c <Wifi_SoftAp_GetConnectedDevices+0x118>
    {
      if( (Wifi.SoftApConnectedDevicesIp[i][0]<'0') || (Wifi.SoftApConnectedDevicesIp[i][0]>'9'))
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b2f      	cmp	r3, #47	; 0x2f
 80013bc:	d908      	bls.n	80013d0 <Wifi_SoftAp_GetConnectedDevices+0xbc>
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	4a36      	ldr	r2, [pc, #216]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b39      	cmp	r3, #57	; 0x39
 80013ce:	d907      	bls.n	80013e0 <Wifi_SoftAp_GetConnectedDevices+0xcc>
        Wifi.SoftApConnectedDevicesIp[i][0]=0;      
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	4a32      	ldr	r2, [pc, #200]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
      if( (Wifi.SoftApConnectedDevicesMac[i][0]<'0') || (Wifi.SoftApConnectedDevicesMac[i][0]>'9'))
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	492e      	ldr	r1, [pc, #184]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b2f      	cmp	r3, #47	; 0x2f
 80013f6:	d90b      	bls.n	8001410 <Wifi_SoftAp_GetConnectedDevices+0xfc>
 80013f8:	79ba      	ldrb	r2, [r7, #6]
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b39      	cmp	r3, #57	; 0x39
 800140e:	d90a      	bls.n	8001426 <Wifi_SoftAp_GetConnectedDevices+0x112>
        Wifi.SoftApConnectedDevicesMac[i][0]=0;      
 8001410:	79ba      	ldrb	r2, [r7, #6]
 8001412:	4922      	ldr	r1, [pc, #136]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0 ; i<6 ; i++)
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	3301      	adds	r3, #1
 800142a:	71bb      	strb	r3, [r7, #6]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d9bc      	bls.n	80013ac <Wifi_SoftAp_GetConnectedDevices+0x98>
    }
    
		returnVal=true;	
 8001432:	2301      	movs	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	e004      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;		
 8001440:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <Wifi_SoftAp_GetConnectedDevices+0x144>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f005 febc 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;			
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200001cc 	.word	0x200001cc
 800145c:	0800b7c8 	.word	0x0800b7c8
 8001460:	200003d1 	.word	0x200003d1
 8001464:	0800b634 	.word	0x0800b634
 8001468:	0800b630 	.word	0x0800b630
 800146c:	200001d1 	.word	0x200001d1
 8001470:	200009c5 	.word	0x200009c5
 8001474:	2000095d 	.word	0x2000095d
 8001478:	200009b3 	.word	0x200009b3
 800147c:	2000094d 	.word	0x2000094d
 8001480:	200009a1 	.word	0x200009a1
 8001484:	2000093d 	.word	0x2000093d
 8001488:	2000098f 	.word	0x2000098f
 800148c:	2000092d 	.word	0x2000092d
 8001490:	2000097d 	.word	0x2000097d
 8001494:	2000091d 	.word	0x2000091d
 8001498:	0800b7d4 	.word	0x0800b7d4
 800149c:	200001d0 	.word	0x200001d0

080014a0 <Wifi_SoftAp_Create>:
//#########################################################################################################
bool  Wifi_SoftAp_Create(char *SSID,char *password,uint8_t channel,WifiEncryptionType_t WifiEncryptionType,uint8_t MaxConnections_1_to_4,bool HiddenSSID)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	4613      	mov	r3, r2
 80014b4:	71bb      	strb	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <Wifi_SoftAp_Create+0xa8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f04f 31ff 	mov.w	r1, #4294967295
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fe32 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 80014c8:	f7ff fa8a 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWSAP=\"%s\",\"%s\",%d,%d,%d,%d\r\n",SSID,password,channel,WifiEncryptionType,MaxConnections_1_to_4,HiddenSSID);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80014d4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80014d8:	9003      	str	r0, [sp, #12]
 80014da:	9102      	str	r1, [sp, #8]
 80014dc:	9201      	str	r2, [sp, #4]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4919      	ldr	r1, [pc, #100]	; (800154c <Wifi_SoftAp_Create+0xac>)
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <Wifi_SoftAp_Create+0xb0>)
 80014e8:	f008 fab2 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <Wifi_SoftAp_Create+0xb0>)
 80014ee:	f7ff f8a3 	bl	8000638 <Wifi_SendString>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <Wifi_SoftAp_Create+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80014fe:	f107 0116 	add.w	r1, r7, #22
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <Wifi_SoftAp_Create+0xb4>)
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Wifi_SoftAp_Create+0xb8>)
 8001508:	2202      	movs	r2, #2
 800150a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150e:	f7ff f8c5 	bl	800069c <Wifi_WaitForString>
 8001512:	4603      	mov	r3, r0
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <Wifi_SoftAp_Create+0x8e>
			break;
		if(result == 2)
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d006      	beq.n	8001532 <Wifi_SoftAp_Create+0x92>
			break;		  
		returnVal=true;	
 8001524:	2301      	movs	r3, #1
 8001526:	75fb      	strb	r3, [r7, #23]
 8001528:	e004      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;
 800152a:	bf00      	nop
 800152c:	e002      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;		  
 8001532:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <Wifi_SoftAp_Create+0xa8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fe43 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		  
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001cc 	.word	0x200001cc
 800154c:	0800b7d8 	.word	0x0800b7d8
 8001550:	200003d1 	.word	0x200003d1
 8001554:	0800b634 	.word	0x0800b634
 8001558:	0800b630 	.word	0x0800b630

0800155c <Wifi_TcpIp_GetConnectionStatus>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_TcpIp_GetConnectionStatus(void)
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af04      	add	r7, sp, #16
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001562:	4b66      	ldr	r3, [pc, #408]	; (80016fc <Wifi_TcpIp_GetConnectionStatus+0x1a0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 31ff 	mov.w	r1, #4294967295
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fddc 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001574:	f7ff fa34 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTATUS\r\n");
 8001578:	4961      	ldr	r1, [pc, #388]	; (8001700 <Wifi_TcpIp_GetConnectionStatus+0x1a4>)
 800157a:	4862      	ldr	r0, [pc, #392]	; (8001704 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 800157c:	f008 fa68 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001580:	4860      	ldr	r0, [pc, #384]	; (8001704 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 8001582:	f7ff f859 	bl	8000638 <Wifi_SendString>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80a3 	bne.w	80016da <Wifi_TcpIp_GetConnectionStatus+0x17e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001594:	1d79      	adds	r1, r7, #5
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <Wifi_TcpIp_GetConnectionStatus+0x1ac>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 800159c:	2202      	movs	r2, #2
 800159e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a2:	f7ff f87b 	bl	800069c <Wifi_WaitForString>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8095 	bne.w	80016de <Wifi_TcpIp_GetConnectionStatus+0x182>
			break;
		if(result == 2)
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	f000 8093 	beq.w	80016e2 <Wifi_TcpIp_GetConnectionStatus+0x186>
			break;		
		
    
		char *str = strstr((char*)Wifi.RxBuffer,"\nSTATUS:");
 80015bc:	4954      	ldr	r1, [pc, #336]	; (8001710 <Wifi_TcpIp_GetConnectionStatus+0x1b4>)
 80015be:	4855      	ldr	r0, [pc, #340]	; (8001714 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 80015c0:	f008 fb48 	bl	8009c54 <strstr>
 80015c4:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808c 	beq.w	80016e6 <Wifi_TcpIp_GetConnectionStatus+0x18a>
      break;
    str = strchr(str,':');
 80015ce:	213a      	movs	r1, #58	; 0x3a
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f008 fad6 	bl	8009b82 <strchr>
 80015d6:	60b8      	str	r0, [r7, #8]
    str++;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e012      	b.n	800160a <Wifi_TcpIp_GetConnectionStatus+0xae>
      Wifi.TcpIpConnections[i].status=(WifiConnectionStatus_t)atoi(str);
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	f008 f8f1 	bl	80097cc <atoi>
 80015ea:	4603      	mov	r3, r0
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	b2d8      	uxtb	r0, r3
 80015f0:	4949      	ldr	r1, [pc, #292]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0 ; i<5 ;i++)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3301      	adds	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d9e9      	bls.n	80015e4 <Wifi_TcpIp_GetConnectionStatus+0x88>
    str = strstr((char*)Wifi.RxBuffer,"+CIPSTATUS:");
 8001610:	4942      	ldr	r1, [pc, #264]	; (800171c <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 8001614:	f008 fb1e 	bl	8009c54 <strstr>
 8001618:	60b8      	str	r0, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e054      	b.n	80016ca <Wifi_TcpIp_GetConnectionStatus+0x16e>
    {
      sscanf(str,"+CIPSTATUS:%d,\"%3s\",\"%[^\"]\",%d,%d,%d",(int*)&Wifi.TcpIpConnections[i].LinkId,Wifi.TcpIpConnections[i].Type,Wifi.TcpIpConnections[i].RemoteIp,(int*)&Wifi.TcpIpConnections[i].RemotePort,(int*)&Wifi.TcpIpConnections[i].LocalPort,(int*)&Wifi.TcpIpConnections[i].RunAsServer);
 8001620:	79ba      	ldrb	r2, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800162e:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001630:	4413      	add	r3, r2
 8001632:	1d5d      	adds	r5, r3, #5
 8001634:	79ba      	ldrb	r2, [r7, #6]
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001642:	4a35      	ldr	r2, [pc, #212]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001644:	4413      	add	r3, r2
 8001646:	1d9e      	adds	r6, r3, #6
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	4613      	mov	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001658:	4413      	add	r3, r2
 800165a:	f103 010a 	add.w	r1, r3, #10
 800165e:	79ba      	ldrb	r2, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800166c:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 800166e:	4413      	add	r3, r2
 8001670:	1d18      	adds	r0, r3, #4
 8001672:	79ba      	ldrb	r2, [r7, #6]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001680:	4a25      	ldr	r2, [pc, #148]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001682:	4413      	add	r3, r2
 8001684:	1d9c      	adds	r4, r3, #6
 8001686:	79ba      	ldrb	r2, [r7, #6]
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001696:	4413      	add	r3, r2
 8001698:	3308      	adds	r3, #8
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9402      	str	r4, [sp, #8]
 800169e:	9001      	str	r0, [sp, #4]
 80016a0:	9100      	str	r1, [sp, #0]
 80016a2:	4633      	mov	r3, r6
 80016a4:	462a      	mov	r2, r5
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f008 f9f1 	bl	8009a90 <siscanf>
      str++;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      str = strstr(str,"+CIPSTATUS:");
 80016b4:	4919      	ldr	r1, [pc, #100]	; (800171c <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f008 facc 	bl	8009c54 <strstr>
 80016bc:	60b8      	str	r0, [r7, #8]
      if(str==NULL)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <Wifi_TcpIp_GetConnectionStatus+0x176>
    for(uint8_t i=0 ; i<5 ;i++)
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	3301      	adds	r3, #1
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d9a7      	bls.n	8001620 <Wifi_TcpIp_GetConnectionStatus+0xc4>
 80016d0:	e000      	b.n	80016d4 <Wifi_TcpIp_GetConnectionStatus+0x178>
        break;
 80016d2:	bf00      	nop
    }
		returnVal=true;	
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e006      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;
 80016da:	bf00      	nop
 80016dc:	e004      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;
 80016de:	bf00      	nop
 80016e0:	e002      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;		
 80016e2:	bf00      	nop
 80016e4:	e000      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
      break;
 80016e6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <Wifi_TcpIp_GetConnectionStatus+0x1a0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fd69 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;			
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	200001cc 	.word	0x200001cc
 8001700:	0800b7fc 	.word	0x0800b7fc
 8001704:	200003d1 	.word	0x200003d1
 8001708:	0800b634 	.word	0x0800b634
 800170c:	0800b630 	.word	0x0800b630
 8001710:	0800b80c 	.word	0x0800b80c
 8001714:	200001d1 	.word	0x200001d1
 8001718:	200001d0 	.word	0x200001d0
 800171c:	0800b818 	.word	0x0800b818
 8001720:	0800b824 	.word	0x0800b824

08001724 <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <Wifi_TcpIp_SetMultiConnection+0x90>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 31ff 	mov.w	r1, #4294967295
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fcf6 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001740:	f7ff f94e 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	461a      	mov	r2, r3
 8001748:	491b      	ldr	r1, [pc, #108]	; (80017b8 <Wifi_TcpIp_SetMultiConnection+0x94>)
 800174a:	481c      	ldr	r0, [pc, #112]	; (80017bc <Wifi_TcpIp_SetMultiConnection+0x98>)
 800174c:	f008 f980 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <Wifi_TcpIp_SetMultiConnection+0x98>)
 8001752:	f7fe ff71 	bl	8000638 <Wifi_SendString>
 8001756:	4603      	mov	r3, r0
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001762:	f107 010e 	add.w	r1, r7, #14
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 800176c:	2202      	movs	r2, #2
 800176e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001772:	f7fe ff93 	bl	800069c <Wifi_WaitForString>
 8001776:	4603      	mov	r3, r0
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d00a      	beq.n	800179e <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 800179e:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <Wifi_TcpIp_SetMultiConnection+0x90>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fd0d 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;			
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200001cc 	.word	0x200001cc
 80017b8:	0800b860 	.word	0x0800b860
 80017bc:	200003d1 	.word	0x200003d1
 80017c0:	0800b634 	.word	0x0800b634
 80017c4:	0800b630 	.word	0x0800b630
 80017c8:	200001d0 	.word	0x200001d0

080017cc <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80017d2:	4b29      	ldr	r3, [pc, #164]	; (8001878 <Wifi_TcpIp_GetMultiConnection+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fca4 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80017e4:	f7ff f8fc 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 80017e8:	4924      	ldr	r1, [pc, #144]	; (800187c <Wifi_TcpIp_GetMultiConnection+0xb0>)
 80017ea:	4825      	ldr	r0, [pc, #148]	; (8001880 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80017ec:	f008 f930 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80017f2:	f7fe ff21 	bl	8000638 <Wifi_SendString>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d129      	bne.n	8001856 <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001802:	1db9      	adds	r1, r7, #6
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 800180a:	2202      	movs	r2, #2
 800180c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001810:	f7fe ff44 	bl	800069c <Wifi_WaitForString>
 8001814:	4603      	mov	r3, r0
 8001816:	f083 0301 	eor.w	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11c      	bne.n	800185a <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d01b      	beq.n	800185e <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <Wifi_TcpIp_GetMultiConnection+0xc0>)
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f88d 	bl	800094c <Wifi_ReturnInteger>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d111      	bne.n	8001862 <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 800184c:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 8001850:	2301      	movs	r3, #1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	e006      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001856:	bf00      	nop
 8001858:	e004      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 8001862:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <Wifi_TcpIp_GetMultiConnection+0xac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fcab 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;			
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200001cc 	.word	0x200001cc
 800187c:	0800b870 	.word	0x0800b870
 8001880:	200003d1 	.word	0x200003d1
 8001884:	0800b634 	.word	0x0800b634
 8001888:	0800b630 	.word	0x0800b630
 800188c:	0800b6a4 	.word	0x0800b6a4
 8001890:	200001d0 	.word	0x200001d0

08001894 <Wifi_TcpIp_StartTcpConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	4611      	mov	r1, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	460b      	mov	r3, r1
 80018a6:	81bb      	strh	r3, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80018ac:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	4618      	mov	r0, r3
 80018b6:	f005 fc37 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
	do
	{
    Wifi_RxClear();
 80018be:	f7ff f88f 	bl	80009e0 <Wifi_RxClear>
    sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 80018c2:	89bb      	ldrh	r3, [r7, #12]
 80018c4:	461a      	mov	r2, r3
 80018c6:	493b      	ldr	r1, [pc, #236]	; (80019b4 <Wifi_TcpIp_StartTcpConnection+0x120>)
 80018c8:	483b      	ldr	r0, [pc, #236]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 80018ca:	f008 f8c1 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80018ce:	483a      	ldr	r0, [pc, #232]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 80018d0:	f7fe feb2 	bl	8000638 <Wifi_SendString>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d152      	bne.n	8001986 <Wifi_TcpIp_StartTcpConnection+0xf2>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80018e0:	f107 0116 	add.w	r1, r7, #22
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <Wifi_TcpIp_StartTcpConnection+0x128>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f0:	f7fe fed4 	bl	800069c <Wifi_WaitForString>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d144      	bne.n	800198a <Wifi_TcpIp_StartTcpConnection+0xf6>
			break;
		if(result == 2)
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d043      	beq.n	800198e <Wifi_TcpIp_StartTcpConnection+0xfa>
			break;		
		Wifi_RxClear();
 8001906:	f7ff f86b 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <Wifi_TcpIp_StartTcpConnection+0x130>)
 800190c:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <Wifi_TcpIp_StartTcpConnection+0x9a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800191a:	89ba      	ldrh	r2, [r7, #12]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4928      	ldr	r1, [pc, #160]	; (80019c8 <Wifi_TcpIp_StartTcpConnection+0x134>)
 8001926:	4824      	ldr	r0, [pc, #144]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001928:	f008 f892 	bl	8009a50 <siprintf>
 800192c:	e00a      	b.n	8001944 <Wifi_TcpIp_StartTcpConnection+0xb0>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 800192e:	7bf9      	ldrb	r1, [r7, #15]
 8001930:	89bb      	ldrh	r3, [r7, #12]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	460a      	mov	r2, r1
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <Wifi_TcpIp_StartTcpConnection+0x138>)
 800193e:	481e      	ldr	r0, [pc, #120]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001940:	f008 f886 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001944:	481c      	ldr	r0, [pc, #112]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001946:	f7fe fe77 	bl	8000638 <Wifi_SendString>
 800194a:	4603      	mov	r3, r0
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11d      	bne.n	8001992 <Wifi_TcpIp_StartTcpConnection+0xfe>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8001956:	f107 0116 	add.w	r1, r7, #22
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <Wifi_TcpIp_StartTcpConnection+0x128>)
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 8001964:	2203      	movs	r2, #3
 8001966:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800196a:	f7fe fe97 	bl	800069c <Wifi_WaitForString>
 800196e:	4603      	mov	r3, r0
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <Wifi_TcpIp_StartTcpConnection+0x102>
			break;
		if(result == 3)
 800197a:	7dbb      	ldrb	r3, [r7, #22]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d00c      	beq.n	800199a <Wifi_TcpIp_StartTcpConnection+0x106>
			break;		
		returnVal=true;	
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e00a      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001986:	bf00      	nop
 8001988:	e008      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 800198a:	bf00      	nop
 800198c:	e006      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;		
 800198e:	bf00      	nop
 8001990:	e004      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001992:	bf00      	nop
 8001994:	e002      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001996:	bf00      	nop
 8001998:	e000      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;		
 800199a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fc0f 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001cc 	.word	0x200001cc
 80019b4:	0800b880 	.word	0x0800b880
 80019b8:	200003d1 	.word	0x200003d1
 80019bc:	0800b634 	.word	0x0800b634
 80019c0:	0800b630 	.word	0x0800b630
 80019c4:	200001d0 	.word	0x200001d0
 80019c8:	0800b894 	.word	0x0800b894
 80019cc:	0800b8b4 	.word	0x0800b8b4
 80019d0:	0800b8d8 	.word	0x0800b8d8

080019d4 <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <Wifi_TcpIp_Close+0xa4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 fb9e 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80019f0:	f7fe fff6 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <Wifi_TcpIp_Close+0xa8>)
 80019f6:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8001a04:	491e      	ldr	r1, [pc, #120]	; (8001a80 <Wifi_TcpIp_Close+0xac>)
 8001a06:	481f      	ldr	r0, [pc, #124]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a08:	f008 f822 	bl	8009a50 <siprintf>
 8001a0c:	e005      	b.n	8001a1a <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	461a      	mov	r2, r3
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <Wifi_TcpIp_Close+0xb4>)
 8001a14:	481b      	ldr	r0, [pc, #108]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a16:	f008 f81b 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001a1a:	481a      	ldr	r0, [pc, #104]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a1c:	f7fe fe0c 	bl	8000638 <Wifi_SendString>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d115      	bne.n	8001a58 <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001a2c:	f107 010e 	add.w	r1, r7, #14
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <Wifi_TcpIp_Close+0xb8>)
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <Wifi_TcpIp_Close+0xbc>)
 8001a36:	2202      	movs	r2, #2
 8001a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3c:	f7fe fe2e 	bl	800069c <Wifi_WaitForString>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f083 0301 	eor.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d006      	beq.n	8001a60 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e004      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;
 8001a58:	bf00      	nop
 8001a5a:	e002      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;
 8001a5c:	bf00      	nop
 8001a5e:	e000      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;		
 8001a60:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <Wifi_TcpIp_Close+0xa4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fbac 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;		
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200001cc 	.word	0x200001cc
 8001a7c:	200001d0 	.word	0x200001d0
 8001a80:	0800b92c 	.word	0x0800b92c
 8001a84:	200003d1 	.word	0x200003d1
 8001a88:	0800b93c 	.word	0x0800b93c
 8001a8c:	0800b634 	.word	0x0800b634
 8001a90:	0800b630 	.word	0x0800b630

08001a94 <Wifi_TcpIp_SendDataUdp>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;	
}
//#########################################################################################################
bool  Wifi_TcpIp_SendDataUdp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	603a      	str	r2, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <Wifi_TcpIp_SendDataUdp+0xdc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 fb3b 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001ab6:	f7fe ff93 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <Wifi_TcpIp_SendDataUdp+0xe0>)
 8001abc:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <Wifi_TcpIp_SendDataUdp+0x40>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=0\r\n");
 8001aca:	492b      	ldr	r1, [pc, #172]	; (8001b78 <Wifi_TcpIp_SendDataUdp+0xe4>)
 8001acc:	482b      	ldr	r0, [pc, #172]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001ace:	f007 ffbf 	bl	8009a50 <siprintf>
 8001ad2:	e005      	b.n	8001ae0 <Wifi_TcpIp_SendDataUdp+0x4c>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d,%d\r\n",LinkId,dataLen);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	4929      	ldr	r1, [pc, #164]	; (8001b80 <Wifi_TcpIp_SendDataUdp+0xec>)
 8001ada:	4828      	ldr	r0, [pc, #160]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001adc:	f007 ffb8 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001ae0:	4826      	ldr	r0, [pc, #152]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001ae2:	f7fe fda9 	bl	8000638 <Wifi_SendString>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d12c      	bne.n	8001b4c <Wifi_TcpIp_SendDataUdp+0xb8>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,">","ERROR")==false)
 8001af2:	f107 010e 	add.w	r1, r7, #14
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <Wifi_TcpIp_SendDataUdp+0xf0>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <Wifi_TcpIp_SendDataUdp+0xf4>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b02:	f7fe fdcb 	bl	800069c <Wifi_WaitForString>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11e      	bne.n	8001b50 <Wifi_TcpIp_SendDataUdp+0xbc>
			break;
		if(result == 2)
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d01d      	beq.n	8001b54 <Wifi_TcpIp_SendDataUdp+0xc0>
			break;		
    Wifi_RxClear();
 8001b18:	f7fe ff62 	bl	80009e0 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8001b1c:	88bb      	ldrh	r3, [r7, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f7fe fd63 	bl	80005ec <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001b26:	f107 010e 	add.w	r1, r7, #14
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <Wifi_TcpIp_SendDataUdp+0xf0>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <Wifi_TcpIp_SendDataUdp+0xf8>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b36:	f7fe fdb1 	bl	800069c <Wifi_WaitForString>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <Wifi_TcpIp_SendDataUdp+0xc4>
			break;
		returnVal=true;	
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e006      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b4c:	bf00      	nop
 8001b4e:	e004      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;		
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b58:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <Wifi_TcpIp_SendDataUdp+0xdc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fb30 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;	
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001cc 	.word	0x200001cc
 8001b74:	200001d0 	.word	0x200001d0
 8001b78:	0800b974 	.word	0x0800b974
 8001b7c:	200003d1 	.word	0x200003d1
 8001b80:	0800b988 	.word	0x0800b988
 8001b84:	0800b634 	.word	0x0800b634
 8001b88:	0800b99c 	.word	0x0800b99c
 8001b8c:	0800b630 	.word	0x0800b630

08001b90 <Wifi_TcpIp_SendDataTcp>:
//#########################################################################################################
bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <Wifi_TcpIp_SendDataTcp+0x108>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fabd 	bl	8007128 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001bb2:	f7fe ff15 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <Wifi_TcpIp_SendDataTcp+0x10c>)
 8001bb8:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <Wifi_TcpIp_SendDataTcp+0x44>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <Wifi_TcpIp_SendDataTcp+0x110>)
 8001bcc:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001bce:	f007 ff3f 	bl	8009a50 <siprintf>
 8001bd2:	e005      	b.n	8001be0 <Wifi_TcpIp_SendDataTcp+0x50>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <Wifi_TcpIp_SendDataTcp+0x118>)
 8001bda:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001bdc:	f007 ff38 	bl	8009a50 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001be0:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001be2:	f7fe fd29 	bl	8000638 <Wifi_SendString>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d13e      	bne.n	8001c70 <Wifi_TcpIp_SendDataTcp+0xe0>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001bf2:	f107 010e 	add.w	r1, r7, #14
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <Wifi_TcpIp_SendDataTcp+0x120>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f7fe fd4b 	bl	800069c <Wifi_WaitForString>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d130      	bne.n	8001c74 <Wifi_TcpIp_SendDataTcp+0xe4>
			break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 8001c12:	f107 010e 	add.w	r1, r7, #14
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <Wifi_TcpIp_SendDataTcp+0x124>)
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <Wifi_TcpIp_SendDataTcp+0x128>)
 8001c20:	2203      	movs	r2, #3
 8001c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c26:	f7fe fd39 	bl	800069c <Wifi_WaitForString>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d120      	bne.n	8001c78 <Wifi_TcpIp_SendDataTcp+0xe8>
			break;
		if(result > 1)
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d81f      	bhi.n	8001c7c <Wifi_TcpIp_SendDataTcp+0xec>
			break;		
    Wifi_RxClear();
 8001c3c:	f7fe fed0 	bl	80009e0 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f7fe fcd1 	bl	80005ec <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001c4a:	f107 010e 	add.w	r1, r7, #14
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <Wifi_TcpIp_SendDataTcp+0x120>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5a:	f7fe fd1f 	bl	800069c <Wifi_WaitForString>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <Wifi_TcpIp_SendDataTcp+0xf0>
			break;
		returnVal=true;	
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e008      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c70:	bf00      	nop
 8001c72:	e006      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c74:	bf00      	nop
 8001c76:	e004      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c78:	bf00      	nop
 8001c7a:	e002      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;		
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c80:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <Wifi_TcpIp_SendDataTcp+0x108>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fa9c 	bl	80071c4 <osSemaphoreRelease>
	return returnVal;	  
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200001cc 	.word	0x200001cc
 8001c9c:	200001d0 	.word	0x200001d0
 8001ca0:	0800b9a0 	.word	0x0800b9a0
 8001ca4:	200003d1 	.word	0x200003d1
 8001ca8:	0800b9b4 	.word	0x0800b9b4
 8001cac:	0800b634 	.word	0x0800b634
 8001cb0:	0800b630 	.word	0x0800b630
 8001cb4:	0800b9cc 	.word	0x0800b9cc
 8001cb8:	0800b99c 	.word	0x0800b99c

08001cbc <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void	Wifi_UserInit(void)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af02      	add	r7, sp, #8
//	Wifi_SetMode(WifiMode_Station);
  Wifi_SetMode(WifiMode_SoftAp);
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f7ff f942 	bl	8000f4c <Wifi_SetMode>

//  while (Wifi_Station_ConnectToAp("L70_9587","33559366",NULL) == false);
  char SSID[] = "TO_JA";
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <Wifi_UserInit+0x68>)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd2:	6018      	str	r0, [r3, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	8019      	strh	r1, [r3, #0]
  char password[] = "00000000";
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <Wifi_UserInit+0x6c>)
 8001cda:	463b      	mov	r3, r7
 8001cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cde:	c303      	stmia	r3!, {r0, r1}
 8001ce0:	701a      	strb	r2, [r3, #0]
  uint8_t channel = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
  WifiEncryptionType_t WifiEncryptionType = WifiEncryptionType_Open;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75bb      	strb	r3, [r7, #22]
  uint8_t MaxConnections_1_to_4 = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	757b      	strb	r3, [r7, #21]
  bool HiddenSSID = false;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	753b      	strb	r3, [r7, #20]


  while (Wifi_SoftAp_Create(SSID, password, channel, WifiEncryptionType, MaxConnections_1_to_4, HiddenSSID) == false);
 8001cf2:	bf00      	nop
 8001cf4:	7dbc      	ldrb	r4, [r7, #22]
 8001cf6:	7dfa      	ldrb	r2, [r7, #23]
 8001cf8:	4639      	mov	r1, r7
 8001cfa:	f107 000c 	add.w	r0, r7, #12
 8001cfe:	7d3b      	ldrb	r3, [r7, #20]
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	7d7b      	ldrb	r3, [r7, #21]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4623      	mov	r3, r4
 8001d08:	f7ff fbca 	bl	80014a0 <Wifi_SoftAp_Create>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ed      	bne.n	8001cf4 <Wifi_UserInit+0x38>
 
    
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	0800b9d4 	.word	0x0800b9d4
 8001d28:	0800b9dc 	.word	0x0800b9dc

08001d2c <Wifi_UserProcess>:
//#######################################################################################
void  Wifi_UserProcess(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  static uint8_t last=0;
  if(strstr(Wifi.MyIP,"0.0.0.0")!=NULL)
 8001d30:	490d      	ldr	r1, [pc, #52]	; (8001d68 <Wifi_UserProcess+0x3c>)
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <Wifi_UserProcess+0x40>)
 8001d34:	f007 ff8e 	bl	8009c54 <strstr>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <Wifi_UserProcess+0x1a>
  {    
    if(last!=1)
	{
		
	}
    last=1;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <Wifi_UserProcess+0x44>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
    {
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
    }
    last=2;
  }
}
 8001d44:	e00d      	b.n	8001d62 <Wifi_UserProcess+0x36>
    if(last!=2)
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <Wifi_UserProcess+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d006      	beq.n	8001d5c <Wifi_UserProcess+0x30>
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
 8001d4e:	230a      	movs	r3, #10
 8001d50:	f248 2235 	movw	r2, #33333	; 0x8235
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <Wifi_UserProcess+0x48>)
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fd9c 	bl	8001894 <Wifi_TcpIp_StartTcpConnection>
    last=2;
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <Wifi_UserProcess+0x44>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	0800b9e8 	.word	0x0800b9e8
 8001d6c:	200008eb 	.word	0x200008eb
 8001d70:	20000a84 	.word	0x20000a84
 8001d74:	200008fb 	.word	0x200008fb

08001d78 <Wifi_UserGetUdpData>:
//#######################################################################################
void  Wifi_UserGetUdpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	603a      	str	r2, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	460b      	mov	r3, r1
 8001d86:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataUdp(LinkId,2,(uint8_t*)"OK");
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <Wifi_UserGetUdpData+0x24>)
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe80 	bl	8001a94 <Wifi_TcpIp_SendDataUdp>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	0800b9f0 	.word	0x0800b9f0

08001da0 <Wifi_UserGetTcpData>:
//#######################################################################################
void  Wifi_UserGetTcpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	603a      	str	r2, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	460b      	mov	r3, r1
 8001dae:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataTcp(LinkId,2,(uint8_t*)"OK");
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <Wifi_UserGetTcpData+0x24>)
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff feea 	bl	8001b90 <Wifi_TcpIp_SendDataTcp>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800b9f0 	.word	0x0800b9f0

08001dc8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_ETH_Init+0x84>)
 8001dce:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <MX_ETH_Init+0x88>)
 8001dd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001de0:	22e1      	movs	r2, #225	; 0xe1
 8001de2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_ETH_Init+0x84>)
 8001df8:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <MX_ETH_Init+0x8c>)
 8001dfa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_ETH_Init+0x84>)
 8001dfe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e02:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_ETH_Init+0x84>)
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <MX_ETH_Init+0x90>)
 8001e08:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_ETH_Init+0x84>)
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <MX_ETH_Init+0x94>)
 8001e0e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_ETH_Init+0x84>)
 8001e12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e16:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <MX_ETH_Init+0x84>)
 8001e1a:	f000 fff5 	bl	8002e08 <HAL_ETH_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001e24:	f000 fa78 	bl	8002318 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e28:	2238      	movs	r2, #56	; 0x38
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <MX_ETH_Init+0x98>)
 8001e2e:	f007 fea0 	bl	8009b72 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_ETH_Init+0x98>)
 8001e34:	2221      	movs	r2, #33	; 0x21
 8001e36:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_ETH_Init+0x98>)
 8001e3a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001e3e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_ETH_Init+0x98>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000ac0 	.word	0x20000ac0
 8001e50:	40028000 	.word	0x40028000
 8001e54:	20000b70 	.word	0x20000b70
 8001e58:	2000010c 	.word	0x2000010c
 8001e5c:	2000006c 	.word	0x2000006c
 8001e60:	20000a88 	.word	0x20000a88

08001e64 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a4e      	ldr	r2, [pc, #312]	; (8001fbc <HAL_ETH_MspInit+0x158>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f040 8096 	bne.w	8001fb4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4a40      	ldr	r2, [pc, #256]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec4:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a2e      	ldr	r2, [pc, #184]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_ETH_MspInit+0x15c>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f40:	230b      	movs	r3, #11
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <HAL_ETH_MspInit+0x160>)
 8001f4c:	f001 fa82 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f50:	2386      	movs	r3, #134	; 0x86
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f60:	230b      	movs	r3, #11
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <HAL_ETH_MspInit+0x164>)
 8001f6c:	f001 fa72 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f82:	230b      	movs	r3, #11
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480f      	ldr	r0, [pc, #60]	; (8001fcc <HAL_ETH_MspInit+0x168>)
 8001f8e:	f001 fa61 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa4:	230b      	movs	r3, #11
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <HAL_ETH_MspInit+0x16c>)
 8001fb0:	f001 fa50 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	; 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40028000 	.word	0x40028000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40021800 	.word	0x40021800

08001fd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <vApplicationGetIdleTaskMemory+0x30>)
 8001fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000b80 	.word	0x20000b80
 8002004:	20000c20 	.word	0x20000c20

08002008 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_FREERTOS_Init+0x58>)
 8002010:	f107 041c 	add.w	r4, r7, #28
 8002014:	461d      	mov	r5, r3
 8002016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800201e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f004 ffea 	bl	8007002 <osThreadCreate>
 800202e:	4603      	mov	r3, r0
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <MX_FREERTOS_Init+0x5c>)
 8002032:	6013      	str	r3, [r2, #0]

  /* definition and creation of WiFiReceiveTask */
  osThreadDef(WiFiReceiveTask, StartWiFiReceiveTask, osPriorityNormal, 0, 128);
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_FREERTOS_Init+0x60>)
 8002036:	463c      	mov	r4, r7
 8002038:	461d      	mov	r5, r3
 800203a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WiFiReceiveTaskHandle = osThreadCreate(osThread(WiFiReceiveTask), NULL);
 8002046:	463b      	mov	r3, r7
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f004 ffd9 	bl	8007002 <osThreadCreate>
 8002050:	4603      	mov	r3, r0
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <MX_FREERTOS_Init+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002056:	bf00      	nop
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	0800ba00 	.word	0x0800ba00
 8002064:	20000b78 	.word	0x20000b78
 8002068:	0800ba2c 	.word	0x0800ba2c
 800206c:	20000b7c 	.word	0x20000b7c

08002070 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Wifi_Init(osPriorityNormal);
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fed5 	bl	8000e28 <Wifi_Init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <StartDefaultTask+0x20>)
 8002082:	f001 fbac 	bl	80037de <HAL_GPIO_TogglePin>
	  osDelay(500);
 8002086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800208a:	f005 f806 	bl	800709a <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800208e:	e7f6      	b.n	800207e <StartDefaultTask+0xe>
 8002090:	40020400 	.word	0x40020400

08002094 <StartWiFiReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWiFiReceiveTask */
void StartWiFiReceiveTask(void const * argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWiFiReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f004 fffc 	bl	800709a <osDelay>
 80020a2:	e7fb      	b.n	800209c <StartWiFiReceiveTask+0x8>

080020a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <MX_GPIO_Init+0x134>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <MX_GPIO_Init+0x134>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <MX_GPIO_Init+0x134>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002150:	4822      	ldr	r0, [pc, #136]	; (80021dc <MX_GPIO_Init+0x138>)
 8002152:	f001 fb2b 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2140      	movs	r1, #64	; 0x40
 800215a:	4821      	ldr	r0, [pc, #132]	; (80021e0 <MX_GPIO_Init+0x13c>)
 800215c:	f001 fb26 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800216a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	481b      	ldr	r0, [pc, #108]	; (80021e4 <MX_GPIO_Init+0x140>)
 8002178:	f001 f96c 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800217c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	4811      	ldr	r0, [pc, #68]	; (80021dc <MX_GPIO_Init+0x138>)
 8002196:	f001 f95d 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4619      	mov	r1, r3
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <MX_GPIO_Init+0x13c>)
 80021b2:	f001 f94f 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_GPIO_Init+0x13c>)
 80021ca:	f001 f943 	bl	8003454 <HAL_GPIO_Init>

}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40020800 	.word	0x40020800

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ec:	f000 fc47 	bl	8002a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f0:	f000 f810 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f4:	f7ff ff56 	bl	80020a4 <MX_GPIO_Init>
  MX_ETH_Init();
 80021f8:	f7ff fde6 	bl	8001dc8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80021fc:	f000 fa74 	bl	80026e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002200:	f000 fb6c 	bl	80028dc <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8002204:	f000 fa40 	bl	8002688 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002208:	f7ff fefe 	bl	8002008 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800220c:	f004 fef2 	bl	8006ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002210:	e7fe      	b.n	8002210 <main+0x28>
	...

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b094      	sub	sp, #80	; 0x50
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	2234      	movs	r2, #52	; 0x34
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f007 fca5 	bl	8009b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002238:	f001 fc34 	bl	8003aa4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <SystemClock_Config+0xd8>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <SystemClock_Config+0xd8>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <SystemClock_Config+0xd8>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <SystemClock_Config+0xdc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <SystemClock_Config+0xdc>)
 800225a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <SystemClock_Config+0xdc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800226c:	2301      	movs	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002276:	2302      	movs	r3, #2
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800227a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002280:	2304      	movs	r3, #4
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002284:	23d8      	movs	r3, #216	; 0xd8
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002288:	2302      	movs	r3, #2
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800228c:	2309      	movs	r3, #9
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002290:	2302      	movs	r3, #2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4618      	mov	r0, r3
 800229a:	f001 fc63 	bl	8003b64 <HAL_RCC_OscConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022a4:	f000 f838 	bl	8002318 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022a8:	f001 fc0c 	bl	8003ac4 <HAL_PWREx_EnableOverDrive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80022b2:	f000 f831 	bl	8002318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b6:	230f      	movs	r3, #15
 80022b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ba:	2302      	movs	r3, #2
 80022bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	2107      	movs	r1, #7
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 fef3 	bl	80040c0 <HAL_RCC_ClockConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80022e0:	f000 f81a 	bl	8002318 <Error_Handler>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3750      	adds	r7, #80	; 0x50
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002306:	f000 fbc7 	bl	8002a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40001000 	.word	0x40001000

08002318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800231c:	b672      	cpsid	i
}
 800231e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002320:	e7fe      	b.n	8002320 <Error_Handler+0x8>
	...

08002324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_MspInit+0x4c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	210f      	movs	r1, #15
 800235e:	f06f 0001 	mvn.w	r0, #1
 8002362:	f000 fc95 	bl	8002c90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_InitTick+0xe0>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_InitTick+0xe0>)
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_InitTick+0xe0>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800239c:	f107 0210 	add.w	r2, r7, #16
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 f8b0 	bl	800450c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023b6:	f002 f881 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 80023ba:	6378      	str	r0, [r7, #52]	; 0x34
 80023bc:	e004      	b.n	80023c8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023be:	f002 f87d 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 80023c2:	4603      	mov	r3, r0
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_InitTick+0xe4>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	0c9b      	lsrs	r3, r3, #18
 80023d2:	3b01      	subs	r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_InitTick+0xe8>)
 80023d8:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_InitTick+0xec>)
 80023da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_InitTick+0xe8>)
 80023de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_InitTick+0xe8>)
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <HAL_InitTick+0xe8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_InitTick+0xe8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_InitTick+0xe8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023fc:	4817      	ldr	r0, [pc, #92]	; (800245c <HAL_InitTick+0xe8>)
 80023fe:	f002 fcdf 	bl	8004dc0 <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002408:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11b      	bne.n	8002448 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002410:	4812      	ldr	r0, [pc, #72]	; (800245c <HAL_InitTick+0xe8>)
 8002412:	f002 fd37 	bl	8004e84 <HAL_TIM_Base_Start_IT>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800241c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002420:	2b00      	cmp	r3, #0
 8002422:	d111      	bne.n	8002448 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002424:	2036      	movs	r0, #54	; 0x36
 8002426:	f000 fc4f 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d808      	bhi.n	8002442 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	2036      	movs	r0, #54	; 0x36
 8002436:	f000 fc2b 	bl	8002c90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_InitTick+0xf0>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e002      	b.n	8002448 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800244c:	4618      	mov	r0, r3
 800244e:	3738      	adds	r7, #56	; 0x38
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	431bde83 	.word	0x431bde83
 800245c:	20000e20 	.word	0x20000e20
 8002460:	40001000 	.word	0x40001000
 8002464:	20000004 	.word	0x20000004

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800246c:	e7fe      	b.n	800246c <NMI_Handler+0x4>

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <HardFault_Handler+0x4>

08002474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <MemManage_Handler+0x4>

0800247a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <UsageFault_Handler+0x4>

08002486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Wifi_RxCallBack();
 8002498:	f7fe fac8 	bl	8000a2c <Wifi_RxCallBack>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <USART1_IRQHandler+0x14>)
 800249e:	f003 f885 	bl	80055ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000e70 	.word	0x20000e70

080024ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Wifi_RxCallBack();
 80024b0:	f7fe fabc 	bl	8000a2c <Wifi_RxCallBack>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <USART3_IRQHandler+0x14>)
 80024b6:	f003 f879 	bl	80055ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000ef8 	.word	0x20000ef8

080024c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM6_DAC_IRQHandler+0x10>)
 80024ca:	f002 fd53 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000e20 	.word	0x20000e20

080024d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return 1;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_kill>:

int _kill(int pid, int sig)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024f2:	f007 fc61 	bl	8009db8 <__errno>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2216      	movs	r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
  return -1;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_exit>:

void _exit (int status)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffe7 	bl	80024e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800251a:	e7fe      	b.n	800251a <_exit+0x12>

0800251c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e00a      	b.n	8002544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800252e:	f3af 8000 	nop.w
 8002532:	4601      	mov	r1, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	b2ca      	uxtb	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf0      	blt.n	800252e <_read+0x12>
  }

  return len;
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e009      	b.n	800257c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf1      	blt.n	8002568 <_write+0x12>
  }
  return len;
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_close>:

int _close(int file)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b6:	605a      	str	r2, [r3, #4]
  return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_isatty>:

int _isatty(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <_sbrk+0x5c>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <_sbrk+0x60>)
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <_sbrk+0x64>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <_sbrk+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d207      	bcs.n	8002638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002628:	f007 fbc6 	bl	8009db8 <__errno>
 800262c:	4603      	mov	r3, r0
 800262e:	220c      	movs	r2, #12
 8002630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	e009      	b.n	800264c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <_sbrk+0x64>)
 8002648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20080000 	.word	0x20080000
 8002658:	00000400 	.word	0x00000400
 800265c:	20000e6c 	.word	0x20000e6c
 8002660:	20005328 	.word	0x20005328

08002664 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <SystemInit+0x20>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <SystemInit+0x20>)
 8002670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 800268e:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <MX_USART1_UART_Init+0x5c>)
 8002690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_USART1_UART_Init+0x58>)
 80026cc:	f002 fe58 	bl	8005380 <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026d6:	f7ff fe1f 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000e70 	.word	0x20000e70
 80026e4:	40011000 	.word	0x40011000

080026e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_USART3_UART_Init+0x58>)
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <MX_USART3_UART_Init+0x5c>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_USART3_UART_Init+0x58>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MX_USART3_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <MX_USART3_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_USART3_UART_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_USART3_UART_Init+0x58>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <MX_USART3_UART_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <MX_USART3_UART_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <MX_USART3_UART_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_USART3_UART_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_USART3_UART_Init+0x58>)
 800272c:	f002 fe28 	bl	8005380 <HAL_UART_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002736:	f7ff fdef 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000ef8 	.word	0x20000ef8
 8002744:	40004800 	.word	0x40004800

08002748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0b0      	sub	sp, #192	; 0xc0
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	2290      	movs	r2, #144	; 0x90
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f007 fa02 	bl	8009b72 <memset>
  if(uartHandle->Instance==USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_UART_MspInit+0x180>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d159      	bne.n	800282c <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800277c:	2300      	movs	r3, #0
 800277e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fef3 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002790:	f7ff fdc2 	bl	8002318 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_UART_MspInit+0x184>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_UART_MspInit+0x184>)
 800279a:	f043 0310 	orr.w	r3, r3, #16
 800279e:	6453      	str	r3, [r2, #68]	; 0x44
 80027a0:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_UART_MspInit+0x184>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_UART_MspInit+0x184>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4a46      	ldr	r2, [pc, #280]	; (80028cc <HAL_UART_MspInit+0x184>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
 80027b8:	4b44      	ldr	r3, [pc, #272]	; (80028cc <HAL_UART_MspInit+0x184>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80027de:	2304      	movs	r3, #4
 80027e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027e8:	4619      	mov	r1, r3
 80027ea:	4839      	ldr	r0, [pc, #228]	; (80028d0 <HAL_UART_MspInit+0x188>)
 80027ec:	f000 fe32 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002808:	2307      	movs	r3, #7
 800280a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002812:	4619      	mov	r1, r3
 8002814:	482e      	ldr	r0, [pc, #184]	; (80028d0 <HAL_UART_MspInit+0x188>)
 8002816:	f000 fe1d 	bl	8003454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2105      	movs	r1, #5
 800281e:	2025      	movs	r0, #37	; 0x25
 8002820:	f000 fa36 	bl	8002c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002824:	2025      	movs	r0, #37	; 0x25
 8002826:	f000 fa4f 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800282a:	e049      	b.n	80028c0 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_UART_MspInit+0x18c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d144      	bne.n	80028c0 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fe93 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8002850:	f7ff fd62 	bl	8002318 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_UART_MspInit+0x184>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x184>)
 800285a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_UART_MspInit+0x184>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x184>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_UART_MspInit+0x184>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_UART_MspInit+0x184>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800289e:	2307      	movs	r3, #7
 80028a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028a8:	4619      	mov	r1, r3
 80028aa:	480b      	ldr	r0, [pc, #44]	; (80028d8 <HAL_UART_MspInit+0x190>)
 80028ac:	f000 fdd2 	bl	8003454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2105      	movs	r1, #5
 80028b4:	2027      	movs	r0, #39	; 0x27
 80028b6:	f000 f9eb 	bl	8002c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ba:	2027      	movs	r0, #39	; 0x27
 80028bc:	f000 fa04 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
}
 80028c0:	bf00      	nop
 80028c2:	37c0      	adds	r7, #192	; 0xc0
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40004800 	.word	0x40004800
 80028d8:	40020c00 	.word	0x40020c00

080028dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80028e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ea:	2206      	movs	r2, #6
 80028ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f0:	2202      	movs	r2, #2
 80028f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002902:	2201      	movs	r2, #1
 8002904:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002914:	2201      	movs	r2, #1
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800291a:	2200      	movs	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002920:	f000 ff77 	bl	8003812 <HAL_PCD_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800292a:	f7ff fcf5 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000f80 	.word	0x20000f80

08002938 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0ae      	sub	sp, #184	; 0xb8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2290      	movs	r2, #144	; 0x90
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f007 f90a 	bl	8009b72 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002966:	d159      	bne.n	8002a1c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800296c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fdf9 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002984:	f7ff fcc8 	bl	8002318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ba:	230a      	movs	r3, #10
 80029bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4818      	ldr	r0, [pc, #96]	; (8002a28 <HAL_PCD_MspInit+0xf0>)
 80029c8:	f000 fd44 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4810      	ldr	r0, [pc, #64]	; (8002a28 <HAL_PCD_MspInit+0xf0>)
 80029e8:	f000 fd34 	bl	8003454 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	6353      	str	r3, [r2, #52]	; 0x34
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	37b8      	adds	r7, #184	; 0xb8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a32:	490e      	ldr	r1, [pc, #56]	; (8002a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a34:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a48:	4c0b      	ldr	r4, [pc, #44]	; (8002a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a56:	f7ff fe05 	bl	8002664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f007 f9b3 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7ff fbc3 	bl	80021e8 <main>
  bx  lr    
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002a70:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8002a74:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8002a78:	20005324 	.word	0x20005324

08002a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>

08002a7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f000 f8f9 	bl	8002c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a88:	200f      	movs	r0, #15
 8002a8a:	f7ff fc73 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8e:	f7ff fc49 	bl	8002324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x20>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x24>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_IncTick+0x24>)
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	20001488 	.word	0x20001488

08002ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_GetTick+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20001488 	.word	0x20001488

08002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff ffee 	bl	8002ac0 <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d005      	beq.n	8002afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_Delay+0x44>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afe:	bf00      	nop
 8002b00:	f7ff ffde 	bl	8002ac0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8f7      	bhi.n	8002b00 <HAL_Delay+0x28>
  {
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000008 	.word	0x20000008

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <__NVIC_SetPriorityGrouping+0x40>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <__NVIC_SetPriorityGrouping+0x40>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00
 8002b64:	05fa0000 	.word	0x05fa0000

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff4c 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca2:	f7ff ff61 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002ca6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6978      	ldr	r0, [r7, #20]
 8002cae:	f7ff ffb1 	bl	8002c14 <NVIC_EncodePriority>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff80 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff54 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cf2:	f7ff fee5 	bl	8002ac0 <HAL_GetTick>
 8002cf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e052      	b.n	8002dbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0216 	bic.w	r2, r2, #22
 8002d24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_DMA_Abort+0x62>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	e013      	b.n	8002d90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d68:	f7ff feaa 	bl	8002ac0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d90c      	bls.n	8002d90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e015      	b.n	8002dbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e4      	bne.n	8002d68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	223f      	movs	r2, #63	; 0x3f
 8002da4:	409a      	lsls	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00c      	b.n	8002dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2205      	movs	r2, #5
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06a      	b.n	8002ef0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2223      	movs	r2, #35	; 0x23
 8002e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff f819 	bl	8001e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_ETH_Init+0xf0>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_ETH_Init+0xf0>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_ETH_Init+0xf0>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_ETH_Init+0xf4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_ETH_Init+0xf4>)
 8002e50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_ETH_Init+0xf4>)
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4927      	ldr	r1, [pc, #156]	; (8002efc <HAL_ETH_Init+0xf4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_ETH_Init+0xf4>)
 8002e66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7ff fe1e 	bl	8002ac0 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e86:	e011      	b.n	8002eac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e88:	f7ff fe1a 	bl	8002ac0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e96:	d909      	bls.n	8002eac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	22e0      	movs	r2, #224	; 0xe0
 8002ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e021      	b.n	8002ef0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e4      	bne.n	8002e88 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f958 	bl	8003174 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f9ff 	bl	80032c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa55 	bl	800337a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f9bd 	bl	8003258 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40013800 	.word	0x40013800

08002f00 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4b51      	ldr	r3, [pc, #324]	; (800305c <ETH_SetMACConfig+0x15c>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7c1b      	ldrb	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <ETH_SetMACConfig+0x28>
 8002f22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f26:	e000      	b.n	8002f2a <ETH_SetMACConfig+0x2a>
 8002f28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	7c5b      	ldrb	r3, [r3, #17]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <ETH_SetMACConfig+0x38>
 8002f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f36:	e000      	b.n	8002f3a <ETH_SetMACConfig+0x3a>
 8002f38:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7fdb      	ldrb	r3, [r3, #31]
 8002f46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	7f92      	ldrb	r2, [r2, #30]
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d102      	bne.n	8002f5e <ETH_SetMACConfig+0x5e>
 8002f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5c:	e000      	b.n	8002f60 <ETH_SetMACConfig+0x60>
 8002f5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	7f1b      	ldrb	r3, [r3, #28]
 8002f66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	791b      	ldrb	r3, [r3, #4]
 8002f74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	d102      	bne.n	8002f88 <ETH_SetMACConfig+0x88>
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	e000      	b.n	8002f8a <ETH_SetMACConfig+0x8a>
 8002f88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7bdb      	ldrb	r3, [r3, #15]
 8002f90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fa0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7ff fd8c 	bl	8002ad8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d101      	bne.n	8002fee <ETH_SetMACConfig+0xee>
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	e000      	b.n	8002ff0 <ETH_SetMACConfig+0xf0>
 8002fee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ff0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002ffe:	2a01      	cmp	r2, #1
 8003000:	d101      	bne.n	8003006 <ETH_SetMACConfig+0x106>
 8003002:	2208      	movs	r2, #8
 8003004:	e000      	b.n	8003008 <ETH_SetMACConfig+0x108>
 8003006:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003008:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003010:	2a01      	cmp	r2, #1
 8003012:	d101      	bne.n	8003018 <ETH_SetMACConfig+0x118>
 8003014:	2204      	movs	r2, #4
 8003016:	e000      	b.n	800301a <ETH_SetMACConfig+0x11a>
 8003018:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800301a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003022:	2a01      	cmp	r2, #1
 8003024:	d101      	bne.n	800302a <ETH_SetMACConfig+0x12a>
 8003026:	2202      	movs	r2, #2
 8003028:	e000      	b.n	800302c <ETH_SetMACConfig+0x12c>
 800302a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800302c:	4313      	orrs	r3, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003044:	2001      	movs	r0, #1
 8003046:	f7ff fd47 	bl	8002ad8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	ff20810f 	.word	0xff20810f

08003060 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <ETH_SetDMAConfig+0x110>)
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	7b1b      	ldrb	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <ETH_SetDMAConfig+0x2c>
 8003086:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800308a:	e000      	b.n	800308e <ETH_SetDMAConfig+0x2e>
 800308c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	7b5b      	ldrb	r3, [r3, #13]
 8003092:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003094:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	7f52      	ldrb	r2, [r2, #29]
 800309a:	2a00      	cmp	r2, #0
 800309c:	d102      	bne.n	80030a4 <ETH_SetDMAConfig+0x44>
 800309e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030a2:	e000      	b.n	80030a6 <ETH_SetDMAConfig+0x46>
 80030a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	7b9b      	ldrb	r3, [r3, #14]
 80030ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	7f1b      	ldrb	r3, [r3, #28]
 80030ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	7f9b      	ldrb	r3, [r3, #30]
 80030c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030d4:	4313      	orrs	r3, r2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7ff fcee 	bl	8002ad8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003114:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800311a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003120:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003128:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800312a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003132:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003138:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003146:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003154:	2001      	movs	r0, #1
 8003156:	f7ff fcbf 	bl	8002ad8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f8de3f23 	.word	0xf8de3f23

08003174 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0a6      	sub	sp, #152	; 0x98
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003188:	2300      	movs	r3, #0
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031b0:	2300      	movs	r3, #0
 80031b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fe86 	bl	8002f00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003216:	2300      	movs	r3, #0
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003220:	2301      	movs	r3, #1
 8003222:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003228:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800322a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800322e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003234:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ff08 	bl	8003060 <ETH_SetDMAConfig>
}
 8003250:	bf00      	nop
 8003252:	3798      	adds	r7, #152	; 0x98
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3305      	adds	r3, #5
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	3204      	adds	r2, #4
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <ETH_MACAddressConfig+0x68>)
 800327a:	4413      	add	r3, r2
 800327c:	461a      	mov	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3303      	adds	r3, #3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	061a      	lsls	r2, r3, #24
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3302      	adds	r3, #2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	4313      	orrs	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <ETH_MACAddressConfig+0x6c>)
 80032aa:	4413      	add	r3, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40028040 	.word	0x40028040
 80032c4:	40028044 	.word	0x40028044

080032c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e03e      	b.n	8003354 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68d9      	ldr	r1, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	3206      	adds	r2, #6
 8003308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d80c      	bhi.n	8003338 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e004      	b.n	8003342 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d9bd      	bls.n	80032d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	611a      	str	r2, [r3, #16]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e046      	b.n	8003416 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6919      	ldr	r1, [r3, #16]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80033cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	3212      	adds	r2, #18
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d80c      	bhi.n	8003406 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6919      	ldr	r1, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e004      	b.n	8003410 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d9b5      	bls.n	8003388 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003446:	60da      	str	r2, [r3, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e175      	b.n	8003760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	429a      	cmp	r2, r3
 800348e:	f040 8164 	bne.w	800375a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d005      	beq.n	80034aa <HAL_GPIO_Init+0x56>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d130      	bne.n	800350c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	2203      	movs	r2, #3
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e0:	2201      	movs	r2, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 0201 	and.w	r2, r3, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d017      	beq.n	8003548 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d123      	bne.n	800359c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3208      	adds	r2, #8
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80be 	beq.w	800375a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035de:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035f6:	4a61      	ldr	r2, [pc, #388]	; (800377c <HAL_GPIO_Init+0x328>)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	3302      	adds	r3, #2
 80035fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a58      	ldr	r2, [pc, #352]	; (8003780 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d037      	beq.n	8003692 <HAL_GPIO_Init+0x23e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a57      	ldr	r2, [pc, #348]	; (8003784 <HAL_GPIO_Init+0x330>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d031      	beq.n	800368e <HAL_GPIO_Init+0x23a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a56      	ldr	r2, [pc, #344]	; (8003788 <HAL_GPIO_Init+0x334>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02b      	beq.n	800368a <HAL_GPIO_Init+0x236>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a55      	ldr	r2, [pc, #340]	; (800378c <HAL_GPIO_Init+0x338>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d025      	beq.n	8003686 <HAL_GPIO_Init+0x232>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a54      	ldr	r2, [pc, #336]	; (8003790 <HAL_GPIO_Init+0x33c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <HAL_GPIO_Init+0x22e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a53      	ldr	r2, [pc, #332]	; (8003794 <HAL_GPIO_Init+0x340>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d019      	beq.n	800367e <HAL_GPIO_Init+0x22a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_GPIO_Init+0x344>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_GPIO_Init+0x226>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a51      	ldr	r2, [pc, #324]	; (800379c <HAL_GPIO_Init+0x348>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00d      	beq.n	8003676 <HAL_GPIO_Init+0x222>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a50      	ldr	r2, [pc, #320]	; (80037a0 <HAL_GPIO_Init+0x34c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <HAL_GPIO_Init+0x21e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <HAL_GPIO_Init+0x350>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_GPIO_Init+0x21a>
 800366a:	2309      	movs	r3, #9
 800366c:	e012      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800366e:	230a      	movs	r3, #10
 8003670:	e010      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003672:	2308      	movs	r3, #8
 8003674:	e00e      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003676:	2307      	movs	r3, #7
 8003678:	e00c      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800367a:	2306      	movs	r3, #6
 800367c:	e00a      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003682:	2304      	movs	r3, #4
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003692:	2300      	movs	r3, #0
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	; (800377c <HAL_GPIO_Init+0x328>)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d6:	4a34      	ldr	r2, [pc, #208]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003700:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_GPIO_Init+0x354>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f ae86 	bls.w	8003474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40021400 	.word	0x40021400
 8003798:	40021800 	.word	0x40021800
 800379c:	40021c00 	.word	0x40021c00
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40022400 	.word	0x40022400
 80037a8:	40013c00 	.word	0x40013c00

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037c8:	e003      	b.n	80037d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	619a      	str	r2, [r3, #24]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003814:	b08f      	sub	sp, #60	; 0x3c
 8003816:	af0a      	add	r7, sp, #40	; 0x28
 8003818:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e116      	b.n	8003a52 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff f87a 	bl	8002938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f003 f900 	bl	8006a68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	687e      	ldr	r6, [r7, #4]
 8003870:	466d      	mov	r5, sp
 8003872:	f106 0410 	add.w	r4, r6, #16
 8003876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800387c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003882:	e885 0003 	stmia.w	r5, {r0, r1}
 8003886:	1d33      	adds	r3, r6, #4
 8003888:	cb0e      	ldmia	r3, {r1, r2, r3}
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f003 f894 	bl	80069b8 <USB_CoreInit>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0d7      	b.n	8003a52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 f8ee 	bl	8006a8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	e04a      	b.n	800394a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333d      	adds	r3, #61	; 0x3d
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	333c      	adds	r3, #60	; 0x3c
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	b298      	uxth	r0, r3
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3344      	adds	r3, #68	; 0x44
 80038f0:	4602      	mov	r2, r0
 80038f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3340      	adds	r3, #64	; 0x40
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3348      	adds	r3, #72	; 0x48
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	334c      	adds	r3, #76	; 0x4c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3354      	adds	r3, #84	; 0x54
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	3301      	adds	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d3af      	bcc.n	80038b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e044      	b.n	80039e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	3301      	adds	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3b5      	bcc.n	800395a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	687e      	ldr	r6, [r7, #4]
 80039f6:	466d      	mov	r5, sp
 80039f8:	f106 0410 	add.w	r4, r6, #16
 80039fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a08:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a0c:	1d33      	adds	r3, r6, #4
 8003a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a10:	6838      	ldr	r0, [r7, #0]
 8003a12:	f003 f887 	bl	8006b24 <USB_DevInit>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e014      	b.n	8003a52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f80b 	bl	8003a5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fa45 	bl	8006eda <USB_DevDisconnect>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	10000003 	.word	0x10000003

08003aa4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40007000 	.word	0x40007000

08003ac4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af2:	f7fe ffe5 	bl	8002ac0 <HAL_GetTick>
 8003af6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af8:	e009      	b.n	8003b0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003afa:	f7fe ffe1 	bl	8002ac0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b08:	d901      	bls.n	8003b0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e022      	b.n	8003b54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1a:	d1ee      	bne.n	8003afa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b28:	f7fe ffca 	bl	8002ac0 <HAL_GetTick>
 8003b2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b2e:	e009      	b.n	8003b44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b30:	f7fe ffc6 	bl	8002ac0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3e:	d901      	bls.n	8003b44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e007      	b.n	8003b54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b50:	d1ee      	bne.n	8003b30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40007000 	.word	0x40007000

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e29b      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8087 	beq.w	8003c96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b88:	4b96      	ldr	r3, [pc, #600]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00c      	beq.n	8003bae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b94:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d112      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x62>
 8003ba0:	4b90      	ldr	r3, [pc, #576]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bac:	d10b      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	4b8d      	ldr	r3, [pc, #564]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d06c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x130>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d168      	bne.n	8003c94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e275      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x7a>
 8003bd0:	4b84      	ldr	r3, [pc, #528]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a83      	ldr	r2, [pc, #524]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e02e      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x9c>
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7e      	ldr	r2, [pc, #504]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7b      	ldr	r2, [pc, #492]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0xc0>
 8003c0a:	4b76      	ldr	r3, [pc, #472]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a75      	ldr	r2, [pc, #468]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a72      	ldr	r2, [pc, #456]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003c24:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b6c      	ldr	r3, [pc, #432]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6b      	ldr	r2, [pc, #428]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe ff3c 	bl	8002ac0 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe ff38 	bl	8002ac0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e229      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe8>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe ff28 	bl	8002ac0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe ff24 	bl	8002ac0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e215      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x110>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d069      	beq.n	8003d76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x190>
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x17a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1e9      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	493d      	ldr	r1, [pc, #244]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e040      	b.n	8003d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe feda 	bl	8002ac0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fe fed6 	bl	8002ac0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4929      	ldr	r1, [pc, #164]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e018      	b.n	8003d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe feb6 	bl	8002ac0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe feb2 	bl	8002ac0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1a3      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d038      	beq.n	8003df4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d019      	beq.n	8003dbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fe93 	bl	8002ac0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fe8f 	bl	8002ac0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e180      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x23a>
 8003dbc:	e01a      	b.n	8003df4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fe79 	bl	8002ac0 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fe75 	bl	8002ac0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d903      	bls.n	8003de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e166      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
 8003de4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b92      	ldr	r3, [pc, #584]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a4 	beq.w	8003f4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b8c      	ldr	r3, [pc, #560]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b89      	ldr	r3, [pc, #548]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a88      	ldr	r2, [pc, #544]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b86      	ldr	r3, [pc, #536]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	4b83      	ldr	r3, [pc, #524]	; (8004038 <HAL_RCC_OscConfig+0x4d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e36:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCC_OscConfig+0x4d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7f      	ldr	r2, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0x4d4>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fe3d 	bl	8002ac0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fe fe39 	bl	8002ac0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e12a      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x4d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x31a>
 8003e70:	4b70      	ldr	r3, [pc, #448]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a6f      	ldr	r2, [pc, #444]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e02d      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x33c>
 8003e86:	4b6b      	ldr	r3, [pc, #428]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a6a      	ldr	r2, [pc, #424]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b68      	ldr	r3, [pc, #416]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a67      	ldr	r2, [pc, #412]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x35e>
 8003ea8:	4b62      	ldr	r3, [pc, #392]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a5e      	ldr	r2, [pc, #376]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5b      	ldr	r2, [pc, #364]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b59      	ldr	r3, [pc, #356]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a58      	ldr	r2, [pc, #352]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fded 	bl	8002ac0 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe fde9 	bl	8002ac0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0d8      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x386>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fdd7 	bl	8002ac0 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fdd3 	bl	8002ac0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0c2      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80ae 	beq.w	80040b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d06d      	beq.n	800403c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d14b      	bne.n	8004000 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a31      	ldr	r2, [pc, #196]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fda4 	bl	8002ac0 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fda0 	bl	8002ac0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e091      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	491b      	ldr	r1, [pc, #108]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fd72 	bl	8002ac0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fe fd6e 	bl	8002ac0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e05f      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
 8003ffe:	e057      	b.n	80040b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe fd58 	bl	8002ac0 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fd54 	bl	8002ac0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x4b0>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x54c>
 8004034:	40023800 	.word	0x40023800
 8004038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_RCC_OscConfig+0x558>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d030      	beq.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d129      	bne.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d122      	bne.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004072:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d119      	bne.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d10f      	bne.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0d0      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	4965      	ldr	r1, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d040      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d115      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e073      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06b      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4936      	ldr	r1, [pc, #216]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b4:	f7fe fc84 	bl	8002ac0 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fe fc80 	bl	8002ac0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e053      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d210      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1cc>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1d0>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1d4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe f87e 	bl	8002374 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	0800ba5c 	.word	0x0800ba5c
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b094      	sub	sp, #80	; 0x50
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	2300      	movs	r3, #0
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80e1 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e0db      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d0:	e0db      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d6:	e0d8      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042e2:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4621      	mov	r1, r4
 8004324:	1a51      	subs	r1, r2, r1
 8004326:	6139      	str	r1, [r7, #16]
 8004328:	4629      	mov	r1, r5
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800433c:	4659      	mov	r1, fp
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4651      	mov	r1, sl
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4651      	mov	r1, sl
 800434c:	ebb2 0801 	subs.w	r8, r2, r1
 8004350:	4659      	mov	r1, fp
 8004352:	eb63 0901 	sbc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	462b      	mov	r3, r5
 8004378:	eb49 0303 	adc.w	r3, r9, r3
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438a:	4629      	mov	r1, r5
 800438c:	024b      	lsls	r3, r1, #9
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004394:	4621      	mov	r1, r4
 8004396:	024a      	lsls	r2, r1, #9
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a8:	f7fb ffa2 	bl	80002f0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e058      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	4611      	mov	r1, r2
 80043c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0159      	lsls	r1, r3, #5
 80043de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e2:	0150      	lsls	r0, r2, #5
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4641      	mov	r1, r8
 80043ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ee:	4649      	mov	r1, r9
 80043f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004408:	ebb2 040a 	subs.w	r4, r2, sl
 800440c:	eb63 050b 	sbc.w	r5, r3, fp
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	00eb      	lsls	r3, r5, #3
 800441a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441e:	00e2      	lsls	r2, r4, #3
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	4643      	mov	r3, r8
 8004426:	18e3      	adds	r3, r4, r3
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	464b      	mov	r3, r9
 800442c:	eb45 0303 	adc.w	r3, r5, r3
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443e:	4629      	mov	r1, r5
 8004440:	028b      	lsls	r3, r1, #10
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004448:	4621      	mov	r1, r4
 800444a:	028a      	lsls	r2, r1, #10
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fb ff48 	bl	80002f0 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004482:	e002      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800448c:	4618      	mov	r0, r3
 800448e:	3750      	adds	r7, #80	; 0x50
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000000 	.word	0x20000000

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	0800ba6c 	.word	0x0800ba6c

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffdc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	0800ba6c 	.word	0x0800ba6c

0800450c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	220f      	movs	r2, #15
 800451a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	08db      	lsrs	r3, r3, #3
 8004546:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <HAL_RCC_GetClockConfig+0x60>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 020f 	and.w	r2, r3, #15
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	40023c00 	.word	0x40023c00

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d012      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004598:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a68      	ldr	r2, [pc, #416]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	4964      	ldr	r1, [pc, #400]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d017      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ca:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	4959      	ldr	r1, [pc, #356]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e8:	d101      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004606:	4b4e      	ldr	r3, [pc, #312]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	494a      	ldr	r1, [pc, #296]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004626:	2301      	movs	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 808b 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004654:	4b3a      	ldr	r3, [pc, #232]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	4a39      	ldr	r2, [pc, #228]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465e:	6413      	str	r3, [r2, #64]	; 0x40
 8004660:	4b37      	ldr	r3, [pc, #220]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a34      	ldr	r2, [pc, #208]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004678:	f7fe fa22 	bl	8002ac0 <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004680:	f7fe fa1e 	bl	8002ac0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e38f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d035      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d02e      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046bc:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046de:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d114      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe f9e6 	bl	8002ac0 <HAL_GetTick>
 80046f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fe f9e2 	bl	8002ac0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e351      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0ee      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004726:	d111      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004736:	400b      	ands	r3, r1
 8004738:	4901      	ldr	r1, [pc, #4]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
 800473e:	e00b      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004740:	40023800 	.word	0x40023800
 8004744:	40007000 	.word	0x40007000
 8004748:	0ffffcff 	.word	0x0ffffcff
 800474c:	4bac      	ldr	r3, [pc, #688]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4aab      	ldr	r2, [pc, #684]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004756:	6093      	str	r3, [r2, #8]
 8004758:	4ba9      	ldr	r3, [pc, #676]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004764:	49a6      	ldr	r1, [pc, #664]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	4313      	orrs	r3, r2
 8004768:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004776:	4ba2      	ldr	r3, [pc, #648]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477c:	4aa0      	ldr	r2, [pc, #640]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004786:	4b9e      	ldr	r3, [pc, #632]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004788:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	499b      	ldr	r1, [pc, #620]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a4:	4b96      	ldr	r3, [pc, #600]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b2:	4993      	ldr	r1, [pc, #588]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c6:	4b8e      	ldr	r3, [pc, #568]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d4:	498a      	ldr	r1, [pc, #552]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e8:	4b85      	ldr	r3, [pc, #532]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f6:	4982      	ldr	r1, [pc, #520]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800480a:	4b7d      	ldr	r3, [pc, #500]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4979      	ldr	r1, [pc, #484]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482c:	4b74      	ldr	r3, [pc, #464]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4971      	ldr	r1, [pc, #452]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484e:	4b6c      	ldr	r3, [pc, #432]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f023 020c 	bic.w	r2, r3, #12
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	4968      	ldr	r1, [pc, #416]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004870:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	4960      	ldr	r1, [pc, #384]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004892:	4b5b      	ldr	r3, [pc, #364]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a0:	4957      	ldr	r1, [pc, #348]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	494f      	ldr	r1, [pc, #316]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4946      	ldr	r1, [pc, #280]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004906:	493e      	ldr	r1, [pc, #248]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800491a:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	4935      	ldr	r1, [pc, #212]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800493c:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d011      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496c:	4924      	ldr	r1, [pc, #144]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499e:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	4914      	ldr	r1, [pc, #80]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d0:	490b      	ldr	r1, [pc, #44]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00f      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	4902      	ldr	r1, [pc, #8]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a10:	4b8a      	ldr	r3, [pc, #552]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	4986      	ldr	r1, [pc, #536]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a34:	4b81      	ldr	r3, [pc, #516]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a44:	497d      	ldr	r1, [pc, #500]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d006      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80d6 	beq.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a60:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a75      	ldr	r2, [pc, #468]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f828 	bl	8002ac0 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a74:	f7fe f824 	bl	8002ac0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e195      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d021      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11d      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aa6:	4b65      	ldr	r3, [pc, #404]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ab4:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aba:	0e1b      	lsrs	r3, r3, #24
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	019a      	lsls	r2, r3, #6
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	4958      	ldr	r1, [pc, #352]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d02e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0c:	d129      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b1c:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b22:	0f1b      	lsrs	r3, r3, #28
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	019a      	lsls	r2, r3, #6
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	493e      	ldr	r1, [pc, #248]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b4a:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b50:	f023 021f 	bic.w	r2, r3, #31
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	4938      	ldr	r1, [pc, #224]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01d      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b6e:	4b33      	ldr	r3, [pc, #204]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b74:	0e1b      	lsrs	r3, r3, #24
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b82:	0f1b      	lsrs	r3, r3, #28
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	019a      	lsls	r2, r3, #6
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	4926      	ldr	r1, [pc, #152]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d011      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	019a      	lsls	r2, r3, #6
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	491a      	ldr	r1, [pc, #104]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fd ff6b 	bl	8002ac0 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bee:	f7fd ff67 	bl	8002ac0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	; 0x64
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0d8      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 80ce 	bne.w	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c20:	f7fd ff4e 	bl	8002ac0 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c26:	e00b      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c28:	f7fd ff4a 	bl	8002ac0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d904      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e0bb      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c40:	4b5e      	ldr	r3, [pc, #376]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4c:	d0ec      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02e      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d12a      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c76:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c84:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	0f1b      	lsrs	r3, r3, #28
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4944      	ldr	r1, [pc, #272]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cb2:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	493d      	ldr	r1, [pc, #244]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce0:	d11d      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	0f1b      	lsrs	r3, r3, #28
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	019a      	lsls	r2, r3, #6
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	4929      	ldr	r1, [pc, #164]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d028      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d38:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	431a      	orrs	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4917      	ldr	r1, [pc, #92]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4911      	ldr	r1, [pc, #68]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fd fe9a 	bl	8002ac0 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d90:	f7fd fe96 	bl	8002ac0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e007      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dae:	d1ef      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e049      	b.n	8004e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f841 	bl	8004e6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 fa00 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e054      	b.n	8004f46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start_IT+0xe0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_Base_Start_IT+0xe8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d115      	bne.n	8004f30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <HAL_TIM_Base_Start_IT+0xec>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d015      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d011      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	e008      	b.n	8004f42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e000      	b.n	8004f44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40001800 	.word	0x40001800
 8004f70:	00010007 	.word	0x00010007

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f905 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f8f7 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f908 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8db 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8cd 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8de 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0208 	mvn.w	r2, #8
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8b1 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8a3 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8b4 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f887 	bl	80051c6 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f879 	bl	80051b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f88a 	bl	80051da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f8fe 	bl	80022f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f91a 	bl	8005358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f90d 	bl	800536c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d10e      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d107      	bne.n	800517e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f838 	bl	80051ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b20      	cmp	r3, #32
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0220 	mvn.w	r2, #32
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8cd 	bl	8005344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <TIM_Base_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <TIM_Base_SetConfig+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <TIM_Base_SetConfig+0x120>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <TIM_Base_SetConfig+0x114>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d027      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <TIM_Base_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d023      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01f      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <TIM_Base_SetConfig+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d017      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	; (800532c <TIM_Base_SetConfig+0x128>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_Base_SetConfig+0x12c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <TIM_Base_SetConfig+0x130>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a25      	ldr	r2, [pc, #148]	; (8005338 <TIM_Base_SetConfig+0x134>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a24      	ldr	r2, [pc, #144]	; (800533c <TIM_Base_SetConfig+0x138>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a23      	ldr	r2, [pc, #140]	; (8005340 <TIM_Base_SetConfig+0x13c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <TIM_Base_SetConfig+0x114>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <TIM_Base_SetConfig+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40010400 	.word	0x40010400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800
 8005338:	40001800 	.word	0x40001800
 800533c:	40001c00 	.word	0x40001c00
 8005340:	40002000 	.word	0x40002000

08005344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e040      	b.n	8005414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd f9d0 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2224      	movs	r2, #36	; 0x24
 80053ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc10 	bl	8005be4 <UART_SetConfig>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e022      	b.n	8005414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe68 	bl	80060ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 feef 	bl	80061f0 <UART_CheckIdleState>
 8005412:	4603      	mov	r3, r0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005430:	2b20      	cmp	r3, #32
 8005432:	d171      	bne.n	8005518 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Transmit+0x24>
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e06a      	b.n	800551a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2221      	movs	r2, #33	; 0x21
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fd fb35 	bl	8002ac0 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005470:	d108      	bne.n	8005484 <HAL_UART_Transmit+0x68>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e003      	b.n	800548c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800548c:	e02c      	b.n	80054e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fef6 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e038      	b.n	800551a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	3302      	adds	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e007      	b.n	80054d6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1cc      	bne.n	800548e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fec3 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e005      	b.n	800551a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08a      	sub	sp, #40	; 0x28
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	4613      	mov	r3, r2
 800552e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005536:	2b20      	cmp	r3, #32
 8005538:	d132      	bne.n	80055a0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_UART_Receive_IT+0x24>
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e02b      	b.n	80055a2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d018      	beq.n	8005590 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	613b      	str	r3, [r7, #16]
   return(result);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	61bb      	str	r3, [r7, #24]
   return(result);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e6      	bne.n	800555e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	461a      	mov	r2, r3
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 ff3e 	bl	8006418 <UART_Start_Receive_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	e000      	b.n	80055a2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3728      	adds	r7, #40	; 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0ba      	sub	sp, #232	; 0xe8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80055da:	4013      	ands	r3, r2
 80055dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d115      	bne.n	8005614 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00f      	beq.n	8005614 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 82ac 	beq.w	8005b62 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      }
      return;
 8005612:	e2a6      	b.n	8005b62 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8117 	beq.w	800584c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800562a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800562e:	4b85      	ldr	r3, [pc, #532]	; (8005844 <HAL_UART_IRQHandler+0x298>)
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 810a 	beq.w	800584c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d011      	beq.n	8005668 <HAL_UART_IRQHandler+0xbc>
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2201      	movs	r2, #1
 8005656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <HAL_UART_IRQHandler+0xec>
 8005674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2202      	movs	r2, #2
 8005686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <HAL_UART_IRQHandler+0x11c>
 80056a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2204      	movs	r2, #4
 80056b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	f043 0202 	orr.w	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d017      	beq.n	8005704 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fa:	f043 0208 	orr.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <HAL_UART_IRQHandler+0x18a>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8212 	beq.w	8005b66 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005786:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04f      	beq.n	800582e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 ff08 	bl	80065a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d141      	bne.n	8005826 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1d9      	bne.n	80057a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d013      	beq.n	800581e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	4a13      	ldr	r2, [pc, #76]	; (8005848 <HAL_UART_IRQHandler+0x29c>)
 80057fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd fade 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d017      	beq.n	800583e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	e00f      	b.n	800583e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9c0 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	e00b      	b.n	800583e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9bc 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e007      	b.n	800583e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9b8 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800583c:	e193      	b.n	8005b66 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583e:	bf00      	nop
    return;
 8005840:	e191      	b.n	8005b66 <HAL_UART_IRQHandler+0x5ba>
 8005842:	bf00      	nop
 8005844:	04000120 	.word	0x04000120
 8005848:	0800666d 	.word	0x0800666d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 814c 	bne.w	8005aee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8145 	beq.w	8005aee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 813e 	beq.w	8005aee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2210      	movs	r2, #16
 8005878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	f040 80b6 	bne.w	80059f6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8165 	beq.w	8005b6a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058aa:	429a      	cmp	r2, r3
 80058ac:	f080 815d 	bcs.w	8005b6a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c4:	f000 8086 	beq.w	80059d4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800590a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1da      	bne.n	80058c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005936:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800593a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800593e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e1      	bne.n	8005912 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800595e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005972:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a4:	f023 0310 	bic.w	r3, r3, #16
 80059a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80059b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e4      	bne.n	8005994 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd f988 	bl	8002ce4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8e2 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059f4:	e0b9      	b.n	8005b6a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80ab 	beq.w	8005b6e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a6 	beq.w	8005b6e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a44:	647b      	str	r3, [r7, #68]	; 0x44
 8005a46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e4      	bne.n	8005a22 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	623b      	str	r3, [r7, #32]
   return(result);
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e3      	bne.n	8005a58 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e4      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f866 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aec:	e03f      	b.n	8005b6e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <HAL_UART_IRQHandler+0x56c>
 8005afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f85d 	bl	8005bd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b16:	e02d      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01c      	beq.n	8005b72 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
    }
    return;
 8005b40:	e017      	b.n	8005b72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
 8005b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00c      	beq.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fd9c 	bl	8006698 <UART_EndTransmit_IT>
    return;
 8005b60:	e008      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b62:	bf00      	nop
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b72:	bf00      	nop
  }

}
 8005b74:	37e8      	adds	r7, #232	; 0xe8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop

08005b7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4ba6      	ldr	r3, [pc, #664]	; (8005ea8 <UART_SetConfig+0x2c4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a94      	ldr	r2, [pc, #592]	; (8005eac <UART_SetConfig+0x2c8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d120      	bne.n	8005ca2 <UART_SetConfig+0xbe>
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d816      	bhi.n	8005c9c <UART_SetConfig+0xb8>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x90>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c91 	.word	0x08005c91
 8005c7c:	08005c8b 	.word	0x08005c8b
 8005c80:	08005c97 	.word	0x08005c97
 8005c84:	2301      	movs	r3, #1
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e150      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e14d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c90:	2304      	movs	r3, #4
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e14a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c96:	2308      	movs	r3, #8
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e147      	b.n	8005f2c <UART_SetConfig+0x348>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e144      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a83      	ldr	r2, [pc, #524]	; (8005eb4 <UART_SetConfig+0x2d0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d132      	bne.n	8005d12 <UART_SetConfig+0x12e>
 8005cac:	4b80      	ldr	r3, [pc, #512]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d828      	bhi.n	8005d0c <UART_SetConfig+0x128>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0xdc>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d01 	.word	0x08005d01
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005cfb 	.word	0x08005cfb
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d0d 	.word	0x08005d0d
 8005cf0:	08005d07 	.word	0x08005d07
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e118      	b.n	8005f2c <UART_SetConfig+0x348>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e115      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e112      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e10f      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e10c      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d120      	bne.n	8005d5e <UART_SetConfig+0x17a>
 8005d1c:	4b64      	ldr	r3, [pc, #400]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d013      	beq.n	8005d52 <UART_SetConfig+0x16e>
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d814      	bhi.n	8005d58 <UART_SetConfig+0x174>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d009      	beq.n	8005d46 <UART_SetConfig+0x162>
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d810      	bhi.n	8005d58 <UART_SetConfig+0x174>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <UART_SetConfig+0x15c>
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d006      	beq.n	8005d4c <UART_SetConfig+0x168>
 8005d3e:	e00b      	b.n	8005d58 <UART_SetConfig+0x174>
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e0f2      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d46:	2302      	movs	r3, #2
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e0ef      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e0ec      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d52:	2308      	movs	r3, #8
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e0e9      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e0e6      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a56      	ldr	r2, [pc, #344]	; (8005ebc <UART_SetConfig+0x2d8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d120      	bne.n	8005daa <UART_SetConfig+0x1c6>
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d72:	2bc0      	cmp	r3, #192	; 0xc0
 8005d74:	d013      	beq.n	8005d9e <UART_SetConfig+0x1ba>
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d814      	bhi.n	8005da4 <UART_SetConfig+0x1c0>
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d009      	beq.n	8005d92 <UART_SetConfig+0x1ae>
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d810      	bhi.n	8005da4 <UART_SetConfig+0x1c0>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <UART_SetConfig+0x1a8>
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d006      	beq.n	8005d98 <UART_SetConfig+0x1b4>
 8005d8a:	e00b      	b.n	8005da4 <UART_SetConfig+0x1c0>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e0cc      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d92:	2302      	movs	r3, #2
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e0c9      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e0c6      	b.n	8005f2c <UART_SetConfig+0x348>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e0c3      	b.n	8005f2c <UART_SetConfig+0x348>
 8005da4:	2310      	movs	r3, #16
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0c0      	b.n	8005f2c <UART_SetConfig+0x348>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a44      	ldr	r2, [pc, #272]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d125      	bne.n	8005e00 <UART_SetConfig+0x21c>
 8005db4:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc2:	d017      	beq.n	8005df4 <UART_SetConfig+0x210>
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	d817      	bhi.n	8005dfa <UART_SetConfig+0x216>
 8005dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dce:	d00b      	beq.n	8005de8 <UART_SetConfig+0x204>
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d811      	bhi.n	8005dfa <UART_SetConfig+0x216>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <UART_SetConfig+0x1fe>
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d006      	beq.n	8005dee <UART_SetConfig+0x20a>
 8005de0:	e00b      	b.n	8005dfa <UART_SetConfig+0x216>
 8005de2:	2300      	movs	r3, #0
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e0a1      	b.n	8005f2c <UART_SetConfig+0x348>
 8005de8:	2302      	movs	r3, #2
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e09e      	b.n	8005f2c <UART_SetConfig+0x348>
 8005dee:	2304      	movs	r3, #4
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e09b      	b.n	8005f2c <UART_SetConfig+0x348>
 8005df4:	2308      	movs	r3, #8
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e098      	b.n	8005f2c <UART_SetConfig+0x348>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e095      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <UART_SetConfig+0x2e0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d125      	bne.n	8005e56 <UART_SetConfig+0x272>
 8005e0a:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e18:	d017      	beq.n	8005e4a <UART_SetConfig+0x266>
 8005e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1e:	d817      	bhi.n	8005e50 <UART_SetConfig+0x26c>
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e24:	d00b      	beq.n	8005e3e <UART_SetConfig+0x25a>
 8005e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2a:	d811      	bhi.n	8005e50 <UART_SetConfig+0x26c>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <UART_SetConfig+0x254>
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0x260>
 8005e36:	e00b      	b.n	8005e50 <UART_SetConfig+0x26c>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e076      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e073      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e44:	2304      	movs	r3, #4
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e070      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e06d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e50:	2310      	movs	r3, #16
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e06a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d138      	bne.n	8005ed2 <UART_SetConfig+0x2ee>
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6e:	d017      	beq.n	8005ea0 <UART_SetConfig+0x2bc>
 8005e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e74:	d82a      	bhi.n	8005ecc <UART_SetConfig+0x2e8>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	d00b      	beq.n	8005e94 <UART_SetConfig+0x2b0>
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e80:	d824      	bhi.n	8005ecc <UART_SetConfig+0x2e8>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <UART_SetConfig+0x2aa>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d006      	beq.n	8005e9a <UART_SetConfig+0x2b6>
 8005e8c:	e01e      	b.n	8005ecc <UART_SetConfig+0x2e8>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e04b      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e94:	2302      	movs	r3, #2
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e048      	b.n	8005f2c <UART_SetConfig+0x348>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e045      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e042      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ea6:	bf00      	nop
 8005ea8:	efff69f3 	.word	0xefff69f3
 8005eac:	40011000 	.word	0x40011000
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40004400 	.word	0x40004400
 8005eb8:	40004800 	.word	0x40004800
 8005ebc:	40004c00 	.word	0x40004c00
 8005ec0:	40005000 	.word	0x40005000
 8005ec4:	40011400 	.word	0x40011400
 8005ec8:	40007800 	.word	0x40007800
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e02c      	b.n	8005f2c <UART_SetConfig+0x348>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a72      	ldr	r2, [pc, #456]	; (80060a0 <UART_SetConfig+0x4bc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d125      	bne.n	8005f28 <UART_SetConfig+0x344>
 8005edc:	4b71      	ldr	r3, [pc, #452]	; (80060a4 <UART_SetConfig+0x4c0>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ee6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eea:	d017      	beq.n	8005f1c <UART_SetConfig+0x338>
 8005eec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ef0:	d817      	bhi.n	8005f22 <UART_SetConfig+0x33e>
 8005ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef6:	d00b      	beq.n	8005f10 <UART_SetConfig+0x32c>
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efc:	d811      	bhi.n	8005f22 <UART_SetConfig+0x33e>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <UART_SetConfig+0x326>
 8005f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f06:	d006      	beq.n	8005f16 <UART_SetConfig+0x332>
 8005f08:	e00b      	b.n	8005f22 <UART_SetConfig+0x33e>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e00d      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f10:	2302      	movs	r3, #2
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e00a      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f16:	2304      	movs	r3, #4
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e007      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e004      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f22:	2310      	movs	r3, #16
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e001      	b.n	8005f2c <UART_SetConfig+0x348>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	d15b      	bne.n	8005fee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f36:	7ffb      	ldrb	r3, [r7, #31]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d828      	bhi.n	8005f8e <UART_SetConfig+0x3aa>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x360>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f8f 	.word	0x08005f8f
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f8f 	.word	0x08005f8f
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fe faa8 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8005f6c:	61b8      	str	r0, [r7, #24]
        break;
 8005f6e:	e013      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe fab8 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8005f74:	61b8      	str	r0, [r7, #24]
        break;
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b4b      	ldr	r3, [pc, #300]	; (80060a8 <UART_SetConfig+0x4c4>)
 8005f7a:	61bb      	str	r3, [r7, #24]
        break;
 8005f7c:	e00c      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fe f98b 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8005f82:	61b8      	str	r0, [r7, #24]
        break;
 8005f84:	e008      	b.n	8005f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8a:	61bb      	str	r3, [r7, #24]
        break;
 8005f8c:	e004      	b.n	8005f98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	77bb      	strb	r3, [r7, #30]
        break;
 8005f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d074      	beq.n	8006088 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	005a      	lsls	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	441a      	add	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d916      	bls.n	8005fe8 <UART_SetConfig+0x404>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d212      	bcs.n	8005fe8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f023 030f 	bic.w	r3, r3, #15
 8005fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	89fa      	ldrh	r2, [r7, #14]
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	e04f      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77bb      	strb	r3, [r7, #30]
 8005fec:	e04c      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fee:	7ffb      	ldrb	r3, [r7, #31]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d828      	bhi.n	8006046 <UART_SetConfig+0x462>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x418>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	08006047 	.word	0x08006047
 800600c:	08006037 	.word	0x08006037
 8006010:	08006047 	.word	0x08006047
 8006014:	08006047 	.word	0x08006047
 8006018:	08006047 	.word	0x08006047
 800601c:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fe fa4c 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8006024:	61b8      	str	r0, [r7, #24]
        break;
 8006026:	e013      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe fa5c 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 800602c:	61b8      	str	r0, [r7, #24]
        break;
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <UART_SetConfig+0x4c4>)
 8006032:	61bb      	str	r3, [r7, #24]
        break;
 8006034:	e00c      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe f92f 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 800603a:	61b8      	str	r0, [r7, #24]
        break;
 800603c:	e008      	b.n	8006050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	61bb      	str	r3, [r7, #24]
        break;
 8006044:	e004      	b.n	8006050 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	77bb      	strb	r3, [r7, #30]
        break;
 800604e:	bf00      	nop
    }

    if (pclk != 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	085a      	lsrs	r2, r3, #1
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b0f      	cmp	r3, #15
 800606e:	d909      	bls.n	8006084 <UART_SetConfig+0x4a0>
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d205      	bcs.n	8006084 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e001      	b.n	8006088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006094:	7fbb      	ldrb	r3, [r7, #30]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40007c00 	.word	0x40007c00
 80060a4:	40023800 	.word	0x40023800
 80060a8:	00f42400 	.word	0x00f42400

080060ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061aa:	d10a      	bne.n	80061c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006200:	f7fc fc5e 	bl	8002ac0 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d10e      	bne.n	8006232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f831 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e027      	b.n	8006282 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d10e      	bne.n	800625e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f81b 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e011      	b.n	8006282 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b09c      	sub	sp, #112	; 0x70
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e0a7      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	f000 80a3 	beq.w	80063ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fc fc0b 	bl	8002ac0 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
 80062b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d13f      	bne.n	800633c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	663b      	str	r3, [r7, #96]	; 0x60
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800630e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e068      	b.n	800640e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d050      	beq.n	80063ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006358:	d148      	bne.n	80063ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006362:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e6      	bne.n	8006364 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3308      	adds	r3, #8
 80063b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063b6:	623a      	str	r2, [r7, #32]
 80063b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69f9      	ldr	r1, [r7, #28]
 80063bc:	6a3a      	ldr	r2, [r7, #32]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e010      	b.n	800640e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4013      	ands	r3, r2
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	429a      	cmp	r2, r3
 8006408:	f43f af48 	beq.w	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3770      	adds	r7, #112	; 0x70
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006418:	b480      	push	{r7}
 800641a:	b097      	sub	sp, #92	; 0x5c
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644a:	d10e      	bne.n	800646a <UART_Start_Receive_IT+0x52>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <UART_Start_Receive_IT+0x48>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800645a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800645e:	e02d      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006468:	e028      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <UART_Start_Receive_IT+0x76>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <UART_Start_Receive_IT+0x6c>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006482:	e01b      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	227f      	movs	r2, #127	; 0x7f
 8006488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800648c:	e016      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006496:	d10d      	bne.n	80064b4 <UART_Start_Receive_IT+0x9c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <UART_Start_Receive_IT+0x92>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	227f      	movs	r2, #127	; 0x7f
 80064a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a8:	e008      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	223f      	movs	r2, #63	; 0x3f
 80064ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064b2:	e003      	b.n	80064bc <UART_Start_Receive_IT+0xa4>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2222      	movs	r2, #34	; 0x22
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	657b      	str	r3, [r7, #84]	; 0x54
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006508:	d107      	bne.n	800651a <UART_Start_Receive_IT+0x102>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <UART_Start_Receive_IT+0x184>)
 8006516:	669a      	str	r2, [r3, #104]	; 0x68
 8006518:	e002      	b.n	8006520 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <UART_Start_Receive_IT+0x188>)
 800651e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d019      	beq.n	800655c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	637b      	str	r3, [r7, #52]	; 0x34
 8006548:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800654c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_Start_Receive_IT+0x110>
 800655a:	e018      	b.n	800658e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	613b      	str	r3, [r7, #16]
   return(result);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f043 0320 	orr.w	r3, r3, #32
 8006570:	653b      	str	r3, [r7, #80]	; 0x50
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	69f9      	ldr	r1, [r7, #28]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	61bb      	str	r3, [r7, #24]
   return(result);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e6      	bne.n	800655c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	375c      	adds	r7, #92	; 0x5c
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	08006853 	.word	0x08006853
 80065a0:	080066ed 	.word	0x080066ed

080065a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b095      	sub	sp, #84	; 0x54
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ca:	643b      	str	r3, [r7, #64]	; 0x40
 80065cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e6      	bne.n	80065ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	2b01      	cmp	r3, #1
 8006618:	d118      	bne.n	800664c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60bb      	str	r3, [r7, #8]
   return(result);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6979      	ldr	r1, [r7, #20]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006660:	bf00      	nop
 8006662:	3754      	adds	r7, #84	; 0x54
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fa8a 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6979      	ldr	r1, [r7, #20]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	613b      	str	r3, [r7, #16]
   return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e6      	bne.n	80066a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fa4c 	bl	8005b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e4:	bf00      	nop
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b096      	sub	sp, #88	; 0x58
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006704:	2b22      	cmp	r3, #34	; 0x22
 8006706:	f040 8098 	bne.w	800683a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006714:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006718:	b2d9      	uxtb	r1, r3
 800671a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800671e:	b2da      	uxtb	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	400a      	ands	r2, r1
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d17b      	bne.n	800684a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006766:	653b      	str	r3, [r7, #80]	; 0x50
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006770:	647b      	str	r3, [r7, #68]	; 0x44
 8006772:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800677e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	623b      	str	r3, [r7, #32]
   return(result);
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f023 0301 	bic.w	r3, r3, #1
 800679a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a4:	633a      	str	r2, [r7, #48]	; 0x30
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d12e      	bne.n	8006832 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69b9      	ldr	r1, [r7, #24]
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	617b      	str	r3, [r7, #20]
   return(result);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e6      	bne.n	80067da <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d103      	bne.n	8006822 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2210      	movs	r2, #16
 8006820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff f9c4 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006830:	e00b      	b.n	800684a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff f9ac 	bl	8005b90 <HAL_UART_RxCpltCallback>
}
 8006838:	e007      	b.n	800684a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0208 	orr.w	r2, r2, #8
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	bf00      	nop
 800684c:	3758      	adds	r7, #88	; 0x58
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b096      	sub	sp, #88	; 0x58
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006860:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	2b22      	cmp	r3, #34	; 0x22
 800686c:	f040 8098 	bne.w	80069a0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006880:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006884:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006888:	4013      	ands	r3, r2
 800688a:	b29a      	uxth	r2, r3
 800688c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	1c9a      	adds	r2, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d17b      	bne.n	80069b0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40
 80068d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e6      	bne.n	80068b8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	64bb      	str	r3, [r7, #72]	; 0x48
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	2b01      	cmp	r3, #1
 8006938:	d12e      	bne.n	8006998 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	60bb      	str	r3, [r7, #8]
   return(result);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 0310 	bic.w	r3, r3, #16
 8006954:	647b      	str	r3, [r7, #68]	; 0x44
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e6      	bne.n	8006940 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b10      	cmp	r3, #16
 800697e:	d103      	bne.n	8006988 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2210      	movs	r2, #16
 8006986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff f911 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006996:	e00b      	b.n	80069b0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff f8f9 	bl	8005b90 <HAL_UART_RxCpltCallback>
}
 800699e:	e007      	b.n	80069b0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0208 	orr.w	r2, r2, #8
 80069ae:	619a      	str	r2, [r3, #24]
}
 80069b0:	bf00      	nop
 80069b2:	3758      	adds	r7, #88	; 0x58
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069b8:	b084      	sub	sp, #16
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	f107 001c 	add.w	r0, r7, #28
 80069c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d120      	bne.n	8006a12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	4b20      	ldr	r3, [pc, #128]	; (8006a64 <USB_CoreInit+0xac>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa96 	bl	8006f38 <USB_CoreReset>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	e010      	b.n	8006a34 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa8a 	bl	8006f38 <USB_CoreReset>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d10b      	bne.n	8006a52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f043 0206 	orr.w	r2, r3, #6
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a5e:	b004      	add	sp, #16
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	ffbdffbf 	.word	0xffbdffbf

08006a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f023 0201 	bic.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d115      	bne.n	8006ad8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f7fc f80d 	bl	8002ad8 <HAL_Delay>
      ms++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa29 	bl	8006f1c <USB_GetMode>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d01e      	beq.n	8006b0e <USB_SetCurrentMode+0x84>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b31      	cmp	r3, #49	; 0x31
 8006ad4:	d9f0      	bls.n	8006ab8 <USB_SetCurrentMode+0x2e>
 8006ad6:	e01a      	b.n	8006b0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d115      	bne.n	8006b0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aea:	2001      	movs	r0, #1
 8006aec:	f7fb fff4 	bl	8002ad8 <HAL_Delay>
      ms++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa10 	bl	8006f1c <USB_GetMode>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <USB_SetCurrentMode+0x84>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b31      	cmp	r3, #49	; 0x31
 8006b06:	d9f0      	bls.n	8006aea <USB_SetCurrentMode+0x60>
 8006b08:	e001      	b.n	8006b0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e005      	b.n	8006b1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b32      	cmp	r3, #50	; 0x32
 8006b12:	d101      	bne.n	8006b18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b24:	b084      	sub	sp, #16
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b086      	sub	sp, #24
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e009      	b.n	8006b58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3340      	adds	r3, #64	; 0x40
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	3301      	adds	r3, #1
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b0e      	cmp	r3, #14
 8006b5c:	d9f2      	bls.n	8006b44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11c      	bne.n	8006b9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b72:	f043 0302 	orr.w	r3, r3, #2
 8006b76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e005      	b.n	8006baa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	680b      	ldr	r3, [r1, #0]
 8006bc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d10c      	bne.n	8006bea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f965 	bl	8006ea8 <USB_SetDevSpeed>
 8006bde:	e008      	b.n	8006bf2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006be0:	2101      	movs	r1, #1
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f960 	bl	8006ea8 <USB_SetDevSpeed>
 8006be8:	e003      	b.n	8006bf2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bea:	2103      	movs	r1, #3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f95b 	bl	8006ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bf2:	2110      	movs	r1, #16
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f8f3 	bl	8006de0 <USB_FlushTxFifo>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f91f 	bl	8006e48 <USB_FlushRxFifo>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	461a      	mov	r2, r3
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c32:	461a      	mov	r2, r3
 8006c34:	2300      	movs	r3, #0
 8006c36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e043      	b.n	8006cc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c54:	d118      	bne.n	8006c88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e013      	b.n	8006c9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e008      	b.n	8006c9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	461a      	mov	r2, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d3b7      	bcc.n	8006c3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e043      	b.n	8006d5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cea:	d118      	bne.n	8006d1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e013      	b.n	8006d30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	461a      	mov	r2, r3
 8006d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e008      	b.n	8006d30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d3b7      	bcc.n	8006cd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f043 0210 	orr.w	r2, r3, #16
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <USB_DevInit+0x2b4>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d105      	bne.n	8006dc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <USB_DevInit+0x2b8>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dd4:	b004      	add	sp, #16
 8006dd6:	4770      	bx	lr
 8006dd8:	803c3800 	.word	0x803c3800
 8006ddc:	40000004 	.word	0x40000004

08006de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <USB_FlushTxFifo+0x64>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e01b      	b.n	8006e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	daf2      	bge.n	8006dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	019b      	lsls	r3, r3, #6
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a08      	ldr	r2, [pc, #32]	; (8006e44 <USB_FlushTxFifo+0x64>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d901      	bls.n	8006e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e006      	b.n	8006e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d0f0      	beq.n	8006e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	00030d40 	.word	0x00030d40

08006e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <USB_FlushRxFifo+0x5c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e018      	b.n	8006e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	daf2      	bge.n	8006e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2210      	movs	r2, #16
 8006e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <USB_FlushRxFifo+0x5c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e006      	b.n	8006e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d0f0      	beq.n	8006e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	00030d40 	.word	0x00030d40

08006ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ef4:	f023 0303 	bic.w	r3, r3, #3
 8006ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 0301 	and.w	r3, r3, #1
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_CoreReset+0x64>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d901      	bls.n	8006f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e01b      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	daf2      	bge.n	8006f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <USB_CoreReset+0x64>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d0f0      	beq.n	8006f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fb2:	2b84      	cmp	r3, #132	; 0x84
 8006fb4:	d005      	beq.n	8006fc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd6:	f3ef 8305 	mrs	r3, IPSR
 8006fda:	607b      	str	r3, [r7, #4]
  return(result);
 8006fdc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bf14      	ite	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	2300      	moveq	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ff8:	f001 f962 	bl	80082c0 <vTaskStartScheduler>
  
  return osOK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	bd80      	pop	{r7, pc}

08007002 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007004:	b089      	sub	sp, #36	; 0x24
 8007006:	af04      	add	r7, sp, #16
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d020      	beq.n	8007056 <osThreadCreate+0x54>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01c      	beq.n	8007056 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685c      	ldr	r4, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691e      	ldr	r6, [r3, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff ffb6 	bl	8006fa0 <makeFreeRtosPriority>
 8007034:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800703e:	9202      	str	r2, [sp, #8]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	9100      	str	r1, [sp, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	4632      	mov	r2, r6
 8007048:	4629      	mov	r1, r5
 800704a:	4620      	mov	r0, r4
 800704c:	f000 ff50 	bl	8007ef0 <xTaskCreateStatic>
 8007050:	4603      	mov	r3, r0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e01c      	b.n	8007090 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685c      	ldr	r4, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007062:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff ff98 	bl	8006fa0 <makeFreeRtosPriority>
 8007070:	4602      	mov	r2, r0
 8007072:	f107 030c 	add.w	r3, r7, #12
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	9200      	str	r2, [sp, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4632      	mov	r2, r6
 800707e:	4629      	mov	r1, r5
 8007080:	4620      	mov	r0, r4
 8007082:	f000 ff98 	bl	8007fb6 <xTaskCreate>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	e000      	b.n	8007092 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007090:	68fb      	ldr	r3, [r7, #12]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800709a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <osDelay+0x16>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	e000      	b.n	80070b2 <osDelay+0x18>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 f8ce 	bl	8008254 <vTaskDelay>
  
  return osOK;
 80070b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af02      	add	r7, sp, #8
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00f      	beq.n	80070f4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d10a      	bne.n	80070f0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2203      	movs	r2, #3
 80070e0:	9200      	str	r2, [sp, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	2001      	movs	r0, #1
 80070e8:	f000 f9c0 	bl	800746c <xQueueGenericCreateStatic>
 80070ec:	4603      	mov	r3, r0
 80070ee:	e016      	b.n	800711e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e014      	b.n	800711e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d110      	bne.n	800711c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80070fa:	2203      	movs	r2, #3
 80070fc:	2100      	movs	r1, #0
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 fa36 	bl	8007570 <xQueueGenericCreate>
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <osSemaphoreCreate+0x56>
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fa8e 	bl	8007634 <xQueueGenericSend>
      return sema;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e000      	b.n	800711e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800711c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007132:	2300      	movs	r3, #0
 8007134:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	e03a      	b.n	80071b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d103      	bne.n	8007154 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800714c:	f04f 33ff 	mov.w	r3, #4294967295
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e009      	b.n	8007168 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d006      	beq.n	8007168 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <osSemaphoreWait+0x40>
      ticks = 1;
 8007164:	2301      	movs	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007168:	f7ff ff32 	bl	8006fd0 <inHandlerMode>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	461a      	mov	r2, r3
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd0a 	bl	8007b94 <xQueueReceiveFromISR>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d001      	beq.n	800718a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007186:	23ff      	movs	r3, #255	; 0xff
 8007188:	e015      	b.n	80071b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d011      	beq.n	80071b4 <osSemaphoreWait+0x8c>
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <osSemaphoreWait+0x98>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	e008      	b.n	80071b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fbe1 	bl	800796c <xQueueSemaphoreTake>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80071b0:	23ff      	movs	r3, #255	; 0xff
 80071b2:	e000      	b.n	80071b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80071d4:	f7ff fefc 	bl	8006fd0 <inHandlerMode>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d016      	beq.n	800720c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb2b 	bl	8007840 <xQueueGiveFromISR>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d001      	beq.n	80071f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80071f0:	23ff      	movs	r3, #255	; 0xff
 80071f2:	e017      	b.n	8007224 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d013      	beq.n	8007222 <osSemaphoreRelease+0x5e>
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <osSemaphoreRelease+0x68>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	e00a      	b.n	8007222 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800720c:	2300      	movs	r3, #0
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa0e 	bl	8007634 <xQueueGenericSend>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800721e:	23ff      	movs	r3, #255	; 0xff
 8007220:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0208 	add.w	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f103 0208 	add.w	r2, r3, #8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f103 0208 	add.w	r2, r3, #8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d103      	bne.n	80072f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e00c      	b.n	800730c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3308      	adds	r3, #8
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	e002      	b.n	8007300 <vListInsert+0x2e>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	d2f6      	bcs.n	80072fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6892      	ldr	r2, [r2, #8]
 800735a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6852      	ldr	r2, [r2, #4]
 8007364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	429a      	cmp	r2, r3
 800736e:	d103      	bne.n	8007378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	1e5a      	subs	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	b672      	cpsid	i
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	b662      	cpsie	i
 80073c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80073c6:	f001 fef1 	bl	80091ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	441a      	add	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f6:	3b01      	subs	r3, #1
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	22ff      	movs	r2, #255	; 0xff
 8007412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d114      	bne.n	8007446 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01a      	beq.n	800745a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3310      	adds	r3, #16
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f9a7 	bl	800877c <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xQueueGenericReset+0xd0>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	e009      	b.n	800745a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3310      	adds	r3, #16
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fef0 	bl	8007230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3324      	adds	r3, #36	; 0x24
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff feeb 	bl	8007230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800745a:	f001 fedb 	bl	8009214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800745e:	2301      	movs	r3, #1
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08e      	sub	sp, #56	; 0x38
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <xQueueGenericCreateStatic+0x5a>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <xQueueGenericCreateStatic+0x5e>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericCreateStatic+0x60>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	b672      	cpsid	i
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	b662      	cpsie	i
 80074e4:	623b      	str	r3, [r7, #32]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <xQueueGenericCreateStatic+0x8a>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <xQueueGenericCreateStatic+0x8e>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <xQueueGenericCreateStatic+0x90>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10c      	bne.n	800751a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	61fb      	str	r3, [r7, #28]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800751a:	2348      	movs	r3, #72	; 0x48
 800751c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b48      	cmp	r3, #72	; 0x48
 8007522:	d00c      	beq.n	800753e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	b672      	cpsid	i
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	b662      	cpsie	i
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800753e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007552:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f847 	bl	80075f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	; 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10c      	bne.n	800759e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	613b      	str	r3, [r7, #16]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	e004      	b.n	80075b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3348      	adds	r3, #72	; 0x48
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 ff23 	bl	8009404 <pvPortMalloc>
 80075be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d011      	beq.n	80075ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	3348      	adds	r3, #72	; 0x48
 80075ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075d8:	79fa      	ldrb	r2, [r7, #7]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f805 	bl	80075f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075ea:	69bb      	ldr	r3, [r7, #24]
	}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007622:	2101      	movs	r1, #1
 8007624:	69b8      	ldr	r0, [r7, #24]
 8007626:	f7ff feb7 	bl	8007398 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10c      	bne.n	800766a <xQueueGenericSend+0x36>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	b672      	cpsid	i
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	b662      	cpsie	i
 8007664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <xQueueGenericSend+0x44>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <xQueueGenericSend+0x48>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <xQueueGenericSend+0x4a>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10c      	bne.n	800769c <xQueueGenericSend+0x68>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	b672      	cpsid	i
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	b662      	cpsie	i
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d103      	bne.n	80076aa <xQueueGenericSend+0x76>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <xQueueGenericSend+0x7a>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueueGenericSend+0x7c>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10c      	bne.n	80076ce <xQueueGenericSend+0x9a>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	b672      	cpsid	i
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	b662      	cpsie	i
 80076c8:	623b      	str	r3, [r7, #32]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ce:	f001 fa1d 	bl	8008b0c <xTaskGetSchedulerState>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <xQueueGenericSend+0xaa>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xQueueGenericSend+0xae>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <xQueueGenericSend+0xb0>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <xQueueGenericSend+0xce>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	61fb      	str	r3, [r7, #28]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007702:	f001 fd53 	bl	80091ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	429a      	cmp	r2, r3
 8007710:	d302      	bcc.n	8007718 <xQueueGenericSend+0xe4>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d129      	bne.n	800776c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800771e:	f000 fad7 	bl	8007cd0 <prvCopyDataToQueue>
 8007722:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d010      	beq.n	800774e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	3324      	adds	r3, #36	; 0x24
 8007730:	4618      	mov	r0, r3
 8007732:	f001 f823 	bl	800877c <xTaskRemoveFromEventList>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800773c:	4b3f      	ldr	r3, [pc, #252]	; (800783c <xQueueGenericSend+0x208>)
 800773e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	e00a      	b.n	8007764 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007754:	4b39      	ldr	r3, [pc, #228]	; (800783c <xQueueGenericSend+0x208>)
 8007756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007764:	f001 fd56 	bl	8009214 <vPortExitCritical>
				return pdPASS;
 8007768:	2301      	movs	r3, #1
 800776a:	e063      	b.n	8007834 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007772:	f001 fd4f 	bl	8009214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007776:	2300      	movs	r3, #0
 8007778:	e05c      	b.n	8007834 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f85d 	bl	8008844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800778e:	f001 fd41 	bl	8009214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007792:	f000 fe03 	bl	800839c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007796:	f001 fd09 	bl	80091ac <vPortEnterCritical>
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d103      	bne.n	80077b0 <xQueueGenericSend+0x17c>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b6:	b25b      	sxtb	r3, r3
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d103      	bne.n	80077c6 <xQueueGenericSend+0x192>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c6:	f001 fd25 	bl	8009214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ca:	1d3a      	adds	r2, r7, #4
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	4611      	mov	r1, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 f84c 	bl	8008870 <xTaskCheckForTimeOut>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d124      	bne.n	8007828 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077e0:	f000 fb6e 	bl	8007ec0 <prvIsQueueFull>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d018      	beq.n	800781c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	3310      	adds	r3, #16
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ff9c 	bl	8008730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077fa:	f000 faf9 	bl	8007df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077fe:	f000 fddb 	bl	80083b8 <xTaskResumeAll>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	f47f af7c 	bne.w	8007702 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800780a:	4b0c      	ldr	r3, [pc, #48]	; (800783c <xQueueGenericSend+0x208>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	e772      	b.n	8007702 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800781c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800781e:	f000 fae7 	bl	8007df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007822:	f000 fdc9 	bl	80083b8 <xTaskResumeAll>
 8007826:	e76c      	b.n	8007702 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782a:	f000 fae1 	bl	8007df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800782e:	f000 fdc3 	bl	80083b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007832:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007834:	4618      	mov	r0, r3
 8007836:	3738      	adds	r7, #56	; 0x38
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10c      	bne.n	800786e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	b672      	cpsid	i
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	b662      	cpsie	i
 8007868:	623b      	str	r3, [r7, #32]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	b672      	cpsid	i
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	b662      	cpsie	i
 800788a:	61fb      	str	r3, [r7, #28]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <xQueueGiveFromISR+0x60>
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <xQueueGiveFromISR+0x64>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <xQueueGiveFromISR+0x66>
 80078a4:	2300      	movs	r3, #0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	b672      	cpsid	i
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	b662      	cpsie	i
 80078be:	61bb      	str	r3, [r7, #24]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078c4:	f001 fd5a 	bl	800937c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078c8:	f3ef 8211 	mrs	r2, BASEPRI
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	617a      	str	r2, [r7, #20]
 80078e2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d22b      	bcs.n	8007950 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800790a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d112      	bne.n	800793a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d016      	beq.n	800794a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	3324      	adds	r3, #36	; 0x24
 8007920:	4618      	mov	r0, r3
 8007922:	f000 ff2b 	bl	800877c <xTaskRemoveFromEventList>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00e      	beq.n	800794a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e007      	b.n	800794a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800793a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800793e:	3301      	adds	r3, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	b25a      	sxtb	r2, r3
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800794a:	2301      	movs	r3, #1
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
 800794e:	e001      	b.n	8007954 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007950:	2300      	movs	r3, #0
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800795e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007962:	4618      	mov	r0, r3
 8007964:	3738      	adds	r7, #56	; 0x38
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08e      	sub	sp, #56	; 0x38
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10c      	bne.n	80079a2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	623b      	str	r3, [r7, #32]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	61fb      	str	r3, [r7, #28]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c4:	f001 f8a2 	bl	8008b0c <xTaskGetSchedulerState>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <xQueueSemaphoreTake+0x68>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <xQueueSemaphoreTake+0x6c>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <xQueueSemaphoreTake+0x6e>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	b672      	cpsid	i
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	b662      	cpsie	i
 80079f2:	61bb      	str	r3, [r7, #24]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f8:	f001 fbd8 	bl	80091ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d024      	beq.n	8007a52 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a18:	f001 fa3e 	bl	8008e98 <pvTaskIncrementMutexHeldCount>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00f      	beq.n	8007a4a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fea4 	bl	800877c <xTaskRemoveFromEventList>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a3a:	4b55      	ldr	r3, [pc, #340]	; (8007b90 <xQueueSemaphoreTake+0x224>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a4a:	f001 fbe3 	bl	8009214 <vPortExitCritical>
				return pdPASS;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e099      	b.n	8007b86 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d113      	bne.n	8007a80 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	b672      	cpsid	i
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	b662      	cpsie	i
 8007a72:	617b      	str	r3, [r7, #20]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a78:	f001 fbcc 	bl	8009214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e082      	b.n	8007b86 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 feda 	bl	8008844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a94:	f001 fbbe 	bl	8009214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a98:	f000 fc80 	bl	800839c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9c:	f001 fb86 	bl	80091ac <vPortEnterCritical>
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <xQueueSemaphoreTake+0x14a>
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d103      	bne.n	8007acc <xQueueSemaphoreTake+0x160>
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007acc:	f001 fba2 	bl	8009214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad0:	463a      	mov	r2, r7
 8007ad2:	f107 030c 	add.w	r3, r7, #12
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fec9 	bl	8008870 <xTaskCheckForTimeOut>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d132      	bne.n	8007b4a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ae6:	f000 f9d5 	bl	8007e94 <prvIsQueueEmpty>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d026      	beq.n	8007b3e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007af8:	f001 fb58 	bl	80091ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 f821 	bl	8008b48 <xTaskPriorityInherit>
 8007b06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b08:	f001 fb84 	bl	8009214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	3324      	adds	r3, #36	; 0x24
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fe0b 	bl	8008730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1c:	f000 f968 	bl	8007df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b20:	f000 fc4a 	bl	80083b8 <xTaskResumeAll>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f af66 	bne.w	80079f8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b2c:	4b18      	ldr	r3, [pc, #96]	; (8007b90 <xQueueSemaphoreTake+0x224>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	e75c      	b.n	80079f8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b40:	f000 f956 	bl	8007df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b44:	f000 fc38 	bl	80083b8 <xTaskResumeAll>
 8007b48:	e756      	b.n	80079f8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b4c:	f000 f950 	bl	8007df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b50:	f000 fc32 	bl	80083b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b56:	f000 f99d 	bl	8007e94 <prvIsQueueEmpty>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f43f af4b 	beq.w	80079f8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b68:	f001 fb20 	bl	80091ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b6e:	f000 f897 	bl	8007ca0 <prvGetDisinheritPriorityAfterTimeout>
 8007b72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 f8ee 	bl	8008d5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b80:	f001 fb48 	bl	8009214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3738      	adds	r7, #56	; 0x38
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08e      	sub	sp, #56	; 0x38
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10c      	bne.n	8007bc4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	b672      	cpsid	i
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	b662      	cpsie	i
 8007bbe:	623b      	str	r3, [r7, #32]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <xQueueReceiveFromISR+0x3e>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <xQueueReceiveFromISR+0x42>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <xQueueReceiveFromISR+0x44>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10c      	bne.n	8007bf6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	b672      	cpsid	i
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	b662      	cpsie	i
 8007bf0:	61fb      	str	r3, [r7, #28]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bf6:	f001 fbc1 	bl	800937c <vPortValidateInterruptPriority>
	__asm volatile
 8007bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	b672      	cpsid	i
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	b662      	cpsie	i
 8007c12:	61ba      	str	r2, [r7, #24]
 8007c14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d02f      	beq.n	8007c86 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c34:	f000 f8b6 	bl	8007da4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d112      	bne.n	8007c70 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	3310      	adds	r3, #16
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fd90 	bl	800877c <xTaskRemoveFromEventList>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00e      	beq.n	8007c80 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e007      	b.n	8007c80 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c74:	3301      	adds	r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	b25a      	sxtb	r2, r3
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c80:	2301      	movs	r3, #1
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	e001      	b.n	8007c8a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f383 8811 	msr	BASEPRI, r3
}
 8007c94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3738      	adds	r7, #56	; 0x38
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d006      	beq.n	8007cbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1c3 0307 	rsb	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	e001      	b.n	8007cc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10d      	bne.n	8007d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d14d      	bne.n	8007d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 ffa4 	bl	8008c48 <xTaskPriorityDisinherit>
 8007d00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	609a      	str	r2, [r3, #8]
 8007d08:	e043      	b.n	8007d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d119      	bne.n	8007d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6858      	ldr	r0, [r3, #4]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	f002 f880 	bl	8009e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d32b      	bcc.n	8007d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	e026      	b.n	8007d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68d8      	ldr	r0, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	f002 f866 	bl	8009e20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	425b      	negs	r3, r3
 8007d5e:	441a      	add	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d207      	bcs.n	8007d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	425b      	negs	r3, r3
 8007d7a:	441a      	add	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d105      	bne.n	8007d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d9a:	697b      	ldr	r3, [r7, #20]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d018      	beq.n	8007de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	441a      	add	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d303      	bcc.n	8007dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68d9      	ldr	r1, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	461a      	mov	r2, r3
 8007de2:	6838      	ldr	r0, [r7, #0]
 8007de4:	f002 f81c 	bl	8009e20 <memcpy>
	}
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007df8:	f001 f9d8 	bl	80091ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e04:	e011      	b.n	8007e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d012      	beq.n	8007e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3324      	adds	r3, #36	; 0x24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fcb2 	bl	800877c <xTaskRemoveFromEventList>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e1e:	f000 fd8d 	bl	800893c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dce9      	bgt.n	8007e06 <prvUnlockQueue+0x16>
 8007e32:	e000      	b.n	8007e36 <prvUnlockQueue+0x46>
					break;
 8007e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	22ff      	movs	r2, #255	; 0xff
 8007e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e3e:	f001 f9e9 	bl	8009214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e42:	f001 f9b3 	bl	80091ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e4e:	e011      	b.n	8007e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3310      	adds	r3, #16
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fc8d 	bl	800877c <xTaskRemoveFromEventList>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e68:	f000 fd68 	bl	800893c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dce9      	bgt.n	8007e50 <prvUnlockQueue+0x60>
 8007e7c:	e000      	b.n	8007e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	22ff      	movs	r2, #255	; 0xff
 8007e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e88:	f001 f9c4 	bl	8009214 <vPortExitCritical>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e9c:	f001 f986 	bl	80091ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e001      	b.n	8007eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eb2:	f001 f9af 	bl	8009214 <vPortExitCritical>

	return xReturn;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ec8:	f001 f970 	bl	80091ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d102      	bne.n	8007ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e001      	b.n	8007ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ee2:	f001 f997 	bl	8009214 <vPortExitCritical>

	return xReturn;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08e      	sub	sp, #56	; 0x38
 8007ef4:	af04      	add	r7, sp, #16
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10c      	bne.n	8007f1e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	b672      	cpsid	i
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	b662      	cpsie	i
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10c      	bne.n	8007f3e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	61fb      	str	r3, [r7, #28]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f3e:	23a0      	movs	r3, #160	; 0xa0
 8007f40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2ba0      	cmp	r3, #160	; 0xa0
 8007f46:	d00c      	beq.n	8007f62 <xTaskCreateStatic+0x72>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	b672      	cpsid	i
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	b662      	cpsie	i
 8007f5c:	61bb      	str	r3, [r7, #24]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01e      	beq.n	8007fa8 <xTaskCreateStatic+0xb8>
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01b      	beq.n	8007fa8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f82:	2300      	movs	r3, #0
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	9302      	str	r3, [sp, #8]
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f850 	bl	8008040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa2:	f000 f8ed 	bl	8008180 <prvAddNewTaskToReadyList>
 8007fa6:	e001      	b.n	8007fac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fac:	697b      	ldr	r3, [r7, #20]
	}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	; 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b08c      	sub	sp, #48	; 0x30
 8007fba:	af04      	add	r7, sp, #16
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 fa1a 	bl	8009404 <pvPortMalloc>
 8007fd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fd8:	20a0      	movs	r0, #160	; 0xa0
 8007fda:	f001 fa13 	bl	8009404 <pvPortMalloc>
 8007fde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	631a      	str	r2, [r3, #48]	; 0x30
 8007fec:	e005      	b.n	8007ffa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fee:	6978      	ldr	r0, [r7, #20]
 8007ff0:	f001 fad2 	bl	8009598 <vPortFree>
 8007ff4:	e001      	b.n	8007ffa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d017      	beq.n	8008030 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	2300      	movs	r3, #0
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	9302      	str	r3, [sp, #8]
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f80e 	bl	8008040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008024:	69f8      	ldr	r0, [r7, #28]
 8008026:	f000 f8ab 	bl	8008180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800802a:	2301      	movs	r3, #1
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	e002      	b.n	8008036 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008036:	69bb      	ldr	r3, [r7, #24]
	}
 8008038:	4618      	mov	r0, r3
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008058:	440b      	add	r3, r1
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00c      	beq.n	800808c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	617b      	str	r3, [r7, #20]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01f      	beq.n	80080d2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	e012      	b.n	80080be <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	7819      	ldrb	r1, [r3, #0]
 80080a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	3334      	adds	r3, #52	; 0x34
 80080a8:	460a      	mov	r2, r1
 80080aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d006      	beq.n	80080c6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2b0f      	cmp	r3, #15
 80080c2:	d9e9      	bls.n	8008098 <prvInitialiseNewTask+0x58>
 80080c4:	e000      	b.n	80080c8 <prvInitialiseNewTask+0x88>
			{
				break;
 80080c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d0:	e003      	b.n	80080da <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	2b06      	cmp	r3, #6
 80080de:	d901      	bls.n	80080e4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080e0:	2306      	movs	r3, #6
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	2200      	movs	r2, #0
 80080f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff f8b8 	bl	8007270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	3318      	adds	r3, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff f8b3 	bl	8007270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f1c3 0207 	rsb	r2, r3, #7
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2200      	movs	r2, #0
 800812c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	334c      	adds	r3, #76	; 0x4c
 8008134:	224c      	movs	r2, #76	; 0x4c
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fd1a 	bl	8009b72 <memset>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <prvInitialiseNewTask+0x134>)
 8008142:	651a      	str	r2, [r3, #80]	; 0x50
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <prvInitialiseNewTask+0x138>)
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	4a0b      	ldr	r2, [pc, #44]	; (800817c <prvInitialiseNewTask+0x13c>)
 800814e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	69b8      	ldr	r0, [r7, #24]
 8008156:	f000 ff19 	bl	8008f8c <pxPortInitialiseStack>
 800815a:	4602      	mov	r2, r0
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800816c:	bf00      	nop
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	200051d8 	.word	0x200051d8
 8008178:	20005240 	.word	0x20005240
 800817c:	200052a8 	.word	0x200052a8

08008180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008188:	f001 f810 	bl	80091ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800818c:	4b2a      	ldr	r3, [pc, #168]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a29      	ldr	r2, [pc, #164]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 8008194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800819e:	4a27      	ldr	r2, [pc, #156]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <prvAddNewTaskToReadyList+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d110      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081ac:	f000 fbea 	bl	8008984 <prvInitialiseTaskLists>
 80081b0:	e00d      	b.n	80081ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081b2:	4b23      	ldr	r3, [pc, #140]	; (8008240 <prvAddNewTaskToReadyList+0xc0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ba:	4b20      	ldr	r3, [pc, #128]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d802      	bhi.n	80081ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c8:	4a1c      	ldr	r2, [pc, #112]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 80081d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	2201      	movs	r2, #1
 80081de:	409a      	lsls	r2, r3
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <prvAddNewTaskToReadyList+0xcc>)
 80081f8:	441a      	add	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7ff f842 	bl	800728a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008206:	f001 f805 	bl	8009214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <prvAddNewTaskToReadyList+0xc0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <prvAddNewTaskToReadyList+0xbc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	429a      	cmp	r2, r3
 800821e:	d207      	bcs.n	8008230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <prvAddNewTaskToReadyList+0xd0>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	2000158c 	.word	0x2000158c
 800823c:	2000148c 	.word	0x2000148c
 8008240:	20001598 	.word	0x20001598
 8008244:	200015a8 	.word	0x200015a8
 8008248:	20001594 	.word	0x20001594
 800824c:	20001490 	.word	0x20001490
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d019      	beq.n	800829a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <vTaskDelay+0x64>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <vTaskDelay+0x34>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	60bb      	str	r3, [r7, #8]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008288:	f000 f888 	bl	800839c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fe16 	bl	8008ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008294:	f000 f890 	bl	80083b8 <xTaskResumeAll>
 8008298:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <vTaskDelay+0x68>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200015b4 	.word	0x200015b4
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ce:	463a      	mov	r2, r7
 80082d0:	1d39      	adds	r1, r7, #4
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f9 fe7c 	bl	8001fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	9202      	str	r2, [sp, #8]
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2300      	movs	r3, #0
 80082ec:	460a      	mov	r2, r1
 80082ee:	4923      	ldr	r1, [pc, #140]	; (800837c <vTaskStartScheduler+0xbc>)
 80082f0:	4823      	ldr	r0, [pc, #140]	; (8008380 <vTaskStartScheduler+0xc0>)
 80082f2:	f7ff fdfd 	bl	8007ef0 <xTaskCreateStatic>
 80082f6:	4603      	mov	r3, r0
 80082f8:	4a22      	ldr	r2, [pc, #136]	; (8008384 <vTaskStartScheduler+0xc4>)
 80082fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082fc:	4b21      	ldr	r3, [pc, #132]	; (8008384 <vTaskStartScheduler+0xc4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008304:	2301      	movs	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e001      	b.n	800830e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11d      	bne.n	8008350 <vTaskStartScheduler+0x90>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	b672      	cpsid	i
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	b662      	cpsie	i
 8008328:	613b      	str	r3, [r7, #16]
}
 800832a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <vTaskStartScheduler+0xc8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	334c      	adds	r3, #76	; 0x4c
 8008332:	4a16      	ldr	r2, [pc, #88]	; (800838c <vTaskStartScheduler+0xcc>)
 8008334:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008336:	4b16      	ldr	r3, [pc, #88]	; (8008390 <vTaskStartScheduler+0xd0>)
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800833e:	4b15      	ldr	r3, [pc, #84]	; (8008394 <vTaskStartScheduler+0xd4>)
 8008340:	2201      	movs	r2, #1
 8008342:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <vTaskStartScheduler+0xd8>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800834a:	f000 feb1 	bl	80090b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800834e:	e010      	b.n	8008372 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d10c      	bne.n	8008372 <vTaskStartScheduler+0xb2>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vTaskStartScheduler+0xb0>
}
 8008372:	bf00      	nop
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	0800ba48 	.word	0x0800ba48
 8008380:	08008955 	.word	0x08008955
 8008384:	200015b0 	.word	0x200015b0
 8008388:	2000148c 	.word	0x2000148c
 800838c:	20000068 	.word	0x20000068
 8008390:	200015ac 	.word	0x200015ac
 8008394:	20001598 	.word	0x20001598
 8008398:	20001590 	.word	0x20001590

0800839c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <vTaskSuspendAll+0x18>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	4a03      	ldr	r2, [pc, #12]	; (80083b4 <vTaskSuspendAll+0x18>)
 80083a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083aa:	bf00      	nop
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	200015b4 	.word	0x200015b4

080083b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083c6:	4b42      	ldr	r3, [pc, #264]	; (80084d0 <xTaskResumeAll+0x118>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10c      	bne.n	80083e8 <xTaskResumeAll+0x30>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	603b      	str	r3, [r7, #0]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083e8:	f000 fee0 	bl	80091ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083ec:	4b38      	ldr	r3, [pc, #224]	; (80084d0 <xTaskResumeAll+0x118>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	4a37      	ldr	r2, [pc, #220]	; (80084d0 <xTaskResumeAll+0x118>)
 80083f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f6:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <xTaskResumeAll+0x118>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d161      	bne.n	80084c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083fe:	4b35      	ldr	r3, [pc, #212]	; (80084d4 <xTaskResumeAll+0x11c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d05d      	beq.n	80084c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008406:	e02e      	b.n	8008466 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008408:	4b33      	ldr	r3, [pc, #204]	; (80084d8 <xTaskResumeAll+0x120>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3318      	adds	r3, #24
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe ff95 	bl	8007344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3304      	adds	r3, #4
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe ff90 	bl	8007344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2201      	movs	r2, #1
 800842a:	409a      	lsls	r2, r3
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <xTaskResumeAll+0x124>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <xTaskResumeAll+0x124>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a27      	ldr	r2, [pc, #156]	; (80084e0 <xTaskResumeAll+0x128>)
 8008444:	441a      	add	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fe ff1c 	bl	800728a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <xTaskResumeAll+0x12c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	429a      	cmp	r2, r3
 800845e:	d302      	bcc.n	8008466 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008460:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <xTaskResumeAll+0x130>)
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008466:	4b1c      	ldr	r3, [pc, #112]	; (80084d8 <xTaskResumeAll+0x120>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1cc      	bne.n	8008408 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008474:	f000 fb2a 	bl	8008acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008478:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <xTaskResumeAll+0x134>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d010      	beq.n	80084a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008484:	f000 f836 	bl	80084f4 <xTaskIncrementTick>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <xTaskResumeAll+0x130>)
 8008490:	2201      	movs	r2, #1
 8008492:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3b01      	subs	r3, #1
 8008498:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f1      	bne.n	8008484 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <xTaskResumeAll+0x134>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <xTaskResumeAll+0x130>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ae:	2301      	movs	r3, #1
 80084b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <xTaskResumeAll+0x138>)
 80084b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084c2:	f000 fea7 	bl	8009214 <vPortExitCritical>

	return xAlreadyYielded;
 80084c6:	68bb      	ldr	r3, [r7, #8]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	200015b4 	.word	0x200015b4
 80084d4:	2000158c 	.word	0x2000158c
 80084d8:	2000154c 	.word	0x2000154c
 80084dc:	20001594 	.word	0x20001594
 80084e0:	20001490 	.word	0x20001490
 80084e4:	2000148c 	.word	0x2000148c
 80084e8:	200015a0 	.word	0x200015a0
 80084ec:	2000159c 	.word	0x2000159c
 80084f0:	e000ed04 	.word	0xe000ed04

080084f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084fe:	4b4f      	ldr	r3, [pc, #316]	; (800863c <xTaskIncrementTick+0x148>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 808a 	bne.w	800861c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008508:	4b4d      	ldr	r3, [pc, #308]	; (8008640 <xTaskIncrementTick+0x14c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3301      	adds	r3, #1
 800850e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008510:	4a4b      	ldr	r2, [pc, #300]	; (8008640 <xTaskIncrementTick+0x14c>)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d122      	bne.n	8008562 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800851c:	4b49      	ldr	r3, [pc, #292]	; (8008644 <xTaskIncrementTick+0x150>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	b672      	cpsid	i
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	b662      	cpsie	i
 800853a:	603b      	str	r3, [r7, #0]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <xTaskIncrementTick+0x4a>
 8008540:	4b40      	ldr	r3, [pc, #256]	; (8008644 <xTaskIncrementTick+0x150>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	4b40      	ldr	r3, [pc, #256]	; (8008648 <xTaskIncrementTick+0x154>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3e      	ldr	r2, [pc, #248]	; (8008644 <xTaskIncrementTick+0x150>)
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	4a3e      	ldr	r2, [pc, #248]	; (8008648 <xTaskIncrementTick+0x154>)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	4b3d      	ldr	r3, [pc, #244]	; (800864c <xTaskIncrementTick+0x158>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	4a3c      	ldr	r2, [pc, #240]	; (800864c <xTaskIncrementTick+0x158>)
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	f000 fab5 	bl	8008acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008562:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <xTaskIncrementTick+0x15c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	429a      	cmp	r2, r3
 800856a:	d348      	bcc.n	80085fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800856c:	4b35      	ldr	r3, [pc, #212]	; (8008644 <xTaskIncrementTick+0x150>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008576:	4b36      	ldr	r3, [pc, #216]	; (8008650 <xTaskIncrementTick+0x15c>)
 8008578:	f04f 32ff 	mov.w	r2, #4294967295
 800857c:	601a      	str	r2, [r3, #0]
					break;
 800857e:	e03e      	b.n	80085fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008580:	4b30      	ldr	r3, [pc, #192]	; (8008644 <xTaskIncrementTick+0x150>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d203      	bcs.n	80085a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008598:	4a2d      	ldr	r2, [pc, #180]	; (8008650 <xTaskIncrementTick+0x15c>)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800859e:	e02e      	b.n	80085fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fecd 	bl	8007344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	3318      	adds	r3, #24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fec4 	bl	8007344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	2201      	movs	r2, #1
 80085c2:	409a      	lsls	r2, r3
 80085c4:	4b23      	ldr	r3, [pc, #140]	; (8008654 <xTaskIncrementTick+0x160>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	4a22      	ldr	r2, [pc, #136]	; (8008654 <xTaskIncrementTick+0x160>)
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <xTaskIncrementTick+0x164>)
 80085dc:	441a      	add	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7fe fe50 	bl	800728a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ee:	4b1b      	ldr	r3, [pc, #108]	; (800865c <xTaskIncrementTick+0x168>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d3b9      	bcc.n	800856c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fc:	e7b6      	b.n	800856c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085fe:	4b17      	ldr	r3, [pc, #92]	; (800865c <xTaskIncrementTick+0x168>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008604:	4914      	ldr	r1, [pc, #80]	; (8008658 <xTaskIncrementTick+0x164>)
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d907      	bls.n	8008626 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008616:	2301      	movs	r3, #1
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e004      	b.n	8008626 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800861c:	4b10      	ldr	r3, [pc, #64]	; (8008660 <xTaskIncrementTick+0x16c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	4a0f      	ldr	r2, [pc, #60]	; (8008660 <xTaskIncrementTick+0x16c>)
 8008624:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <xTaskIncrementTick+0x170>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008632:	697b      	ldr	r3, [r7, #20]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200015b4 	.word	0x200015b4
 8008640:	20001590 	.word	0x20001590
 8008644:	20001544 	.word	0x20001544
 8008648:	20001548 	.word	0x20001548
 800864c:	200015a4 	.word	0x200015a4
 8008650:	200015ac 	.word	0x200015ac
 8008654:	20001594 	.word	0x20001594
 8008658:	20001490 	.word	0x20001490
 800865c:	2000148c 	.word	0x2000148c
 8008660:	2000159c 	.word	0x2000159c
 8008664:	200015a0 	.word	0x200015a0

08008668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800866e:	4b2a      	ldr	r3, [pc, #168]	; (8008718 <vTaskSwitchContext+0xb0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008676:	4b29      	ldr	r3, [pc, #164]	; (800871c <vTaskSwitchContext+0xb4>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800867c:	e046      	b.n	800870c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800867e:	4b27      	ldr	r3, [pc, #156]	; (800871c <vTaskSwitchContext+0xb4>)
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008684:	4b26      	ldr	r3, [pc, #152]	; (8008720 <vTaskSwitchContext+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	fab3 f383 	clz	r3, r3
 8008690:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	f1c3 031f 	rsb	r3, r3, #31
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	4922      	ldr	r1, [pc, #136]	; (8008724 <vTaskSwitchContext+0xbc>)
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10c      	bne.n	80086c8 <vTaskSwitchContext+0x60>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	b672      	cpsid	i
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	b662      	cpsie	i
 80086c2:	607b      	str	r3, [r7, #4]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <vTaskSwitchContext+0x5e>
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4a14      	ldr	r2, [pc, #80]	; (8008724 <vTaskSwitchContext+0xbc>)
 80086d4:	4413      	add	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	3308      	adds	r3, #8
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d104      	bne.n	80086f8 <vTaskSwitchContext+0x90>
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	605a      	str	r2, [r3, #4]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <vTaskSwitchContext+0xc0>)
 8008700:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <vTaskSwitchContext+0xc0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	334c      	adds	r3, #76	; 0x4c
 8008708:	4a08      	ldr	r2, [pc, #32]	; (800872c <vTaskSwitchContext+0xc4>)
 800870a:	6013      	str	r3, [r2, #0]
}
 800870c:	bf00      	nop
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	200015b4 	.word	0x200015b4
 800871c:	200015a0 	.word	0x200015a0
 8008720:	20001594 	.word	0x20001594
 8008724:	20001490 	.word	0x20001490
 8008728:	2000148c 	.word	0x2000148c
 800872c:	20000068 	.word	0x20000068

08008730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10c      	bne.n	800875a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	60fb      	str	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <vTaskPlaceOnEventList+0x48>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3318      	adds	r3, #24
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fe fdb5 	bl	80072d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008768:	2101      	movs	r1, #1
 800876a:	6838      	ldr	r0, [r7, #0]
 800876c:	f000 fba8 	bl	8008ec0 <prvAddCurrentTaskToDelayedList>
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	2000148c 	.word	0x2000148c

0800877c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	3318      	adds	r3, #24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fdc7 	bl	8007344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b6:	4b1d      	ldr	r3, [pc, #116]	; (800882c <xTaskRemoveFromEventList+0xb0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d11c      	bne.n	80087f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fdbe 	bl	8007344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	2201      	movs	r2, #1
 80087ce:	409a      	lsls	r2, r3
 80087d0:	4b17      	ldr	r3, [pc, #92]	; (8008830 <xTaskRemoveFromEventList+0xb4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	4a16      	ldr	r2, [pc, #88]	; (8008830 <xTaskRemoveFromEventList+0xb4>)
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4a13      	ldr	r2, [pc, #76]	; (8008834 <xTaskRemoveFromEventList+0xb8>)
 80087e8:	441a      	add	r2, r3
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f7fe fd4a 	bl	800728a <vListInsertEnd>
 80087f6:	e005      	b.n	8008804 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4619      	mov	r1, r3
 80087fe:	480e      	ldr	r0, [pc, #56]	; (8008838 <xTaskRemoveFromEventList+0xbc>)
 8008800:	f7fe fd43 	bl	800728a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <xTaskRemoveFromEventList+0xc0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	429a      	cmp	r2, r3
 8008810:	d905      	bls.n	800881e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008816:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <xTaskRemoveFromEventList+0xc4>)
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e001      	b.n	8008822 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008822:	697b      	ldr	r3, [r7, #20]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200015b4 	.word	0x200015b4
 8008830:	20001594 	.word	0x20001594
 8008834:	20001490 	.word	0x20001490
 8008838:	2000154c 	.word	0x2000154c
 800883c:	2000148c 	.word	0x2000148c
 8008840:	200015a0 	.word	0x200015a0

08008844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vTaskInternalSetTimeOutState+0x24>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <vTaskInternalSetTimeOutState+0x28>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	605a      	str	r2, [r3, #4]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	200015a4 	.word	0x200015a4
 800886c:	20001590 	.word	0x20001590

08008870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10c      	bne.n	800889a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	b672      	cpsid	i
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	b662      	cpsie	i
 8008894:	613b      	str	r3, [r7, #16]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	b672      	cpsid	i
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	b662      	cpsie	i
 80088b4:	60fb      	str	r3, [r7, #12]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80088ba:	f000 fc77 	bl	80091ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088be:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <xTaskCheckForTimeOut+0xc4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d102      	bne.n	80088de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e023      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <xTaskCheckForTimeOut+0xc8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d007      	beq.n	80088fa <xTaskCheckForTimeOut+0x8a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d302      	bcc.n	80088fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	e015      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	429a      	cmp	r2, r3
 8008902:	d20b      	bcs.n	800891c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff97 	bl	8008844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	e004      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008926:	f000 fc75 	bl	8009214 <vPortExitCritical>

	return xReturn;
 800892a:	69fb      	ldr	r3, [r7, #28]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20001590 	.word	0x20001590
 8008938:	200015a4 	.word	0x200015a4

0800893c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <vTaskMissedYield+0x14>)
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]
}
 8008946:	bf00      	nop
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	200015a0 	.word	0x200015a0

08008954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800895c:	f000 f852 	bl	8008a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <prvIdleTask+0x28>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d9f9      	bls.n	800895c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <prvIdleTask+0x2c>)
 800896a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008978:	e7f0      	b.n	800895c <prvIdleTask+0x8>
 800897a:	bf00      	nop
 800897c:	20001490 	.word	0x20001490
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	e00c      	b.n	80089aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a12      	ldr	r2, [pc, #72]	; (80089e4 <prvInitialiseTaskLists+0x60>)
 800899c:	4413      	add	r3, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fc46 	bl	8007230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3301      	adds	r3, #1
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d9ef      	bls.n	8008990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089b0:	480d      	ldr	r0, [pc, #52]	; (80089e8 <prvInitialiseTaskLists+0x64>)
 80089b2:	f7fe fc3d 	bl	8007230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089b6:	480d      	ldr	r0, [pc, #52]	; (80089ec <prvInitialiseTaskLists+0x68>)
 80089b8:	f7fe fc3a 	bl	8007230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089bc:	480c      	ldr	r0, [pc, #48]	; (80089f0 <prvInitialiseTaskLists+0x6c>)
 80089be:	f7fe fc37 	bl	8007230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089c2:	480c      	ldr	r0, [pc, #48]	; (80089f4 <prvInitialiseTaskLists+0x70>)
 80089c4:	f7fe fc34 	bl	8007230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089c8:	480b      	ldr	r0, [pc, #44]	; (80089f8 <prvInitialiseTaskLists+0x74>)
 80089ca:	f7fe fc31 	bl	8007230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <prvInitialiseTaskLists+0x78>)
 80089d0:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <prvInitialiseTaskLists+0x64>)
 80089d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <prvInitialiseTaskLists+0x7c>)
 80089d6:	4a05      	ldr	r2, [pc, #20]	; (80089ec <prvInitialiseTaskLists+0x68>)
 80089d8:	601a      	str	r2, [r3, #0]
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20001490 	.word	0x20001490
 80089e8:	2000151c 	.word	0x2000151c
 80089ec:	20001530 	.word	0x20001530
 80089f0:	2000154c 	.word	0x2000154c
 80089f4:	20001560 	.word	0x20001560
 80089f8:	20001578 	.word	0x20001578
 80089fc:	20001544 	.word	0x20001544
 8008a00:	20001548 	.word	0x20001548

08008a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a0a:	e019      	b.n	8008a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a0c:	f000 fbce 	bl	80091ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a10:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <prvCheckTasksWaitingTermination+0x50>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe fc91 	bl	8007344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <prvCheckTasksWaitingTermination+0x54>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	4a0b      	ldr	r2, [pc, #44]	; (8008a58 <prvCheckTasksWaitingTermination+0x54>)
 8008a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a36:	f000 fbed 	bl	8009214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f810 	bl	8008a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e1      	bne.n	8008a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20001560 	.word	0x20001560
 8008a58:	2000158c 	.word	0x2000158c
 8008a5c:	20001574 	.word	0x20001574

08008a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	334c      	adds	r3, #76	; 0x4c
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 f917 	bl	8009ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d108      	bne.n	8008a8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd89 	bl	8009598 <vPortFree>
				vPortFree( pxTCB );
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fd86 	bl	8009598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a8c:	e01a      	b.n	8008ac4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d103      	bne.n	8008aa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fd7d 	bl	8009598 <vPortFree>
	}
 8008a9e:	e011      	b.n	8008ac4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d00c      	beq.n	8008ac4 <prvDeleteTCB+0x64>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	b672      	cpsid	i
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	b662      	cpsie	i
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <prvDeleteTCB+0x62>
	}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ae4:	e008      	b.n	8008af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008af6:	6013      	str	r3, [r2, #0]
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	20001544 	.word	0x20001544
 8008b08:	200015ac 	.word	0x200015ac

08008b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <xTaskGetSchedulerState+0x34>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d102      	bne.n	8008b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	e008      	b.n	8008b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b20:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <xTaskGetSchedulerState+0x38>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	e001      	b.n	8008b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b32:	687b      	ldr	r3, [r7, #4]
	}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20001598 	.word	0x20001598
 8008b44:	200015b4 	.word	0x200015b4

08008b48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d069      	beq.n	8008c32 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4b36      	ldr	r3, [pc, #216]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d259      	bcs.n	8008c20 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db06      	blt.n	8008b82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b74:	4b31      	ldr	r3, [pc, #196]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f1c3 0207 	rsb	r2, r3, #7
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6959      	ldr	r1, [r3, #20]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4a2b      	ldr	r2, [pc, #172]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008b94:	4413      	add	r3, r2
 8008b96:	4299      	cmp	r1, r3
 8008b98:	d13a      	bne.n	8008c10 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fbd0 	bl	8007344 <uxListRemove>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d115      	bne.n	8008bd6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4924      	ldr	r1, [pc, #144]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xTaskPriorityInherit+0x8e>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43da      	mvns	r2, r3
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bd4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bd6:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	2201      	movs	r2, #1
 8008be6:	409a      	lsls	r2, r3
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008c00:	441a      	add	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4619      	mov	r1, r3
 8008c08:	4610      	mov	r0, r2
 8008c0a:	f7fe fb3e 	bl	800728a <vListInsertEnd>
 8008c0e:	e004      	b.n	8008c1a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e008      	b.n	8008c32 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d201      	bcs.n	8008c32 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c32:	68fb      	ldr	r3, [r7, #12]
	}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	2000148c 	.word	0x2000148c
 8008c40:	20001490 	.word	0x20001490
 8008c44:	20001594 	.word	0x20001594

08008c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d072      	beq.n	8008d44 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c5e:	4b3c      	ldr	r3, [pc, #240]	; (8008d50 <xTaskPriorityDisinherit+0x108>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d00c      	beq.n	8008c82 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	b672      	cpsid	i
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	b662      	cpsie	i
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10c      	bne.n	8008ca4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	b672      	cpsid	i
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	b662      	cpsie	i
 8008c9e:	60bb      	str	r3, [r7, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca8:	1e5a      	subs	r2, r3, #1
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d044      	beq.n	8008d44 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d140      	bne.n	8008d44 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fb3c 	bl	8007344 <uxListRemove>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d115      	bne.n	8008cfe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	491f      	ldr	r1, [pc, #124]	; (8008d54 <xTaskPriorityDisinherit+0x10c>)
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <xTaskPriorityDisinherit+0xb6>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	2201      	movs	r2, #1
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43da      	mvns	r2, r3
 8008cf4:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xTaskPriorityDisinherit+0x110>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xTaskPriorityDisinherit+0x110>)
 8008cfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f1c3 0207 	rsb	r2, r3, #7
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	2201      	movs	r2, #1
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <xTaskPriorityDisinherit+0x110>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	4a0d      	ldr	r2, [pc, #52]	; (8008d58 <xTaskPriorityDisinherit+0x110>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <xTaskPriorityDisinherit+0x10c>)
 8008d32:	441a      	add	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe faa5 	bl	800728a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d44:	697b      	ldr	r3, [r7, #20]
	}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000148c 	.word	0x2000148c
 8008d54:	20001490 	.word	0x20001490
 8008d58:	20001594 	.word	0x20001594

08008d5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8087 	beq.w	8008e84 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10c      	bne.n	8008d98 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	b672      	cpsid	i
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	b662      	cpsie	i
 8008d92:	60fb      	str	r3, [r7, #12]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d902      	bls.n	8008da8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e002      	b.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d065      	beq.n	8008e84 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d160      	bne.n	8008e84 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dc2:	4b32      	ldr	r3, [pc, #200]	; (8008e8c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d10c      	bne.n	8008de6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	b672      	cpsid	i
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	b662      	cpsie	i
 8008de0:	60bb      	str	r3, [r7, #8]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db04      	blt.n	8008e04 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f1c3 0207 	rsb	r2, r3, #7
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	6959      	ldr	r1, [r3, #20]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e14:	4413      	add	r3, r2
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d134      	bne.n	8008e84 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fa90 	bl	8007344 <uxListRemove>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d115      	bne.n	8008e56 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2e:	4918      	ldr	r1, [pc, #96]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	2201      	movs	r2, #1
 8008e46:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4a:	43da      	mvns	r2, r3
 8008e4c:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4013      	ands	r3, r2
 8008e52:	4a10      	ldr	r2, [pc, #64]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	409a      	lsls	r2, r3
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	4a0b      	ldr	r2, [pc, #44]	; (8008e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e76:	441a      	add	r2, r3
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fe fa03 	bl	800728a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e84:	bf00      	nop
 8008e86:	3720      	adds	r7, #32
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	2000148c 	.word	0x2000148c
 8008e90:	20001490 	.word	0x20001490
 8008e94:	20001594 	.word	0x20001594

08008e98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eaa:	3201      	adds	r2, #1
 8008eac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008eae:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
	}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000148c 	.word	0x2000148c

08008ec0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eca:	4b29      	ldr	r3, [pc, #164]	; (8008f70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ed0:	4b28      	ldr	r3, [pc, #160]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fa34 	bl	8007344 <uxListRemove>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ee2:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	2201      	movs	r2, #1
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	43da      	mvns	r2, r3
 8008ef0:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	4a20      	ldr	r2, [pc, #128]	; (8008f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d10a      	bne.n	8008f18 <prvAddCurrentTaskToDelayedList+0x58>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f08:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4619      	mov	r1, r3
 8008f10:	481a      	ldr	r0, [pc, #104]	; (8008f7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008f12:	f7fe f9ba 	bl	800728a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f16:	e026      	b.n	8008f66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f20:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d209      	bcs.n	8008f44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f30:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7fe f9c8 	bl	80072d2 <vListInsert>
}
 8008f42:	e010      	b.n	8008f66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f7fe f9be 	bl	80072d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d202      	bcs.n	8008f66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f60:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6013      	str	r3, [r2, #0]
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20001590 	.word	0x20001590
 8008f74:	2000148c 	.word	0x2000148c
 8008f78:	20001594 	.word	0x20001594
 8008f7c:	20001578 	.word	0x20001578
 8008f80:	20001548 	.word	0x20001548
 8008f84:	20001544 	.word	0x20001544
 8008f88:	200015ac 	.word	0x200015ac

08008f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f023 0201 	bic.w	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fbc:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <pxPortInitialiseStack+0x64>)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3b14      	subs	r3, #20
 8008fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f06f 0202 	mvn.w	r2, #2
 8008fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3b20      	subs	r3, #32
 8008fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	08008ff5 	.word	0x08008ff5

08008ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ffe:	4b14      	ldr	r3, [pc, #80]	; (8009050 <prvTaskExitError+0x5c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d00c      	beq.n	8009022 <prvTaskExitError+0x2e>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	b672      	cpsid	i
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	b662      	cpsie	i
 800901c:	60fb      	str	r3, [r7, #12]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <prvTaskExitError+0x2c>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	60bb      	str	r3, [r7, #8]
}
 8009038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800903a:	bf00      	nop
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0fc      	beq.n	800903c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	2000000c 	.word	0x2000000c
	...

08009060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <pxCurrentTCBConst2>)
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	6808      	ldr	r0, [r1, #0]
 8009066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	f380 8809 	msr	PSP, r0
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	4770      	bx	lr
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst2>:
 8009080:	2000148c 	.word	0x2000148c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009088:	4808      	ldr	r0, [pc, #32]	; (80090ac <prvPortStartFirstTask+0x24>)
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	f380 8808 	msr	MSP, r0
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8814 	msr	CONTROL, r0
 800909a:	b662      	cpsie	i
 800909c:	b661      	cpsie	f
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	df00      	svc	0
 80090a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090aa:	bf00      	nop
 80090ac:	e000ed08 	.word	0xe000ed08

080090b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090b6:	4b37      	ldr	r3, [pc, #220]	; (8009194 <xPortStartScheduler+0xe4>)
 80090b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	22ff      	movs	r2, #255	; 0xff
 80090c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b2f      	ldr	r3, [pc, #188]	; (8009198 <xPortStartScheduler+0xe8>)
 80090dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090de:	4b2f      	ldr	r3, [pc, #188]	; (800919c <xPortStartScheduler+0xec>)
 80090e0:	2207      	movs	r2, #7
 80090e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090e4:	e009      	b.n	80090fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090e6:	4b2d      	ldr	r3, [pc, #180]	; (800919c <xPortStartScheduler+0xec>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	4a2b      	ldr	r2, [pc, #172]	; (800919c <xPortStartScheduler+0xec>)
 80090ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009102:	2b80      	cmp	r3, #128	; 0x80
 8009104:	d0ef      	beq.n	80090e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009106:	4b25      	ldr	r3, [pc, #148]	; (800919c <xPortStartScheduler+0xec>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1c3 0307 	rsb	r3, r3, #7
 800910e:	2b04      	cmp	r3, #4
 8009110:	d00c      	beq.n	800912c <xPortStartScheduler+0x7c>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	b672      	cpsid	i
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	b662      	cpsie	i
 8009126:	60bb      	str	r3, [r7, #8]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800912c:	4b1b      	ldr	r3, [pc, #108]	; (800919c <xPortStartScheduler+0xec>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	4a1a      	ldr	r2, [pc, #104]	; (800919c <xPortStartScheduler+0xec>)
 8009134:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009136:	4b19      	ldr	r3, [pc, #100]	; (800919c <xPortStartScheduler+0xec>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <xPortStartScheduler+0xec>)
 8009140:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800914a:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <xPortStartScheduler+0xf0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <xPortStartScheduler+0xf0>)
 8009150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009156:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <xPortStartScheduler+0xf0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a11      	ldr	r2, [pc, #68]	; (80091a0 <xPortStartScheduler+0xf0>)
 800915c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009160:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009162:	f000 f8dd 	bl	8009320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <xPortStartScheduler+0xf4>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800916c:	f000 f8fc 	bl	8009368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009170:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <xPortStartScheduler+0xf8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a0c      	ldr	r2, [pc, #48]	; (80091a8 <xPortStartScheduler+0xf8>)
 8009176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800917a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800917c:	f7ff ff84 	bl	8009088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009180:	f7ff fa72 	bl	8008668 <vTaskSwitchContext>
	prvTaskExitError();
 8009184:	f7ff ff36 	bl	8008ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	e000e400 	.word	0xe000e400
 8009198:	200015b8 	.word	0x200015b8
 800919c:	200015bc 	.word	0x200015bc
 80091a0:	e000ed20 	.word	0xe000ed20
 80091a4:	2000000c 	.word	0x2000000c
 80091a8:	e000ef34 	.word	0xe000ef34

080091ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	b672      	cpsid	i
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	b662      	cpsie	i
 80091c6:	607b      	str	r3, [r7, #4]
}
 80091c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <vPortEnterCritical+0x60>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3301      	adds	r3, #1
 80091d0:	4a0e      	ldr	r2, [pc, #56]	; (800920c <vPortEnterCritical+0x60>)
 80091d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091d4:	4b0d      	ldr	r3, [pc, #52]	; (800920c <vPortEnterCritical+0x60>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d111      	bne.n	8009200 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <vPortEnterCritical+0x64>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00c      	beq.n	8009200 <vPortEnterCritical+0x54>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	603b      	str	r3, [r7, #0]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <vPortEnterCritical+0x52>
	}
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	2000000c 	.word	0x2000000c
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800921a:	4b13      	ldr	r3, [pc, #76]	; (8009268 <vPortExitCritical+0x54>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10c      	bne.n	800923c <vPortExitCritical+0x28>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	b672      	cpsid	i
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	b662      	cpsie	i
 8009236:	607b      	str	r3, [r7, #4]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800923c:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <vPortExitCritical+0x54>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3b01      	subs	r3, #1
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <vPortExitCritical+0x54>)
 8009244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <vPortExitCritical+0x54>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <vPortExitCritical+0x46>
 800924e:	2300      	movs	r3, #0
 8009250:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	f383 8811 	msr	BASEPRI, r3
}
 8009258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c
 800926c:	00000000 	.word	0x00000000

08009270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009270:	f3ef 8009 	mrs	r0, PSP
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <pxCurrentTCBConst>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f01e 0f10 	tst.w	lr, #16
 8009280:	bf08      	it	eq
 8009282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	6010      	str	r0, [r2, #0]
 800928c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009294:	b672      	cpsid	i
 8009296:	f380 8811 	msr	BASEPRI, r0
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	b662      	cpsie	i
 80092a4:	f7ff f9e0 	bl	8008668 <vTaskSwitchContext>
 80092a8:	f04f 0000 	mov.w	r0, #0
 80092ac:	f380 8811 	msr	BASEPRI, r0
 80092b0:	bc09      	pop	{r0, r3}
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	f01e 0f10 	tst.w	lr, #16
 80092be:	bf08      	it	eq
 80092c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092c4:	f380 8809 	msr	PSP, r0
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop

080092d0 <pxCurrentTCBConst>:
 80092d0:	2000148c 	.word	0x2000148c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	b672      	cpsid	i
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	b662      	cpsie	i
 80092f2:	607b      	str	r3, [r7, #4]
}
 80092f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092f6:	f7ff f8fd 	bl	80084f4 <xTaskIncrementTick>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <SysTick_Handler+0x44>)
 8009302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f383 8811 	msr	BASEPRI, r3
}
 8009312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <vPortSetupTimerInterrupt+0x34>)
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800932a:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <vPortSetupTimerInterrupt+0x38>)
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <vPortSetupTimerInterrupt+0x3c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a0a      	ldr	r2, [pc, #40]	; (8009360 <vPortSetupTimerInterrupt+0x40>)
 8009336:	fba2 2303 	umull	r2, r3, r2, r3
 800933a:	099b      	lsrs	r3, r3, #6
 800933c:	4a09      	ldr	r2, [pc, #36]	; (8009364 <vPortSetupTimerInterrupt+0x44>)
 800933e:	3b01      	subs	r3, #1
 8009340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009342:	4b04      	ldr	r3, [pc, #16]	; (8009354 <vPortSetupTimerInterrupt+0x34>)
 8009344:	2207      	movs	r2, #7
 8009346:	601a      	str	r2, [r3, #0]
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	e000e010 	.word	0xe000e010
 8009358:	e000e018 	.word	0xe000e018
 800935c:	20000000 	.word	0x20000000
 8009360:	10624dd3 	.word	0x10624dd3
 8009364:	e000e014 	.word	0xe000e014

08009368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009378 <vPortEnableVFP+0x10>
 800936c:	6801      	ldr	r1, [r0, #0]
 800936e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009372:	6001      	str	r1, [r0, #0]
 8009374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009376:	bf00      	nop
 8009378:	e000ed88 	.word	0xe000ed88

0800937c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009382:	f3ef 8305 	mrs	r3, IPSR
 8009386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d916      	bls.n	80093bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800938e:	4a19      	ldr	r2, [pc, #100]	; (80093f4 <vPortValidateInterruptPriority+0x78>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <vPortValidateInterruptPriority+0x7c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	7afa      	ldrb	r2, [r7, #11]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d20c      	bcs.n	80093bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	b672      	cpsid	i
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	b662      	cpsie	i
 80093b6:	607b      	str	r3, [r7, #4]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093bc:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <vPortValidateInterruptPriority+0x80>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093c4:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <vPortValidateInterruptPriority+0x84>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d90c      	bls.n	80093e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	b672      	cpsid	i
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	b662      	cpsie	i
 80093e0:	603b      	str	r3, [r7, #0]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <vPortValidateInterruptPriority+0x68>
	}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	e000e3f0 	.word	0xe000e3f0
 80093f8:	200015b8 	.word	0x200015b8
 80093fc:	e000ed0c 	.word	0xe000ed0c
 8009400:	200015bc 	.word	0x200015bc

08009404 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	; 0x28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009410:	f7fe ffc4 	bl	800839c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009414:	4b5b      	ldr	r3, [pc, #364]	; (8009584 <pvPortMalloc+0x180>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800941c:	f000 f91a 	bl	8009654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009420:	4b59      	ldr	r3, [pc, #356]	; (8009588 <pvPortMalloc+0x184>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4013      	ands	r3, r2
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 8092 	bne.w	8009552 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01f      	beq.n	8009474 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009434:	2208      	movs	r2, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b00      	cmp	r3, #0
 8009444:	d016      	beq.n	8009474 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f023 0307 	bic.w	r3, r3, #7
 800944c:	3308      	adds	r3, #8
 800944e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00c      	beq.n	8009474 <pvPortMalloc+0x70>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	b672      	cpsid	i
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	b662      	cpsie	i
 800946e:	617b      	str	r3, [r7, #20]
}
 8009470:	bf00      	nop
 8009472:	e7fe      	b.n	8009472 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d06b      	beq.n	8009552 <pvPortMalloc+0x14e>
 800947a:	4b44      	ldr	r3, [pc, #272]	; (800958c <pvPortMalloc+0x188>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d866      	bhi.n	8009552 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009484:	4b42      	ldr	r3, [pc, #264]	; (8009590 <pvPortMalloc+0x18c>)
 8009486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009488:	4b41      	ldr	r3, [pc, #260]	; (8009590 <pvPortMalloc+0x18c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800948e:	e004      	b.n	800949a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d903      	bls.n	80094ac <pvPortMalloc+0xa8>
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f1      	bne.n	8009490 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094ac:	4b35      	ldr	r3, [pc, #212]	; (8009584 <pvPortMalloc+0x180>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d04d      	beq.n	8009552 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2208      	movs	r2, #8
 80094bc:	4413      	add	r3, r2
 80094be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	2308      	movs	r3, #8
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d921      	bls.n	800951c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00c      	beq.n	8009504 <pvPortMalloc+0x100>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	b672      	cpsid	i
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	b662      	cpsie	i
 80094fe:	613b      	str	r3, [r7, #16]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009516:	69b8      	ldr	r0, [r7, #24]
 8009518:	f000 f8fe 	bl	8009718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800951c:	4b1b      	ldr	r3, [pc, #108]	; (800958c <pvPortMalloc+0x188>)
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	4a19      	ldr	r2, [pc, #100]	; (800958c <pvPortMalloc+0x188>)
 8009528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800952a:	4b18      	ldr	r3, [pc, #96]	; (800958c <pvPortMalloc+0x188>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <pvPortMalloc+0x190>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d203      	bcs.n	800953e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009536:	4b15      	ldr	r3, [pc, #84]	; (800958c <pvPortMalloc+0x188>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a16      	ldr	r2, [pc, #88]	; (8009594 <pvPortMalloc+0x190>)
 800953c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <pvPortMalloc+0x184>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	431a      	orrs	r2, r3
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009552:	f7fe ff31 	bl	80083b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00c      	beq.n	800957a <pvPortMalloc+0x176>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	b672      	cpsid	i
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	b662      	cpsie	i
 8009574:	60fb      	str	r3, [r7, #12]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <pvPortMalloc+0x174>
	return pvReturn;
 800957a:	69fb      	ldr	r3, [r7, #28]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3728      	adds	r7, #40	; 0x28
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200051c8 	.word	0x200051c8
 8009588:	200051d4 	.word	0x200051d4
 800958c:	200051cc 	.word	0x200051cc
 8009590:	200051c0 	.word	0x200051c0
 8009594:	200051d0 	.word	0x200051d0

08009598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d04c      	beq.n	8009644 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095aa:	2308      	movs	r3, #8
 80095ac:	425b      	negs	r3, r3
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4413      	add	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	4b23      	ldr	r3, [pc, #140]	; (800964c <vPortFree+0xb4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4013      	ands	r3, r2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10c      	bne.n	80095e0 <vPortFree+0x48>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	b672      	cpsid	i
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	b662      	cpsie	i
 80095da:	60fb      	str	r3, [r7, #12]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00c      	beq.n	8009602 <vPortFree+0x6a>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	b672      	cpsid	i
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	b662      	cpsie	i
 80095fc:	60bb      	str	r3, [r7, #8]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	4b11      	ldr	r3, [pc, #68]	; (800964c <vPortFree+0xb4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4013      	ands	r3, r2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d019      	beq.n	8009644 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d115      	bne.n	8009644 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	4b0b      	ldr	r3, [pc, #44]	; (800964c <vPortFree+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	43db      	mvns	r3, r3
 8009622:	401a      	ands	r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009628:	f7fe feb8 	bl	800839c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <vPortFree+0xb8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4413      	add	r3, r2
 8009636:	4a06      	ldr	r2, [pc, #24]	; (8009650 <vPortFree+0xb8>)
 8009638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800963a:	6938      	ldr	r0, [r7, #16]
 800963c:	f000 f86c 	bl	8009718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009640:	f7fe feba 	bl	80083b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009644:	bf00      	nop
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	200051d4 	.word	0x200051d4
 8009650:	200051cc 	.word	0x200051cc

08009654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800965a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800965e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <prvHeapInit+0xac>)
 8009662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00c      	beq.n	8009688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3307      	adds	r3, #7
 8009672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0307 	bic.w	r3, r3, #7
 800967a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	4a1f      	ldr	r2, [pc, #124]	; (8009700 <prvHeapInit+0xac>)
 8009684:	4413      	add	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800968c:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <prvHeapInit+0xb0>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <prvHeapInit+0xb0>)
 8009694:	2200      	movs	r2, #0
 8009696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	4413      	add	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096a0:	2208      	movs	r2, #8
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1a9b      	subs	r3, r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0307 	bic.w	r3, r3, #7
 80096ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4a15      	ldr	r2, [pc, #84]	; (8009708 <prvHeapInit+0xb4>)
 80096b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <prvHeapInit+0xb4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <prvHeapInit+0xb4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <prvHeapInit+0xb4>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	4a0a      	ldr	r2, [pc, #40]	; (800970c <prvHeapInit+0xb8>)
 80096e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4a09      	ldr	r2, [pc, #36]	; (8009710 <prvHeapInit+0xbc>)
 80096ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096ec:	4b09      	ldr	r3, [pc, #36]	; (8009714 <prvHeapInit+0xc0>)
 80096ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	200015c0 	.word	0x200015c0
 8009704:	200051c0 	.word	0x200051c0
 8009708:	200051c8 	.word	0x200051c8
 800970c:	200051d0 	.word	0x200051d0
 8009710:	200051cc 	.word	0x200051cc
 8009714:	200051d4 	.word	0x200051d4

08009718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009720:	4b28      	ldr	r3, [pc, #160]	; (80097c4 <prvInsertBlockIntoFreeList+0xac>)
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	e002      	b.n	800972c <prvInsertBlockIntoFreeList+0x14>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	429a      	cmp	r2, r3
 8009734:	d8f7      	bhi.n	8009726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	4413      	add	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d108      	bne.n	800975a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	441a      	add	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	441a      	add	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d118      	bne.n	80097a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d00d      	beq.n	8009796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	441a      	add	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e008      	b.n	80097a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009796:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e003      	b.n	80097a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d002      	beq.n	80097b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097b6:	bf00      	nop
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	200051c0 	.word	0x200051c0
 80097c8:	200051c8 	.word	0x200051c8

080097cc <atoi>:
 80097cc:	220a      	movs	r2, #10
 80097ce:	2100      	movs	r1, #0
 80097d0:	f000 b884 	b.w	80098dc <strtol>

080097d4 <_strtol_l.constprop.0>:
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097da:	d001      	beq.n	80097e0 <_strtol_l.constprop.0+0xc>
 80097dc:	2b24      	cmp	r3, #36	; 0x24
 80097de:	d906      	bls.n	80097ee <_strtol_l.constprop.0+0x1a>
 80097e0:	f000 faea 	bl	8009db8 <__errno>
 80097e4:	2316      	movs	r3, #22
 80097e6:	6003      	str	r3, [r0, #0]
 80097e8:	2000      	movs	r0, #0
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098d4 <_strtol_l.constprop.0+0x100>
 80097f2:	460d      	mov	r5, r1
 80097f4:	462e      	mov	r6, r5
 80097f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80097fe:	f017 0708 	ands.w	r7, r7, #8
 8009802:	d1f7      	bne.n	80097f4 <_strtol_l.constprop.0+0x20>
 8009804:	2c2d      	cmp	r4, #45	; 0x2d
 8009806:	d132      	bne.n	800986e <_strtol_l.constprop.0+0x9a>
 8009808:	782c      	ldrb	r4, [r5, #0]
 800980a:	2701      	movs	r7, #1
 800980c:	1cb5      	adds	r5, r6, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d05b      	beq.n	80098ca <_strtol_l.constprop.0+0xf6>
 8009812:	2b10      	cmp	r3, #16
 8009814:	d109      	bne.n	800982a <_strtol_l.constprop.0+0x56>
 8009816:	2c30      	cmp	r4, #48	; 0x30
 8009818:	d107      	bne.n	800982a <_strtol_l.constprop.0+0x56>
 800981a:	782c      	ldrb	r4, [r5, #0]
 800981c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009820:	2c58      	cmp	r4, #88	; 0x58
 8009822:	d14d      	bne.n	80098c0 <_strtol_l.constprop.0+0xec>
 8009824:	786c      	ldrb	r4, [r5, #1]
 8009826:	2310      	movs	r3, #16
 8009828:	3502      	adds	r5, #2
 800982a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800982e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009832:	f04f 0e00 	mov.w	lr, #0
 8009836:	fbb8 f9f3 	udiv	r9, r8, r3
 800983a:	4676      	mov	r6, lr
 800983c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009840:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009844:	f1bc 0f09 	cmp.w	ip, #9
 8009848:	d816      	bhi.n	8009878 <_strtol_l.constprop.0+0xa4>
 800984a:	4664      	mov	r4, ip
 800984c:	42a3      	cmp	r3, r4
 800984e:	dd24      	ble.n	800989a <_strtol_l.constprop.0+0xc6>
 8009850:	f1be 3fff 	cmp.w	lr, #4294967295
 8009854:	d008      	beq.n	8009868 <_strtol_l.constprop.0+0x94>
 8009856:	45b1      	cmp	r9, r6
 8009858:	d31c      	bcc.n	8009894 <_strtol_l.constprop.0+0xc0>
 800985a:	d101      	bne.n	8009860 <_strtol_l.constprop.0+0x8c>
 800985c:	45a2      	cmp	sl, r4
 800985e:	db19      	blt.n	8009894 <_strtol_l.constprop.0+0xc0>
 8009860:	fb06 4603 	mla	r6, r6, r3, r4
 8009864:	f04f 0e01 	mov.w	lr, #1
 8009868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800986c:	e7e8      	b.n	8009840 <_strtol_l.constprop.0+0x6c>
 800986e:	2c2b      	cmp	r4, #43	; 0x2b
 8009870:	bf04      	itt	eq
 8009872:	782c      	ldrbeq	r4, [r5, #0]
 8009874:	1cb5      	addeq	r5, r6, #2
 8009876:	e7ca      	b.n	800980e <_strtol_l.constprop.0+0x3a>
 8009878:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800987c:	f1bc 0f19 	cmp.w	ip, #25
 8009880:	d801      	bhi.n	8009886 <_strtol_l.constprop.0+0xb2>
 8009882:	3c37      	subs	r4, #55	; 0x37
 8009884:	e7e2      	b.n	800984c <_strtol_l.constprop.0+0x78>
 8009886:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800988a:	f1bc 0f19 	cmp.w	ip, #25
 800988e:	d804      	bhi.n	800989a <_strtol_l.constprop.0+0xc6>
 8009890:	3c57      	subs	r4, #87	; 0x57
 8009892:	e7db      	b.n	800984c <_strtol_l.constprop.0+0x78>
 8009894:	f04f 3eff 	mov.w	lr, #4294967295
 8009898:	e7e6      	b.n	8009868 <_strtol_l.constprop.0+0x94>
 800989a:	f1be 3fff 	cmp.w	lr, #4294967295
 800989e:	d105      	bne.n	80098ac <_strtol_l.constprop.0+0xd8>
 80098a0:	2322      	movs	r3, #34	; 0x22
 80098a2:	6003      	str	r3, [r0, #0]
 80098a4:	4646      	mov	r6, r8
 80098a6:	b942      	cbnz	r2, 80098ba <_strtol_l.constprop.0+0xe6>
 80098a8:	4630      	mov	r0, r6
 80098aa:	e79e      	b.n	80097ea <_strtol_l.constprop.0+0x16>
 80098ac:	b107      	cbz	r7, 80098b0 <_strtol_l.constprop.0+0xdc>
 80098ae:	4276      	negs	r6, r6
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	d0f9      	beq.n	80098a8 <_strtol_l.constprop.0+0xd4>
 80098b4:	f1be 0f00 	cmp.w	lr, #0
 80098b8:	d000      	beq.n	80098bc <_strtol_l.constprop.0+0xe8>
 80098ba:	1e69      	subs	r1, r5, #1
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	e7f3      	b.n	80098a8 <_strtol_l.constprop.0+0xd4>
 80098c0:	2430      	movs	r4, #48	; 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1b1      	bne.n	800982a <_strtol_l.constprop.0+0x56>
 80098c6:	2308      	movs	r3, #8
 80098c8:	e7af      	b.n	800982a <_strtol_l.constprop.0+0x56>
 80098ca:	2c30      	cmp	r4, #48	; 0x30
 80098cc:	d0a5      	beq.n	800981a <_strtol_l.constprop.0+0x46>
 80098ce:	230a      	movs	r3, #10
 80098d0:	e7ab      	b.n	800982a <_strtol_l.constprop.0+0x56>
 80098d2:	bf00      	nop
 80098d4:	0800ba75 	.word	0x0800ba75

080098d8 <_strtol_r>:
 80098d8:	f7ff bf7c 	b.w	80097d4 <_strtol_l.constprop.0>

080098dc <strtol>:
 80098dc:	4613      	mov	r3, r2
 80098de:	460a      	mov	r2, r1
 80098e0:	4601      	mov	r1, r0
 80098e2:	4802      	ldr	r0, [pc, #8]	; (80098ec <strtol+0x10>)
 80098e4:	6800      	ldr	r0, [r0, #0]
 80098e6:	f7ff bf75 	b.w	80097d4 <_strtol_l.constprop.0>
 80098ea:	bf00      	nop
 80098ec:	20000068 	.word	0x20000068

080098f0 <std>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	e9c0 3300 	strd	r3, r3, [r0]
 80098fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fe:	6083      	str	r3, [r0, #8]
 8009900:	8181      	strh	r1, [r0, #12]
 8009902:	6643      	str	r3, [r0, #100]	; 0x64
 8009904:	81c2      	strh	r2, [r0, #14]
 8009906:	6183      	str	r3, [r0, #24]
 8009908:	4619      	mov	r1, r3
 800990a:	2208      	movs	r2, #8
 800990c:	305c      	adds	r0, #92	; 0x5c
 800990e:	f000 f930 	bl	8009b72 <memset>
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <std+0x38>)
 8009914:	6263      	str	r3, [r4, #36]	; 0x24
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <std+0x3c>)
 8009918:	62a3      	str	r3, [r4, #40]	; 0x28
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <std+0x40>)
 800991c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <std+0x44>)
 8009920:	6224      	str	r4, [r4, #32]
 8009922:	6323      	str	r3, [r4, #48]	; 0x30
 8009924:	bd10      	pop	{r4, pc}
 8009926:	bf00      	nop
 8009928:	08009ae9 	.word	0x08009ae9
 800992c:	08009b0f 	.word	0x08009b0f
 8009930:	08009b47 	.word	0x08009b47
 8009934:	08009b6b 	.word	0x08009b6b

08009938 <stdio_exit_handler>:
 8009938:	4a02      	ldr	r2, [pc, #8]	; (8009944 <stdio_exit_handler+0xc>)
 800993a:	4903      	ldr	r1, [pc, #12]	; (8009948 <stdio_exit_handler+0x10>)
 800993c:	4803      	ldr	r0, [pc, #12]	; (800994c <stdio_exit_handler+0x14>)
 800993e:	f000 b869 	b.w	8009a14 <_fwalk_sglue>
 8009942:	bf00      	nop
 8009944:	20000010 	.word	0x20000010
 8009948:	0800ad95 	.word	0x0800ad95
 800994c:	2000001c 	.word	0x2000001c

08009950 <cleanup_stdio>:
 8009950:	6841      	ldr	r1, [r0, #4]
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <cleanup_stdio+0x34>)
 8009954:	4299      	cmp	r1, r3
 8009956:	b510      	push	{r4, lr}
 8009958:	4604      	mov	r4, r0
 800995a:	d001      	beq.n	8009960 <cleanup_stdio+0x10>
 800995c:	f001 fa1a 	bl	800ad94 <_fflush_r>
 8009960:	68a1      	ldr	r1, [r4, #8]
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <cleanup_stdio+0x38>)
 8009964:	4299      	cmp	r1, r3
 8009966:	d002      	beq.n	800996e <cleanup_stdio+0x1e>
 8009968:	4620      	mov	r0, r4
 800996a:	f001 fa13 	bl	800ad94 <_fflush_r>
 800996e:	68e1      	ldr	r1, [r4, #12]
 8009970:	4b06      	ldr	r3, [pc, #24]	; (800998c <cleanup_stdio+0x3c>)
 8009972:	4299      	cmp	r1, r3
 8009974:	d004      	beq.n	8009980 <cleanup_stdio+0x30>
 8009976:	4620      	mov	r0, r4
 8009978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800997c:	f001 ba0a 	b.w	800ad94 <_fflush_r>
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	200051d8 	.word	0x200051d8
 8009988:	20005240 	.word	0x20005240
 800998c:	200052a8 	.word	0x200052a8

08009990 <global_stdio_init.part.0>:
 8009990:	b510      	push	{r4, lr}
 8009992:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <global_stdio_init.part.0+0x30>)
 8009994:	4c0b      	ldr	r4, [pc, #44]	; (80099c4 <global_stdio_init.part.0+0x34>)
 8009996:	4a0c      	ldr	r2, [pc, #48]	; (80099c8 <global_stdio_init.part.0+0x38>)
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	4620      	mov	r0, r4
 800999c:	2200      	movs	r2, #0
 800999e:	2104      	movs	r1, #4
 80099a0:	f7ff ffa6 	bl	80098f0 <std>
 80099a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099a8:	2201      	movs	r2, #1
 80099aa:	2109      	movs	r1, #9
 80099ac:	f7ff ffa0 	bl	80098f0 <std>
 80099b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099b4:	2202      	movs	r2, #2
 80099b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ba:	2112      	movs	r1, #18
 80099bc:	f7ff bf98 	b.w	80098f0 <std>
 80099c0:	20005310 	.word	0x20005310
 80099c4:	200051d8 	.word	0x200051d8
 80099c8:	08009939 	.word	0x08009939

080099cc <__sfp_lock_acquire>:
 80099cc:	4801      	ldr	r0, [pc, #4]	; (80099d4 <__sfp_lock_acquire+0x8>)
 80099ce:	f000 ba1d 	b.w	8009e0c <__retarget_lock_acquire_recursive>
 80099d2:	bf00      	nop
 80099d4:	20005319 	.word	0x20005319

080099d8 <__sfp_lock_release>:
 80099d8:	4801      	ldr	r0, [pc, #4]	; (80099e0 <__sfp_lock_release+0x8>)
 80099da:	f000 ba18 	b.w	8009e0e <__retarget_lock_release_recursive>
 80099de:	bf00      	nop
 80099e0:	20005319 	.word	0x20005319

080099e4 <__sinit>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	4604      	mov	r4, r0
 80099e8:	f7ff fff0 	bl	80099cc <__sfp_lock_acquire>
 80099ec:	6a23      	ldr	r3, [r4, #32]
 80099ee:	b11b      	cbz	r3, 80099f8 <__sinit+0x14>
 80099f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f4:	f7ff bff0 	b.w	80099d8 <__sfp_lock_release>
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <__sinit+0x28>)
 80099fa:	6223      	str	r3, [r4, #32]
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <__sinit+0x2c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1f5      	bne.n	80099f0 <__sinit+0xc>
 8009a04:	f7ff ffc4 	bl	8009990 <global_stdio_init.part.0>
 8009a08:	e7f2      	b.n	80099f0 <__sinit+0xc>
 8009a0a:	bf00      	nop
 8009a0c:	08009951 	.word	0x08009951
 8009a10:	20005310 	.word	0x20005310

08009a14 <_fwalk_sglue>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	4607      	mov	r7, r0
 8009a1a:	4688      	mov	r8, r1
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	2600      	movs	r6, #0
 8009a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a24:	f1b9 0901 	subs.w	r9, r9, #1
 8009a28:	d505      	bpl.n	8009a36 <_fwalk_sglue+0x22>
 8009a2a:	6824      	ldr	r4, [r4, #0]
 8009a2c:	2c00      	cmp	r4, #0
 8009a2e:	d1f7      	bne.n	8009a20 <_fwalk_sglue+0xc>
 8009a30:	4630      	mov	r0, r6
 8009a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d907      	bls.n	8009a4c <_fwalk_sglue+0x38>
 8009a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a40:	3301      	adds	r3, #1
 8009a42:	d003      	beq.n	8009a4c <_fwalk_sglue+0x38>
 8009a44:	4629      	mov	r1, r5
 8009a46:	4638      	mov	r0, r7
 8009a48:	47c0      	blx	r8
 8009a4a:	4306      	orrs	r6, r0
 8009a4c:	3568      	adds	r5, #104	; 0x68
 8009a4e:	e7e9      	b.n	8009a24 <_fwalk_sglue+0x10>

08009a50 <siprintf>:
 8009a50:	b40e      	push	{r1, r2, r3}
 8009a52:	b500      	push	{lr}
 8009a54:	b09c      	sub	sp, #112	; 0x70
 8009a56:	ab1d      	add	r3, sp, #116	; 0x74
 8009a58:	9002      	str	r0, [sp, #8]
 8009a5a:	9006      	str	r0, [sp, #24]
 8009a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a60:	4809      	ldr	r0, [pc, #36]	; (8009a88 <siprintf+0x38>)
 8009a62:	9107      	str	r1, [sp, #28]
 8009a64:	9104      	str	r1, [sp, #16]
 8009a66:	4909      	ldr	r1, [pc, #36]	; (8009a8c <siprintf+0x3c>)
 8009a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6c:	9105      	str	r1, [sp, #20]
 8009a6e:	6800      	ldr	r0, [r0, #0]
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	a902      	add	r1, sp, #8
 8009a74:	f000 fb5a 	bl	800a12c <_svfiprintf_r>
 8009a78:	9b02      	ldr	r3, [sp, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	b01c      	add	sp, #112	; 0x70
 8009a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a84:	b003      	add	sp, #12
 8009a86:	4770      	bx	lr
 8009a88:	20000068 	.word	0x20000068
 8009a8c:	ffff0208 	.word	0xffff0208

08009a90 <siscanf>:
 8009a90:	b40e      	push	{r1, r2, r3}
 8009a92:	b510      	push	{r4, lr}
 8009a94:	b09f      	sub	sp, #124	; 0x7c
 8009a96:	ac21      	add	r4, sp, #132	; 0x84
 8009a98:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009a9c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009aa0:	9201      	str	r2, [sp, #4]
 8009aa2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009aa6:	9004      	str	r0, [sp, #16]
 8009aa8:	9008      	str	r0, [sp, #32]
 8009aaa:	f7f6 fbc9 	bl	8000240 <strlen>
 8009aae:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <siscanf+0x50>)
 8009ab0:	9005      	str	r0, [sp, #20]
 8009ab2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ab6:	480b      	ldr	r0, [pc, #44]	; (8009ae4 <siscanf+0x54>)
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	9403      	str	r4, [sp, #12]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ac2:	9316      	str	r3, [sp, #88]	; 0x58
 8009ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009acc:	a904      	add	r1, sp, #16
 8009ace:	4623      	mov	r3, r4
 8009ad0:	f000 fc84 	bl	800a3dc <__ssvfiscanf_r>
 8009ad4:	b01f      	add	sp, #124	; 0x7c
 8009ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ada:	b003      	add	sp, #12
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	08009b0b 	.word	0x08009b0b
 8009ae4:	20000068 	.word	0x20000068

08009ae8 <__sread>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	460c      	mov	r4, r1
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	f000 f93e 	bl	8009d70 <_read_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	bfab      	itete	ge
 8009af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009afa:	89a3      	ldrhlt	r3, [r4, #12]
 8009afc:	181b      	addge	r3, r3, r0
 8009afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b02:	bfac      	ite	ge
 8009b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b06:	81a3      	strhlt	r3, [r4, #12]
 8009b08:	bd10      	pop	{r4, pc}

08009b0a <__seofread>:
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	4770      	bx	lr

08009b0e <__swrite>:
 8009b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	461f      	mov	r7, r3
 8009b14:	898b      	ldrh	r3, [r1, #12]
 8009b16:	05db      	lsls	r3, r3, #23
 8009b18:	4605      	mov	r5, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	d505      	bpl.n	8009b2c <__swrite+0x1e>
 8009b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b24:	2302      	movs	r3, #2
 8009b26:	2200      	movs	r2, #0
 8009b28:	f000 f910 	bl	8009d4c <_lseek_r>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b42:	f000 b927 	b.w	8009d94 <_write_r>

08009b46 <__sseek>:
 8009b46:	b510      	push	{r4, lr}
 8009b48:	460c      	mov	r4, r1
 8009b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4e:	f000 f8fd 	bl	8009d4c <_lseek_r>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	bf15      	itete	ne
 8009b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b62:	81a3      	strheq	r3, [r4, #12]
 8009b64:	bf18      	it	ne
 8009b66:	81a3      	strhne	r3, [r4, #12]
 8009b68:	bd10      	pop	{r4, pc}

08009b6a <__sclose>:
 8009b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6e:	f000 b887 	b.w	8009c80 <_close_r>

08009b72 <memset>:
 8009b72:	4402      	add	r2, r0
 8009b74:	4603      	mov	r3, r0
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d100      	bne.n	8009b7c <memset+0xa>
 8009b7a:	4770      	bx	lr
 8009b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b80:	e7f9      	b.n	8009b76 <memset+0x4>

08009b82 <strchr>:
 8009b82:	b2c9      	uxtb	r1, r1
 8009b84:	4603      	mov	r3, r0
 8009b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8a:	b11a      	cbz	r2, 8009b94 <strchr+0x12>
 8009b8c:	428a      	cmp	r2, r1
 8009b8e:	d1f9      	bne.n	8009b84 <strchr+0x2>
 8009b90:	4618      	mov	r0, r3
 8009b92:	4770      	bx	lr
 8009b94:	2900      	cmp	r1, #0
 8009b96:	bf18      	it	ne
 8009b98:	2300      	movne	r3, #0
 8009b9a:	e7f9      	b.n	8009b90 <strchr+0xe>

08009b9c <strtok>:
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <strtok+0x5c>)
 8009b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba0:	681e      	ldr	r6, [r3, #0]
 8009ba2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	b9fc      	cbnz	r4, 8009be8 <strtok+0x4c>
 8009ba8:	2050      	movs	r0, #80	; 0x50
 8009baa:	9101      	str	r1, [sp, #4]
 8009bac:	f000 f9b0 	bl	8009f10 <malloc>
 8009bb0:	9901      	ldr	r1, [sp, #4]
 8009bb2:	6470      	str	r0, [r6, #68]	; 0x44
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	b920      	cbnz	r0, 8009bc2 <strtok+0x26>
 8009bb8:	4b10      	ldr	r3, [pc, #64]	; (8009bfc <strtok+0x60>)
 8009bba:	4811      	ldr	r0, [pc, #68]	; (8009c00 <strtok+0x64>)
 8009bbc:	215b      	movs	r1, #91	; 0x5b
 8009bbe:	f000 f93d 	bl	8009e3c <__assert_func>
 8009bc2:	e9c0 4400 	strd	r4, r4, [r0]
 8009bc6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009bca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009bce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009bd2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009bd6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009bda:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009bde:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009be2:	6184      	str	r4, [r0, #24]
 8009be4:	7704      	strb	r4, [r0, #28]
 8009be6:	6244      	str	r4, [r0, #36]	; 0x24
 8009be8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009bea:	2301      	movs	r3, #1
 8009bec:	4628      	mov	r0, r5
 8009bee:	b002      	add	sp, #8
 8009bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bf4:	f000 b806 	b.w	8009c04 <__strtok_r>
 8009bf8:	20000068 	.word	0x20000068
 8009bfc:	0800bb75 	.word	0x0800bb75
 8009c00:	0800bb8c 	.word	0x0800bb8c

08009c04 <__strtok_r>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	b908      	cbnz	r0, 8009c0c <__strtok_r+0x8>
 8009c08:	6810      	ldr	r0, [r2, #0]
 8009c0a:	b188      	cbz	r0, 8009c30 <__strtok_r+0x2c>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c14:	460f      	mov	r7, r1
 8009c16:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c1a:	b91e      	cbnz	r6, 8009c24 <__strtok_r+0x20>
 8009c1c:	b965      	cbnz	r5, 8009c38 <__strtok_r+0x34>
 8009c1e:	6015      	str	r5, [r2, #0]
 8009c20:	4628      	mov	r0, r5
 8009c22:	e005      	b.n	8009c30 <__strtok_r+0x2c>
 8009c24:	42b5      	cmp	r5, r6
 8009c26:	d1f6      	bne.n	8009c16 <__strtok_r+0x12>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f0      	bne.n	8009c0e <__strtok_r+0xa>
 8009c2c:	6014      	str	r4, [r2, #0]
 8009c2e:	7003      	strb	r3, [r0, #0]
 8009c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c32:	461c      	mov	r4, r3
 8009c34:	e00c      	b.n	8009c50 <__strtok_r+0x4c>
 8009c36:	b915      	cbnz	r5, 8009c3e <__strtok_r+0x3a>
 8009c38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c42:	42ab      	cmp	r3, r5
 8009c44:	d1f7      	bne.n	8009c36 <__strtok_r+0x32>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f3      	beq.n	8009c32 <__strtok_r+0x2e>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c50:	6014      	str	r4, [r2, #0]
 8009c52:	e7ed      	b.n	8009c30 <__strtok_r+0x2c>

08009c54 <strstr>:
 8009c54:	780a      	ldrb	r2, [r1, #0]
 8009c56:	b570      	push	{r4, r5, r6, lr}
 8009c58:	b96a      	cbnz	r2, 8009c76 <strstr+0x22>
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d109      	bne.n	8009c74 <strstr+0x20>
 8009c60:	460c      	mov	r4, r1
 8009c62:	4605      	mov	r5, r0
 8009c64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0f6      	beq.n	8009c5a <strstr+0x6>
 8009c6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c70:	429e      	cmp	r6, r3
 8009c72:	d0f7      	beq.n	8009c64 <strstr+0x10>
 8009c74:	3001      	adds	r0, #1
 8009c76:	7803      	ldrb	r3, [r0, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1ef      	bne.n	8009c5c <strstr+0x8>
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	e7ec      	b.n	8009c5a <strstr+0x6>

08009c80 <_close_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d06      	ldr	r5, [pc, #24]	; (8009c9c <_close_r+0x1c>)
 8009c84:	2300      	movs	r3, #0
 8009c86:	4604      	mov	r4, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	f7f8 fc7f 	bl	800258e <_close>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d102      	bne.n	8009c9a <_close_r+0x1a>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	b103      	cbz	r3, 8009c9a <_close_r+0x1a>
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	20005314 	.word	0x20005314

08009ca0 <_reclaim_reent>:
 8009ca0:	4b29      	ldr	r3, [pc, #164]	; (8009d48 <_reclaim_reent+0xa8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	4604      	mov	r4, r0
 8009caa:	d04b      	beq.n	8009d44 <_reclaim_reent+0xa4>
 8009cac:	69c3      	ldr	r3, [r0, #28]
 8009cae:	b143      	cbz	r3, 8009cc2 <_reclaim_reent+0x22>
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d144      	bne.n	8009d40 <_reclaim_reent+0xa0>
 8009cb6:	69e3      	ldr	r3, [r4, #28]
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	b111      	cbz	r1, 8009cc2 <_reclaim_reent+0x22>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 f8db 	bl	8009e78 <_free_r>
 8009cc2:	6961      	ldr	r1, [r4, #20]
 8009cc4:	b111      	cbz	r1, 8009ccc <_reclaim_reent+0x2c>
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 f8d6 	bl	8009e78 <_free_r>
 8009ccc:	69e1      	ldr	r1, [r4, #28]
 8009cce:	b111      	cbz	r1, 8009cd6 <_reclaim_reent+0x36>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 f8d1 	bl	8009e78 <_free_r>
 8009cd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009cd8:	b111      	cbz	r1, 8009ce0 <_reclaim_reent+0x40>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f8cc 	bl	8009e78 <_free_r>
 8009ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce2:	b111      	cbz	r1, 8009cea <_reclaim_reent+0x4a>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 f8c7 	bl	8009e78 <_free_r>
 8009cea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cec:	b111      	cbz	r1, 8009cf4 <_reclaim_reent+0x54>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f8c2 	bl	8009e78 <_free_r>
 8009cf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009cf6:	b111      	cbz	r1, 8009cfe <_reclaim_reent+0x5e>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f8bd 	bl	8009e78 <_free_r>
 8009cfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009d00:	b111      	cbz	r1, 8009d08 <_reclaim_reent+0x68>
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 f8b8 	bl	8009e78 <_free_r>
 8009d08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d0a:	b111      	cbz	r1, 8009d12 <_reclaim_reent+0x72>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 f8b3 	bl	8009e78 <_free_r>
 8009d12:	6a23      	ldr	r3, [r4, #32]
 8009d14:	b1b3      	cbz	r3, 8009d44 <_reclaim_reent+0xa4>
 8009d16:	4620      	mov	r0, r4
 8009d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d1c:	4718      	bx	r3
 8009d1e:	5949      	ldr	r1, [r1, r5]
 8009d20:	b941      	cbnz	r1, 8009d34 <_reclaim_reent+0x94>
 8009d22:	3504      	adds	r5, #4
 8009d24:	69e3      	ldr	r3, [r4, #28]
 8009d26:	2d80      	cmp	r5, #128	; 0x80
 8009d28:	68d9      	ldr	r1, [r3, #12]
 8009d2a:	d1f8      	bne.n	8009d1e <_reclaim_reent+0x7e>
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 f8a3 	bl	8009e78 <_free_r>
 8009d32:	e7c0      	b.n	8009cb6 <_reclaim_reent+0x16>
 8009d34:	680e      	ldr	r6, [r1, #0]
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 f89e 	bl	8009e78 <_free_r>
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	e7ef      	b.n	8009d20 <_reclaim_reent+0x80>
 8009d40:	2500      	movs	r5, #0
 8009d42:	e7ef      	b.n	8009d24 <_reclaim_reent+0x84>
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	bf00      	nop
 8009d48:	20000068 	.word	0x20000068

08009d4c <_lseek_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_lseek_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f8 fc3e 	bl	80025dc <_lseek>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_lseek_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_lseek_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20005314 	.word	0x20005314

08009d70 <_read_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_read_r+0x20>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f8 fbcc 	bl	800251c <_read>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_read_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_read_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	20005314 	.word	0x20005314

08009d94 <_write_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	; (8009db4 <_write_r+0x20>)
 8009d98:	4604      	mov	r4, r0
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	602a      	str	r2, [r5, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f7f8 fbd7 	bl	8002556 <_write>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_write_r+0x1e>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_write_r+0x1e>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20005314 	.word	0x20005314

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000068 	.word	0x20000068

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	; (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	; (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	; (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	; (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f001 fc08 	bl	800b5ec <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0800bc78 	.word	0x0800bc78
 8009e00:	0800bc78 	.word	0x0800bc78
 8009e04:	0800bc78 	.word	0x0800bc78
 8009e08:	0800bc7c 	.word	0x0800bc7c

08009e0c <__retarget_lock_acquire_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <__retarget_lock_release_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <strcpy>:
 8009e10:	4603      	mov	r3, r0
 8009e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e16:	f803 2b01 	strb.w	r2, [r3], #1
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	d1f9      	bne.n	8009e12 <strcpy+0x2>
 8009e1e:	4770      	bx	lr

08009e20 <memcpy>:
 8009e20:	440a      	add	r2, r1
 8009e22:	4291      	cmp	r1, r2
 8009e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e28:	d100      	bne.n	8009e2c <memcpy+0xc>
 8009e2a:	4770      	bx	lr
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e36:	4291      	cmp	r1, r2
 8009e38:	d1f9      	bne.n	8009e2e <memcpy+0xe>
 8009e3a:	bd10      	pop	{r4, pc}

08009e3c <__assert_func>:
 8009e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3e:	4614      	mov	r4, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <__assert_func+0x2c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4605      	mov	r5, r0
 8009e48:	68d8      	ldr	r0, [r3, #12]
 8009e4a:	b14c      	cbz	r4, 8009e60 <__assert_func+0x24>
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <__assert_func+0x30>)
 8009e4e:	9100      	str	r1, [sp, #0]
 8009e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e54:	4906      	ldr	r1, [pc, #24]	; (8009e70 <__assert_func+0x34>)
 8009e56:	462b      	mov	r3, r5
 8009e58:	f000 ffc4 	bl	800ade4 <fiprintf>
 8009e5c:	f001 f872 	bl	800af44 <abort>
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <__assert_func+0x38>)
 8009e62:	461c      	mov	r4, r3
 8009e64:	e7f3      	b.n	8009e4e <__assert_func+0x12>
 8009e66:	bf00      	nop
 8009e68:	20000068 	.word	0x20000068
 8009e6c:	0800bbe6 	.word	0x0800bbe6
 8009e70:	0800bbf3 	.word	0x0800bbf3
 8009e74:	0800bc21 	.word	0x0800bc21

08009e78 <_free_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d044      	beq.n	8009f08 <_free_r+0x90>
 8009e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8a:	bfb8      	it	lt
 8009e8c:	18e4      	addlt	r4, r4, r3
 8009e8e:	f000 f8e7 	bl	800a060 <__malloc_lock>
 8009e92:	4a1e      	ldr	r2, [pc, #120]	; (8009f0c <_free_r+0x94>)
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	b933      	cbnz	r3, 8009ea8 <_free_r+0x30>
 8009e9a:	6063      	str	r3, [r4, #4]
 8009e9c:	6014      	str	r4, [r2, #0]
 8009e9e:	b003      	add	sp, #12
 8009ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea4:	f000 b8e2 	b.w	800a06c <__malloc_unlock>
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d908      	bls.n	8009ebe <_free_r+0x46>
 8009eac:	6825      	ldr	r5, [r4, #0]
 8009eae:	1961      	adds	r1, r4, r5
 8009eb0:	428b      	cmp	r3, r1
 8009eb2:	bf01      	itttt	eq
 8009eb4:	6819      	ldreq	r1, [r3, #0]
 8009eb6:	685b      	ldreq	r3, [r3, #4]
 8009eb8:	1949      	addeq	r1, r1, r5
 8009eba:	6021      	streq	r1, [r4, #0]
 8009ebc:	e7ed      	b.n	8009e9a <_free_r+0x22>
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	b10b      	cbz	r3, 8009ec8 <_free_r+0x50>
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d9fa      	bls.n	8009ebe <_free_r+0x46>
 8009ec8:	6811      	ldr	r1, [r2, #0]
 8009eca:	1855      	adds	r5, r2, r1
 8009ecc:	42a5      	cmp	r5, r4
 8009ece:	d10b      	bne.n	8009ee8 <_free_r+0x70>
 8009ed0:	6824      	ldr	r4, [r4, #0]
 8009ed2:	4421      	add	r1, r4
 8009ed4:	1854      	adds	r4, r2, r1
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	6011      	str	r1, [r2, #0]
 8009eda:	d1e0      	bne.n	8009e9e <_free_r+0x26>
 8009edc:	681c      	ldr	r4, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	6053      	str	r3, [r2, #4]
 8009ee2:	440c      	add	r4, r1
 8009ee4:	6014      	str	r4, [r2, #0]
 8009ee6:	e7da      	b.n	8009e9e <_free_r+0x26>
 8009ee8:	d902      	bls.n	8009ef0 <_free_r+0x78>
 8009eea:	230c      	movs	r3, #12
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	e7d6      	b.n	8009e9e <_free_r+0x26>
 8009ef0:	6825      	ldr	r5, [r4, #0]
 8009ef2:	1961      	adds	r1, r4, r5
 8009ef4:	428b      	cmp	r3, r1
 8009ef6:	bf04      	itt	eq
 8009ef8:	6819      	ldreq	r1, [r3, #0]
 8009efa:	685b      	ldreq	r3, [r3, #4]
 8009efc:	6063      	str	r3, [r4, #4]
 8009efe:	bf04      	itt	eq
 8009f00:	1949      	addeq	r1, r1, r5
 8009f02:	6021      	streq	r1, [r4, #0]
 8009f04:	6054      	str	r4, [r2, #4]
 8009f06:	e7ca      	b.n	8009e9e <_free_r+0x26>
 8009f08:	b003      	add	sp, #12
 8009f0a:	bd30      	pop	{r4, r5, pc}
 8009f0c:	2000531c 	.word	0x2000531c

08009f10 <malloc>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <malloc+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f000 b823 	b.w	8009f60 <_malloc_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000068 	.word	0x20000068

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0e      	ldr	r6, [pc, #56]	; (8009f5c <sbrk_aligned+0x3c>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f000 fffa 	bl	800af24 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fff5 	bl	800af24 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d00a      	beq.n	8009f54 <sbrk_aligned+0x34>
 8009f3e:	1cc4      	adds	r4, r0, #3
 8009f40:	f024 0403 	bic.w	r4, r4, #3
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d007      	beq.n	8009f58 <sbrk_aligned+0x38>
 8009f48:	1a21      	subs	r1, r4, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 ffea 	bl	800af24 <_sbrk_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d101      	bne.n	8009f58 <sbrk_aligned+0x38>
 8009f54:	f04f 34ff 	mov.w	r4, #4294967295
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	20005320 	.word	0x20005320

08009f60 <_malloc_r>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4607      	mov	r7, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d905      	bls.n	8009f88 <_malloc_r+0x28>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	2600      	movs	r6, #0
 8009f82:	4630      	mov	r0, r6
 8009f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a05c <_malloc_r+0xfc>
 8009f8c:	f000 f868 	bl	800a060 <__malloc_lock>
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	461c      	mov	r4, r3
 8009f96:	bb5c      	cbnz	r4, 8009ff0 <_malloc_r+0x90>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7ff ffc0 	bl	8009f20 <sbrk_aligned>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	d155      	bne.n	800a052 <_malloc_r+0xf2>
 8009fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8009faa:	4626      	mov	r6, r4
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	d145      	bne.n	800a03c <_malloc_r+0xdc>
 8009fb0:	2c00      	cmp	r4, #0
 8009fb2:	d048      	beq.n	800a046 <_malloc_r+0xe6>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4638      	mov	r0, r7
 8009fba:	eb04 0903 	add.w	r9, r4, r3
 8009fbe:	f000 ffb1 	bl	800af24 <_sbrk_r>
 8009fc2:	4581      	cmp	r9, r0
 8009fc4:	d13f      	bne.n	800a046 <_malloc_r+0xe6>
 8009fc6:	6821      	ldr	r1, [r4, #0]
 8009fc8:	1a6d      	subs	r5, r5, r1
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ffa7 	bl	8009f20 <sbrk_aligned>
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d037      	beq.n	800a046 <_malloc_r+0xe6>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	442b      	add	r3, r5
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d038      	beq.n	800a056 <_malloc_r+0xf6>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	42a2      	cmp	r2, r4
 8009fe8:	d12b      	bne.n	800a042 <_malloc_r+0xe2>
 8009fea:	2200      	movs	r2, #0
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	e00f      	b.n	800a010 <_malloc_r+0xb0>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	d41f      	bmi.n	800a036 <_malloc_r+0xd6>
 8009ff6:	2a0b      	cmp	r2, #11
 8009ff8:	d917      	bls.n	800a02a <_malloc_r+0xca>
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	6025      	str	r5, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	6059      	strne	r1, [r3, #4]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	bf08      	it	eq
 800a008:	f8c8 1000 	streq.w	r1, [r8]
 800a00c:	5162      	str	r2, [r4, r5]
 800a00e:	604b      	str	r3, [r1, #4]
 800a010:	4638      	mov	r0, r7
 800a012:	f104 060b 	add.w	r6, r4, #11
 800a016:	f000 f829 	bl	800a06c <__malloc_unlock>
 800a01a:	f026 0607 	bic.w	r6, r6, #7
 800a01e:	1d23      	adds	r3, r4, #4
 800a020:	1af2      	subs	r2, r6, r3
 800a022:	d0ae      	beq.n	8009f82 <_malloc_r+0x22>
 800a024:	1b9b      	subs	r3, r3, r6
 800a026:	50a3      	str	r3, [r4, r2]
 800a028:	e7ab      	b.n	8009f82 <_malloc_r+0x22>
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	6862      	ldr	r2, [r4, #4]
 800a02e:	d1dd      	bne.n	8009fec <_malloc_r+0x8c>
 800a030:	f8c8 2000 	str.w	r2, [r8]
 800a034:	e7ec      	b.n	800a010 <_malloc_r+0xb0>
 800a036:	4623      	mov	r3, r4
 800a038:	6864      	ldr	r4, [r4, #4]
 800a03a:	e7ac      	b.n	8009f96 <_malloc_r+0x36>
 800a03c:	4634      	mov	r4, r6
 800a03e:	6876      	ldr	r6, [r6, #4]
 800a040:	e7b4      	b.n	8009fac <_malloc_r+0x4c>
 800a042:	4613      	mov	r3, r2
 800a044:	e7cc      	b.n	8009fe0 <_malloc_r+0x80>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f000 f80e 	bl	800a06c <__malloc_unlock>
 800a050:	e797      	b.n	8009f82 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7dc      	b.n	800a010 <_malloc_r+0xb0>
 800a056:	605b      	str	r3, [r3, #4]
 800a058:	deff      	udf	#255	; 0xff
 800a05a:	bf00      	nop
 800a05c:	2000531c 	.word	0x2000531c

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_lock+0x8>)
 800a062:	f7ff bed3 	b.w	8009e0c <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20005318 	.word	0x20005318

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__malloc_unlock+0x8>)
 800a06e:	f7ff bece 	b.w	8009e0e <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20005318 	.word	0x20005318

0800a078 <__ssputs_r>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	688e      	ldr	r6, [r1, #8]
 800a07e:	461f      	mov	r7, r3
 800a080:	42be      	cmp	r6, r7
 800a082:	680b      	ldr	r3, [r1, #0]
 800a084:	4682      	mov	sl, r0
 800a086:	460c      	mov	r4, r1
 800a088:	4690      	mov	r8, r2
 800a08a:	d82c      	bhi.n	800a0e6 <__ssputs_r+0x6e>
 800a08c:	898a      	ldrh	r2, [r1, #12]
 800a08e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a092:	d026      	beq.n	800a0e2 <__ssputs_r+0x6a>
 800a094:	6965      	ldr	r5, [r4, #20]
 800a096:	6909      	ldr	r1, [r1, #16]
 800a098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a09c:	eba3 0901 	sub.w	r9, r3, r1
 800a0a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0a4:	1c7b      	adds	r3, r7, #1
 800a0a6:	444b      	add	r3, r9
 800a0a8:	106d      	asrs	r5, r5, #1
 800a0aa:	429d      	cmp	r5, r3
 800a0ac:	bf38      	it	cc
 800a0ae:	461d      	movcc	r5, r3
 800a0b0:	0553      	lsls	r3, r2, #21
 800a0b2:	d527      	bpl.n	800a104 <__ssputs_r+0x8c>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7ff ff53 	bl	8009f60 <_malloc_r>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	b360      	cbz	r0, 800a118 <__ssputs_r+0xa0>
 800a0be:	6921      	ldr	r1, [r4, #16]
 800a0c0:	464a      	mov	r2, r9
 800a0c2:	f7ff fead 	bl	8009e20 <memcpy>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d0:	81a3      	strh	r3, [r4, #12]
 800a0d2:	6126      	str	r6, [r4, #16]
 800a0d4:	6165      	str	r5, [r4, #20]
 800a0d6:	444e      	add	r6, r9
 800a0d8:	eba5 0509 	sub.w	r5, r5, r9
 800a0dc:	6026      	str	r6, [r4, #0]
 800a0de:	60a5      	str	r5, [r4, #8]
 800a0e0:	463e      	mov	r6, r7
 800a0e2:	42be      	cmp	r6, r7
 800a0e4:	d900      	bls.n	800a0e8 <__ssputs_r+0x70>
 800a0e6:	463e      	mov	r6, r7
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	f000 fefe 	bl	800aeee <memmove>
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	1b9b      	subs	r3, r3, r6
 800a0f6:	60a3      	str	r3, [r4, #8]
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	4433      	add	r3, r6
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	2000      	movs	r0, #0
 800a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a104:	462a      	mov	r2, r5
 800a106:	f000 ff24 	bl	800af52 <_realloc_r>
 800a10a:	4606      	mov	r6, r0
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1e0      	bne.n	800a0d2 <__ssputs_r+0x5a>
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	4650      	mov	r0, sl
 800a114:	f7ff feb0 	bl	8009e78 <_free_r>
 800a118:	230c      	movs	r3, #12
 800a11a:	f8ca 3000 	str.w	r3, [sl]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	e7e9      	b.n	800a100 <__ssputs_r+0x88>

0800a12c <_svfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	4698      	mov	r8, r3
 800a132:	898b      	ldrh	r3, [r1, #12]
 800a134:	061b      	lsls	r3, r3, #24
 800a136:	b09d      	sub	sp, #116	; 0x74
 800a138:	4607      	mov	r7, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	d50e      	bpl.n	800a15e <_svfiprintf_r+0x32>
 800a140:	690b      	ldr	r3, [r1, #16]
 800a142:	b963      	cbnz	r3, 800a15e <_svfiprintf_r+0x32>
 800a144:	2140      	movs	r1, #64	; 0x40
 800a146:	f7ff ff0b 	bl	8009f60 <_malloc_r>
 800a14a:	6028      	str	r0, [r5, #0]
 800a14c:	6128      	str	r0, [r5, #16]
 800a14e:	b920      	cbnz	r0, 800a15a <_svfiprintf_r+0x2e>
 800a150:	230c      	movs	r3, #12
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e0d0      	b.n	800a2fc <_svfiprintf_r+0x1d0>
 800a15a:	2340      	movs	r3, #64	; 0x40
 800a15c:	616b      	str	r3, [r5, #20]
 800a15e:	2300      	movs	r3, #0
 800a160:	9309      	str	r3, [sp, #36]	; 0x24
 800a162:	2320      	movs	r3, #32
 800a164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a168:	f8cd 800c 	str.w	r8, [sp, #12]
 800a16c:	2330      	movs	r3, #48	; 0x30
 800a16e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a314 <_svfiprintf_r+0x1e8>
 800a172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a176:	f04f 0901 	mov.w	r9, #1
 800a17a:	4623      	mov	r3, r4
 800a17c:	469a      	mov	sl, r3
 800a17e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a182:	b10a      	cbz	r2, 800a188 <_svfiprintf_r+0x5c>
 800a184:	2a25      	cmp	r2, #37	; 0x25
 800a186:	d1f9      	bne.n	800a17c <_svfiprintf_r+0x50>
 800a188:	ebba 0b04 	subs.w	fp, sl, r4
 800a18c:	d00b      	beq.n	800a1a6 <_svfiprintf_r+0x7a>
 800a18e:	465b      	mov	r3, fp
 800a190:	4622      	mov	r2, r4
 800a192:	4629      	mov	r1, r5
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff ff6f 	bl	800a078 <__ssputs_r>
 800a19a:	3001      	adds	r0, #1
 800a19c:	f000 80a9 	beq.w	800a2f2 <_svfiprintf_r+0x1c6>
 800a1a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1a2:	445a      	add	r2, fp
 800a1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 80a1 	beq.w	800a2f2 <_svfiprintf_r+0x1c6>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ba:	f10a 0a01 	add.w	sl, sl, #1
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	9307      	str	r3, [sp, #28]
 800a1c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1c6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1c8:	4654      	mov	r4, sl
 800a1ca:	2205      	movs	r2, #5
 800a1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d0:	4850      	ldr	r0, [pc, #320]	; (800a314 <_svfiprintf_r+0x1e8>)
 800a1d2:	f7f6 f83d 	bl	8000250 <memchr>
 800a1d6:	9a04      	ldr	r2, [sp, #16]
 800a1d8:	b9d8      	cbnz	r0, 800a212 <_svfiprintf_r+0xe6>
 800a1da:	06d0      	lsls	r0, r2, #27
 800a1dc:	bf44      	itt	mi
 800a1de:	2320      	movmi	r3, #32
 800a1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1e4:	0711      	lsls	r1, r2, #28
 800a1e6:	bf44      	itt	mi
 800a1e8:	232b      	movmi	r3, #43	; 0x2b
 800a1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1f4:	d015      	beq.n	800a222 <_svfiprintf_r+0xf6>
 800a1f6:	9a07      	ldr	r2, [sp, #28]
 800a1f8:	4654      	mov	r4, sl
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f04f 0c0a 	mov.w	ip, #10
 800a200:	4621      	mov	r1, r4
 800a202:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a206:	3b30      	subs	r3, #48	; 0x30
 800a208:	2b09      	cmp	r3, #9
 800a20a:	d94d      	bls.n	800a2a8 <_svfiprintf_r+0x17c>
 800a20c:	b1b0      	cbz	r0, 800a23c <_svfiprintf_r+0x110>
 800a20e:	9207      	str	r2, [sp, #28]
 800a210:	e014      	b.n	800a23c <_svfiprintf_r+0x110>
 800a212:	eba0 0308 	sub.w	r3, r0, r8
 800a216:	fa09 f303 	lsl.w	r3, r9, r3
 800a21a:	4313      	orrs	r3, r2
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	46a2      	mov	sl, r4
 800a220:	e7d2      	b.n	800a1c8 <_svfiprintf_r+0x9c>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	1d19      	adds	r1, r3, #4
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	9103      	str	r1, [sp, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfbb      	ittet	lt
 800a22e:	425b      	neglt	r3, r3
 800a230:	f042 0202 	orrlt.w	r2, r2, #2
 800a234:	9307      	strge	r3, [sp, #28]
 800a236:	9307      	strlt	r3, [sp, #28]
 800a238:	bfb8      	it	lt
 800a23a:	9204      	strlt	r2, [sp, #16]
 800a23c:	7823      	ldrb	r3, [r4, #0]
 800a23e:	2b2e      	cmp	r3, #46	; 0x2e
 800a240:	d10c      	bne.n	800a25c <_svfiprintf_r+0x130>
 800a242:	7863      	ldrb	r3, [r4, #1]
 800a244:	2b2a      	cmp	r3, #42	; 0x2a
 800a246:	d134      	bne.n	800a2b2 <_svfiprintf_r+0x186>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	1d1a      	adds	r2, r3, #4
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	9203      	str	r2, [sp, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfb8      	it	lt
 800a254:	f04f 33ff 	movlt.w	r3, #4294967295
 800a258:	3402      	adds	r4, #2
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a324 <_svfiprintf_r+0x1f8>
 800a260:	7821      	ldrb	r1, [r4, #0]
 800a262:	2203      	movs	r2, #3
 800a264:	4650      	mov	r0, sl
 800a266:	f7f5 fff3 	bl	8000250 <memchr>
 800a26a:	b138      	cbz	r0, 800a27c <_svfiprintf_r+0x150>
 800a26c:	9b04      	ldr	r3, [sp, #16]
 800a26e:	eba0 000a 	sub.w	r0, r0, sl
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	4082      	lsls	r2, r0
 800a276:	4313      	orrs	r3, r2
 800a278:	3401      	adds	r4, #1
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a280:	4825      	ldr	r0, [pc, #148]	; (800a318 <_svfiprintf_r+0x1ec>)
 800a282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a286:	2206      	movs	r2, #6
 800a288:	f7f5 ffe2 	bl	8000250 <memchr>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d038      	beq.n	800a302 <_svfiprintf_r+0x1d6>
 800a290:	4b22      	ldr	r3, [pc, #136]	; (800a31c <_svfiprintf_r+0x1f0>)
 800a292:	bb1b      	cbnz	r3, 800a2dc <_svfiprintf_r+0x1b0>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	3307      	adds	r3, #7
 800a298:	f023 0307 	bic.w	r3, r3, #7
 800a29c:	3308      	adds	r3, #8
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	4433      	add	r3, r6
 800a2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a6:	e768      	b.n	800a17a <_svfiprintf_r+0x4e>
 800a2a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e7a6      	b.n	800a200 <_svfiprintf_r+0xd4>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	3401      	adds	r4, #1
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f04f 0c0a 	mov.w	ip, #10
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2c4:	3a30      	subs	r2, #48	; 0x30
 800a2c6:	2a09      	cmp	r2, #9
 800a2c8:	d903      	bls.n	800a2d2 <_svfiprintf_r+0x1a6>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0c6      	beq.n	800a25c <_svfiprintf_r+0x130>
 800a2ce:	9105      	str	r1, [sp, #20]
 800a2d0:	e7c4      	b.n	800a25c <_svfiprintf_r+0x130>
 800a2d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e7f0      	b.n	800a2be <_svfiprintf_r+0x192>
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <_svfiprintf_r+0x1f4>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f3af 8000 	nop.w
 800a2ec:	1c42      	adds	r2, r0, #1
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	d1d6      	bne.n	800a2a0 <_svfiprintf_r+0x174>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	065b      	lsls	r3, r3, #25
 800a2f6:	f53f af2d 	bmi.w	800a154 <_svfiprintf_r+0x28>
 800a2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	ab03      	add	r3, sp, #12
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	462a      	mov	r2, r5
 800a308:	4b05      	ldr	r3, [pc, #20]	; (800a320 <_svfiprintf_r+0x1f4>)
 800a30a:	a904      	add	r1, sp, #16
 800a30c:	4638      	mov	r0, r7
 800a30e:	f000 fa4b 	bl	800a7a8 <_printf_i>
 800a312:	e7eb      	b.n	800a2ec <_svfiprintf_r+0x1c0>
 800a314:	0800bc22 	.word	0x0800bc22
 800a318:	0800bc2c 	.word	0x0800bc2c
 800a31c:	00000000 	.word	0x00000000
 800a320:	0800a079 	.word	0x0800a079
 800a324:	0800bc28 	.word	0x0800bc28

0800a328 <_sungetc_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	1c4b      	adds	r3, r1, #1
 800a32c:	4614      	mov	r4, r2
 800a32e:	d103      	bne.n	800a338 <_sungetc_r+0x10>
 800a330:	f04f 35ff 	mov.w	r5, #4294967295
 800a334:	4628      	mov	r0, r5
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	8993      	ldrh	r3, [r2, #12]
 800a33a:	f023 0320 	bic.w	r3, r3, #32
 800a33e:	8193      	strh	r3, [r2, #12]
 800a340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a342:	6852      	ldr	r2, [r2, #4]
 800a344:	b2cd      	uxtb	r5, r1
 800a346:	b18b      	cbz	r3, 800a36c <_sungetc_r+0x44>
 800a348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a34a:	4293      	cmp	r3, r2
 800a34c:	dd08      	ble.n	800a360 <_sungetc_r+0x38>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	1e5a      	subs	r2, r3, #1
 800a352:	6022      	str	r2, [r4, #0]
 800a354:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	3301      	adds	r3, #1
 800a35c:	6063      	str	r3, [r4, #4]
 800a35e:	e7e9      	b.n	800a334 <_sungetc_r+0xc>
 800a360:	4621      	mov	r1, r4
 800a362:	f000 fd8a 	bl	800ae7a <__submore>
 800a366:	2800      	cmp	r0, #0
 800a368:	d0f1      	beq.n	800a34e <_sungetc_r+0x26>
 800a36a:	e7e1      	b.n	800a330 <_sungetc_r+0x8>
 800a36c:	6921      	ldr	r1, [r4, #16]
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	b151      	cbz	r1, 800a388 <_sungetc_r+0x60>
 800a372:	4299      	cmp	r1, r3
 800a374:	d208      	bcs.n	800a388 <_sungetc_r+0x60>
 800a376:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a37a:	42a9      	cmp	r1, r5
 800a37c:	d104      	bne.n	800a388 <_sungetc_r+0x60>
 800a37e:	3b01      	subs	r3, #1
 800a380:	3201      	adds	r2, #1
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	6062      	str	r2, [r4, #4]
 800a386:	e7d5      	b.n	800a334 <_sungetc_r+0xc>
 800a388:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a390:	6363      	str	r3, [r4, #52]	; 0x34
 800a392:	2303      	movs	r3, #3
 800a394:	63a3      	str	r3, [r4, #56]	; 0x38
 800a396:	4623      	mov	r3, r4
 800a398:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e7dc      	b.n	800a35c <_sungetc_r+0x34>

0800a3a2 <__ssrefill_r>:
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a3a8:	b169      	cbz	r1, 800a3c6 <__ssrefill_r+0x24>
 800a3aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	d001      	beq.n	800a3b6 <__ssrefill_r+0x14>
 800a3b2:	f7ff fd61 	bl	8009e78 <_free_r>
 800a3b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a3be:	b113      	cbz	r3, 800a3c6 <__ssrefill_r+0x24>
 800a3c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6063      	str	r3, [r4, #4]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f043 0320 	orr.w	r3, r3, #32
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	e7f3      	b.n	800a3c4 <__ssrefill_r+0x22>

0800a3dc <__ssvfiscanf_r>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a3ec:	49a6      	ldr	r1, [pc, #664]	; (800a688 <__ssvfiscanf_r+0x2ac>)
 800a3ee:	91a0      	str	r1, [sp, #640]	; 0x280
 800a3f0:	f10d 0804 	add.w	r8, sp, #4
 800a3f4:	49a5      	ldr	r1, [pc, #660]	; (800a68c <__ssvfiscanf_r+0x2b0>)
 800a3f6:	4fa6      	ldr	r7, [pc, #664]	; (800a690 <__ssvfiscanf_r+0x2b4>)
 800a3f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a694 <__ssvfiscanf_r+0x2b8>
 800a3fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a400:	4606      	mov	r6, r0
 800a402:	91a1      	str	r1, [sp, #644]	; 0x284
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	7813      	ldrb	r3, [r2, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 815a 	beq.w	800a6c2 <__ssvfiscanf_r+0x2e6>
 800a40e:	5cf9      	ldrb	r1, [r7, r3]
 800a410:	f011 0108 	ands.w	r1, r1, #8
 800a414:	f102 0501 	add.w	r5, r2, #1
 800a418:	d019      	beq.n	800a44e <__ssvfiscanf_r+0x72>
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd0f      	ble.n	800a440 <__ssvfiscanf_r+0x64>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	781a      	ldrb	r2, [r3, #0]
 800a424:	5cba      	ldrb	r2, [r7, r2]
 800a426:	0712      	lsls	r2, r2, #28
 800a428:	d401      	bmi.n	800a42e <__ssvfiscanf_r+0x52>
 800a42a:	462a      	mov	r2, r5
 800a42c:	e7eb      	b.n	800a406 <__ssvfiscanf_r+0x2a>
 800a42e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a430:	3201      	adds	r2, #1
 800a432:	9245      	str	r2, [sp, #276]	; 0x114
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	3301      	adds	r3, #1
 800a438:	3a01      	subs	r2, #1
 800a43a:	6062      	str	r2, [r4, #4]
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	e7ec      	b.n	800a41a <__ssvfiscanf_r+0x3e>
 800a440:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a442:	4621      	mov	r1, r4
 800a444:	4630      	mov	r0, r6
 800a446:	4798      	blx	r3
 800a448:	2800      	cmp	r0, #0
 800a44a:	d0e9      	beq.n	800a420 <__ssvfiscanf_r+0x44>
 800a44c:	e7ed      	b.n	800a42a <__ssvfiscanf_r+0x4e>
 800a44e:	2b25      	cmp	r3, #37	; 0x25
 800a450:	d012      	beq.n	800a478 <__ssvfiscanf_r+0x9c>
 800a452:	469a      	mov	sl, r3
 800a454:	6863      	ldr	r3, [r4, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f340 8091 	ble.w	800a57e <__ssvfiscanf_r+0x1a2>
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	7813      	ldrb	r3, [r2, #0]
 800a460:	4553      	cmp	r3, sl
 800a462:	f040 812e 	bne.w	800a6c2 <__ssvfiscanf_r+0x2e6>
 800a466:	6863      	ldr	r3, [r4, #4]
 800a468:	3b01      	subs	r3, #1
 800a46a:	6063      	str	r3, [r4, #4]
 800a46c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a46e:	3201      	adds	r2, #1
 800a470:	3301      	adds	r3, #1
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	9345      	str	r3, [sp, #276]	; 0x114
 800a476:	e7d8      	b.n	800a42a <__ssvfiscanf_r+0x4e>
 800a478:	9141      	str	r1, [sp, #260]	; 0x104
 800a47a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a47c:	7853      	ldrb	r3, [r2, #1]
 800a47e:	2b2a      	cmp	r3, #42	; 0x2a
 800a480:	bf02      	ittt	eq
 800a482:	2310      	moveq	r3, #16
 800a484:	1c95      	addeq	r5, r2, #2
 800a486:	9341      	streq	r3, [sp, #260]	; 0x104
 800a488:	220a      	movs	r2, #10
 800a48a:	46aa      	mov	sl, r5
 800a48c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a490:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a494:	2b09      	cmp	r3, #9
 800a496:	d91c      	bls.n	800a4d2 <__ssvfiscanf_r+0xf6>
 800a498:	487e      	ldr	r0, [pc, #504]	; (800a694 <__ssvfiscanf_r+0x2b8>)
 800a49a:	2203      	movs	r2, #3
 800a49c:	f7f5 fed8 	bl	8000250 <memchr>
 800a4a0:	b138      	cbz	r0, 800a4b2 <__ssvfiscanf_r+0xd6>
 800a4a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a4a4:	eba0 0009 	sub.w	r0, r0, r9
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	4083      	lsls	r3, r0
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	9341      	str	r3, [sp, #260]	; 0x104
 800a4b0:	4655      	mov	r5, sl
 800a4b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4b6:	2b78      	cmp	r3, #120	; 0x78
 800a4b8:	d806      	bhi.n	800a4c8 <__ssvfiscanf_r+0xec>
 800a4ba:	2b57      	cmp	r3, #87	; 0x57
 800a4bc:	d810      	bhi.n	800a4e0 <__ssvfiscanf_r+0x104>
 800a4be:	2b25      	cmp	r3, #37	; 0x25
 800a4c0:	d0c7      	beq.n	800a452 <__ssvfiscanf_r+0x76>
 800a4c2:	d857      	bhi.n	800a574 <__ssvfiscanf_r+0x198>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d065      	beq.n	800a594 <__ssvfiscanf_r+0x1b8>
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800a4cc:	230a      	movs	r3, #10
 800a4ce:	9342      	str	r3, [sp, #264]	; 0x108
 800a4d0:	e076      	b.n	800a5c0 <__ssvfiscanf_r+0x1e4>
 800a4d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a4d4:	fb02 1103 	mla	r1, r2, r3, r1
 800a4d8:	3930      	subs	r1, #48	; 0x30
 800a4da:	9143      	str	r1, [sp, #268]	; 0x10c
 800a4dc:	4655      	mov	r5, sl
 800a4de:	e7d4      	b.n	800a48a <__ssvfiscanf_r+0xae>
 800a4e0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a4e4:	2a20      	cmp	r2, #32
 800a4e6:	d8ef      	bhi.n	800a4c8 <__ssvfiscanf_r+0xec>
 800a4e8:	a101      	add	r1, pc, #4	; (adr r1, 800a4f0 <__ssvfiscanf_r+0x114>)
 800a4ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a5a3 	.word	0x0800a5a3
 800a4f4:	0800a4c9 	.word	0x0800a4c9
 800a4f8:	0800a4c9 	.word	0x0800a4c9
 800a4fc:	0800a601 	.word	0x0800a601
 800a500:	0800a4c9 	.word	0x0800a4c9
 800a504:	0800a4c9 	.word	0x0800a4c9
 800a508:	0800a4c9 	.word	0x0800a4c9
 800a50c:	0800a4c9 	.word	0x0800a4c9
 800a510:	0800a4c9 	.word	0x0800a4c9
 800a514:	0800a4c9 	.word	0x0800a4c9
 800a518:	0800a4c9 	.word	0x0800a4c9
 800a51c:	0800a617 	.word	0x0800a617
 800a520:	0800a5fd 	.word	0x0800a5fd
 800a524:	0800a57b 	.word	0x0800a57b
 800a528:	0800a57b 	.word	0x0800a57b
 800a52c:	0800a57b 	.word	0x0800a57b
 800a530:	0800a4c9 	.word	0x0800a4c9
 800a534:	0800a5b9 	.word	0x0800a5b9
 800a538:	0800a4c9 	.word	0x0800a4c9
 800a53c:	0800a4c9 	.word	0x0800a4c9
 800a540:	0800a4c9 	.word	0x0800a4c9
 800a544:	0800a4c9 	.word	0x0800a4c9
 800a548:	0800a627 	.word	0x0800a627
 800a54c:	0800a5f5 	.word	0x0800a5f5
 800a550:	0800a59b 	.word	0x0800a59b
 800a554:	0800a4c9 	.word	0x0800a4c9
 800a558:	0800a4c9 	.word	0x0800a4c9
 800a55c:	0800a623 	.word	0x0800a623
 800a560:	0800a4c9 	.word	0x0800a4c9
 800a564:	0800a5fd 	.word	0x0800a5fd
 800a568:	0800a4c9 	.word	0x0800a4c9
 800a56c:	0800a4c9 	.word	0x0800a4c9
 800a570:	0800a5a3 	.word	0x0800a5a3
 800a574:	3b45      	subs	r3, #69	; 0x45
 800a576:	2b02      	cmp	r3, #2
 800a578:	d8a6      	bhi.n	800a4c8 <__ssvfiscanf_r+0xec>
 800a57a:	2305      	movs	r3, #5
 800a57c:	e01f      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a57e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a580:	4621      	mov	r1, r4
 800a582:	4630      	mov	r0, r6
 800a584:	4798      	blx	r3
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f af68 	beq.w	800a45c <__ssvfiscanf_r+0x80>
 800a58c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a58e:	2800      	cmp	r0, #0
 800a590:	f040 808d 	bne.w	800a6ae <__ssvfiscanf_r+0x2d2>
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	e08f      	b.n	800a6ba <__ssvfiscanf_r+0x2de>
 800a59a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a59c:	f042 0220 	orr.w	r2, r2, #32
 800a5a0:	9241      	str	r2, [sp, #260]	; 0x104
 800a5a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a5a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a8:	9241      	str	r2, [sp, #260]	; 0x104
 800a5aa:	2210      	movs	r2, #16
 800a5ac:	2b6f      	cmp	r3, #111	; 0x6f
 800a5ae:	9242      	str	r2, [sp, #264]	; 0x108
 800a5b0:	bf34      	ite	cc
 800a5b2:	2303      	movcc	r3, #3
 800a5b4:	2304      	movcs	r3, #4
 800a5b6:	e002      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9342      	str	r3, [sp, #264]	; 0x108
 800a5bc:	2303      	movs	r3, #3
 800a5be:	9347      	str	r3, [sp, #284]	; 0x11c
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	dd3d      	ble.n	800a642 <__ssvfiscanf_r+0x266>
 800a5c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a5c8:	0659      	lsls	r1, r3, #25
 800a5ca:	d404      	bmi.n	800a5d6 <__ssvfiscanf_r+0x1fa>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	5cba      	ldrb	r2, [r7, r2]
 800a5d2:	0712      	lsls	r2, r2, #28
 800a5d4:	d43c      	bmi.n	800a650 <__ssvfiscanf_r+0x274>
 800a5d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	dc4b      	bgt.n	800a674 <__ssvfiscanf_r+0x298>
 800a5dc:	466b      	mov	r3, sp
 800a5de:	4622      	mov	r2, r4
 800a5e0:	a941      	add	r1, sp, #260	; 0x104
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f000 fa02 	bl	800a9ec <_scanf_chars>
 800a5e8:	2801      	cmp	r0, #1
 800a5ea:	d06a      	beq.n	800a6c2 <__ssvfiscanf_r+0x2e6>
 800a5ec:	2802      	cmp	r0, #2
 800a5ee:	f47f af1c 	bne.w	800a42a <__ssvfiscanf_r+0x4e>
 800a5f2:	e7cb      	b.n	800a58c <__ssvfiscanf_r+0x1b0>
 800a5f4:	2308      	movs	r3, #8
 800a5f6:	9342      	str	r3, [sp, #264]	; 0x108
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	e7e0      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a5fc:	220a      	movs	r2, #10
 800a5fe:	e7d5      	b.n	800a5ac <__ssvfiscanf_r+0x1d0>
 800a600:	4629      	mov	r1, r5
 800a602:	4640      	mov	r0, r8
 800a604:	f000 fc00 	bl	800ae08 <__sccl>
 800a608:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60e:	9341      	str	r3, [sp, #260]	; 0x104
 800a610:	4605      	mov	r5, r0
 800a612:	2301      	movs	r3, #1
 800a614:	e7d3      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a616:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61c:	9341      	str	r3, [sp, #260]	; 0x104
 800a61e:	2300      	movs	r3, #0
 800a620:	e7cd      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a622:	2302      	movs	r3, #2
 800a624:	e7cb      	b.n	800a5be <__ssvfiscanf_r+0x1e2>
 800a626:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a628:	06c3      	lsls	r3, r0, #27
 800a62a:	f53f aefe 	bmi.w	800a42a <__ssvfiscanf_r+0x4e>
 800a62e:	9b00      	ldr	r3, [sp, #0]
 800a630:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a632:	1d19      	adds	r1, r3, #4
 800a634:	9100      	str	r1, [sp, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	07c0      	lsls	r0, r0, #31
 800a63a:	bf4c      	ite	mi
 800a63c:	801a      	strhmi	r2, [r3, #0]
 800a63e:	601a      	strpl	r2, [r3, #0]
 800a640:	e6f3      	b.n	800a42a <__ssvfiscanf_r+0x4e>
 800a642:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a644:	4621      	mov	r1, r4
 800a646:	4630      	mov	r0, r6
 800a648:	4798      	blx	r3
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d0bb      	beq.n	800a5c6 <__ssvfiscanf_r+0x1ea>
 800a64e:	e79d      	b.n	800a58c <__ssvfiscanf_r+0x1b0>
 800a650:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a652:	3201      	adds	r2, #1
 800a654:	9245      	str	r2, [sp, #276]	; 0x114
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	3a01      	subs	r2, #1
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	6062      	str	r2, [r4, #4]
 800a65e:	dd02      	ble.n	800a666 <__ssvfiscanf_r+0x28a>
 800a660:	3301      	adds	r3, #1
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	e7b2      	b.n	800a5cc <__ssvfiscanf_r+0x1f0>
 800a666:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a668:	4621      	mov	r1, r4
 800a66a:	4630      	mov	r0, r6
 800a66c:	4798      	blx	r3
 800a66e:	2800      	cmp	r0, #0
 800a670:	d0ac      	beq.n	800a5cc <__ssvfiscanf_r+0x1f0>
 800a672:	e78b      	b.n	800a58c <__ssvfiscanf_r+0x1b0>
 800a674:	2b04      	cmp	r3, #4
 800a676:	dc0f      	bgt.n	800a698 <__ssvfiscanf_r+0x2bc>
 800a678:	466b      	mov	r3, sp
 800a67a:	4622      	mov	r2, r4
 800a67c:	a941      	add	r1, sp, #260	; 0x104
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 fa0e 	bl	800aaa0 <_scanf_i>
 800a684:	e7b0      	b.n	800a5e8 <__ssvfiscanf_r+0x20c>
 800a686:	bf00      	nop
 800a688:	0800a329 	.word	0x0800a329
 800a68c:	0800a3a3 	.word	0x0800a3a3
 800a690:	0800ba75 	.word	0x0800ba75
 800a694:	0800bc28 	.word	0x0800bc28
 800a698:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <__ssvfiscanf_r+0x2ec>)
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f43f aec5 	beq.w	800a42a <__ssvfiscanf_r+0x4e>
 800a6a0:	466b      	mov	r3, sp
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	a941      	add	r1, sp, #260	; 0x104
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f3af 8000 	nop.w
 800a6ac:	e79c      	b.n	800a5e8 <__ssvfiscanf_r+0x20c>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a6b4:	bf18      	it	ne
 800a6b6:	f04f 30ff 	movne.w	r0, #4294967295
 800a6ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a6c4:	e7f9      	b.n	800a6ba <__ssvfiscanf_r+0x2de>
 800a6c6:	bf00      	nop
 800a6c8:	00000000 	.word	0x00000000

0800a6cc <_printf_common>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	4699      	mov	r9, r3
 800a6d4:	688a      	ldr	r2, [r1, #8]
 800a6d6:	690b      	ldr	r3, [r1, #16]
 800a6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	bfb8      	it	lt
 800a6e0:	4613      	movlt	r3, r2
 800a6e2:	6033      	str	r3, [r6, #0]
 800a6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	b10a      	cbz	r2, 800a6f2 <_printf_common+0x26>
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	6033      	str	r3, [r6, #0]
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	0699      	lsls	r1, r3, #26
 800a6f6:	bf42      	ittt	mi
 800a6f8:	6833      	ldrmi	r3, [r6, #0]
 800a6fa:	3302      	addmi	r3, #2
 800a6fc:	6033      	strmi	r3, [r6, #0]
 800a6fe:	6825      	ldr	r5, [r4, #0]
 800a700:	f015 0506 	ands.w	r5, r5, #6
 800a704:	d106      	bne.n	800a714 <_printf_common+0x48>
 800a706:	f104 0a19 	add.w	sl, r4, #25
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	6832      	ldr	r2, [r6, #0]
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	42ab      	cmp	r3, r5
 800a712:	dc26      	bgt.n	800a762 <_printf_common+0x96>
 800a714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a718:	1e13      	subs	r3, r2, #0
 800a71a:	6822      	ldr	r2, [r4, #0]
 800a71c:	bf18      	it	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	0692      	lsls	r2, r2, #26
 800a722:	d42b      	bmi.n	800a77c <_printf_common+0xb0>
 800a724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a728:	4649      	mov	r1, r9
 800a72a:	4638      	mov	r0, r7
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d01e      	beq.n	800a770 <_printf_common+0xa4>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	6922      	ldr	r2, [r4, #16]
 800a736:	f003 0306 	and.w	r3, r3, #6
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	bf02      	ittt	eq
 800a73e:	68e5      	ldreq	r5, [r4, #12]
 800a740:	6833      	ldreq	r3, [r6, #0]
 800a742:	1aed      	subeq	r5, r5, r3
 800a744:	68a3      	ldr	r3, [r4, #8]
 800a746:	bf0c      	ite	eq
 800a748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a74c:	2500      	movne	r5, #0
 800a74e:	4293      	cmp	r3, r2
 800a750:	bfc4      	itt	gt
 800a752:	1a9b      	subgt	r3, r3, r2
 800a754:	18ed      	addgt	r5, r5, r3
 800a756:	2600      	movs	r6, #0
 800a758:	341a      	adds	r4, #26
 800a75a:	42b5      	cmp	r5, r6
 800a75c:	d11a      	bne.n	800a794 <_printf_common+0xc8>
 800a75e:	2000      	movs	r0, #0
 800a760:	e008      	b.n	800a774 <_printf_common+0xa8>
 800a762:	2301      	movs	r3, #1
 800a764:	4652      	mov	r2, sl
 800a766:	4649      	mov	r1, r9
 800a768:	4638      	mov	r0, r7
 800a76a:	47c0      	blx	r8
 800a76c:	3001      	adds	r0, #1
 800a76e:	d103      	bne.n	800a778 <_printf_common+0xac>
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a778:	3501      	adds	r5, #1
 800a77a:	e7c6      	b.n	800a70a <_printf_common+0x3e>
 800a77c:	18e1      	adds	r1, r4, r3
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	2030      	movs	r0, #48	; 0x30
 800a782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a786:	4422      	add	r2, r4
 800a788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a78c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a790:	3302      	adds	r3, #2
 800a792:	e7c7      	b.n	800a724 <_printf_common+0x58>
 800a794:	2301      	movs	r3, #1
 800a796:	4622      	mov	r2, r4
 800a798:	4649      	mov	r1, r9
 800a79a:	4638      	mov	r0, r7
 800a79c:	47c0      	blx	r8
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d0e6      	beq.n	800a770 <_printf_common+0xa4>
 800a7a2:	3601      	adds	r6, #1
 800a7a4:	e7d9      	b.n	800a75a <_printf_common+0x8e>
	...

0800a7a8 <_printf_i>:
 800a7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	7e0f      	ldrb	r7, [r1, #24]
 800a7ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7b0:	2f78      	cmp	r7, #120	; 0x78
 800a7b2:	4691      	mov	r9, r2
 800a7b4:	4680      	mov	r8, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	469a      	mov	sl, r3
 800a7ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7be:	d807      	bhi.n	800a7d0 <_printf_i+0x28>
 800a7c0:	2f62      	cmp	r7, #98	; 0x62
 800a7c2:	d80a      	bhi.n	800a7da <_printf_i+0x32>
 800a7c4:	2f00      	cmp	r7, #0
 800a7c6:	f000 80d4 	beq.w	800a972 <_printf_i+0x1ca>
 800a7ca:	2f58      	cmp	r7, #88	; 0x58
 800a7cc:	f000 80c0 	beq.w	800a950 <_printf_i+0x1a8>
 800a7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7d8:	e03a      	b.n	800a850 <_printf_i+0xa8>
 800a7da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7de:	2b15      	cmp	r3, #21
 800a7e0:	d8f6      	bhi.n	800a7d0 <_printf_i+0x28>
 800a7e2:	a101      	add	r1, pc, #4	; (adr r1, 800a7e8 <_printf_i+0x40>)
 800a7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7e8:	0800a841 	.word	0x0800a841
 800a7ec:	0800a855 	.word	0x0800a855
 800a7f0:	0800a7d1 	.word	0x0800a7d1
 800a7f4:	0800a7d1 	.word	0x0800a7d1
 800a7f8:	0800a7d1 	.word	0x0800a7d1
 800a7fc:	0800a7d1 	.word	0x0800a7d1
 800a800:	0800a855 	.word	0x0800a855
 800a804:	0800a7d1 	.word	0x0800a7d1
 800a808:	0800a7d1 	.word	0x0800a7d1
 800a80c:	0800a7d1 	.word	0x0800a7d1
 800a810:	0800a7d1 	.word	0x0800a7d1
 800a814:	0800a959 	.word	0x0800a959
 800a818:	0800a881 	.word	0x0800a881
 800a81c:	0800a913 	.word	0x0800a913
 800a820:	0800a7d1 	.word	0x0800a7d1
 800a824:	0800a7d1 	.word	0x0800a7d1
 800a828:	0800a97b 	.word	0x0800a97b
 800a82c:	0800a7d1 	.word	0x0800a7d1
 800a830:	0800a881 	.word	0x0800a881
 800a834:	0800a7d1 	.word	0x0800a7d1
 800a838:	0800a7d1 	.word	0x0800a7d1
 800a83c:	0800a91b 	.word	0x0800a91b
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	1d1a      	adds	r2, r3, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	602a      	str	r2, [r5, #0]
 800a848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a84c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a850:	2301      	movs	r3, #1
 800a852:	e09f      	b.n	800a994 <_printf_i+0x1ec>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	0607      	lsls	r7, r0, #24
 800a85a:	f103 0104 	add.w	r1, r3, #4
 800a85e:	6029      	str	r1, [r5, #0]
 800a860:	d501      	bpl.n	800a866 <_printf_i+0xbe>
 800a862:	681e      	ldr	r6, [r3, #0]
 800a864:	e003      	b.n	800a86e <_printf_i+0xc6>
 800a866:	0646      	lsls	r6, r0, #25
 800a868:	d5fb      	bpl.n	800a862 <_printf_i+0xba>
 800a86a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a86e:	2e00      	cmp	r6, #0
 800a870:	da03      	bge.n	800a87a <_printf_i+0xd2>
 800a872:	232d      	movs	r3, #45	; 0x2d
 800a874:	4276      	negs	r6, r6
 800a876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87a:	485a      	ldr	r0, [pc, #360]	; (800a9e4 <_printf_i+0x23c>)
 800a87c:	230a      	movs	r3, #10
 800a87e:	e012      	b.n	800a8a6 <_printf_i+0xfe>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	6820      	ldr	r0, [r4, #0]
 800a884:	1d19      	adds	r1, r3, #4
 800a886:	6029      	str	r1, [r5, #0]
 800a888:	0605      	lsls	r5, r0, #24
 800a88a:	d501      	bpl.n	800a890 <_printf_i+0xe8>
 800a88c:	681e      	ldr	r6, [r3, #0]
 800a88e:	e002      	b.n	800a896 <_printf_i+0xee>
 800a890:	0641      	lsls	r1, r0, #25
 800a892:	d5fb      	bpl.n	800a88c <_printf_i+0xe4>
 800a894:	881e      	ldrh	r6, [r3, #0]
 800a896:	4853      	ldr	r0, [pc, #332]	; (800a9e4 <_printf_i+0x23c>)
 800a898:	2f6f      	cmp	r7, #111	; 0x6f
 800a89a:	bf0c      	ite	eq
 800a89c:	2308      	moveq	r3, #8
 800a89e:	230a      	movne	r3, #10
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8a6:	6865      	ldr	r5, [r4, #4]
 800a8a8:	60a5      	str	r5, [r4, #8]
 800a8aa:	2d00      	cmp	r5, #0
 800a8ac:	bfa2      	ittt	ge
 800a8ae:	6821      	ldrge	r1, [r4, #0]
 800a8b0:	f021 0104 	bicge.w	r1, r1, #4
 800a8b4:	6021      	strge	r1, [r4, #0]
 800a8b6:	b90e      	cbnz	r6, 800a8bc <_printf_i+0x114>
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	d04b      	beq.n	800a954 <_printf_i+0x1ac>
 800a8bc:	4615      	mov	r5, r2
 800a8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8c6:	5dc7      	ldrb	r7, [r0, r7]
 800a8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8cc:	4637      	mov	r7, r6
 800a8ce:	42bb      	cmp	r3, r7
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	d9f4      	bls.n	800a8be <_printf_i+0x116>
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d10b      	bne.n	800a8f0 <_printf_i+0x148>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07de      	lsls	r6, r3, #31
 800a8dc:	d508      	bpl.n	800a8f0 <_printf_i+0x148>
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	6861      	ldr	r1, [r4, #4]
 800a8e2:	4299      	cmp	r1, r3
 800a8e4:	bfde      	ittt	le
 800a8e6:	2330      	movle	r3, #48	; 0x30
 800a8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8f0:	1b52      	subs	r2, r2, r5
 800a8f2:	6122      	str	r2, [r4, #16]
 800a8f4:	f8cd a000 	str.w	sl, [sp]
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	aa03      	add	r2, sp, #12
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7ff fee4 	bl	800a6cc <_printf_common>
 800a904:	3001      	adds	r0, #1
 800a906:	d14a      	bne.n	800a99e <_printf_i+0x1f6>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	b004      	add	sp, #16
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	f043 0320 	orr.w	r3, r3, #32
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	4833      	ldr	r0, [pc, #204]	; (800a9e8 <_printf_i+0x240>)
 800a91c:	2778      	movs	r7, #120	; 0x78
 800a91e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	6829      	ldr	r1, [r5, #0]
 800a926:	061f      	lsls	r7, r3, #24
 800a928:	f851 6b04 	ldr.w	r6, [r1], #4
 800a92c:	d402      	bmi.n	800a934 <_printf_i+0x18c>
 800a92e:	065f      	lsls	r7, r3, #25
 800a930:	bf48      	it	mi
 800a932:	b2b6      	uxthmi	r6, r6
 800a934:	07df      	lsls	r7, r3, #31
 800a936:	bf48      	it	mi
 800a938:	f043 0320 	orrmi.w	r3, r3, #32
 800a93c:	6029      	str	r1, [r5, #0]
 800a93e:	bf48      	it	mi
 800a940:	6023      	strmi	r3, [r4, #0]
 800a942:	b91e      	cbnz	r6, 800a94c <_printf_i+0x1a4>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	f023 0320 	bic.w	r3, r3, #32
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	2310      	movs	r3, #16
 800a94e:	e7a7      	b.n	800a8a0 <_printf_i+0xf8>
 800a950:	4824      	ldr	r0, [pc, #144]	; (800a9e4 <_printf_i+0x23c>)
 800a952:	e7e4      	b.n	800a91e <_printf_i+0x176>
 800a954:	4615      	mov	r5, r2
 800a956:	e7bd      	b.n	800a8d4 <_printf_i+0x12c>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	6826      	ldr	r6, [r4, #0]
 800a95c:	6961      	ldr	r1, [r4, #20]
 800a95e:	1d18      	adds	r0, r3, #4
 800a960:	6028      	str	r0, [r5, #0]
 800a962:	0635      	lsls	r5, r6, #24
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	d501      	bpl.n	800a96c <_printf_i+0x1c4>
 800a968:	6019      	str	r1, [r3, #0]
 800a96a:	e002      	b.n	800a972 <_printf_i+0x1ca>
 800a96c:	0670      	lsls	r0, r6, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0x1c0>
 800a970:	8019      	strh	r1, [r3, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	4615      	mov	r5, r2
 800a978:	e7bc      	b.n	800a8f4 <_printf_i+0x14c>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	1d1a      	adds	r2, r3, #4
 800a97e:	602a      	str	r2, [r5, #0]
 800a980:	681d      	ldr	r5, [r3, #0]
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	2100      	movs	r1, #0
 800a986:	4628      	mov	r0, r5
 800a988:	f7f5 fc62 	bl	8000250 <memchr>
 800a98c:	b108      	cbz	r0, 800a992 <_printf_i+0x1ea>
 800a98e:	1b40      	subs	r0, r0, r5
 800a990:	6060      	str	r0, [r4, #4]
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	2300      	movs	r3, #0
 800a998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a99c:	e7aa      	b.n	800a8f4 <_printf_i+0x14c>
 800a99e:	6923      	ldr	r3, [r4, #16]
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	47d0      	blx	sl
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d0ad      	beq.n	800a908 <_printf_i+0x160>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	079b      	lsls	r3, r3, #30
 800a9b0:	d413      	bmi.n	800a9da <_printf_i+0x232>
 800a9b2:	68e0      	ldr	r0, [r4, #12]
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	4298      	cmp	r0, r3
 800a9b8:	bfb8      	it	lt
 800a9ba:	4618      	movlt	r0, r3
 800a9bc:	e7a6      	b.n	800a90c <_printf_i+0x164>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4649      	mov	r1, r9
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	47d0      	blx	sl
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d09d      	beq.n	800a908 <_printf_i+0x160>
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	68e3      	ldr	r3, [r4, #12]
 800a9d0:	9903      	ldr	r1, [sp, #12]
 800a9d2:	1a5b      	subs	r3, r3, r1
 800a9d4:	42ab      	cmp	r3, r5
 800a9d6:	dcf2      	bgt.n	800a9be <_printf_i+0x216>
 800a9d8:	e7eb      	b.n	800a9b2 <_printf_i+0x20a>
 800a9da:	2500      	movs	r5, #0
 800a9dc:	f104 0619 	add.w	r6, r4, #25
 800a9e0:	e7f5      	b.n	800a9ce <_printf_i+0x226>
 800a9e2:	bf00      	nop
 800a9e4:	0800bc33 	.word	0x0800bc33
 800a9e8:	0800bc44 	.word	0x0800bc44

0800a9ec <_scanf_chars>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	688a      	ldr	r2, [r1, #8]
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	b932      	cbnz	r2, 800aa08 <_scanf_chars+0x1c>
 800a9fa:	698a      	ldr	r2, [r1, #24]
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	bf0c      	ite	eq
 800aa00:	2201      	moveq	r2, #1
 800aa02:	f04f 32ff 	movne.w	r2, #4294967295
 800aa06:	608a      	str	r2, [r1, #8]
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aa9c <_scanf_chars+0xb0>
 800aa0e:	06d1      	lsls	r1, r2, #27
 800aa10:	bf5f      	itttt	pl
 800aa12:	681a      	ldrpl	r2, [r3, #0]
 800aa14:	1d11      	addpl	r1, r2, #4
 800aa16:	6019      	strpl	r1, [r3, #0]
 800aa18:	6816      	ldrpl	r6, [r2, #0]
 800aa1a:	2700      	movs	r7, #0
 800aa1c:	69a0      	ldr	r0, [r4, #24]
 800aa1e:	b188      	cbz	r0, 800aa44 <_scanf_chars+0x58>
 800aa20:	2801      	cmp	r0, #1
 800aa22:	d107      	bne.n	800aa34 <_scanf_chars+0x48>
 800aa24:	682a      	ldr	r2, [r5, #0]
 800aa26:	7811      	ldrb	r1, [r2, #0]
 800aa28:	6962      	ldr	r2, [r4, #20]
 800aa2a:	5c52      	ldrb	r2, [r2, r1]
 800aa2c:	b952      	cbnz	r2, 800aa44 <_scanf_chars+0x58>
 800aa2e:	2f00      	cmp	r7, #0
 800aa30:	d031      	beq.n	800aa96 <_scanf_chars+0xaa>
 800aa32:	e022      	b.n	800aa7a <_scanf_chars+0x8e>
 800aa34:	2802      	cmp	r0, #2
 800aa36:	d120      	bne.n	800aa7a <_scanf_chars+0x8e>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aa40:	071b      	lsls	r3, r3, #28
 800aa42:	d41a      	bmi.n	800aa7a <_scanf_chars+0x8e>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	06da      	lsls	r2, r3, #27
 800aa48:	bf5e      	ittt	pl
 800aa4a:	682b      	ldrpl	r3, [r5, #0]
 800aa4c:	781b      	ldrbpl	r3, [r3, #0]
 800aa4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aa52:	682a      	ldr	r2, [r5, #0]
 800aa54:	686b      	ldr	r3, [r5, #4]
 800aa56:	3201      	adds	r2, #1
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	68a2      	ldr	r2, [r4, #8]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	3a01      	subs	r2, #1
 800aa60:	606b      	str	r3, [r5, #4]
 800aa62:	3701      	adds	r7, #1
 800aa64:	60a2      	str	r2, [r4, #8]
 800aa66:	b142      	cbz	r2, 800aa7a <_scanf_chars+0x8e>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dcd7      	bgt.n	800aa1c <_scanf_chars+0x30>
 800aa6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa70:	4629      	mov	r1, r5
 800aa72:	4640      	mov	r0, r8
 800aa74:	4798      	blx	r3
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d0d0      	beq.n	800aa1c <_scanf_chars+0x30>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f013 0310 	ands.w	r3, r3, #16
 800aa80:	d105      	bne.n	800aa8e <_scanf_chars+0xa2>
 800aa82:	68e2      	ldr	r2, [r4, #12]
 800aa84:	3201      	adds	r2, #1
 800aa86:	60e2      	str	r2, [r4, #12]
 800aa88:	69a2      	ldr	r2, [r4, #24]
 800aa8a:	b102      	cbz	r2, 800aa8e <_scanf_chars+0xa2>
 800aa8c:	7033      	strb	r3, [r6, #0]
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	443b      	add	r3, r7
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0800ba75 	.word	0x0800ba75

0800aaa0 <_scanf_i>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	4698      	mov	r8, r3
 800aaa6:	4b74      	ldr	r3, [pc, #464]	; (800ac78 <_scanf_i+0x1d8>)
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	4682      	mov	sl, r0
 800aaac:	4616      	mov	r6, r2
 800aaae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aab2:	b087      	sub	sp, #28
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aaba:	4b70      	ldr	r3, [pc, #448]	; (800ac7c <_scanf_i+0x1dc>)
 800aabc:	69a1      	ldr	r1, [r4, #24]
 800aabe:	4a70      	ldr	r2, [pc, #448]	; (800ac80 <_scanf_i+0x1e0>)
 800aac0:	2903      	cmp	r1, #3
 800aac2:	bf18      	it	ne
 800aac4:	461a      	movne	r2, r3
 800aac6:	68a3      	ldr	r3, [r4, #8]
 800aac8:	9201      	str	r2, [sp, #4]
 800aaca:	1e5a      	subs	r2, r3, #1
 800aacc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aad0:	bf88      	it	hi
 800aad2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aad6:	4627      	mov	r7, r4
 800aad8:	bf82      	ittt	hi
 800aada:	eb03 0905 	addhi.w	r9, r3, r5
 800aade:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aae2:	60a3      	strhi	r3, [r4, #8]
 800aae4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aae8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aaec:	bf98      	it	ls
 800aaee:	f04f 0900 	movls.w	r9, #0
 800aaf2:	6023      	str	r3, [r4, #0]
 800aaf4:	463d      	mov	r5, r7
 800aaf6:	f04f 0b00 	mov.w	fp, #0
 800aafa:	6831      	ldr	r1, [r6, #0]
 800aafc:	ab03      	add	r3, sp, #12
 800aafe:	7809      	ldrb	r1, [r1, #0]
 800ab00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f7f5 fba3 	bl	8000250 <memchr>
 800ab0a:	b328      	cbz	r0, 800ab58 <_scanf_i+0xb8>
 800ab0c:	f1bb 0f01 	cmp.w	fp, #1
 800ab10:	d159      	bne.n	800abc6 <_scanf_i+0x126>
 800ab12:	6862      	ldr	r2, [r4, #4]
 800ab14:	b92a      	cbnz	r2, 800ab22 <_scanf_i+0x82>
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	2308      	movs	r3, #8
 800ab1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab1e:	6063      	str	r3, [r4, #4]
 800ab20:	6022      	str	r2, [r4, #0]
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	68a2      	ldr	r2, [r4, #8]
 800ab2c:	1e51      	subs	r1, r2, #1
 800ab2e:	60a1      	str	r1, [r4, #8]
 800ab30:	b192      	cbz	r2, 800ab58 <_scanf_i+0xb8>
 800ab32:	6832      	ldr	r2, [r6, #0]
 800ab34:	1c51      	adds	r1, r2, #1
 800ab36:	6031      	str	r1, [r6, #0]
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	f805 2b01 	strb.w	r2, [r5], #1
 800ab3e:	6872      	ldr	r2, [r6, #4]
 800ab40:	3a01      	subs	r2, #1
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	6072      	str	r2, [r6, #4]
 800ab46:	dc07      	bgt.n	800ab58 <_scanf_i+0xb8>
 800ab48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4650      	mov	r0, sl
 800ab50:	4790      	blx	r2
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f040 8085 	bne.w	800ac62 <_scanf_i+0x1c2>
 800ab58:	f10b 0b01 	add.w	fp, fp, #1
 800ab5c:	f1bb 0f03 	cmp.w	fp, #3
 800ab60:	d1cb      	bne.n	800aafa <_scanf_i+0x5a>
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	b90b      	cbnz	r3, 800ab6a <_scanf_i+0xca>
 800ab66:	230a      	movs	r3, #10
 800ab68:	6063      	str	r3, [r4, #4]
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	4945      	ldr	r1, [pc, #276]	; (800ac84 <_scanf_i+0x1e4>)
 800ab6e:	6960      	ldr	r0, [r4, #20]
 800ab70:	1ac9      	subs	r1, r1, r3
 800ab72:	f000 f949 	bl	800ae08 <__sccl>
 800ab76:	f04f 0b00 	mov.w	fp, #0
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d03d      	beq.n	800abfe <_scanf_i+0x15e>
 800ab82:	6831      	ldr	r1, [r6, #0]
 800ab84:	6960      	ldr	r0, [r4, #20]
 800ab86:	f891 c000 	ldrb.w	ip, [r1]
 800ab8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d035      	beq.n	800abfe <_scanf_i+0x15e>
 800ab92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ab96:	d124      	bne.n	800abe2 <_scanf_i+0x142>
 800ab98:	0510      	lsls	r0, r2, #20
 800ab9a:	d522      	bpl.n	800abe2 <_scanf_i+0x142>
 800ab9c:	f10b 0b01 	add.w	fp, fp, #1
 800aba0:	f1b9 0f00 	cmp.w	r9, #0
 800aba4:	d003      	beq.n	800abae <_scanf_i+0x10e>
 800aba6:	3301      	adds	r3, #1
 800aba8:	f109 39ff 	add.w	r9, r9, #4294967295
 800abac:	60a3      	str	r3, [r4, #8]
 800abae:	6873      	ldr	r3, [r6, #4]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	6073      	str	r3, [r6, #4]
 800abb6:	dd1b      	ble.n	800abf0 <_scanf_i+0x150>
 800abb8:	6833      	ldr	r3, [r6, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	6033      	str	r3, [r6, #0]
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	60a3      	str	r3, [r4, #8]
 800abc4:	e7d9      	b.n	800ab7a <_scanf_i+0xda>
 800abc6:	f1bb 0f02 	cmp.w	fp, #2
 800abca:	d1ae      	bne.n	800ab2a <_scanf_i+0x8a>
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800abd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800abd6:	d1bf      	bne.n	800ab58 <_scanf_i+0xb8>
 800abd8:	2310      	movs	r3, #16
 800abda:	6063      	str	r3, [r4, #4]
 800abdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abe0:	e7a2      	b.n	800ab28 <_scanf_i+0x88>
 800abe2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800abe6:	6022      	str	r2, [r4, #0]
 800abe8:	780b      	ldrb	r3, [r1, #0]
 800abea:	f805 3b01 	strb.w	r3, [r5], #1
 800abee:	e7de      	b.n	800abae <_scanf_i+0x10e>
 800abf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abf4:	4631      	mov	r1, r6
 800abf6:	4650      	mov	r0, sl
 800abf8:	4798      	blx	r3
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0df      	beq.n	800abbe <_scanf_i+0x11e>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	05d9      	lsls	r1, r3, #23
 800ac02:	d50d      	bpl.n	800ac20 <_scanf_i+0x180>
 800ac04:	42bd      	cmp	r5, r7
 800ac06:	d909      	bls.n	800ac1c <_scanf_i+0x17c>
 800ac08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac10:	4632      	mov	r2, r6
 800ac12:	4650      	mov	r0, sl
 800ac14:	4798      	blx	r3
 800ac16:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac1a:	464d      	mov	r5, r9
 800ac1c:	42bd      	cmp	r5, r7
 800ac1e:	d028      	beq.n	800ac72 <_scanf_i+0x1d2>
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	f012 0210 	ands.w	r2, r2, #16
 800ac26:	d113      	bne.n	800ac50 <_scanf_i+0x1b0>
 800ac28:	702a      	strb	r2, [r5, #0]
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	9e01      	ldr	r6, [sp, #4]
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4650      	mov	r0, sl
 800ac32:	47b0      	blx	r6
 800ac34:	f8d8 3000 	ldr.w	r3, [r8]
 800ac38:	6821      	ldr	r1, [r4, #0]
 800ac3a:	1d1a      	adds	r2, r3, #4
 800ac3c:	f8c8 2000 	str.w	r2, [r8]
 800ac40:	f011 0f20 	tst.w	r1, #32
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	d00f      	beq.n	800ac68 <_scanf_i+0x1c8>
 800ac48:	6018      	str	r0, [r3, #0]
 800ac4a:	68e3      	ldr	r3, [r4, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	60e3      	str	r3, [r4, #12]
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	1bed      	subs	r5, r5, r7
 800ac54:	445d      	add	r5, fp
 800ac56:	442b      	add	r3, r5
 800ac58:	6123      	str	r3, [r4, #16]
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	b007      	add	sp, #28
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac62:	f04f 0b00 	mov.w	fp, #0
 800ac66:	e7ca      	b.n	800abfe <_scanf_i+0x15e>
 800ac68:	07ca      	lsls	r2, r1, #31
 800ac6a:	bf4c      	ite	mi
 800ac6c:	8018      	strhmi	r0, [r3, #0]
 800ac6e:	6018      	strpl	r0, [r3, #0]
 800ac70:	e7eb      	b.n	800ac4a <_scanf_i+0x1aa>
 800ac72:	2001      	movs	r0, #1
 800ac74:	e7f2      	b.n	800ac5c <_scanf_i+0x1bc>
 800ac76:	bf00      	nop
 800ac78:	0800ba50 	.word	0x0800ba50
 800ac7c:	0800b095 	.word	0x0800b095
 800ac80:	080098d9 	.word	0x080098d9
 800ac84:	0800bc65 	.word	0x0800bc65

0800ac88 <__sflush_r>:
 800ac88:	898a      	ldrh	r2, [r1, #12]
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	4605      	mov	r5, r0
 800ac90:	0710      	lsls	r0, r2, #28
 800ac92:	460c      	mov	r4, r1
 800ac94:	d458      	bmi.n	800ad48 <__sflush_r+0xc0>
 800ac96:	684b      	ldr	r3, [r1, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc05      	bgt.n	800aca8 <__sflush_r+0x20>
 800ac9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dc02      	bgt.n	800aca8 <__sflush_r+0x20>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d0f9      	beq.n	800aca2 <__sflush_r+0x1a>
 800acae:	2300      	movs	r3, #0
 800acb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb4:	682f      	ldr	r7, [r5, #0]
 800acb6:	6a21      	ldr	r1, [r4, #32]
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	d032      	beq.n	800ad22 <__sflush_r+0x9a>
 800acbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	075a      	lsls	r2, r3, #29
 800acc2:	d505      	bpl.n	800acd0 <__sflush_r+0x48>
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	1ac0      	subs	r0, r0, r3
 800acc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acca:	b10b      	cbz	r3, 800acd0 <__sflush_r+0x48>
 800accc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acce:	1ac0      	subs	r0, r0, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	4602      	mov	r2, r0
 800acd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	4628      	mov	r0, r5
 800acda:	47b0      	blx	r6
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	d106      	bne.n	800acf0 <__sflush_r+0x68>
 800ace2:	6829      	ldr	r1, [r5, #0]
 800ace4:	291d      	cmp	r1, #29
 800ace6:	d82b      	bhi.n	800ad40 <__sflush_r+0xb8>
 800ace8:	4a29      	ldr	r2, [pc, #164]	; (800ad90 <__sflush_r+0x108>)
 800acea:	410a      	asrs	r2, r1
 800acec:	07d6      	lsls	r6, r2, #31
 800acee:	d427      	bmi.n	800ad40 <__sflush_r+0xb8>
 800acf0:	2200      	movs	r2, #0
 800acf2:	6062      	str	r2, [r4, #4]
 800acf4:	04d9      	lsls	r1, r3, #19
 800acf6:	6922      	ldr	r2, [r4, #16]
 800acf8:	6022      	str	r2, [r4, #0]
 800acfa:	d504      	bpl.n	800ad06 <__sflush_r+0x7e>
 800acfc:	1c42      	adds	r2, r0, #1
 800acfe:	d101      	bne.n	800ad04 <__sflush_r+0x7c>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b903      	cbnz	r3, 800ad06 <__sflush_r+0x7e>
 800ad04:	6560      	str	r0, [r4, #84]	; 0x54
 800ad06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad08:	602f      	str	r7, [r5, #0]
 800ad0a:	2900      	cmp	r1, #0
 800ad0c:	d0c9      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad12:	4299      	cmp	r1, r3
 800ad14:	d002      	beq.n	800ad1c <__sflush_r+0x94>
 800ad16:	4628      	mov	r0, r5
 800ad18:	f7ff f8ae 	bl	8009e78 <_free_r>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	6360      	str	r0, [r4, #52]	; 0x34
 800ad20:	e7c0      	b.n	800aca4 <__sflush_r+0x1c>
 800ad22:	2301      	movs	r3, #1
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	1c41      	adds	r1, r0, #1
 800ad2a:	d1c8      	bne.n	800acbe <__sflush_r+0x36>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0c5      	beq.n	800acbe <__sflush_r+0x36>
 800ad32:	2b1d      	cmp	r3, #29
 800ad34:	d001      	beq.n	800ad3a <__sflush_r+0xb2>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	d101      	bne.n	800ad3e <__sflush_r+0xb6>
 800ad3a:	602f      	str	r7, [r5, #0]
 800ad3c:	e7b1      	b.n	800aca2 <__sflush_r+0x1a>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	e7ad      	b.n	800aca4 <__sflush_r+0x1c>
 800ad48:	690f      	ldr	r7, [r1, #16]
 800ad4a:	2f00      	cmp	r7, #0
 800ad4c:	d0a9      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad4e:	0793      	lsls	r3, r2, #30
 800ad50:	680e      	ldr	r6, [r1, #0]
 800ad52:	bf08      	it	eq
 800ad54:	694b      	ldreq	r3, [r1, #20]
 800ad56:	600f      	str	r7, [r1, #0]
 800ad58:	bf18      	it	ne
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	eba6 0807 	sub.w	r8, r6, r7
 800ad60:	608b      	str	r3, [r1, #8]
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	dd9c      	ble.n	800aca2 <__sflush_r+0x1a>
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	2800      	cmp	r0, #0
 800ad76:	dc06      	bgt.n	800ad86 <__sflush_r+0xfe>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	e78e      	b.n	800aca4 <__sflush_r+0x1c>
 800ad86:	4407      	add	r7, r0
 800ad88:	eba8 0800 	sub.w	r8, r8, r0
 800ad8c:	e7e9      	b.n	800ad62 <__sflush_r+0xda>
 800ad8e:	bf00      	nop
 800ad90:	dfbffffe 	.word	0xdfbffffe

0800ad94 <_fflush_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	690b      	ldr	r3, [r1, #16]
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	b913      	cbnz	r3, 800ada4 <_fflush_r+0x10>
 800ad9e:	2500      	movs	r5, #0
 800ada0:	4628      	mov	r0, r5
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	b118      	cbz	r0, 800adae <_fflush_r+0x1a>
 800ada6:	6a03      	ldr	r3, [r0, #32]
 800ada8:	b90b      	cbnz	r3, 800adae <_fflush_r+0x1a>
 800adaa:	f7fe fe1b 	bl	80099e4 <__sinit>
 800adae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0f3      	beq.n	800ad9e <_fflush_r+0xa>
 800adb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adb8:	07d0      	lsls	r0, r2, #31
 800adba:	d404      	bmi.n	800adc6 <_fflush_r+0x32>
 800adbc:	0599      	lsls	r1, r3, #22
 800adbe:	d402      	bmi.n	800adc6 <_fflush_r+0x32>
 800adc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc2:	f7ff f823 	bl	8009e0c <__retarget_lock_acquire_recursive>
 800adc6:	4628      	mov	r0, r5
 800adc8:	4621      	mov	r1, r4
 800adca:	f7ff ff5d 	bl	800ac88 <__sflush_r>
 800adce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add0:	07da      	lsls	r2, r3, #31
 800add2:	4605      	mov	r5, r0
 800add4:	d4e4      	bmi.n	800ada0 <_fflush_r+0xc>
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	059b      	lsls	r3, r3, #22
 800adda:	d4e1      	bmi.n	800ada0 <_fflush_r+0xc>
 800addc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adde:	f7ff f816 	bl	8009e0e <__retarget_lock_release_recursive>
 800ade2:	e7dd      	b.n	800ada0 <_fflush_r+0xc>

0800ade4 <fiprintf>:
 800ade4:	b40e      	push	{r1, r2, r3}
 800ade6:	b503      	push	{r0, r1, lr}
 800ade8:	4601      	mov	r1, r0
 800adea:	ab03      	add	r3, sp, #12
 800adec:	4805      	ldr	r0, [pc, #20]	; (800ae04 <fiprintf+0x20>)
 800adee:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf2:	6800      	ldr	r0, [r0, #0]
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	f000 f979 	bl	800b0ec <_vfiprintf_r>
 800adfa:	b002      	add	sp, #8
 800adfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae00:	b003      	add	sp, #12
 800ae02:	4770      	bx	lr
 800ae04:	20000068 	.word	0x20000068

0800ae08 <__sccl>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	780b      	ldrb	r3, [r1, #0]
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	2b5e      	cmp	r3, #94	; 0x5e
 800ae10:	bf0b      	itete	eq
 800ae12:	784b      	ldrbeq	r3, [r1, #1]
 800ae14:	1c4a      	addne	r2, r1, #1
 800ae16:	1c8a      	addeq	r2, r1, #2
 800ae18:	2100      	movne	r1, #0
 800ae1a:	bf08      	it	eq
 800ae1c:	2101      	moveq	r1, #1
 800ae1e:	3801      	subs	r0, #1
 800ae20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ae24:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ae28:	42a8      	cmp	r0, r5
 800ae2a:	d1fb      	bne.n	800ae24 <__sccl+0x1c>
 800ae2c:	b90b      	cbnz	r3, 800ae32 <__sccl+0x2a>
 800ae2e:	1e50      	subs	r0, r2, #1
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	f081 0101 	eor.w	r1, r1, #1
 800ae36:	54e1      	strb	r1, [r4, r3]
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ae40:	2d2d      	cmp	r5, #45	; 0x2d
 800ae42:	d005      	beq.n	800ae50 <__sccl+0x48>
 800ae44:	2d5d      	cmp	r5, #93	; 0x5d
 800ae46:	d016      	beq.n	800ae76 <__sccl+0x6e>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	d0f1      	beq.n	800ae30 <__sccl+0x28>
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	e7f2      	b.n	800ae36 <__sccl+0x2e>
 800ae50:	7846      	ldrb	r6, [r0, #1]
 800ae52:	2e5d      	cmp	r6, #93	; 0x5d
 800ae54:	d0fa      	beq.n	800ae4c <__sccl+0x44>
 800ae56:	42b3      	cmp	r3, r6
 800ae58:	dcf8      	bgt.n	800ae4c <__sccl+0x44>
 800ae5a:	3002      	adds	r0, #2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	3201      	adds	r2, #1
 800ae60:	4296      	cmp	r6, r2
 800ae62:	54a1      	strb	r1, [r4, r2]
 800ae64:	dcfb      	bgt.n	800ae5e <__sccl+0x56>
 800ae66:	1af2      	subs	r2, r6, r3
 800ae68:	3a01      	subs	r2, #1
 800ae6a:	1c5d      	adds	r5, r3, #1
 800ae6c:	42b3      	cmp	r3, r6
 800ae6e:	bfa8      	it	ge
 800ae70:	2200      	movge	r2, #0
 800ae72:	18ab      	adds	r3, r5, r2
 800ae74:	e7e1      	b.n	800ae3a <__sccl+0x32>
 800ae76:	4610      	mov	r0, r2
 800ae78:	e7da      	b.n	800ae30 <__sccl+0x28>

0800ae7a <__submore>:
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae86:	4299      	cmp	r1, r3
 800ae88:	d11d      	bne.n	800aec6 <__submore+0x4c>
 800ae8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae8e:	f7ff f867 	bl	8009f60 <_malloc_r>
 800ae92:	b918      	cbnz	r0, 800ae9c <__submore+0x22>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea0:	63a3      	str	r3, [r4, #56]	; 0x38
 800aea2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aea6:	6360      	str	r0, [r4, #52]	; 0x34
 800aea8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aeac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aeb0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aeb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aeb8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aebc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aec0:	6020      	str	r0, [r4, #0]
 800aec2:	2000      	movs	r0, #0
 800aec4:	e7e8      	b.n	800ae98 <__submore+0x1e>
 800aec6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aec8:	0077      	lsls	r7, r6, #1
 800aeca:	463a      	mov	r2, r7
 800aecc:	f000 f841 	bl	800af52 <_realloc_r>
 800aed0:	4605      	mov	r5, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d0de      	beq.n	800ae94 <__submore+0x1a>
 800aed6:	eb00 0806 	add.w	r8, r0, r6
 800aeda:	4601      	mov	r1, r0
 800aedc:	4632      	mov	r2, r6
 800aede:	4640      	mov	r0, r8
 800aee0:	f7fe ff9e 	bl	8009e20 <memcpy>
 800aee4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aee8:	f8c4 8000 	str.w	r8, [r4]
 800aeec:	e7e9      	b.n	800aec2 <__submore+0x48>

0800aeee <memmove>:
 800aeee:	4288      	cmp	r0, r1
 800aef0:	b510      	push	{r4, lr}
 800aef2:	eb01 0402 	add.w	r4, r1, r2
 800aef6:	d902      	bls.n	800aefe <memmove+0x10>
 800aef8:	4284      	cmp	r4, r0
 800aefa:	4623      	mov	r3, r4
 800aefc:	d807      	bhi.n	800af0e <memmove+0x20>
 800aefe:	1e43      	subs	r3, r0, #1
 800af00:	42a1      	cmp	r1, r4
 800af02:	d008      	beq.n	800af16 <memmove+0x28>
 800af04:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af08:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af0c:	e7f8      	b.n	800af00 <memmove+0x12>
 800af0e:	4402      	add	r2, r0
 800af10:	4601      	mov	r1, r0
 800af12:	428a      	cmp	r2, r1
 800af14:	d100      	bne.n	800af18 <memmove+0x2a>
 800af16:	bd10      	pop	{r4, pc}
 800af18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af20:	e7f7      	b.n	800af12 <memmove+0x24>
	...

0800af24 <_sbrk_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d06      	ldr	r5, [pc, #24]	; (800af40 <_sbrk_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f7 fb62 	bl	80025f8 <_sbrk>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_sbrk_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_sbrk_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20005314 	.word	0x20005314

0800af44 <abort>:
 800af44:	b508      	push	{r3, lr}
 800af46:	2006      	movs	r0, #6
 800af48:	f000 faa8 	bl	800b49c <raise>
 800af4c:	2001      	movs	r0, #1
 800af4e:	f7f7 fadb 	bl	8002508 <_exit>

0800af52 <_realloc_r>:
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	4680      	mov	r8, r0
 800af58:	4614      	mov	r4, r2
 800af5a:	460e      	mov	r6, r1
 800af5c:	b921      	cbnz	r1, 800af68 <_realloc_r+0x16>
 800af5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	4611      	mov	r1, r2
 800af64:	f7fe bffc 	b.w	8009f60 <_malloc_r>
 800af68:	b92a      	cbnz	r2, 800af76 <_realloc_r+0x24>
 800af6a:	f7fe ff85 	bl	8009e78 <_free_r>
 800af6e:	4625      	mov	r5, r4
 800af70:	4628      	mov	r0, r5
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af76:	f000 faad 	bl	800b4d4 <_malloc_usable_size_r>
 800af7a:	4284      	cmp	r4, r0
 800af7c:	4607      	mov	r7, r0
 800af7e:	d802      	bhi.n	800af86 <_realloc_r+0x34>
 800af80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af84:	d812      	bhi.n	800afac <_realloc_r+0x5a>
 800af86:	4621      	mov	r1, r4
 800af88:	4640      	mov	r0, r8
 800af8a:	f7fe ffe9 	bl	8009f60 <_malloc_r>
 800af8e:	4605      	mov	r5, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d0ed      	beq.n	800af70 <_realloc_r+0x1e>
 800af94:	42bc      	cmp	r4, r7
 800af96:	4622      	mov	r2, r4
 800af98:	4631      	mov	r1, r6
 800af9a:	bf28      	it	cs
 800af9c:	463a      	movcs	r2, r7
 800af9e:	f7fe ff3f 	bl	8009e20 <memcpy>
 800afa2:	4631      	mov	r1, r6
 800afa4:	4640      	mov	r0, r8
 800afa6:	f7fe ff67 	bl	8009e78 <_free_r>
 800afaa:	e7e1      	b.n	800af70 <_realloc_r+0x1e>
 800afac:	4635      	mov	r5, r6
 800afae:	e7df      	b.n	800af70 <_realloc_r+0x1e>

0800afb0 <_strtoul_l.constprop.0>:
 800afb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afb4:	4f36      	ldr	r7, [pc, #216]	; (800b090 <_strtoul_l.constprop.0+0xe0>)
 800afb6:	4686      	mov	lr, r0
 800afb8:	460d      	mov	r5, r1
 800afba:	4628      	mov	r0, r5
 800afbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc0:	5d3e      	ldrb	r6, [r7, r4]
 800afc2:	f016 0608 	ands.w	r6, r6, #8
 800afc6:	d1f8      	bne.n	800afba <_strtoul_l.constprop.0+0xa>
 800afc8:	2c2d      	cmp	r4, #45	; 0x2d
 800afca:	d130      	bne.n	800b02e <_strtoul_l.constprop.0+0x7e>
 800afcc:	782c      	ldrb	r4, [r5, #0]
 800afce:	2601      	movs	r6, #1
 800afd0:	1c85      	adds	r5, r0, #2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d057      	beq.n	800b086 <_strtoul_l.constprop.0+0xd6>
 800afd6:	2b10      	cmp	r3, #16
 800afd8:	d109      	bne.n	800afee <_strtoul_l.constprop.0+0x3e>
 800afda:	2c30      	cmp	r4, #48	; 0x30
 800afdc:	d107      	bne.n	800afee <_strtoul_l.constprop.0+0x3e>
 800afde:	7828      	ldrb	r0, [r5, #0]
 800afe0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800afe4:	2858      	cmp	r0, #88	; 0x58
 800afe6:	d149      	bne.n	800b07c <_strtoul_l.constprop.0+0xcc>
 800afe8:	786c      	ldrb	r4, [r5, #1]
 800afea:	2310      	movs	r3, #16
 800afec:	3502      	adds	r5, #2
 800afee:	f04f 38ff 	mov.w	r8, #4294967295
 800aff2:	2700      	movs	r7, #0
 800aff4:	fbb8 f8f3 	udiv	r8, r8, r3
 800aff8:	fb03 f908 	mul.w	r9, r3, r8
 800affc:	ea6f 0909 	mvn.w	r9, r9
 800b000:	4638      	mov	r0, r7
 800b002:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b006:	f1bc 0f09 	cmp.w	ip, #9
 800b00a:	d815      	bhi.n	800b038 <_strtoul_l.constprop.0+0x88>
 800b00c:	4664      	mov	r4, ip
 800b00e:	42a3      	cmp	r3, r4
 800b010:	dd23      	ble.n	800b05a <_strtoul_l.constprop.0+0xaa>
 800b012:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b016:	d007      	beq.n	800b028 <_strtoul_l.constprop.0+0x78>
 800b018:	4580      	cmp	r8, r0
 800b01a:	d31b      	bcc.n	800b054 <_strtoul_l.constprop.0+0xa4>
 800b01c:	d101      	bne.n	800b022 <_strtoul_l.constprop.0+0x72>
 800b01e:	45a1      	cmp	r9, r4
 800b020:	db18      	blt.n	800b054 <_strtoul_l.constprop.0+0xa4>
 800b022:	fb00 4003 	mla	r0, r0, r3, r4
 800b026:	2701      	movs	r7, #1
 800b028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b02c:	e7e9      	b.n	800b002 <_strtoul_l.constprop.0+0x52>
 800b02e:	2c2b      	cmp	r4, #43	; 0x2b
 800b030:	bf04      	itt	eq
 800b032:	782c      	ldrbeq	r4, [r5, #0]
 800b034:	1c85      	addeq	r5, r0, #2
 800b036:	e7cc      	b.n	800afd2 <_strtoul_l.constprop.0+0x22>
 800b038:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b03c:	f1bc 0f19 	cmp.w	ip, #25
 800b040:	d801      	bhi.n	800b046 <_strtoul_l.constprop.0+0x96>
 800b042:	3c37      	subs	r4, #55	; 0x37
 800b044:	e7e3      	b.n	800b00e <_strtoul_l.constprop.0+0x5e>
 800b046:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b04a:	f1bc 0f19 	cmp.w	ip, #25
 800b04e:	d804      	bhi.n	800b05a <_strtoul_l.constprop.0+0xaa>
 800b050:	3c57      	subs	r4, #87	; 0x57
 800b052:	e7dc      	b.n	800b00e <_strtoul_l.constprop.0+0x5e>
 800b054:	f04f 37ff 	mov.w	r7, #4294967295
 800b058:	e7e6      	b.n	800b028 <_strtoul_l.constprop.0+0x78>
 800b05a:	1c7b      	adds	r3, r7, #1
 800b05c:	d106      	bne.n	800b06c <_strtoul_l.constprop.0+0xbc>
 800b05e:	2322      	movs	r3, #34	; 0x22
 800b060:	f8ce 3000 	str.w	r3, [lr]
 800b064:	4638      	mov	r0, r7
 800b066:	b932      	cbnz	r2, 800b076 <_strtoul_l.constprop.0+0xc6>
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b06c:	b106      	cbz	r6, 800b070 <_strtoul_l.constprop.0+0xc0>
 800b06e:	4240      	negs	r0, r0
 800b070:	2a00      	cmp	r2, #0
 800b072:	d0f9      	beq.n	800b068 <_strtoul_l.constprop.0+0xb8>
 800b074:	b107      	cbz	r7, 800b078 <_strtoul_l.constprop.0+0xc8>
 800b076:	1e69      	subs	r1, r5, #1
 800b078:	6011      	str	r1, [r2, #0]
 800b07a:	e7f5      	b.n	800b068 <_strtoul_l.constprop.0+0xb8>
 800b07c:	2430      	movs	r4, #48	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1b5      	bne.n	800afee <_strtoul_l.constprop.0+0x3e>
 800b082:	2308      	movs	r3, #8
 800b084:	e7b3      	b.n	800afee <_strtoul_l.constprop.0+0x3e>
 800b086:	2c30      	cmp	r4, #48	; 0x30
 800b088:	d0a9      	beq.n	800afde <_strtoul_l.constprop.0+0x2e>
 800b08a:	230a      	movs	r3, #10
 800b08c:	e7af      	b.n	800afee <_strtoul_l.constprop.0+0x3e>
 800b08e:	bf00      	nop
 800b090:	0800ba75 	.word	0x0800ba75

0800b094 <_strtoul_r>:
 800b094:	f7ff bf8c 	b.w	800afb0 <_strtoul_l.constprop.0>

0800b098 <__sfputc_r>:
 800b098:	6893      	ldr	r3, [r2, #8]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	b410      	push	{r4}
 800b0a0:	6093      	str	r3, [r2, #8]
 800b0a2:	da08      	bge.n	800b0b6 <__sfputc_r+0x1e>
 800b0a4:	6994      	ldr	r4, [r2, #24]
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	db01      	blt.n	800b0ae <__sfputc_r+0x16>
 800b0aa:	290a      	cmp	r1, #10
 800b0ac:	d103      	bne.n	800b0b6 <__sfputc_r+0x1e>
 800b0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b2:	f000 b935 	b.w	800b320 <__swbuf_r>
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	1c58      	adds	r0, r3, #1
 800b0ba:	6010      	str	r0, [r2, #0]
 800b0bc:	7019      	strb	r1, [r3, #0]
 800b0be:	4608      	mov	r0, r1
 800b0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <__sfputs_r>:
 800b0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460f      	mov	r7, r1
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	18d5      	adds	r5, r2, r3
 800b0d0:	42ac      	cmp	r4, r5
 800b0d2:	d101      	bne.n	800b0d8 <__sfputs_r+0x12>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e007      	b.n	800b0e8 <__sfputs_r+0x22>
 800b0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0dc:	463a      	mov	r2, r7
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff ffda 	bl	800b098 <__sfputc_r>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d1f3      	bne.n	800b0d0 <__sfputs_r+0xa>
 800b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0ec <_vfiprintf_r>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	b09d      	sub	sp, #116	; 0x74
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	4698      	mov	r8, r3
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	b118      	cbz	r0, 800b104 <_vfiprintf_r+0x18>
 800b0fc:	6a03      	ldr	r3, [r0, #32]
 800b0fe:	b90b      	cbnz	r3, 800b104 <_vfiprintf_r+0x18>
 800b100:	f7fe fc70 	bl	80099e4 <__sinit>
 800b104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b106:	07d9      	lsls	r1, r3, #31
 800b108:	d405      	bmi.n	800b116 <_vfiprintf_r+0x2a>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	059a      	lsls	r2, r3, #22
 800b10e:	d402      	bmi.n	800b116 <_vfiprintf_r+0x2a>
 800b110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b112:	f7fe fe7b 	bl	8009e0c <__retarget_lock_acquire_recursive>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	071b      	lsls	r3, r3, #28
 800b11a:	d501      	bpl.n	800b120 <_vfiprintf_r+0x34>
 800b11c:	692b      	ldr	r3, [r5, #16]
 800b11e:	b99b      	cbnz	r3, 800b148 <_vfiprintf_r+0x5c>
 800b120:	4629      	mov	r1, r5
 800b122:	4630      	mov	r0, r6
 800b124:	f000 f93a 	bl	800b39c <__swsetup_r>
 800b128:	b170      	cbz	r0, 800b148 <_vfiprintf_r+0x5c>
 800b12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b12c:	07dc      	lsls	r4, r3, #31
 800b12e:	d504      	bpl.n	800b13a <_vfiprintf_r+0x4e>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	b01d      	add	sp, #116	; 0x74
 800b136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13a:	89ab      	ldrh	r3, [r5, #12]
 800b13c:	0598      	lsls	r0, r3, #22
 800b13e:	d4f7      	bmi.n	800b130 <_vfiprintf_r+0x44>
 800b140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b142:	f7fe fe64 	bl	8009e0e <__retarget_lock_release_recursive>
 800b146:	e7f3      	b.n	800b130 <_vfiprintf_r+0x44>
 800b148:	2300      	movs	r3, #0
 800b14a:	9309      	str	r3, [sp, #36]	; 0x24
 800b14c:	2320      	movs	r3, #32
 800b14e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b152:	f8cd 800c 	str.w	r8, [sp, #12]
 800b156:	2330      	movs	r3, #48	; 0x30
 800b158:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b30c <_vfiprintf_r+0x220>
 800b15c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b160:	f04f 0901 	mov.w	r9, #1
 800b164:	4623      	mov	r3, r4
 800b166:	469a      	mov	sl, r3
 800b168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b16c:	b10a      	cbz	r2, 800b172 <_vfiprintf_r+0x86>
 800b16e:	2a25      	cmp	r2, #37	; 0x25
 800b170:	d1f9      	bne.n	800b166 <_vfiprintf_r+0x7a>
 800b172:	ebba 0b04 	subs.w	fp, sl, r4
 800b176:	d00b      	beq.n	800b190 <_vfiprintf_r+0xa4>
 800b178:	465b      	mov	r3, fp
 800b17a:	4622      	mov	r2, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	4630      	mov	r0, r6
 800b180:	f7ff ffa1 	bl	800b0c6 <__sfputs_r>
 800b184:	3001      	adds	r0, #1
 800b186:	f000 80a9 	beq.w	800b2dc <_vfiprintf_r+0x1f0>
 800b18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18c:	445a      	add	r2, fp
 800b18e:	9209      	str	r2, [sp, #36]	; 0x24
 800b190:	f89a 3000 	ldrb.w	r3, [sl]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 80a1 	beq.w	800b2dc <_vfiprintf_r+0x1f0>
 800b19a:	2300      	movs	r3, #0
 800b19c:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a4:	f10a 0a01 	add.w	sl, sl, #1
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	9307      	str	r3, [sp, #28]
 800b1ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b2:	4654      	mov	r4, sl
 800b1b4:	2205      	movs	r2, #5
 800b1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ba:	4854      	ldr	r0, [pc, #336]	; (800b30c <_vfiprintf_r+0x220>)
 800b1bc:	f7f5 f848 	bl	8000250 <memchr>
 800b1c0:	9a04      	ldr	r2, [sp, #16]
 800b1c2:	b9d8      	cbnz	r0, 800b1fc <_vfiprintf_r+0x110>
 800b1c4:	06d1      	lsls	r1, r2, #27
 800b1c6:	bf44      	itt	mi
 800b1c8:	2320      	movmi	r3, #32
 800b1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ce:	0713      	lsls	r3, r2, #28
 800b1d0:	bf44      	itt	mi
 800b1d2:	232b      	movmi	r3, #43	; 0x2b
 800b1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1de:	d015      	beq.n	800b20c <_vfiprintf_r+0x120>
 800b1e0:	9a07      	ldr	r2, [sp, #28]
 800b1e2:	4654      	mov	r4, sl
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f04f 0c0a 	mov.w	ip, #10
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f0:	3b30      	subs	r3, #48	; 0x30
 800b1f2:	2b09      	cmp	r3, #9
 800b1f4:	d94d      	bls.n	800b292 <_vfiprintf_r+0x1a6>
 800b1f6:	b1b0      	cbz	r0, 800b226 <_vfiprintf_r+0x13a>
 800b1f8:	9207      	str	r2, [sp, #28]
 800b1fa:	e014      	b.n	800b226 <_vfiprintf_r+0x13a>
 800b1fc:	eba0 0308 	sub.w	r3, r0, r8
 800b200:	fa09 f303 	lsl.w	r3, r9, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	46a2      	mov	sl, r4
 800b20a:	e7d2      	b.n	800b1b2 <_vfiprintf_r+0xc6>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	1d19      	adds	r1, r3, #4
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	9103      	str	r1, [sp, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	bfbb      	ittet	lt
 800b218:	425b      	neglt	r3, r3
 800b21a:	f042 0202 	orrlt.w	r2, r2, #2
 800b21e:	9307      	strge	r3, [sp, #28]
 800b220:	9307      	strlt	r3, [sp, #28]
 800b222:	bfb8      	it	lt
 800b224:	9204      	strlt	r2, [sp, #16]
 800b226:	7823      	ldrb	r3, [r4, #0]
 800b228:	2b2e      	cmp	r3, #46	; 0x2e
 800b22a:	d10c      	bne.n	800b246 <_vfiprintf_r+0x15a>
 800b22c:	7863      	ldrb	r3, [r4, #1]
 800b22e:	2b2a      	cmp	r3, #42	; 0x2a
 800b230:	d134      	bne.n	800b29c <_vfiprintf_r+0x1b0>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	1d1a      	adds	r2, r3, #4
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	9203      	str	r2, [sp, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bfb8      	it	lt
 800b23e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b242:	3402      	adds	r4, #2
 800b244:	9305      	str	r3, [sp, #20]
 800b246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b31c <_vfiprintf_r+0x230>
 800b24a:	7821      	ldrb	r1, [r4, #0]
 800b24c:	2203      	movs	r2, #3
 800b24e:	4650      	mov	r0, sl
 800b250:	f7f4 fffe 	bl	8000250 <memchr>
 800b254:	b138      	cbz	r0, 800b266 <_vfiprintf_r+0x17a>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	eba0 000a 	sub.w	r0, r0, sl
 800b25c:	2240      	movs	r2, #64	; 0x40
 800b25e:	4082      	lsls	r2, r0
 800b260:	4313      	orrs	r3, r2
 800b262:	3401      	adds	r4, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26a:	4829      	ldr	r0, [pc, #164]	; (800b310 <_vfiprintf_r+0x224>)
 800b26c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b270:	2206      	movs	r2, #6
 800b272:	f7f4 ffed 	bl	8000250 <memchr>
 800b276:	2800      	cmp	r0, #0
 800b278:	d03f      	beq.n	800b2fa <_vfiprintf_r+0x20e>
 800b27a:	4b26      	ldr	r3, [pc, #152]	; (800b314 <_vfiprintf_r+0x228>)
 800b27c:	bb1b      	cbnz	r3, 800b2c6 <_vfiprintf_r+0x1da>
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	3307      	adds	r3, #7
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	3308      	adds	r3, #8
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	443b      	add	r3, r7
 800b28e:	9309      	str	r3, [sp, #36]	; 0x24
 800b290:	e768      	b.n	800b164 <_vfiprintf_r+0x78>
 800b292:	fb0c 3202 	mla	r2, ip, r2, r3
 800b296:	460c      	mov	r4, r1
 800b298:	2001      	movs	r0, #1
 800b29a:	e7a6      	b.n	800b1ea <_vfiprintf_r+0xfe>
 800b29c:	2300      	movs	r3, #0
 800b29e:	3401      	adds	r4, #1
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f04f 0c0a 	mov.w	ip, #10
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ae:	3a30      	subs	r2, #48	; 0x30
 800b2b0:	2a09      	cmp	r2, #9
 800b2b2:	d903      	bls.n	800b2bc <_vfiprintf_r+0x1d0>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c6      	beq.n	800b246 <_vfiprintf_r+0x15a>
 800b2b8:	9105      	str	r1, [sp, #20]
 800b2ba:	e7c4      	b.n	800b246 <_vfiprintf_r+0x15a>
 800b2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e7f0      	b.n	800b2a8 <_vfiprintf_r+0x1bc>
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	4b12      	ldr	r3, [pc, #72]	; (800b318 <_vfiprintf_r+0x22c>)
 800b2ce:	a904      	add	r1, sp, #16
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f3af 8000 	nop.w
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	1c78      	adds	r0, r7, #1
 800b2da:	d1d6      	bne.n	800b28a <_vfiprintf_r+0x19e>
 800b2dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <_vfiprintf_r+0x202>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_vfiprintf_r+0x202>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ea:	f7fe fd90 	bl	8009e0e <__retarget_lock_release_recursive>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	065b      	lsls	r3, r3, #25
 800b2f2:	f53f af1d 	bmi.w	800b130 <_vfiprintf_r+0x44>
 800b2f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2f8:	e71c      	b.n	800b134 <_vfiprintf_r+0x48>
 800b2fa:	ab03      	add	r3, sp, #12
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	462a      	mov	r2, r5
 800b300:	4b05      	ldr	r3, [pc, #20]	; (800b318 <_vfiprintf_r+0x22c>)
 800b302:	a904      	add	r1, sp, #16
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff fa4f 	bl	800a7a8 <_printf_i>
 800b30a:	e7e4      	b.n	800b2d6 <_vfiprintf_r+0x1ea>
 800b30c:	0800bc22 	.word	0x0800bc22
 800b310:	0800bc2c 	.word	0x0800bc2c
 800b314:	00000000 	.word	0x00000000
 800b318:	0800b0c7 	.word	0x0800b0c7
 800b31c:	0800bc28 	.word	0x0800bc28

0800b320 <__swbuf_r>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	460e      	mov	r6, r1
 800b324:	4614      	mov	r4, r2
 800b326:	4605      	mov	r5, r0
 800b328:	b118      	cbz	r0, 800b332 <__swbuf_r+0x12>
 800b32a:	6a03      	ldr	r3, [r0, #32]
 800b32c:	b90b      	cbnz	r3, 800b332 <__swbuf_r+0x12>
 800b32e:	f7fe fb59 	bl	80099e4 <__sinit>
 800b332:	69a3      	ldr	r3, [r4, #24]
 800b334:	60a3      	str	r3, [r4, #8]
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	071a      	lsls	r2, r3, #28
 800b33a:	d525      	bpl.n	800b388 <__swbuf_r+0x68>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	b31b      	cbz	r3, 800b388 <__swbuf_r+0x68>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	6922      	ldr	r2, [r4, #16]
 800b344:	1a98      	subs	r0, r3, r2
 800b346:	6963      	ldr	r3, [r4, #20]
 800b348:	b2f6      	uxtb	r6, r6
 800b34a:	4283      	cmp	r3, r0
 800b34c:	4637      	mov	r7, r6
 800b34e:	dc04      	bgt.n	800b35a <__swbuf_r+0x3a>
 800b350:	4621      	mov	r1, r4
 800b352:	4628      	mov	r0, r5
 800b354:	f7ff fd1e 	bl	800ad94 <_fflush_r>
 800b358:	b9e0      	cbnz	r0, 800b394 <__swbuf_r+0x74>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	701e      	strb	r6, [r3, #0]
 800b368:	6962      	ldr	r2, [r4, #20]
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d004      	beq.n	800b37a <__swbuf_r+0x5a>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	07db      	lsls	r3, r3, #31
 800b374:	d506      	bpl.n	800b384 <__swbuf_r+0x64>
 800b376:	2e0a      	cmp	r6, #10
 800b378:	d104      	bne.n	800b384 <__swbuf_r+0x64>
 800b37a:	4621      	mov	r1, r4
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7ff fd09 	bl	800ad94 <_fflush_r>
 800b382:	b938      	cbnz	r0, 800b394 <__swbuf_r+0x74>
 800b384:	4638      	mov	r0, r7
 800b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f806 	bl	800b39c <__swsetup_r>
 800b390:	2800      	cmp	r0, #0
 800b392:	d0d5      	beq.n	800b340 <__swbuf_r+0x20>
 800b394:	f04f 37ff 	mov.w	r7, #4294967295
 800b398:	e7f4      	b.n	800b384 <__swbuf_r+0x64>
	...

0800b39c <__swsetup_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4b2a      	ldr	r3, [pc, #168]	; (800b448 <__swsetup_r+0xac>)
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	6818      	ldr	r0, [r3, #0]
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	b118      	cbz	r0, 800b3b0 <__swsetup_r+0x14>
 800b3a8:	6a03      	ldr	r3, [r0, #32]
 800b3aa:	b90b      	cbnz	r3, 800b3b0 <__swsetup_r+0x14>
 800b3ac:	f7fe fb1a 	bl	80099e4 <__sinit>
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3b6:	0718      	lsls	r0, r3, #28
 800b3b8:	d422      	bmi.n	800b400 <__swsetup_r+0x64>
 800b3ba:	06d9      	lsls	r1, r3, #27
 800b3bc:	d407      	bmi.n	800b3ce <__swsetup_r+0x32>
 800b3be:	2309      	movs	r3, #9
 800b3c0:	602b      	str	r3, [r5, #0]
 800b3c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e034      	b.n	800b438 <__swsetup_r+0x9c>
 800b3ce:	0758      	lsls	r0, r3, #29
 800b3d0:	d512      	bpl.n	800b3f8 <__swsetup_r+0x5c>
 800b3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3d4:	b141      	cbz	r1, 800b3e8 <__swsetup_r+0x4c>
 800b3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	d002      	beq.n	800b3e4 <__swsetup_r+0x48>
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f7fe fd4a 	bl	8009e78 <_free_r>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	6063      	str	r3, [r4, #4]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f043 0308 	orr.w	r3, r3, #8
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	6923      	ldr	r3, [r4, #16]
 800b402:	b94b      	cbnz	r3, 800b418 <__swsetup_r+0x7c>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b40e:	d003      	beq.n	800b418 <__swsetup_r+0x7c>
 800b410:	4621      	mov	r1, r4
 800b412:	4628      	mov	r0, r5
 800b414:	f000 f88c 	bl	800b530 <__smakebuf_r>
 800b418:	89a0      	ldrh	r0, [r4, #12]
 800b41a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b41e:	f010 0301 	ands.w	r3, r0, #1
 800b422:	d00a      	beq.n	800b43a <__swsetup_r+0x9e>
 800b424:	2300      	movs	r3, #0
 800b426:	60a3      	str	r3, [r4, #8]
 800b428:	6963      	ldr	r3, [r4, #20]
 800b42a:	425b      	negs	r3, r3
 800b42c:	61a3      	str	r3, [r4, #24]
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b943      	cbnz	r3, 800b444 <__swsetup_r+0xa8>
 800b432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b436:	d1c4      	bne.n	800b3c2 <__swsetup_r+0x26>
 800b438:	bd38      	pop	{r3, r4, r5, pc}
 800b43a:	0781      	lsls	r1, r0, #30
 800b43c:	bf58      	it	pl
 800b43e:	6963      	ldrpl	r3, [r4, #20]
 800b440:	60a3      	str	r3, [r4, #8]
 800b442:	e7f4      	b.n	800b42e <__swsetup_r+0x92>
 800b444:	2000      	movs	r0, #0
 800b446:	e7f7      	b.n	800b438 <__swsetup_r+0x9c>
 800b448:	20000068 	.word	0x20000068

0800b44c <_raise_r>:
 800b44c:	291f      	cmp	r1, #31
 800b44e:	b538      	push	{r3, r4, r5, lr}
 800b450:	4604      	mov	r4, r0
 800b452:	460d      	mov	r5, r1
 800b454:	d904      	bls.n	800b460 <_raise_r+0x14>
 800b456:	2316      	movs	r3, #22
 800b458:	6003      	str	r3, [r0, #0]
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b462:	b112      	cbz	r2, 800b46a <_raise_r+0x1e>
 800b464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b468:	b94b      	cbnz	r3, 800b47e <_raise_r+0x32>
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 f830 	bl	800b4d0 <_getpid_r>
 800b470:	462a      	mov	r2, r5
 800b472:	4601      	mov	r1, r0
 800b474:	4620      	mov	r0, r4
 800b476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47a:	f000 b817 	b.w	800b4ac <_kill_r>
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d00a      	beq.n	800b498 <_raise_r+0x4c>
 800b482:	1c59      	adds	r1, r3, #1
 800b484:	d103      	bne.n	800b48e <_raise_r+0x42>
 800b486:	2316      	movs	r3, #22
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	2001      	movs	r0, #1
 800b48c:	e7e7      	b.n	800b45e <_raise_r+0x12>
 800b48e:	2400      	movs	r4, #0
 800b490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b494:	4628      	mov	r0, r5
 800b496:	4798      	blx	r3
 800b498:	2000      	movs	r0, #0
 800b49a:	e7e0      	b.n	800b45e <_raise_r+0x12>

0800b49c <raise>:
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <raise+0xc>)
 800b49e:	4601      	mov	r1, r0
 800b4a0:	6818      	ldr	r0, [r3, #0]
 800b4a2:	f7ff bfd3 	b.w	800b44c <_raise_r>
 800b4a6:	bf00      	nop
 800b4a8:	20000068 	.word	0x20000068

0800b4ac <_kill_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d07      	ldr	r5, [pc, #28]	; (800b4cc <_kill_r+0x20>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	f7f7 f815 	bl	80024e8 <_kill>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	d102      	bne.n	800b4c8 <_kill_r+0x1c>
 800b4c2:	682b      	ldr	r3, [r5, #0]
 800b4c4:	b103      	cbz	r3, 800b4c8 <_kill_r+0x1c>
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20005314 	.word	0x20005314

0800b4d0 <_getpid_r>:
 800b4d0:	f7f7 b802 	b.w	80024d8 <_getpid>

0800b4d4 <_malloc_usable_size_r>:
 800b4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d8:	1f18      	subs	r0, r3, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfbc      	itt	lt
 800b4de:	580b      	ldrlt	r3, [r1, r0]
 800b4e0:	18c0      	addlt	r0, r0, r3
 800b4e2:	4770      	bx	lr

0800b4e4 <__swhatbuf_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	b096      	sub	sp, #88	; 0x58
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	461e      	mov	r6, r3
 800b4f4:	da0d      	bge.n	800b512 <__swhatbuf_r+0x2e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	bf0c      	ite	eq
 800b502:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b506:	2340      	movne	r3, #64	; 0x40
 800b508:	2000      	movs	r0, #0
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	b016      	add	sp, #88	; 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	466a      	mov	r2, sp
 800b514:	f000 f848 	bl	800b5a8 <_fstat_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dbec      	blt.n	800b4f6 <__swhatbuf_r+0x12>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b522:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b526:	4259      	negs	r1, r3
 800b528:	4159      	adcs	r1, r3
 800b52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b52e:	e7eb      	b.n	800b508 <__swhatbuf_r+0x24>

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b002      	add	sp, #8
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc8 	bl	800b4e4 <__swhatbuf_r>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fe fd01 	bl	8009f60 <_malloc_r>
 800b55e:	b948      	cbnz	r0, 800b574 <__smakebuf_r+0x44>
 800b560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d4ef      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e7e3      	b.n	800b53c <__smakebuf_r+0xc>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	6163      	str	r3, [r4, #20]
 800b582:	9b01      	ldr	r3, [sp, #4]
 800b584:	6120      	str	r0, [r4, #16]
 800b586:	b15b      	cbz	r3, 800b5a0 <__smakebuf_r+0x70>
 800b588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 f81d 	bl	800b5cc <_isatty_r>
 800b592:	b128      	cbz	r0, 800b5a0 <__smakebuf_r+0x70>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f023 0303 	bic.w	r3, r3, #3
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	431d      	orrs	r5, r3
 800b5a4:	81a5      	strh	r5, [r4, #12]
 800b5a6:	e7cf      	b.n	800b548 <__smakebuf_r+0x18>

0800b5a8 <_fstat_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	; (800b5c8 <_fstat_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f6 fff6 	bl	80025a6 <_fstat>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_fstat_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_fstat_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20005314 	.word	0x20005314

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f6 fff5 	bl	80025c6 <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20005314 	.word	0x20005314

0800b5ec <_init>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_fini>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	bf00      	nop
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr
