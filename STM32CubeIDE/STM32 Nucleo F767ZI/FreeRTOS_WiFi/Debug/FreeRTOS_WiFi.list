
FreeRTOS_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc50  0800bc50  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc50  0800bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc58  0800bc58  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bc60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  0800bccc  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800bd6c  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005178  200001ac  0800be0c  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005324  0800be0c  00025324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022543  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004eed  00000000  00000000  00042760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001bc8  00000000  00000000  00047650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000157f  00000000  00000000  00049218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002de9c  00000000  00000000  0004a797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000231e5  00000000  00000000  00078633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011002a  00000000  00000000  0009b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000823c  00000000  00000000  001ab844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000087  00000000  00000000  001b3a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b5cc 	.word	0x0800b5cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	0800b5cc 	.word	0x0800b5cc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool	Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005fe:	d812      	bhi.n	8000626 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	461a      	mov	r2, r3
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <Wifi_SendRaw+0x44>)
 8000608:	f009 fbfa 	bl	8009e00 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <Wifi_SendRaw+0x48>)
 8000614:	f004 fef8 	bl	8005408 <HAL_UART_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <Wifi_SendRaw+0x36>
			return true;
 800061e:	2301      	movs	r3, #1
 8000620:	e002      	b.n	8000628 <Wifi_SendRaw+0x3c>
		else
			return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200003d1 	.word	0x200003d1
 8000634:	20000e70 	.word	0x20000e70

08000638 <Wifi_SendString>:
//#########################################################################################################
bool	Wifi_SendString(char *data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fdfd 	bl	8000240 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29b      	uxth	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffcd 	bl	80005ec <Wifi_SendRaw>
 8000652:	4603      	mov	r3, r0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <Wifi_SendStringAndWait>:
//#########################################################################################################
bool	Wifi_SendStringAndWait(char *data,uint16_t DelayMs)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
	if(Wifi_SendRaw((uint8_t*)data,strlen(data))==false)
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fde9 	bl	8000240 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29b      	uxth	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffb9 	bl	80005ec <Wifi_SendRaw>
 800067a:	4603      	mov	r3, r0
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <Wifi_SendStringAndWait+0x2e>
		return false;
 8000686:	2300      	movs	r3, #0
 8000688:	e004      	b.n	8000694 <Wifi_SendStringAndWait+0x38>
	osDelay(DelayMs);
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	4618      	mov	r0, r3
 800068e:	f006 fcfa 	bl	8007086 <osDelay>
	return true;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Wifi_WaitForString>:
//#########################################################################################################
bool	Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 800069c:	b40c      	push	{r2, r3}
 800069e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	466b      	mov	r3, sp
 80006ac:	461e      	mov	r6, r3
	
	if(result == NULL)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <Wifi_WaitForString+0x1c>
		return false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e074      	b.n	80007a2 <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 80006b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <Wifi_WaitForString+0x28>
		return false;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e06e      	b.n	80007a2 <Wifi_WaitForString+0x106>

	*result=0;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 80006ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ce:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 80006d0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80006d4:	460b      	mov	r3, r1
 80006d6:	3b01      	subs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	b2cb      	uxtb	r3, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	4698      	mov	r8, r3
 80006e0:	4691      	mov	r9, r2
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	f04f 0300 	mov.w	r3, #0
 80006ea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80006ee:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80006f2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80006f6:	b2cb      	uxtb	r3, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	461c      	mov	r4, r3
 80006fc:	4615      	mov	r5, r2
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	016b      	lsls	r3, r5, #5
 8000708:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800070c:	0162      	lsls	r2, r4, #5
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	3307      	adds	r3, #7
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	ebad 0d03 	sub.w	sp, sp, r3
 800071c:	466b      	mov	r3, sp
 800071e:	3303      	adds	r3, #3
 8000720:	089b      	lsrs	r3, r3, #2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	77fb      	strb	r3, [r7, #31]
 800072a:	e00a      	b.n	8000742 <Wifi_WaitForString+0xa6>
		arg[i] = va_arg (tag, char *);	
 800072c:	7ffa      	ldrb	r2, [r7, #31]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1d19      	adds	r1, r3, #4
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800073c:	7ffb      	ldrb	r3, [r7, #31]
 800073e:	3301      	adds	r3, #1
 8000740:	77fb      	strb	r3, [r7, #31]
 8000742:	7ffa      	ldrb	r2, [r7, #31]
 8000744:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <Wifi_WaitForString+0x90>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	e022      	b.n	8000798 <Wifi_WaitForString+0xfc>
	{
		osDelay(50);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f006 fc97 	bl	8007086 <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000758:	2300      	movs	r3, #0
 800075a:	75fb      	strb	r3, [r7, #23]
 800075c:	e014      	b.n	8000788 <Wifi_WaitForString+0xec>
		{			
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 800075e:	7dfa      	ldrb	r2, [r7, #23]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000766:	4619      	mov	r1, r3
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <Wifi_WaitForString+0x118>)
 800076a:	f009 fa63 	bl	8009c34 <strstr>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d006      	beq.n	8000782 <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	701a      	strb	r2, [r3, #0]
				return true;
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	3301      	adds	r3, #1
 8000786:	75fb      	strb	r3, [r7, #23]
 8000788:	7dfa      	ldrb	r2, [r7, #23]
 800078a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800078e:	429a      	cmp	r2, r3
 8000790:	d3e5      	bcc.n	800075e <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3332      	adds	r3, #50	; 0x32
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3d8      	bcc.n	8000752 <Wifi_WaitForString+0xb6>
			}				
		}				
	}
	// timeout
	return false;
 80007a0:	2300      	movs	r3, #0
 80007a2:	46b5      	mov	sp, r6
	
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3724      	adds	r7, #36	; 0x24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007ae:	b002      	add	sp, #8
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200001d1 	.word	0x200001d1

080007b8 <Wifi_ReturnString>:
//#########################################################################################################
bool	Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	460b      	mov	r3, r1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <Wifi_ReturnString+0x18>
		return false;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e02e      	b.n	800082e <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 80007d0:	7afb      	ldrb	r3, [r7, #11]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <Wifi_ReturnString+0x22>
		return false;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e029      	b.n	800082e <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <Wifi_ReturnString+0x80>)
 80007dc:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	6978      	ldr	r0, [r7, #20]
 80007e2:	f009 f9cb 	bl	8009b7c <strtok>
 80007e6:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d118      	bne.n	8000820 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		return false;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e01a      	b.n	800082e <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	2000      	movs	r0, #0
 80007fc:	f009 f9be 	bl	8009b7c <strtok>
 8000800:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	3b01      	subs	r3, #1
 800080c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d105      	bne.n	8000820 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8000814:	6979      	ldr	r1, [r7, #20]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f009 faea 	bl	8009df0 <strcpy>
			return true;
 800081c:	2301      	movs	r3, #1
 800081e:	e006      	b.n	800082e <Wifi_ReturnString+0x76>
	while (str != NULL)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1e8      	bne.n	80007f8 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	return false;	
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001d1 	.word	0x200001d1

0800083c <Wifi_ReturnStrings>:

//#########################################################################################################
bool	Wifi_ReturnStrings(char *InputString,char *SplitterChars,uint8_t CountOfParameter,...)
{
 800083c:	b40c      	push	{r2, r3}
 800083e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	466b      	mov	r3, sp
 800084c:	461e      	mov	r6, r3
	if(CountOfParameter == 0)
 800084e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <Wifi_ReturnStrings+0x1e>
		return false;
 8000856:	2300      	movs	r3, #0
 8000858:	e06f      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	va_list tag;
	va_start (tag,CountOfParameter);
 800085a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800085e:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8000860:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000864:	460b      	mov	r3, r1
 8000866:	3b01      	subs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	b2cb      	uxtb	r3, r1
 800086c:	2200      	movs	r2, #0
 800086e:	4698      	mov	r8, r3
 8000870:	4691      	mov	r9, r2
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800087e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000882:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000886:	b2cb      	uxtb	r3, r1
 8000888:	2200      	movs	r2, #0
 800088a:	461c      	mov	r4, r3
 800088c:	4615      	mov	r5, r2
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	016b      	lsls	r3, r5, #5
 8000898:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800089c:	0162      	lsls	r2, r4, #5
 800089e:	460b      	mov	r3, r1
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	3307      	adds	r3, #7
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	ebad 0d03 	sub.w	sp, sp, r3
 80008ac:	466b      	mov	r3, sp
 80008ae:	3303      	adds	r3, #3
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	77fb      	strb	r3, [r7, #31]
 80008ba:	e00a      	b.n	80008d2 <Wifi_ReturnStrings+0x96>
		arg[i] = va_arg (tag, char *);	
 80008bc:	7ffa      	ldrb	r2, [r7, #31]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1d19      	adds	r1, r3, #4
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80008cc:	7ffb      	ldrb	r3, [r7, #31]
 80008ce:	3301      	adds	r3, #1
 80008d0:	77fb      	strb	r3, [r7, #31]
 80008d2:	7ffa      	ldrb	r2, [r7, #31]
 80008d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3ef      	bcc.n	80008bc <Wifi_ReturnStrings+0x80>
  va_end (tag);
	
	char *str;
	str = strtok (InputString,SplitterChars);
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f009 f94c 	bl	8009b7c <strtok>
 80008e4:	61b8      	str	r0, [r7, #24]
	if(str == NULL)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <Wifi_ReturnStrings+0xb4>
		return false;
 80008ec:	2300      	movs	r3, #0
 80008ee:	e024      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	uint8_t i=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]
	while (str != NULL)
 80008f4:	e01d      	b.n	8000932 <Wifi_ReturnStrings+0xf6>
  {
    str = strtok (NULL,SplitterChars);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	2000      	movs	r0, #0
 80008fa:	f009 f93f 	bl	8009b7c <strtok>
 80008fe:	61b8      	str	r0, [r7, #24]
		if(str != NULL)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <Wifi_ReturnStrings+0xd4>
			CountOfParameter--;
 8000906:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800090a:	3b01      	subs	r3, #1
 800090c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		strcpy(arg[i],str);
 8000910:	7dfa      	ldrb	r2, [r7, #23]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	69b9      	ldr	r1, [r7, #24]
 800091a:	4618      	mov	r0, r3
 800091c:	f009 fa68 	bl	8009df0 <strcpy>
		i++;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	3301      	adds	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
		if(CountOfParameter==0)
 8000926:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <Wifi_ReturnStrings+0xf6>
		{
			return true;
 800092e:	2301      	movs	r3, #1
 8000930:	e003      	b.n	800093a <Wifi_ReturnStrings+0xfe>
	while (str != NULL)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1de      	bne.n	80008f6 <Wifi_ReturnStrings+0xba>
		}
  }
	return false;	
 8000938:	2300      	movs	r3, #0
 800093a:	46b5      	mov	sp, r6
	
}
 800093c:	4618      	mov	r0, r3
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000946:	b002      	add	sp, #8
 8000948:	4770      	bx	lr
	...

0800094c <Wifi_ReturnInteger>:
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	460b      	mov	r3, r1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <Wifi_ReturnInteger+0x40>)
 8000962:	f7ff ff29 	bl	80007b8 <Wifi_ReturnString>
 8000966:	4603      	mov	r3, r0
 8000968:	f083 0301 	eor.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <Wifi_ReturnInteger+0x2a>
		return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e006      	b.n	8000984 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <Wifi_ReturnInteger+0x40>)
 8000978:	f008 ff18 	bl	80097ac <atoi>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	601a      	str	r2, [r3, #0]
	return true;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001d1 	.word	0x200001d1

08000990 <Wifi_RemoveChar>:
	*result = atof((char*)Wifi.RxBuffer);
	return true;
}
//#########################################################################################################
void Wifi_RemoveChar(char *str, char garbage)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	char *src, *dst;
  for (src = dst = str; *src != '\0'; src++)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e00e      	b.n	80009c4 <Wifi_RemoveChar+0x34>
	{
		*dst = *src;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	701a      	strb	r2, [r3, #0]
		if (*dst != garbage)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d002      	beq.n	80009be <Wifi_RemoveChar+0x2e>
			dst++;
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
  for (src = dst = str; *src != '\0'; src++)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <Wifi_RemoveChar+0x16>
  }
  *dst = '\0';
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <Wifi_RxClear>:
//#########################################################################################################
void	Wifi_RxClear(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	2100      	movs	r1, #0
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <Wifi_RxClear+0x28>)
 80009ec:	f009 f8b1 	bl	8009b52 <memset>
	Wifi.RxIndex=0;	
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <Wifi_RxClear+0x2c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4904      	ldr	r1, [pc, #16]	; (8000a0c <Wifi_RxClear+0x2c>)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <Wifi_RxClear+0x30>)
 80009fe:	f004 fd86 	bl	800550e <HAL_UART_Receive_IT>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001d1 	.word	0x200001d1
 8000a0c:	200001d0 	.word	0x200001d0
 8000a10:	20000e70 	.word	0x20000e70

08000a14 <Wifi_TxClear>:
//#########################################################################################################
void	Wifi_TxClear(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8000a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4802      	ldr	r0, [pc, #8]	; (8000a28 <Wifi_TxClear+0x14>)
 8000a20:	f009 f897 	bl	8009b52 <memset>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200003d1 	.word	0x200003d1

08000a2c <Wifi_RxCallBack>:
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8000a30:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a32:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8000a36:	f083 0301 	eor.w	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d018      	beq.n	8000a72 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8000a40:	4b96      	ldr	r3, [pc, #600]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a42:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a46:	4619      	mov	r1, r3
 8000a48:	4b94      	ldr	r3, [pc, #592]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b93      	ldr	r3, [pc, #588]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a4e:	440b      	add	r3, r1
 8000a50:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8000a52:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a54:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a5c:	f080 80ab 	bcs.w	8000bb6 <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8000a60:	4b8e      	ldr	r3, [pc, #568]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a62:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b8c      	ldr	r3, [pc, #560]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a6c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8000a70:	e0a1      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8000a72:	f002 f81b 	bl	8002aac <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b88      	ldr	r3, [pc, #544]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a7a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b32      	cmp	r3, #50	; 0x32
 8000a82:	d903      	bls.n	8000a8c <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8000a84:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 8000a8c:	4b83      	ldr	r3, [pc, #524]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a8e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d167      	bne.n	8000b66 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8000a96:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000a98:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8000a9c:	f083 0301 	eor.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d028      	beq.n	8000af8 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000aa6:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000aa8:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b7a      	ldr	r3, [pc, #488]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ab4:	440b      	add	r3, r1
 8000ab6:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000aba:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000abc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b75      	ldr	r3, [pc, #468]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ac6:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000acc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	4a72      	ldr	r2, [pc, #456]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000ada:	2b3a      	cmp	r3, #58	; 0x3a
 8000adc:	d16b      	bne.n	8000bb6 <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 8000ade:	4b6f      	ldr	r3, [pc, #444]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 8000ae6:	486e      	ldr	r0, [pc, #440]	; (8000ca0 <Wifi_RxCallBack+0x274>)
 8000ae8:	f008 fe60 	bl	80097ac <atoi>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000af2:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000af6:	e05e      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000af8:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000afa:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b66      	ldr	r3, [pc, #408]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b65      	ldr	r3, [pc, #404]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b0e:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b61      	ldr	r3, [pc, #388]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b18:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b1e:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 8000b22:	2b2c      	cmp	r3, #44	; 0x2c
 8000b24:	d107      	bne.n	8000b36 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8000b26:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b28:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8000b2c:	3b30      	subs	r3, #48	; 0x30
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b32:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8000b36:	4b59      	ldr	r3, [pc, #356]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b38:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d93a      	bls.n	8000bb6 <Wifi_RxCallBack+0x18a>
 8000b40:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b42:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a54      	ldr	r2, [pc, #336]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000b50:	2b3a      	cmp	r3, #58	; 0x3a
 8000b52:	d130      	bne.n	8000bb6 <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8000b54:	4853      	ldr	r0, [pc, #332]	; (8000ca4 <Wifi_RxCallBack+0x278>)
 8000b56:	f008 fe29 	bl	80097ac <atoi>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b60:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000b64:	e027      	b.n	8000bb6 <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b68:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b74:	440b      	add	r3, r1
 8000b76:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 8000b7a:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b7c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b84:	d207      	bcs.n	8000b96 <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 8000b86:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b88:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b92:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b98:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000b9e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d307      	bcc.n	8000bb6 <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4938      	ldr	r1, [pc, #224]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bba:	483b      	ldr	r0, [pc, #236]	; (8000ca8 <Wifi_RxCallBack+0x27c>)
 8000bbc:	f004 fca7 	bl	800550e <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bc2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d966      	bls.n	8000c98 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bcc:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bd0:	3b04      	subs	r3, #4
 8000bd2:	4a32      	ldr	r2, [pc, #200]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	785b      	ldrb	r3, [r3, #1]
 8000bd8:	2b2b      	cmp	r3, #43	; 0x2b
 8000bda:	d15d      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bde:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000be2:	3b03      	subs	r3, #3
 8000be4:	4a2d      	ldr	r2, [pc, #180]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000be6:	4413      	add	r3, r2
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	2b49      	cmp	r3, #73	; 0x49
 8000bec:	d154      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bf0:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000bf4:	3b02      	subs	r3, #2
 8000bf6:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000bf8:	4413      	add	r3, r2
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b50      	cmp	r3, #80	; 0x50
 8000bfe:	d14b      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c02:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c0a:	4413      	add	r3, r2
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	2b44      	cmp	r3, #68	; 0x44
 8000c10:	d142      	bne.n	8000c98 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 8000c12:	2208      	movs	r2, #8
 8000c14:	2100      	movs	r1, #0
 8000c16:	4825      	ldr	r0, [pc, #148]	; (8000cac <Wifi_RxCallBack+0x280>)
 8000c18:	f008 ff9b 	bl	8009b52 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c1e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c22:	3b04      	subs	r3, #4
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c2e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c32:	3b03      	subs	r3, #3
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c36:	4413      	add	r3, r2
 8000c38:	2200      	movs	r2, #0
 8000c3a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c3e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c42:	3b02      	subs	r3, #2
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c46:	4413      	add	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c4e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c56:	4413      	add	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c5e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000c62:	3b04      	subs	r3, #4
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c68:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 8000c8c:	f001 ff0e 	bl	8002aac <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <Wifi_RxCallBack+0x270>)
 8000c94:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer  
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001d0 	.word	0x200001d0
 8000ca0:	200008d5 	.word	0x200008d5
 8000ca4:	200008d7 	.word	0x200008d7
 8000ca8:	20000e70 	.word	0x20000e70
 8000cac:	200008d4 	.word	0x200008d4

08000cb0 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiTask(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 8000cb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cbc:	f006 f9e3 	bl	8007086 <osDelay>
	Wifi_SendStringAndWait("AT\r\n",1000);
 8000cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc4:	4853      	ldr	r0, [pc, #332]	; (8000e14 <WifiTask+0x164>)
 8000cc6:	f7ff fcc9 	bl	800065c <Wifi_SendStringAndWait>
 	Wifi_SetRfPower(82);
 8000cca:	2052      	movs	r0, #82	; 0x52
 8000ccc:	f000 f8f0 	bl	8000eb0 <Wifi_SetRfPower>
  Wifi_TcpIp_GetMultiConnection();
 8000cd0:	f000 fd7c 	bl	80017cc <Wifi_TcpIp_GetMultiConnection>
  Wifi_TcpIp_Close(0);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 fe7d 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fe7a 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(2);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fe77 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(3);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 fe74 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(4);
 8000cec:	2004      	movs	r0, #4
 8000cee:	f000 fe71 	bl	80019d4 <Wifi_TcpIp_Close>
  Wifi_TcpIp_SetMultiConnection(true);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fd16 	bl	8001724 <Wifi_TcpIp_SetMultiConnection>
	Wifi_GetMode();
 8000cf8:	f000 f97c 	bl	8000ff4 <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 8000cfc:	f000 fa7c 	bl	80011f8 <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();  
 8000d00:	f000 ffdc 	bl	8001cbc <Wifi_UserInit>
 
 
	//#######################		
	while(1)
	{	
		Wifi_GetMyIp();	
 8000d04:	f000 f9d6 	bl	80010b4 <Wifi_GetMyIp>
    if((Wifi.Mode==WifiMode_SoftAp) || (Wifi.Mode==WifiMode_StationAndSoftAp))
 8000d08:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <WifiTask+0x168>)
 8000d0a:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d004      	beq.n	8000d1c <WifiTask+0x6c>
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <WifiTask+0x168>)
 8000d14:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d101      	bne.n	8000d20 <WifiTask+0x70>
      Wifi_SoftAp_GetConnectedDevices();
 8000d1c:	f000 fafa 	bl	8001314 <Wifi_SoftAp_GetConnectedDevices>
		Wifi_TcpIp_GetConnectionStatus();
 8000d20:	f000 fc1c 	bl	800155c <Wifi_TcpIp_GetConnectionStatus>
    Wifi_RxClear();  
 8000d24:	f7ff fe5c 	bl	80009e0 <Wifi_RxClear>
		for(uint8_t i=0; i< 100; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e06b      	b.n	8000e06 <WifiTask+0x156>
    {
      if( Wifi.GotNewData==true)
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <WifiTask+0x168>)
 8000d30:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d060      	beq.n	8000dfa <WifiTask+0x14a>
      {
        Wifi.GotNewData=false;
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <WifiTask+0x168>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
        for(uint8_t ii=0; ii<5 ; ii++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73bb      	strb	r3, [r7, #14]
 8000d44:	e056      	b.n	8000df4 <WifiTask+0x144>
        {
          if((strstr(Wifi.TcpIpConnections[ii].Type,"UDP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 8000d46:	7bba      	ldrb	r2, [r7, #14]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <WifiTask+0x168>)
 8000d56:	4413      	add	r3, r2
 8000d58:	3306      	adds	r3, #6
 8000d5a:	4930      	ldr	r1, [pc, #192]	; (8000e1c <WifiTask+0x16c>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 ff69 	bl	8009c34 <strstr>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d018      	beq.n	8000d9a <WifiTask+0xea>
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <WifiTask+0x168>)
 8000d6a:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 8000d6e:	7bba      	ldrb	r2, [r7, #14]
 8000d70:	4829      	ldr	r0, [pc, #164]	; (8000e18 <WifiTask+0x168>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4403      	add	r3, r0
 8000d7c:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d109      	bne.n	8000d9a <WifiTask+0xea>
            Wifi_UserGetUdpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);        
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <WifiTask+0x168>)
 8000d88:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8000d8c:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <WifiTask+0x168>)
 8000d8e:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <WifiTask+0x170>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ffe5 	bl	8001d64 <Wifi_UserGetUdpData>
          if((strstr(Wifi.TcpIpConnections[ii].Type,"TCP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 8000d9a:	7bba      	ldrb	r2, [r7, #14]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <WifiTask+0x168>)
 8000daa:	4413      	add	r3, r2
 8000dac:	3306      	adds	r3, #6
 8000dae:	491d      	ldr	r1, [pc, #116]	; (8000e24 <WifiTask+0x174>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 ff3f 	bl	8009c34 <strstr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d018      	beq.n	8000dee <WifiTask+0x13e>
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <WifiTask+0x168>)
 8000dbe:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 8000dc2:	7bba      	ldrb	r2, [r7, #14]
 8000dc4:	4814      	ldr	r0, [pc, #80]	; (8000e18 <WifiTask+0x168>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4403      	add	r3, r0
 8000dd0:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d109      	bne.n	8000dee <WifiTask+0x13e>
            Wifi_UserGetTcpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);        
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <WifiTask+0x168>)
 8000ddc:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <WifiTask+0x168>)
 8000de2:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <WifiTask+0x170>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 ffcf 	bl	8001d8c <Wifi_UserGetTcpData>
        for(uint8_t ii=0; ii<5 ; ii++)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73bb      	strb	r3, [r7, #14]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d9a5      	bls.n	8000d46 <WifiTask+0x96>
        }        
      }
      osDelay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f006 f943 	bl	8007086 <osDelay>
		for(uint8_t i=0; i< 100; i++)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	3301      	adds	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b63      	cmp	r3, #99	; 0x63
 8000e0a:	d990      	bls.n	8000d2e <WifiTask+0x7e>
    }
    Wifi_UserProcess();
 8000e0c:	f000 ff84 	bl	8001d18 <Wifi_UserProcess>
		Wifi_GetMyIp();	
 8000e10:	e778      	b.n	8000d04 <WifiTask+0x54>
 8000e12:	bf00      	nop
 8000e14:	0800b5e4 	.word	0x0800b5e4
 8000e18:	200001d0 	.word	0x200001d0
 8000e1c:	0800b5ec 	.word	0x0800b5ec
 8000e20:	200004d4 	.word	0x200004d4
 8000e24:	0800b5f0 	.word	0x0800b5f0

08000e28 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void	Wifi_Init(osPriority	Priority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	4918      	ldr	r1, [pc, #96]	; (8000e98 <Wifi_Init+0x70>)
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <Wifi_Init+0x74>)
 8000e38:	f004 fb69 	bl	800550e <HAL_UART_Receive_IT>
	Wifi_RxClear();
 8000e3c:	f7ff fdd0 	bl	80009e0 <Wifi_RxClear>
	Wifi_TxClear();
 8000e40:	f7ff fde8 	bl	8000a14 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 f92b 	bl	80070ae <osSemaphoreCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <Wifi_Init+0x78>)
 8000e5c:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <Wifi_Init+0x7c>)
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <Wifi_Init+0x80>)
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	82bb      	strh	r3, [r7, #20]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);	
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 f8b3 	bl	8006fee <osThreadCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <Wifi_Init+0x84>)
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001d0 	.word	0x200001d0
 8000e9c:	20000e70 	.word	0x20000e70
 8000ea0:	200001cc 	.word	0x200001cc
 8000ea4:	0800b5f4 	.word	0x0800b5f4
 8000ea8:	08000cb1 	.word	0x08000cb1
 8000eac:	200001c8 	.word	0x200001c8

08000eb0 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <Wifi_SetRfPower+0x88>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 f926 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000ecc:	f7ff fd88 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4919      	ldr	r1, [pc, #100]	; (8000f3c <Wifi_SetRfPower+0x8c>)
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <Wifi_SetRfPower+0x90>)
 8000ed8:	f008 fdaa 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <Wifi_SetRfPower+0x90>)
 8000ede:	f7ff fbab 	bl	8000638 <Wifi_SendString>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d115      	bne.n	8000f1a <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000eee:	f107 010e 	add.w	r1, r7, #14
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <Wifi_SetRfPower+0x94>)
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <Wifi_SetRfPower+0x98>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f7ff fbcd 	bl	800069c <Wifi_WaitForString>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d006      	beq.n	8000f22 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e004      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;
 8000f1a:	bf00      	nop
 8000f1c:	e002      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <Wifi_SetRfPower+0x74>
			break;			
 8000f22:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <Wifi_SetRfPower+0x88>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 f941 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001cc 	.word	0x200001cc
 8000f3c:	0800b64c 	.word	0x0800b64c
 8000f40:	200003d1 	.word	0x200003d1
 8000f44:	0800b614 	.word	0x0800b614
 8000f48:	0800b610 	.word	0x0800b610

08000f4c <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <Wifi_SetMode+0x90>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 f8d8 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000f68:	f7ff fd3a 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	491b      	ldr	r1, [pc, #108]	; (8000fe0 <Wifi_SetMode+0x94>)
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <Wifi_SetMode+0x98>)
 8000f74:	f008 fd5c 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000f78:	481a      	ldr	r0, [pc, #104]	; (8000fe4 <Wifi_SetMode+0x98>)
 8000f7a:	f7ff fb5d 	bl	8000638 <Wifi_SendString>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d119      	bne.n	8000fbe <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000f8a:	f107 010e 	add.w	r1, r7, #14
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <Wifi_SetMode+0x9c>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <Wifi_SetMode+0xa0>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f7ff fb7f 	bl	800069c <Wifi_WaitForString>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10b      	bne.n	8000fc2 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d00a      	beq.n	8000fc6 <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <Wifi_SetMode+0xa4>)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;
 8000fbe:	bf00      	nop
 8000fc0:	e002      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <Wifi_SetMode+0x7c>
			break;			
 8000fc6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <Wifi_SetMode+0x90>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f8ef 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001cc 	.word	0x200001cc
 8000fe0:	0800b65c 	.word	0x0800b65c
 8000fe4:	200003d1 	.word	0x200003d1
 8000fe8:	0800b614 	.word	0x0800b614
 8000fec:	0800b610 	.word	0x0800b610
 8000ff0:	200001d0 	.word	0x200001d0

08000ff4 <Wifi_GetMode>:
//#########################################################################################################
bool	Wifi_GetMode(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <Wifi_GetMode+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8001002:	4618      	mov	r0, r3
 8001004:	f006 f886 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001008:	2300      	movs	r3, #0
 800100a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800100c:	f7ff fce8 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8001010:	4922      	ldr	r1, [pc, #136]	; (800109c <Wifi_GetMode+0xa8>)
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <Wifi_GetMode+0xac>)
 8001014:	f008 fd0c 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001018:	4821      	ldr	r0, [pc, #132]	; (80010a0 <Wifi_GetMode+0xac>)
 800101a:	f7ff fb0d 	bl	8000638 <Wifi_SendString>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d126      	bne.n	8001078 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800102a:	1db9      	adds	r1, r7, #6
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <Wifi_GetMode+0xb0>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <Wifi_GetMode+0xb4>)
 8001032:	2202      	movs	r2, #2
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f7ff fb30 	bl	800069c <Wifi_WaitForString>
 800103c:	4603      	mov	r3, r0
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d119      	bne.n	800107c <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d018      	beq.n	8001080 <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 800104e:	1dbb      	adds	r3, r7, #6
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <Wifi_GetMode+0xb8>)
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc79 	bl	800094c <Wifi_ReturnInteger>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <Wifi_GetMode+0xbc>)
 8001064:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8001068:	e003      	b.n	8001072 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <Wifi_GetMode+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8001072:	2301      	movs	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e004      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <Wifi_GetMode+0x8e>
			break;			
 8001080:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Wifi_GetMode+0xa4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f006 f892 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001cc 	.word	0x200001cc
 800109c:	0800b670 	.word	0x0800b670
 80010a0:	200003d1 	.word	0x200003d1
 80010a4:	0800b614 	.word	0x0800b614
 80010a8:	0800b610 	.word	0x0800b610
 80010ac:	0800b684 	.word	0x0800b684
 80010b0:	200001d0 	.word	0x200001d0

080010b4 <Wifi_GetMyIp>:
//#########################################################################################################
bool	Wifi_GetMyIp(void)
{	
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <Wifi_GetMyIp+0x110>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f04f 31ff 	mov.w	r1, #4294967295
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 f826 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80010cc:	f7ff fc88 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIFSR\r\n");
 80010d0:	493d      	ldr	r1, [pc, #244]	; (80011c8 <Wifi_GetMyIp+0x114>)
 80010d2:	483e      	ldr	r0, [pc, #248]	; (80011cc <Wifi_GetMyIp+0x118>)
 80010d4:	f008 fcac 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80010d8:	483c      	ldr	r0, [pc, #240]	; (80011cc <Wifi_GetMyIp+0x118>)
 80010da:	f7ff faad 	bl	8000638 <Wifi_SendString>
 80010de:	4603      	mov	r3, r0
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d153      	bne.n	8001192 <Wifi_GetMyIp+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <Wifi_GetMyIp+0x11c>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <Wifi_GetMyIp+0x120>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f7ff fad0 	bl	800069c <Wifi_WaitForString>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d146      	bne.n	8001196 <Wifi_GetMyIp+0xe2>
			break;
		if(result == 2)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d045      	beq.n	800119a <Wifi_GetMyIp+0xe6>
			break;		
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <Wifi_GetMyIp+0x124>)
 8001110:	4932      	ldr	r1, [pc, #200]	; (80011dc <Wifi_GetMyIp+0x128>)
 8001112:	4833      	ldr	r0, [pc, #204]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 8001114:	f008 fcac 	bl	8009a70 <siscanf>
    sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);			
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <Wifi_GetMyIp+0x124>)
 800111a:	4932      	ldr	r1, [pc, #200]	; (80011e4 <Wifi_GetMyIp+0x130>)
 800111c:	4830      	ldr	r0, [pc, #192]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 800111e:	f008 fca7 	bl	8009a70 <siscanf>
    
    
    Wifi_RxClear();
 8001122:	f7ff fc5d 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTA?\r\n");
 8001126:	4930      	ldr	r1, [pc, #192]	; (80011e8 <Wifi_GetMyIp+0x134>)
 8001128:	4828      	ldr	r0, [pc, #160]	; (80011cc <Wifi_GetMyIp+0x118>)
 800112a:	f008 fc81 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800112e:	4827      	ldr	r0, [pc, #156]	; (80011cc <Wifi_GetMyIp+0x118>)
 8001130:	f7ff fa82 	bl	8000638 <Wifi_SendString>
 8001134:	4603      	mov	r3, r0
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d12e      	bne.n	800119e <Wifi_GetMyIp+0xea>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001140:	1df9      	adds	r1, r7, #7
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <Wifi_GetMyIp+0x11c>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Wifi_GetMyIp+0x120>)
 8001148:	2202      	movs	r2, #2
 800114a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114e:	f7ff faa5 	bl	800069c <Wifi_WaitForString>
 8001152:	4603      	mov	r3, r0
 8001154:	f083 0301 	eor.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d121      	bne.n	80011a2 <Wifi_GetMyIp+0xee>
			break;
		if(result == 2)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d020      	beq.n	80011a6 <Wifi_GetMyIp+0xf2>
			break;	
    
    char *str=strstr((char*)Wifi.RxBuffer,"gateway:");
 8001164:	4921      	ldr	r1, [pc, #132]	; (80011ec <Wifi_GetMyIp+0x138>)
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <Wifi_GetMyIp+0x12c>)
 8001168:	f008 fd64 	bl	8009c34 <strstr>
 800116c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01a      	beq.n	80011aa <Wifi_GetMyIp+0xf6>
      break;
    if(Wifi_ReturnStrings(str,"\"",1,Wifi.MyGateWay)==false)
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <Wifi_GetMyIp+0x13c>)
 8001176:	2201      	movs	r2, #1
 8001178:	491e      	ldr	r1, [pc, #120]	; (80011f4 <Wifi_GetMyIp+0x140>)
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff fb5e 	bl	800083c <Wifi_ReturnStrings>
 8001180:	4603      	mov	r3, r0
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d110      	bne.n	80011ae <Wifi_GetMyIp+0xfa>
      break;    
    
		returnVal=true;	
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e00e      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 8001192:	bf00      	nop
 8001194:	e00c      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 8001196:	bf00      	nop
 8001198:	e00a      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;		
 800119a:	bf00      	nop
 800119c:	e008      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 800119e:	bf00      	nop
 80011a0:	e006      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;
 80011a2:	bf00      	nop
 80011a4:	e004      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
			break;	
 80011a6:	bf00      	nop
 80011a8:	e002      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
      break;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <Wifi_GetMyIp+0xfc>
      break;    
 80011ae:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <Wifi_GetMyIp+0x110>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fffb 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001cc 	.word	0x200001cc
 80011c8:	0800b688 	.word	0x0800b688
 80011cc:	200003d1 	.word	0x200003d1
 80011d0:	0800b614 	.word	0x0800b614
 80011d4:	0800b610 	.word	0x0800b610
 80011d8:	200008eb 	.word	0x200008eb
 80011dc:	0800b694 	.word	0x0800b694
 80011e0:	200001d1 	.word	0x200001d1
 80011e4:	0800b6b4 	.word	0x0800b6b4
 80011e8:	0800b6d4 	.word	0x0800b6d4
 80011ec:	0800b6e4 	.word	0x0800b6e4
 80011f0:	200008fb 	.word	0x200008fb
 80011f4:	0800b6f0 	.word	0x0800b6f0

080011f8 <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <Wifi_Station_DhcpIsEnable+0x100>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 31ff 	mov.w	r1, #4294967295
 8001206:	4618      	mov	r0, r3
 8001208:	f005 ff84 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8001210:	f7ff fbe6 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 8001214:	4939      	ldr	r1, [pc, #228]	; (80012fc <Wifi_Station_DhcpIsEnable+0x104>)
 8001216:	483a      	ldr	r0, [pc, #232]	; (8001300 <Wifi_Station_DhcpIsEnable+0x108>)
 8001218:	f008 fc0a 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800121c:	4838      	ldr	r0, [pc, #224]	; (8001300 <Wifi_Station_DhcpIsEnable+0x108>)
 800121e:	f7ff fa0b 	bl	8000638 <Wifi_SendString>
 8001222:	4603      	mov	r3, r0
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d153      	bne.n	80012d6 <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800122e:	1db9      	adds	r1, r7, #6
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <Wifi_Station_DhcpIsEnable+0x10c>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <Wifi_Station_DhcpIsEnable+0x110>)
 8001236:	2202      	movs	r2, #2
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f7ff fa2e 	bl	800069c <Wifi_WaitForString>
 8001240:	4603      	mov	r3, r0
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d146      	bne.n	80012da <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d045      	beq.n	80012de <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <Wifi_Station_DhcpIsEnable+0x114>)
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb77 	bl	800094c <Wifi_ReturnInteger>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13b      	bne.n	80012e2 <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d82f      	bhi.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <Wifi_Station_DhcpIsEnable+0x80>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001289 	.word	0x08001289
 800127c:	0800129b 	.word	0x0800129b
 8001280:	080012ad 	.word	0x080012ad
 8001284:	080012bf 	.word	0x080012bf
		{
			case 0:
				Wifi.StationDhcp=false;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 800128a:	2200      	movs	r2, #0
 800128c:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001298:	e01a      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 80012aa:	e011      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 80012bc:	e008      	b.n	80012d0 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <Wifi_Station_DhcpIsEnable+0x118>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 80012ce:	bf00      	nop
		}
		returnVal=true;	
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	e006      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012d6:	bf00      	nop
 80012d8:	e004      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012da:	bf00      	nop
 80012dc:	e002      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 80012e2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <Wifi_Station_DhcpIsEnable+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 ff61 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 80012ee:	79fb      	ldrb	r3, [r7, #7]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001cc 	.word	0x200001cc
 80012fc:	0800b774 	.word	0x0800b774
 8001300:	200003d1 	.word	0x200003d1
 8001304:	0800b614 	.word	0x0800b614
 8001308:	0800b610 	.word	0x0800b610
 800130c:	0800b684 	.word	0x0800b684
 8001310:	200001d0 	.word	0x200001d0

08001314 <Wifi_SoftAp_GetConnectedDevices>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_SoftAp_GetConnectedDevices(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af0a      	add	r7, sp, #40	; 0x28
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <Wifi_SoftAp_GetConnectedDevices+0x144>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f04f 31ff 	mov.w	r1, #4294967295
 8001322:	4618      	mov	r0, r3
 8001324:	f005 fef6 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800132c:	f7ff fb58 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWLIF\r\n");
 8001330:	494a      	ldr	r1, [pc, #296]	; (800145c <Wifi_SoftAp_GetConnectedDevices+0x148>)
 8001332:	484b      	ldr	r0, [pc, #300]	; (8001460 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 8001334:	f008 fb7c 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001338:	4849      	ldr	r0, [pc, #292]	; (8001460 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 800133a:	f7ff f97d 	bl	8000638 <Wifi_SendString>
 800133e:	4603      	mov	r3, r0
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d176      	bne.n	8001438 <Wifi_SoftAp_GetConnectedDevices+0x124>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800134a:	1d79      	adds	r1, r7, #5
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <Wifi_SoftAp_GetConnectedDevices+0x150>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4b45      	ldr	r3, [pc, #276]	; (8001468 <Wifi_SoftAp_GetConnectedDevices+0x154>)
 8001352:	2202      	movs	r2, #2
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f7ff f9a0 	bl	800069c <Wifi_WaitForString>
 800135c:	4603      	mov	r3, r0
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d169      	bne.n	800143c <Wifi_SoftAp_GetConnectedDevices+0x128>
			break;
		if(result == 2)
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d068      	beq.n	8001440 <Wifi_SoftAp_GetConnectedDevices+0x12c>
			break;		
		Wifi_RemoveChar((char*)Wifi.RxBuffer,'\r');
 800136e:	210d      	movs	r1, #13
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <Wifi_SoftAp_GetConnectedDevices+0x158>)
 8001372:	f7ff fb0d 	bl	8000990 <Wifi_RemoveChar>
    Wifi_ReturnStrings((char*)Wifi.RxBuffer,"\n,",10,Wifi.SoftApConnectedDevicesIp[0],Wifi.SoftApConnectedDevicesMac[0],Wifi.SoftApConnectedDevicesIp[1],Wifi.SoftApConnectedDevicesMac[1],Wifi.SoftApConnectedDevicesIp[2],Wifi.SoftApConnectedDevicesMac[2],Wifi.SoftApConnectedDevicesIp[3],Wifi.SoftApConnectedDevicesMac[3],Wifi.SoftApConnectedDevicesIp[4],Wifi.SoftApConnectedDevicesMac[4]);
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <Wifi_SoftAp_GetConnectedDevices+0x15c>)
 8001378:	9308      	str	r3, [sp, #32]
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <Wifi_SoftAp_GetConnectedDevices+0x160>)
 800137c:	9307      	str	r3, [sp, #28]
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <Wifi_SoftAp_GetConnectedDevices+0x164>)
 8001380:	9306      	str	r3, [sp, #24]
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <Wifi_SoftAp_GetConnectedDevices+0x168>)
 8001384:	9305      	str	r3, [sp, #20]
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <Wifi_SoftAp_GetConnectedDevices+0x16c>)
 8001388:	9304      	str	r3, [sp, #16]
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <Wifi_SoftAp_GetConnectedDevices+0x170>)
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <Wifi_SoftAp_GetConnectedDevices+0x174>)
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <Wifi_SoftAp_GetConnectedDevices+0x178>)
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <Wifi_SoftAp_GetConnectedDevices+0x17c>)
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <Wifi_SoftAp_GetConnectedDevices+0x180>)
 800139c:	220a      	movs	r2, #10
 800139e:	493e      	ldr	r1, [pc, #248]	; (8001498 <Wifi_SoftAp_GetConnectedDevices+0x184>)
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <Wifi_SoftAp_GetConnectedDevices+0x158>)
 80013a2:	f7ff fa4b 	bl	800083c <Wifi_ReturnStrings>
		for(uint8_t i=0 ; i<6 ; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	e03f      	b.n	800142c <Wifi_SoftAp_GetConnectedDevices+0x118>
    {
      if( (Wifi.SoftApConnectedDevicesIp[i][0]<'0') || (Wifi.SoftApConnectedDevicesIp[i][0]>'9'))
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b2f      	cmp	r3, #47	; 0x2f
 80013bc:	d908      	bls.n	80013d0 <Wifi_SoftAp_GetConnectedDevices+0xbc>
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	4a36      	ldr	r2, [pc, #216]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b39      	cmp	r3, #57	; 0x39
 80013ce:	d907      	bls.n	80013e0 <Wifi_SoftAp_GetConnectedDevices+0xcc>
        Wifi.SoftApConnectedDevicesIp[i][0]=0;      
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	4a32      	ldr	r2, [pc, #200]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
      if( (Wifi.SoftApConnectedDevicesMac[i][0]<'0') || (Wifi.SoftApConnectedDevicesMac[i][0]>'9'))
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	492e      	ldr	r1, [pc, #184]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b2f      	cmp	r3, #47	; 0x2f
 80013f6:	d90b      	bls.n	8001410 <Wifi_SoftAp_GetConnectedDevices+0xfc>
 80013f8:	79ba      	ldrb	r2, [r7, #6]
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b39      	cmp	r3, #57	; 0x39
 800140e:	d90a      	bls.n	8001426 <Wifi_SoftAp_GetConnectedDevices+0x112>
        Wifi.SoftApConnectedDevicesMac[i][0]=0;      
 8001410:	79ba      	ldrb	r2, [r7, #6]
 8001412:	4922      	ldr	r1, [pc, #136]	; (800149c <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0 ; i<6 ; i++)
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	3301      	adds	r3, #1
 800142a:	71bb      	strb	r3, [r7, #6]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d9bc      	bls.n	80013ac <Wifi_SoftAp_GetConnectedDevices+0x98>
    }
    
		returnVal=true;	
 8001432:	2301      	movs	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	e004      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;		
 8001440:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <Wifi_SoftAp_GetConnectedDevices+0x144>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f005 feb2 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;			
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200001cc 	.word	0x200001cc
 800145c:	0800b7a8 	.word	0x0800b7a8
 8001460:	200003d1 	.word	0x200003d1
 8001464:	0800b614 	.word	0x0800b614
 8001468:	0800b610 	.word	0x0800b610
 800146c:	200001d1 	.word	0x200001d1
 8001470:	200009c5 	.word	0x200009c5
 8001474:	2000095d 	.word	0x2000095d
 8001478:	200009b3 	.word	0x200009b3
 800147c:	2000094d 	.word	0x2000094d
 8001480:	200009a1 	.word	0x200009a1
 8001484:	2000093d 	.word	0x2000093d
 8001488:	2000098f 	.word	0x2000098f
 800148c:	2000092d 	.word	0x2000092d
 8001490:	2000097d 	.word	0x2000097d
 8001494:	2000091d 	.word	0x2000091d
 8001498:	0800b7b4 	.word	0x0800b7b4
 800149c:	200001d0 	.word	0x200001d0

080014a0 <Wifi_SoftAp_Create>:
//#########################################################################################################
bool  Wifi_SoftAp_Create(char *SSID,char *password,uint8_t channel,WifiEncryptionType_t WifiEncryptionType,uint8_t MaxConnections_1_to_4,bool HiddenSSID)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	4613      	mov	r3, r2
 80014b4:	71bb      	strb	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <Wifi_SoftAp_Create+0xa8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f04f 31ff 	mov.w	r1, #4294967295
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fe28 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 80014c8:	f7ff fa8a 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWSAP=\"%s\",\"%s\",%d,%d,%d,%d\r\n",SSID,password,channel,WifiEncryptionType,MaxConnections_1_to_4,HiddenSSID);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80014d4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80014d8:	9003      	str	r0, [sp, #12]
 80014da:	9102      	str	r1, [sp, #8]
 80014dc:	9201      	str	r2, [sp, #4]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4919      	ldr	r1, [pc, #100]	; (800154c <Wifi_SoftAp_Create+0xac>)
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <Wifi_SoftAp_Create+0xb0>)
 80014e8:	f008 faa2 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <Wifi_SoftAp_Create+0xb0>)
 80014ee:	f7ff f8a3 	bl	8000638 <Wifi_SendString>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <Wifi_SoftAp_Create+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80014fe:	f107 0116 	add.w	r1, r7, #22
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <Wifi_SoftAp_Create+0xb4>)
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Wifi_SoftAp_Create+0xb8>)
 8001508:	2202      	movs	r2, #2
 800150a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150e:	f7ff f8c5 	bl	800069c <Wifi_WaitForString>
 8001512:	4603      	mov	r3, r0
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <Wifi_SoftAp_Create+0x8e>
			break;
		if(result == 2)
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d006      	beq.n	8001532 <Wifi_SoftAp_Create+0x92>
			break;		  
		returnVal=true;	
 8001524:	2301      	movs	r3, #1
 8001526:	75fb      	strb	r3, [r7, #23]
 8001528:	e004      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;
 800152a:	bf00      	nop
 800152c:	e002      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <Wifi_SoftAp_Create+0x94>
			break;		  
 8001532:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <Wifi_SoftAp_Create+0xa8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fe39 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		  
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001cc 	.word	0x200001cc
 800154c:	0800b7b8 	.word	0x0800b7b8
 8001550:	200003d1 	.word	0x200003d1
 8001554:	0800b614 	.word	0x0800b614
 8001558:	0800b610 	.word	0x0800b610

0800155c <Wifi_TcpIp_GetConnectionStatus>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_TcpIp_GetConnectionStatus(void)
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af04      	add	r7, sp, #16
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001562:	4b66      	ldr	r3, [pc, #408]	; (80016fc <Wifi_TcpIp_GetConnectionStatus+0x1a0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 31ff 	mov.w	r1, #4294967295
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fdd2 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001574:	f7ff fa34 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTATUS\r\n");
 8001578:	4961      	ldr	r1, [pc, #388]	; (8001700 <Wifi_TcpIp_GetConnectionStatus+0x1a4>)
 800157a:	4862      	ldr	r0, [pc, #392]	; (8001704 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 800157c:	f008 fa58 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001580:	4860      	ldr	r0, [pc, #384]	; (8001704 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 8001582:	f7ff f859 	bl	8000638 <Wifi_SendString>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80a3 	bne.w	80016da <Wifi_TcpIp_GetConnectionStatus+0x17e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001594:	1d79      	adds	r1, r7, #5
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <Wifi_TcpIp_GetConnectionStatus+0x1ac>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 800159c:	2202      	movs	r2, #2
 800159e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a2:	f7ff f87b 	bl	800069c <Wifi_WaitForString>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8095 	bne.w	80016de <Wifi_TcpIp_GetConnectionStatus+0x182>
			break;
		if(result == 2)
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	f000 8093 	beq.w	80016e2 <Wifi_TcpIp_GetConnectionStatus+0x186>
			break;		
		
    
		char *str = strstr((char*)Wifi.RxBuffer,"\nSTATUS:");
 80015bc:	4954      	ldr	r1, [pc, #336]	; (8001710 <Wifi_TcpIp_GetConnectionStatus+0x1b4>)
 80015be:	4855      	ldr	r0, [pc, #340]	; (8001714 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 80015c0:	f008 fb38 	bl	8009c34 <strstr>
 80015c4:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808c 	beq.w	80016e6 <Wifi_TcpIp_GetConnectionStatus+0x18a>
      break;
    str = strchr(str,':');
 80015ce:	213a      	movs	r1, #58	; 0x3a
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f008 fac6 	bl	8009b62 <strchr>
 80015d6:	60b8      	str	r0, [r7, #8]
    str++;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e012      	b.n	800160a <Wifi_TcpIp_GetConnectionStatus+0xae>
      Wifi.TcpIpConnections[i].status=(WifiConnectionStatus_t)atoi(str);
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	f008 f8e1 	bl	80097ac <atoi>
 80015ea:	4603      	mov	r3, r0
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	b2d8      	uxtb	r0, r3
 80015f0:	4949      	ldr	r1, [pc, #292]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0 ; i<5 ;i++)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3301      	adds	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d9e9      	bls.n	80015e4 <Wifi_TcpIp_GetConnectionStatus+0x88>
    str = strstr((char*)Wifi.RxBuffer,"+CIPSTATUS:");
 8001610:	4942      	ldr	r1, [pc, #264]	; (800171c <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 8001614:	f008 fb0e 	bl	8009c34 <strstr>
 8001618:	60b8      	str	r0, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e054      	b.n	80016ca <Wifi_TcpIp_GetConnectionStatus+0x16e>
    {
      sscanf(str,"+CIPSTATUS:%d,\"%3s\",\"%[^\"]\",%d,%d,%d",(int*)&Wifi.TcpIpConnections[i].LinkId,Wifi.TcpIpConnections[i].Type,Wifi.TcpIpConnections[i].RemoteIp,(int*)&Wifi.TcpIpConnections[i].RemotePort,(int*)&Wifi.TcpIpConnections[i].LocalPort,(int*)&Wifi.TcpIpConnections[i].RunAsServer);
 8001620:	79ba      	ldrb	r2, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800162e:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001630:	4413      	add	r3, r2
 8001632:	1d5d      	adds	r5, r3, #5
 8001634:	79ba      	ldrb	r2, [r7, #6]
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001642:	4a35      	ldr	r2, [pc, #212]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001644:	4413      	add	r3, r2
 8001646:	1d9e      	adds	r6, r3, #6
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	4613      	mov	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001658:	4413      	add	r3, r2
 800165a:	f103 010a 	add.w	r1, r3, #10
 800165e:	79ba      	ldrb	r2, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800166c:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 800166e:	4413      	add	r3, r2
 8001670:	1d18      	adds	r0, r3, #4
 8001672:	79ba      	ldrb	r2, [r7, #6]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001680:	4a25      	ldr	r2, [pc, #148]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001682:	4413      	add	r3, r2
 8001684:	1d9c      	adds	r4, r3, #6
 8001686:	79ba      	ldrb	r2, [r7, #6]
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001696:	4413      	add	r3, r2
 8001698:	3308      	adds	r3, #8
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9402      	str	r4, [sp, #8]
 800169e:	9001      	str	r0, [sp, #4]
 80016a0:	9100      	str	r1, [sp, #0]
 80016a2:	4633      	mov	r3, r6
 80016a4:	462a      	mov	r2, r5
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f008 f9e1 	bl	8009a70 <siscanf>
      str++;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      str = strstr(str,"+CIPSTATUS:");
 80016b4:	4919      	ldr	r1, [pc, #100]	; (800171c <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f008 fabc 	bl	8009c34 <strstr>
 80016bc:	60b8      	str	r0, [r7, #8]
      if(str==NULL)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <Wifi_TcpIp_GetConnectionStatus+0x176>
    for(uint8_t i=0 ; i<5 ;i++)
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	3301      	adds	r3, #1
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d9a7      	bls.n	8001620 <Wifi_TcpIp_GetConnectionStatus+0xc4>
 80016d0:	e000      	b.n	80016d4 <Wifi_TcpIp_GetConnectionStatus+0x178>
        break;
 80016d2:	bf00      	nop
    }
		returnVal=true;	
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e006      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;
 80016da:	bf00      	nop
 80016dc:	e004      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;
 80016de:	bf00      	nop
 80016e0:	e002      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
			break;		
 80016e2:	bf00      	nop
 80016e4:	e000      	b.n	80016e8 <Wifi_TcpIp_GetConnectionStatus+0x18c>
      break;
 80016e6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <Wifi_TcpIp_GetConnectionStatus+0x1a0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fd5f 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;			
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	200001cc 	.word	0x200001cc
 8001700:	0800b7dc 	.word	0x0800b7dc
 8001704:	200003d1 	.word	0x200003d1
 8001708:	0800b614 	.word	0x0800b614
 800170c:	0800b610 	.word	0x0800b610
 8001710:	0800b7ec 	.word	0x0800b7ec
 8001714:	200001d1 	.word	0x200001d1
 8001718:	200001d0 	.word	0x200001d0
 800171c:	0800b7f8 	.word	0x0800b7f8
 8001720:	0800b804 	.word	0x0800b804

08001724 <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <Wifi_TcpIp_SetMultiConnection+0x90>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 31ff 	mov.w	r1, #4294967295
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fcec 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001740:	f7ff f94e 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	461a      	mov	r2, r3
 8001748:	491b      	ldr	r1, [pc, #108]	; (80017b8 <Wifi_TcpIp_SetMultiConnection+0x94>)
 800174a:	481c      	ldr	r0, [pc, #112]	; (80017bc <Wifi_TcpIp_SetMultiConnection+0x98>)
 800174c:	f008 f970 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001750:	481a      	ldr	r0, [pc, #104]	; (80017bc <Wifi_TcpIp_SetMultiConnection+0x98>)
 8001752:	f7fe ff71 	bl	8000638 <Wifi_SendString>
 8001756:	4603      	mov	r3, r0
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001762:	f107 010e 	add.w	r1, r7, #14
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 800176c:	2202      	movs	r2, #2
 800176e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001772:	f7fe ff93 	bl	800069c <Wifi_WaitForString>
 8001776:	4603      	mov	r3, r0
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d00a      	beq.n	800179e <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 800179e:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <Wifi_TcpIp_SetMultiConnection+0x90>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fd03 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;			
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200001cc 	.word	0x200001cc
 80017b8:	0800b840 	.word	0x0800b840
 80017bc:	200003d1 	.word	0x200003d1
 80017c0:	0800b614 	.word	0x0800b614
 80017c4:	0800b610 	.word	0x0800b610
 80017c8:	200001d0 	.word	0x200001d0

080017cc <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80017d2:	4b29      	ldr	r3, [pc, #164]	; (8001878 <Wifi_TcpIp_GetMultiConnection+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fc9a 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80017e4:	f7ff f8fc 	bl	80009e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 80017e8:	4924      	ldr	r1, [pc, #144]	; (800187c <Wifi_TcpIp_GetMultiConnection+0xb0>)
 80017ea:	4825      	ldr	r0, [pc, #148]	; (8001880 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80017ec:	f008 f920 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80017f2:	f7fe ff21 	bl	8000638 <Wifi_SendString>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d129      	bne.n	8001856 <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001802:	1db9      	adds	r1, r7, #6
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 800180a:	2202      	movs	r2, #2
 800180c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001810:	f7fe ff44 	bl	800069c <Wifi_WaitForString>
 8001814:	4603      	mov	r3, r0
 8001816:	f083 0301 	eor.w	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11c      	bne.n	800185a <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d01b      	beq.n	800185e <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <Wifi_TcpIp_GetMultiConnection+0xc0>)
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f88d 	bl	800094c <Wifi_ReturnInteger>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d111      	bne.n	8001862 <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 800184c:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 8001850:	2301      	movs	r3, #1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	e006      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001856:	bf00      	nop
 8001858:	e004      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 8001862:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <Wifi_TcpIp_GetMultiConnection+0xac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fca1 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;			
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200001cc 	.word	0x200001cc
 800187c:	0800b850 	.word	0x0800b850
 8001880:	200003d1 	.word	0x200003d1
 8001884:	0800b614 	.word	0x0800b614
 8001888:	0800b610 	.word	0x0800b610
 800188c:	0800b684 	.word	0x0800b684
 8001890:	200001d0 	.word	0x200001d0

08001894 <Wifi_TcpIp_StartTcpConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	4611      	mov	r1, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	460b      	mov	r3, r1
 80018a6:	81bb      	strh	r3, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80018ac:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	4618      	mov	r0, r3
 80018b6:	f005 fc2d 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
	do
	{
    Wifi_RxClear();
 80018be:	f7ff f88f 	bl	80009e0 <Wifi_RxClear>
    sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 80018c2:	89bb      	ldrh	r3, [r7, #12]
 80018c4:	461a      	mov	r2, r3
 80018c6:	493b      	ldr	r1, [pc, #236]	; (80019b4 <Wifi_TcpIp_StartTcpConnection+0x120>)
 80018c8:	483b      	ldr	r0, [pc, #236]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 80018ca:	f008 f8b1 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80018ce:	483a      	ldr	r0, [pc, #232]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 80018d0:	f7fe feb2 	bl	8000638 <Wifi_SendString>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d152      	bne.n	8001986 <Wifi_TcpIp_StartTcpConnection+0xf2>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80018e0:	f107 0116 	add.w	r1, r7, #22
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <Wifi_TcpIp_StartTcpConnection+0x128>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f0:	f7fe fed4 	bl	800069c <Wifi_WaitForString>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d144      	bne.n	800198a <Wifi_TcpIp_StartTcpConnection+0xf6>
			break;
		if(result == 2)
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d043      	beq.n	800198e <Wifi_TcpIp_StartTcpConnection+0xfa>
			break;		
		Wifi_RxClear();
 8001906:	f7ff f86b 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <Wifi_TcpIp_StartTcpConnection+0x130>)
 800190c:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <Wifi_TcpIp_StartTcpConnection+0x9a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800191a:	89ba      	ldrh	r2, [r7, #12]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4928      	ldr	r1, [pc, #160]	; (80019c8 <Wifi_TcpIp_StartTcpConnection+0x134>)
 8001926:	4824      	ldr	r0, [pc, #144]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001928:	f008 f882 	bl	8009a30 <siprintf>
 800192c:	e00a      	b.n	8001944 <Wifi_TcpIp_StartTcpConnection+0xb0>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 800192e:	7bf9      	ldrb	r1, [r7, #15]
 8001930:	89bb      	ldrh	r3, [r7, #12]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	460a      	mov	r2, r1
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <Wifi_TcpIp_StartTcpConnection+0x138>)
 800193e:	481e      	ldr	r0, [pc, #120]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001940:	f008 f876 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001944:	481c      	ldr	r0, [pc, #112]	; (80019b8 <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001946:	f7fe fe77 	bl	8000638 <Wifi_SendString>
 800194a:	4603      	mov	r3, r0
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11d      	bne.n	8001992 <Wifi_TcpIp_StartTcpConnection+0xfe>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8001956:	f107 0116 	add.w	r1, r7, #22
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <Wifi_TcpIp_StartTcpConnection+0x128>)
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 8001964:	2203      	movs	r2, #3
 8001966:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800196a:	f7fe fe97 	bl	800069c <Wifi_WaitForString>
 800196e:	4603      	mov	r3, r0
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <Wifi_TcpIp_StartTcpConnection+0x102>
			break;
		if(result == 3)
 800197a:	7dbb      	ldrb	r3, [r7, #22]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d00c      	beq.n	800199a <Wifi_TcpIp_StartTcpConnection+0x106>
			break;		
		returnVal=true;	
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e00a      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001986:	bf00      	nop
 8001988:	e008      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 800198a:	bf00      	nop
 800198c:	e006      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;		
 800198e:	bf00      	nop
 8001990:	e004      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001992:	bf00      	nop
 8001994:	e002      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 8001996:	bf00      	nop
 8001998:	e000      	b.n	800199c <Wifi_TcpIp_StartTcpConnection+0x108>
			break;		
 800199a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fc05 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001cc 	.word	0x200001cc
 80019b4:	0800b860 	.word	0x0800b860
 80019b8:	200003d1 	.word	0x200003d1
 80019bc:	0800b614 	.word	0x0800b614
 80019c0:	0800b610 	.word	0x0800b610
 80019c4:	200001d0 	.word	0x200001d0
 80019c8:	0800b874 	.word	0x0800b874
 80019cc:	0800b894 	.word	0x0800b894
 80019d0:	0800b8b8 	.word	0x0800b8b8

080019d4 <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <Wifi_TcpIp_Close+0xa4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 fb94 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80019f0:	f7fe fff6 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <Wifi_TcpIp_Close+0xa8>)
 80019f6:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8001a04:	491e      	ldr	r1, [pc, #120]	; (8001a80 <Wifi_TcpIp_Close+0xac>)
 8001a06:	481f      	ldr	r0, [pc, #124]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a08:	f008 f812 	bl	8009a30 <siprintf>
 8001a0c:	e005      	b.n	8001a1a <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	461a      	mov	r2, r3
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <Wifi_TcpIp_Close+0xb4>)
 8001a14:	481b      	ldr	r0, [pc, #108]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a16:	f008 f80b 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001a1a:	481a      	ldr	r0, [pc, #104]	; (8001a84 <Wifi_TcpIp_Close+0xb0>)
 8001a1c:	f7fe fe0c 	bl	8000638 <Wifi_SendString>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d115      	bne.n	8001a58 <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001a2c:	f107 010e 	add.w	r1, r7, #14
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <Wifi_TcpIp_Close+0xb8>)
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <Wifi_TcpIp_Close+0xbc>)
 8001a36:	2202      	movs	r2, #2
 8001a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3c:	f7fe fe2e 	bl	800069c <Wifi_WaitForString>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f083 0301 	eor.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d006      	beq.n	8001a60 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e004      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;
 8001a58:	bf00      	nop
 8001a5a:	e002      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;
 8001a5c:	bf00      	nop
 8001a5e:	e000      	b.n	8001a62 <Wifi_TcpIp_Close+0x8e>
			break;		
 8001a60:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <Wifi_TcpIp_Close+0xa4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fba2 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;		
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200001cc 	.word	0x200001cc
 8001a7c:	200001d0 	.word	0x200001d0
 8001a80:	0800b90c 	.word	0x0800b90c
 8001a84:	200003d1 	.word	0x200003d1
 8001a88:	0800b91c 	.word	0x0800b91c
 8001a8c:	0800b614 	.word	0x0800b614
 8001a90:	0800b610 	.word	0x0800b610

08001a94 <Wifi_TcpIp_SendDataUdp>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;	
}
//#########################################################################################################
bool  Wifi_TcpIp_SendDataUdp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	603a      	str	r2, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <Wifi_TcpIp_SendDataUdp+0xdc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 fb31 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001ab6:	f7fe ff93 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <Wifi_TcpIp_SendDataUdp+0xe0>)
 8001abc:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <Wifi_TcpIp_SendDataUdp+0x40>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=0\r\n");
 8001aca:	492b      	ldr	r1, [pc, #172]	; (8001b78 <Wifi_TcpIp_SendDataUdp+0xe4>)
 8001acc:	482b      	ldr	r0, [pc, #172]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001ace:	f007 ffaf 	bl	8009a30 <siprintf>
 8001ad2:	e005      	b.n	8001ae0 <Wifi_TcpIp_SendDataUdp+0x4c>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d,%d\r\n",LinkId,dataLen);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	4929      	ldr	r1, [pc, #164]	; (8001b80 <Wifi_TcpIp_SendDataUdp+0xec>)
 8001ada:	4828      	ldr	r0, [pc, #160]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001adc:	f007 ffa8 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001ae0:	4826      	ldr	r0, [pc, #152]	; (8001b7c <Wifi_TcpIp_SendDataUdp+0xe8>)
 8001ae2:	f7fe fda9 	bl	8000638 <Wifi_SendString>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d12c      	bne.n	8001b4c <Wifi_TcpIp_SendDataUdp+0xb8>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,">","ERROR")==false)
 8001af2:	f107 010e 	add.w	r1, r7, #14
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <Wifi_TcpIp_SendDataUdp+0xf0>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <Wifi_TcpIp_SendDataUdp+0xf4>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b02:	f7fe fdcb 	bl	800069c <Wifi_WaitForString>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11e      	bne.n	8001b50 <Wifi_TcpIp_SendDataUdp+0xbc>
			break;
		if(result == 2)
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d01d      	beq.n	8001b54 <Wifi_TcpIp_SendDataUdp+0xc0>
			break;		
    Wifi_RxClear();
 8001b18:	f7fe ff62 	bl	80009e0 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8001b1c:	88bb      	ldrh	r3, [r7, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f7fe fd63 	bl	80005ec <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001b26:	f107 010e 	add.w	r1, r7, #14
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <Wifi_TcpIp_SendDataUdp+0xf0>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <Wifi_TcpIp_SendDataUdp+0xf8>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b36:	f7fe fdb1 	bl	800069c <Wifi_WaitForString>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <Wifi_TcpIp_SendDataUdp+0xc4>
			break;
		returnVal=true;	
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e006      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b4c:	bf00      	nop
 8001b4e:	e004      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;		
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8001b58:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <Wifi_TcpIp_SendDataUdp+0xdc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fb26 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;	
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001cc 	.word	0x200001cc
 8001b74:	200001d0 	.word	0x200001d0
 8001b78:	0800b954 	.word	0x0800b954
 8001b7c:	200003d1 	.word	0x200003d1
 8001b80:	0800b968 	.word	0x0800b968
 8001b84:	0800b614 	.word	0x0800b614
 8001b88:	0800b97c 	.word	0x0800b97c
 8001b8c:	0800b610 	.word	0x0800b610

08001b90 <Wifi_TcpIp_SendDataTcp>:
//#########################################################################################################
bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <Wifi_TcpIp_SendDataTcp+0x108>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fab3 	bl	8007114 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001bb2:	f7fe ff15 	bl	80009e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <Wifi_TcpIp_SendDataTcp+0x10c>)
 8001bb8:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <Wifi_TcpIp_SendDataTcp+0x44>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <Wifi_TcpIp_SendDataTcp+0x110>)
 8001bcc:	4835      	ldr	r0, [pc, #212]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001bce:	f007 ff2f 	bl	8009a30 <siprintf>
 8001bd2:	e005      	b.n	8001be0 <Wifi_TcpIp_SendDataTcp+0x50>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <Wifi_TcpIp_SendDataTcp+0x118>)
 8001bda:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001bdc:	f007 ff28 	bl	8009a30 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001be0:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <Wifi_TcpIp_SendDataTcp+0x114>)
 8001be2:	f7fe fd29 	bl	8000638 <Wifi_SendString>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d13e      	bne.n	8001c70 <Wifi_TcpIp_SendDataTcp+0xe0>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001bf2:	f107 010e 	add.w	r1, r7, #14
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <Wifi_TcpIp_SendDataTcp+0x120>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f7fe fd4b 	bl	800069c <Wifi_WaitForString>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d130      	bne.n	8001c74 <Wifi_TcpIp_SendDataTcp+0xe4>
			break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 8001c12:	f107 010e 	add.w	r1, r7, #14
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <Wifi_TcpIp_SendDataTcp+0x124>)
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <Wifi_TcpIp_SendDataTcp+0x128>)
 8001c20:	2203      	movs	r2, #3
 8001c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c26:	f7fe fd39 	bl	800069c <Wifi_WaitForString>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d120      	bne.n	8001c78 <Wifi_TcpIp_SendDataTcp+0xe8>
			break;
		if(result > 1)
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d81f      	bhi.n	8001c7c <Wifi_TcpIp_SendDataTcp+0xec>
			break;		
    Wifi_RxClear();
 8001c3c:	f7fe fed0 	bl	80009e0 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f7fe fcd1 	bl	80005ec <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001c4a:	f107 010e 	add.w	r1, r7, #14
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <Wifi_TcpIp_SendDataTcp+0x11c>)
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <Wifi_TcpIp_SendDataTcp+0x120>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5a:	f7fe fd1f 	bl	800069c <Wifi_WaitForString>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <Wifi_TcpIp_SendDataTcp+0xf0>
			break;
		returnVal=true;	
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e008      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c70:	bf00      	nop
 8001c72:	e006      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c74:	bf00      	nop
 8001c76:	e004      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c78:	bf00      	nop
 8001c7a:	e002      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;		
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 8001c80:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <Wifi_TcpIp_SendDataTcp+0x108>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fa92 	bl	80071b0 <osSemaphoreRelease>
	return returnVal;	  
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200001cc 	.word	0x200001cc
 8001c9c:	200001d0 	.word	0x200001d0
 8001ca0:	0800b980 	.word	0x0800b980
 8001ca4:	200003d1 	.word	0x200003d1
 8001ca8:	0800b994 	.word	0x0800b994
 8001cac:	0800b614 	.word	0x0800b614
 8001cb0:	0800b610 	.word	0x0800b610
 8001cb4:	0800b9ac 	.word	0x0800b9ac
 8001cb8:	0800b97c 	.word	0x0800b97c

08001cbc <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void	Wifi_UserInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
//	Wifi_SetMode(WifiMode_Station);
  Wifi_SetMode(WifiMode_SoftAp);
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f7ff f942 	bl	8000f4c <Wifi_SetMode>

//  while (Wifi_Station_ConnectToAp("L70_9587","33559366",NULL) == false);
  char* SSID = "to_ja";
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <Wifi_UserInit+0x54>)
 8001cca:	60fb      	str	r3, [r7, #12]
  char* password = "0000000000";
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <Wifi_UserInit+0x58>)
 8001cce:	60bb      	str	r3, [r7, #8]
  uint8_t channel = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
  WifiEncryptionType_t WifiEncryptionType = WifiEncryptionType_Open;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	71bb      	strb	r3, [r7, #6]
  uint8_t MaxConnections_1_to_4 = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	717b      	strb	r3, [r7, #5]
  bool HiddenSSID = false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	713b      	strb	r3, [r7, #4]


  while (Wifi_SoftAp_Create(SSID, password, channel, WifiEncryptionType, MaxConnections_1_to_4, HiddenSSID) == false);
 8001ce0:	bf00      	nop
 8001ce2:	79b9      	ldrb	r1, [r7, #6]
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	793b      	ldrb	r3, [r7, #4]
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	797b      	ldrb	r3, [r7, #5]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fbd4 	bl	80014a0 <Wifi_SoftAp_Create>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <Wifi_UserInit+0x26>
 
    
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800b9b4 	.word	0x0800b9b4
 8001d14:	0800b9bc 	.word	0x0800b9bc

08001d18 <Wifi_UserProcess>:
//#######################################################################################
void  Wifi_UserProcess(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  static uint8_t last=0;
  if(strstr(Wifi.MyIP,"0.0.0.0")!=NULL)
 8001d1c:	490d      	ldr	r1, [pc, #52]	; (8001d54 <Wifi_UserProcess+0x3c>)
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <Wifi_UserProcess+0x40>)
 8001d20:	f007 ff88 	bl	8009c34 <strstr>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <Wifi_UserProcess+0x1a>
  {    
    if(last!=1)
	{
		
	}
    last=1;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <Wifi_UserProcess+0x44>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    {
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
    }
    last=2;
  }
}
 8001d30:	e00d      	b.n	8001d4e <Wifi_UserProcess+0x36>
    if(last!=2)
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <Wifi_UserProcess+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d006      	beq.n	8001d48 <Wifi_UserProcess+0x30>
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	f248 2235 	movw	r2, #33333	; 0x8235
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <Wifi_UserProcess+0x48>)
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fda6 	bl	8001894 <Wifi_TcpIp_StartTcpConnection>
    last=2;
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <Wifi_UserProcess+0x44>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	701a      	strb	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0800b9c8 	.word	0x0800b9c8
 8001d58:	200008eb 	.word	0x200008eb
 8001d5c:	20000a84 	.word	0x20000a84
 8001d60:	200008fb 	.word	0x200008fb

08001d64 <Wifi_UserGetUdpData>:
//#######################################################################################
void  Wifi_UserGetUdpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	603a      	str	r2, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	460b      	mov	r3, r1
 8001d72:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataUdp(LinkId,2,(uint8_t*)"OK");
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <Wifi_UserGetUdpData+0x24>)
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fe8a 	bl	8001a94 <Wifi_TcpIp_SendDataUdp>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0800b9d0 	.word	0x0800b9d0

08001d8c <Wifi_UserGetTcpData>:
//#######################################################################################
void  Wifi_UserGetTcpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	603a      	str	r2, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataTcp(LinkId,2,(uint8_t*)"OK");
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <Wifi_UserGetTcpData+0x24>)
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fef4 	bl	8001b90 <Wifi_TcpIp_SendDataTcp>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	0800b9d0 	.word	0x0800b9d0

08001db4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_ETH_Init+0x84>)
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <MX_ETH_Init+0x88>)
 8001dbc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dcc:	22e1      	movs	r2, #225	; 0xe1
 8001dce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_ETH_Init+0x84>)
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <MX_ETH_Init+0x8c>)
 8001de6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_ETH_Init+0x84>)
 8001dea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_ETH_Init+0x84>)
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <MX_ETH_Init+0x90>)
 8001df4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_ETH_Init+0x84>)
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <MX_ETH_Init+0x94>)
 8001dfa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_ETH_Init+0x84>)
 8001dfe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_ETH_Init+0x84>)
 8001e06:	f000 fff5 	bl	8002df4 <HAL_ETH_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001e10:	f000 fa7a 	bl	8002308 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e14:	2238      	movs	r2, #56	; 0x38
 8001e16:	2100      	movs	r1, #0
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <MX_ETH_Init+0x98>)
 8001e1a:	f007 fe9a 	bl	8009b52 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_ETH_Init+0x98>)
 8001e20:	2221      	movs	r2, #33	; 0x21
 8001e22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_ETH_Init+0x98>)
 8001e26:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001e2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_ETH_Init+0x98>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000ac0 	.word	0x20000ac0
 8001e3c:	40028000 	.word	0x40028000
 8001e40:	20000b70 	.word	0x20000b70
 8001e44:	2000010c 	.word	0x2000010c
 8001e48:	2000006c 	.word	0x2000006c
 8001e4c:	20000a88 	.word	0x20000a88

08001e50 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_ETH_MspInit+0x158>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f040 8096 	bne.w	8001fa0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e74:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e80:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a46      	ldr	r2, [pc, #280]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a34      	ldr	r2, [pc, #208]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_ETH_MspInit+0x15c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f1c:	2332      	movs	r3, #50	; 0x32
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f2c:	230b      	movs	r3, #11
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	4619      	mov	r1, r3
 8001f36:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <HAL_ETH_MspInit+0x160>)
 8001f38:	f001 fa82 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f3c:	2386      	movs	r3, #134	; 0x86
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f4c:	230b      	movs	r3, #11
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f54:	4619      	mov	r1, r3
 8001f56:	4817      	ldr	r0, [pc, #92]	; (8001fb4 <HAL_ETH_MspInit+0x164>)
 8001f58:	f001 fa72 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f6e:	230b      	movs	r3, #11
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	4619      	mov	r1, r3
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <HAL_ETH_MspInit+0x168>)
 8001f7a:	f001 fa61 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f90:	230b      	movs	r3, #11
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <HAL_ETH_MspInit+0x16c>)
 8001f9c:	f001 fa50 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3738      	adds	r7, #56	; 0x38
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40028000 	.word	0x40028000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40021800 	.word	0x40021800

08001fc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <vApplicationGetIdleTaskMemory+0x2c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8001fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000b80 	.word	0x20000b80
 8001ff0:	20000c20 	.word	0x20000c20

08001ff4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_FREERTOS_Init+0x58>)
 8001ffc:	f107 041c 	add.w	r4, r7, #28
 8002000:	461d      	mov	r5, r3
 8002002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800200a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f004 ffea 	bl	8006fee <osThreadCreate>
 800201a:	4603      	mov	r3, r0
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <MX_FREERTOS_Init+0x5c>)
 800201e:	6013      	str	r3, [r2, #0]

  /* definition and creation of WiFiReceiveTask */
  osThreadDef(WiFiReceiveTask, StartWiFiReceiveTask, osPriorityNormal, 0, 128);
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_FREERTOS_Init+0x60>)
 8002022:	463c      	mov	r4, r7
 8002024:	461d      	mov	r5, r3
 8002026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800202e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WiFiReceiveTaskHandle = osThreadCreate(osThread(WiFiReceiveTask), NULL);
 8002032:	463b      	mov	r3, r7
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f004 ffd9 	bl	8006fee <osThreadCreate>
 800203c:	4603      	mov	r3, r0
 800203e:	4a06      	ldr	r2, [pc, #24]	; (8002058 <MX_FREERTOS_Init+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002042:	bf00      	nop
 8002044:	3738      	adds	r7, #56	; 0x38
 8002046:	46bd      	mov	sp, r7
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	bf00      	nop
 800204c:	0800b9e0 	.word	0x0800b9e0
 8002050:	20000b78 	.word	0x20000b78
 8002054:	0800ba0c 	.word	0x0800ba0c
 8002058:	20000b7c 	.word	0x20000b7c

0800205c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Wifi_Init(osPriorityNormal);
 8002064:	2000      	movs	r0, #0
 8002066:	f7fe fedf 	bl	8000e28 <Wifi_Init>
	Wifi_UserInit();
 800206a:	f7ff fe27 	bl	8001cbc <Wifi_UserInit>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <StartDefaultTask+0x24>)
 8002072:	f001 fbaa 	bl	80037ca <HAL_GPIO_TogglePin>
	  osDelay(500);
 8002076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800207a:	f005 f804 	bl	8007086 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800207e:	e7f6      	b.n	800206e <StartDefaultTask+0x12>
 8002080:	40020400 	.word	0x40020400

08002084 <StartWiFiReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWiFiReceiveTask */
void StartWiFiReceiveTask(void const * argument)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWiFiReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800208c:	2001      	movs	r0, #1
 800208e:	f004 fffa 	bl	8007086 <osDelay>
 8002092:	e7fb      	b.n	800208c <StartWiFiReceiveTask+0x8>

08002094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a46      	ldr	r2, [pc, #280]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <MX_GPIO_Init+0x134>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <MX_GPIO_Init+0x134>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <MX_GPIO_Init+0x134>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002140:	4822      	ldr	r0, [pc, #136]	; (80021cc <MX_GPIO_Init+0x138>)
 8002142:	f001 fb29 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	4821      	ldr	r0, [pc, #132]	; (80021d0 <MX_GPIO_Init+0x13c>)
 800214c:	f001 fb24 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002156:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	481b      	ldr	r0, [pc, #108]	; (80021d4 <MX_GPIO_Init+0x140>)
 8002168:	f001 f96a 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800216c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_GPIO_Init+0x138>)
 8002186:	f001 f95b 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <MX_GPIO_Init+0x13c>)
 80021a2:	f001 f94d 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_GPIO_Init+0x13c>)
 80021ba:	f001 f941 	bl	8003440 <HAL_GPIO_Init>

}
 80021be:	bf00      	nop
 80021c0:	3730      	adds	r7, #48	; 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40020800 	.word	0x40020800

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021dc:	f000 fc45 	bl	8002a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e0:	f000 f810 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e4:	f7ff ff56 	bl	8002094 <MX_GPIO_Init>
  MX_ETH_Init();
 80021e8:	f7ff fde4 	bl	8001db4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80021ec:	f000 fa72 	bl	80026d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80021f0:	f000 fb6a 	bl	80028c8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 80021f4:	f000 fa3e 	bl	8002674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80021f8:	f7ff fefc 	bl	8001ff4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021fc:	f004 fef0 	bl	8006fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002200:	e7fe      	b.n	8002200 <main+0x28>
	...

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b094      	sub	sp, #80	; 0x50
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	2234      	movs	r2, #52	; 0x34
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f007 fc9d 	bl	8009b52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002228:	f001 fc32 	bl	8003a90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <SystemClock_Config+0xd8>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <SystemClock_Config+0xd8>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <SystemClock_Config+0xd8>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <SystemClock_Config+0xdc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <SystemClock_Config+0xdc>)
 800224a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <SystemClock_Config+0xdc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002266:	2302      	movs	r3, #2
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002270:	2304      	movs	r3, #4
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002274:	23d8      	movs	r3, #216	; 0xd8
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800227c:	2309      	movs	r3, #9
 800227e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fc61 	bl	8003b50 <HAL_RCC_OscConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002294:	f000 f838 	bl	8002308 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002298:	f001 fc0a 	bl	8003ab0 <HAL_PWREx_EnableOverDrive>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80022a2:	f000 f831 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a6:	230f      	movs	r3, #15
 80022a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022aa:	2302      	movs	r3, #2
 80022ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2107      	movs	r1, #7
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 fef1 	bl	80040ac <HAL_RCC_ClockConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80022d0:	f000 f81a 	bl	8002308 <Error_Handler>
  }
}
 80022d4:	bf00      	nop
 80022d6:	3750      	adds	r7, #80	; 0x50
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000

080022e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022f6:	f000 fbc5 	bl	8002a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_MspInit+0x4c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_MspInit+0x4c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_MspInit+0x4c>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_MspInit+0x4c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	210f      	movs	r1, #15
 800234e:	f06f 0001 	mvn.w	r0, #1
 8002352:	f000 fc93 	bl	8002c7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002374:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_InitTick+0xe0>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_InitTick+0xe0>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6413      	str	r3, [r2, #64]	; 0x40
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_InitTick+0xe0>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f002 f8ae 	bl	80044f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023a6:	f002 f87f 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80023aa:	6378      	str	r0, [r7, #52]	; 0x34
 80023ac:	e004      	b.n	80023b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ae:	f002 f87b 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_InitTick+0xe4>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3b01      	subs	r3, #1
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_InitTick+0xe8>)
 80023c8:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_InitTick+0xec>)
 80023ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_InitTick+0xe8>)
 80023ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_InitTick+0xe8>)
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_InitTick+0xe8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_InitTick+0xe8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_InitTick+0xe8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023ec:	4817      	ldr	r0, [pc, #92]	; (800244c <HAL_InitTick+0xe8>)
 80023ee:	f002 fcdd 	bl	8004dac <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11b      	bne.n	8002438 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002400:	4812      	ldr	r0, [pc, #72]	; (800244c <HAL_InitTick+0xe8>)
 8002402:	f002 fd35 	bl	8004e70 <HAL_TIM_Base_Start_IT>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800240c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002410:	2b00      	cmp	r3, #0
 8002412:	d111      	bne.n	8002438 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002414:	2036      	movs	r0, #54	; 0x36
 8002416:	f000 fc4d 	bl	8002cb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d808      	bhi.n	8002432 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	2036      	movs	r0, #54	; 0x36
 8002426:	f000 fc29 	bl	8002c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_InitTick+0xf0>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e002      	b.n	8002438 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800243c:	4618      	mov	r0, r3
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	431bde83 	.word	0x431bde83
 800244c:	20000e20 	.word	0x20000e20
 8002450:	40001000 	.word	0x40001000
 8002454:	20000004 	.word	0x20000004

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Wifi_RxCallBack();
 8002488:	f7fe fad0 	bl	8000a2c <Wifi_RxCallBack>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <USART1_IRQHandler+0x14>)
 800248e:	f003 f883 	bl	8005598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000e70 	.word	0x20000e70

0800249c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <USART3_IRQHandler+0x10>)
 80024a2:	f003 f879 	bl	8005598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000ef8 	.word	0x20000ef8

080024b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM6_DAC_IRQHandler+0x10>)
 80024b6:	f002 fd53 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000e20 	.word	0x20000e20

080024c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_kill>:

int _kill(int pid, int sig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024de:	f007 fc5b 	bl	8009d98 <__errno>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2216      	movs	r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
  return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_exit>:

void _exit (int status)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ffe7 	bl	80024d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002506:	e7fe      	b.n	8002506 <_exit+0x12>

08002508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251a:	f3af 8000 	nop.w
 800251e:	4601      	mov	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
  }

  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e009      	b.n	8002568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	dbf1      	blt.n	8002554 <_write+0x12>
  }
  return len;
 8002570:	687b      	ldr	r3, [r7, #4]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_close>:

int _close(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a2:	605a      	str	r2, [r3, #4]
  return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <_isatty>:

int _isatty(int file)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <_sbrk+0x5c>)
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <_sbrk+0x60>)
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <_sbrk+0x64>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <_sbrk+0x68>)
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	429a      	cmp	r2, r3
 8002612:	d207      	bcs.n	8002624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002614:	f007 fbc0 	bl	8009d98 <__errno>
 8002618:	4603      	mov	r3, r0
 800261a:	220c      	movs	r2, #12
 800261c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	e009      	b.n	8002638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <_sbrk+0x64>)
 8002634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20080000 	.word	0x20080000
 8002644:	00000400 	.word	0x00000400
 8002648:	20000e6c 	.word	0x20000e6c
 800264c:	20005328 	.word	0x20005328

08002650 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <SystemInit+0x20>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <SystemInit+0x20>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MX_USART1_UART_Init+0x58>)
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <MX_USART1_UART_Init+0x5c>)
 800267c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <MX_USART1_UART_Init+0x58>)
 8002680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_USART1_UART_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MX_USART1_UART_Init+0x58>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_USART1_UART_Init+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_USART1_UART_Init+0x58>)
 800269a:	220c      	movs	r2, #12
 800269c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <MX_USART1_UART_Init+0x58>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_USART1_UART_Init+0x58>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <MX_USART1_UART_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_USART1_UART_Init+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <MX_USART1_UART_Init+0x58>)
 80026b8:	f002 fe58 	bl	800536c <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026c2:	f7ff fe21 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000e70 	.word	0x20000e70
 80026d0:	40011000 	.word	0x40011000

080026d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <MX_USART3_UART_Init+0x5c>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USART3_UART_Init+0x58>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_USART3_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USART3_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_USART3_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USART3_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_USART3_UART_Init+0x58>)
 8002718:	f002 fe28 	bl	800536c <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002722:	f7ff fdf1 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000ef8 	.word	0x20000ef8
 8002730:	40004800 	.word	0x40004800

08002734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0b0      	sub	sp, #192	; 0xc0
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	2290      	movs	r2, #144	; 0x90
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f007 f9fc 	bl	8009b52 <memset>
  if(uartHandle->Instance==USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a55      	ldr	r2, [pc, #340]	; (80028b4 <HAL_UART_MspInit+0x180>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d159      	bne.n	8002818 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002764:	2340      	movs	r3, #64	; 0x40
 8002766:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002768:	2300      	movs	r3, #0
 800276a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	4618      	mov	r0, r3
 8002772:	f001 fef3 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800277c:	f7ff fdc4 	bl	8002308 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_UART_MspInit+0x184>)
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_UART_MspInit+0x184>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	6453      	str	r3, [r2, #68]	; 0x44
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_UART_MspInit+0x184>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80027ca:	2304      	movs	r3, #4
 80027cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027d4:	4619      	mov	r1, r3
 80027d6:	4839      	ldr	r0, [pc, #228]	; (80028bc <HAL_UART_MspInit+0x188>)
 80027d8:	f000 fe32 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027dc:	2340      	movs	r3, #64	; 0x40
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f4:	2307      	movs	r3, #7
 80027f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027fe:	4619      	mov	r1, r3
 8002800:	482e      	ldr	r0, [pc, #184]	; (80028bc <HAL_UART_MspInit+0x188>)
 8002802:	f000 fe1d 	bl	8003440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2105      	movs	r1, #5
 800280a:	2025      	movs	r0, #37	; 0x25
 800280c:	f000 fa36 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002810:	2025      	movs	r0, #37	; 0x25
 8002812:	f000 fa4f 	bl	8002cb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002816:	e049      	b.n	80028ac <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a28      	ldr	r2, [pc, #160]	; (80028c0 <HAL_UART_MspInit+0x18c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d144      	bne.n	80028ac <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002826:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002828:	2300      	movs	r3, #0
 800282a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fe93 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 800283c:	f7ff fd64 	bl	8002308 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_UART_MspInit+0x184>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_UART_MspInit+0x184>)
 8002846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_UART_MspInit+0x184>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_UART_MspInit+0x184>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800288a:	2307      	movs	r3, #7
 800288c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002890:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002894:	4619      	mov	r1, r3
 8002896:	480b      	ldr	r0, [pc, #44]	; (80028c4 <HAL_UART_MspInit+0x190>)
 8002898:	f000 fdd2 	bl	8003440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2105      	movs	r1, #5
 80028a0:	2027      	movs	r0, #39	; 0x27
 80028a2:	f000 f9eb 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028a6:	2027      	movs	r0, #39	; 0x27
 80028a8:	f000 fa04 	bl	8002cb4 <HAL_NVIC_EnableIRQ>
}
 80028ac:	bf00      	nop
 80028ae:	37c0      	adds	r7, #192	; 0xc0
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40011000 	.word	0x40011000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40004800 	.word	0x40004800
 80028c4:	40020c00 	.word	0x40020c00

080028c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80028d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028d6:	2206      	movs	r2, #6
 80028d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028dc:	2202      	movs	r2, #2
 80028de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e8:	2202      	movs	r2, #2
 80028ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002900:	2201      	movs	r2, #1
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800290c:	f000 ff77 	bl	80037fe <HAL_PCD_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002916:	f7ff fcf7 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000f80 	.word	0x20000f80

08002924 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b0ae      	sub	sp, #184	; 0xb8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2290      	movs	r2, #144	; 0x90
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f007 f904 	bl	8009b52 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d159      	bne.n	8002a08 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002958:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fdf9 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002970:	f7ff fcca 	bl	8002308 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6313      	str	r3, [r2, #48]	; 0x30
 8002980:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800298c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029a6:	230a      	movs	r3, #10
 80029a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4818      	ldr	r0, [pc, #96]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 80029b4:	f000 fd44 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4810      	ldr	r0, [pc, #64]	; (8002a14 <HAL_PCD_MspInit+0xf0>)
 80029d4:	f000 fd34 	bl	8003440 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	6353      	str	r3, [r2, #52]	; 0x34
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fa:	6453      	str	r3, [r2, #68]	; 0x44
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_PCD_MspInit+0xec>)
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a08:	bf00      	nop
 8002a0a:	37b8      	adds	r7, #184	; 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000

08002a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a1e:	490e      	ldr	r1, [pc, #56]	; (8002a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a24:	e002      	b.n	8002a2c <LoopCopyDataInit>

08002a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2a:	3304      	adds	r3, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a30:	d3f9      	bcc.n	8002a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a34:	4c0b      	ldr	r4, [pc, #44]	; (8002a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a38:	e001      	b.n	8002a3e <LoopFillZerobss>

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a3c:	3204      	adds	r2, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a42:	f7ff fe05 	bl	8002650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f007 f9ad 	bl	8009da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4a:	f7ff fbc5 	bl	80021d8 <main>
  bx  lr    
 8002a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002a5c:	0800bc60 	.word	0x0800bc60
  ldr r2, =_sbss
 8002a60:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8002a64:	20005324 	.word	0x20005324

08002a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC_IRQHandler>

08002a6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f000 f8f9 	bl	8002c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a74:	200f      	movs	r0, #15
 8002a76:	f7ff fc75 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7a:	f7ff fc4b 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	20001488 	.word	0x20001488

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20001488 	.word	0x20001488

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000008 	.word	0x20000008

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <__NVIC_SetPriorityGrouping+0x40>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x40>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00
 8002b50:	05fa0000 	.word	0x05fa0000

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff4c 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8e:	f7ff ff61 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002c92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	6978      	ldr	r0, [r7, #20]
 8002c9a:	f7ff ffb1 	bl	8002c00 <NVIC_EncodePriority>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff80 	bl	8002bac <__NVIC_SetPriority>
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff54 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cde:	f7ff fee5 	bl	8002aac <HAL_GetTick>
 8002ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e052      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0216 	bic.w	r2, r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_DMA_Abort+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0208 	bic.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d52:	e013      	b.n	8002d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d54:	f7ff feaa 	bl	8002aac <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d90c      	bls.n	8002d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e015      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e4      	bne.n	8002d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	223f      	movs	r2, #63	; 0x3f
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00c      	b.n	8002de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06a      	b.n	8002edc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2223      	movs	r2, #35	; 0x23
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff f819 	bl	8001e50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_ETH_Init+0xf0>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_ETH_Init+0xf0>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_ETH_Init+0xf0>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e36:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_ETH_Init+0xf4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <HAL_ETH_Init+0xf4>)
 8002e3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e40:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_ETH_Init+0xf4>)
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4927      	ldr	r1, [pc, #156]	; (8002ee8 <HAL_ETH_Init+0xf4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_ETH_Init+0xf4>)
 8002e52:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7ff fe1e 	bl	8002aac <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e72:	e011      	b.n	8002e98 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e74:	f7ff fe1a 	bl	8002aac <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e82:	d909      	bls.n	8002e98 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	22e0      	movs	r2, #224	; 0xe0
 8002e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e021      	b.n	8002edc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e4      	bne.n	8002e74 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f958 	bl	8003160 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f9ff 	bl	80032b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa55 	bl	8003366 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f9bd 	bl	8003244 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800

08002eec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4b51      	ldr	r3, [pc, #324]	; (8003048 <ETH_SetMACConfig+0x15c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	7c1b      	ldrb	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <ETH_SetMACConfig+0x28>
 8002f0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f12:	e000      	b.n	8002f16 <ETH_SetMACConfig+0x2a>
 8002f14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	7c5b      	ldrb	r3, [r3, #17]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <ETH_SetMACConfig+0x38>
 8002f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f22:	e000      	b.n	8002f26 <ETH_SetMACConfig+0x3a>
 8002f24:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f26:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7fdb      	ldrb	r3, [r3, #31]
 8002f32:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f34:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	7f92      	ldrb	r2, [r2, #30]
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d102      	bne.n	8002f4a <ETH_SetMACConfig+0x5e>
 8002f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f48:	e000      	b.n	8002f4c <ETH_SetMACConfig+0x60>
 8002f4a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	7f1b      	ldrb	r3, [r3, #28]
 8002f52:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f54:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d102      	bne.n	8002f74 <ETH_SetMACConfig+0x88>
 8002f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f72:	e000      	b.n	8002f76 <ETH_SetMACConfig+0x8a>
 8002f74:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	7bdb      	ldrb	r3, [r3, #15]
 8002f7c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f7e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f8c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff fd8c 	bl	8002ac4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d101      	bne.n	8002fda <ETH_SetMACConfig+0xee>
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	e000      	b.n	8002fdc <ETH_SetMACConfig+0xf0>
 8002fda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fdc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fe2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002fea:	2a01      	cmp	r2, #1
 8002fec:	d101      	bne.n	8002ff2 <ETH_SetMACConfig+0x106>
 8002fee:	2208      	movs	r2, #8
 8002ff0:	e000      	b.n	8002ff4 <ETH_SetMACConfig+0x108>
 8002ff2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ff4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ffc:	2a01      	cmp	r2, #1
 8002ffe:	d101      	bne.n	8003004 <ETH_SetMACConfig+0x118>
 8003000:	2204      	movs	r2, #4
 8003002:	e000      	b.n	8003006 <ETH_SetMACConfig+0x11a>
 8003004:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003006:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800300e:	2a01      	cmp	r2, #1
 8003010:	d101      	bne.n	8003016 <ETH_SetMACConfig+0x12a>
 8003012:	2202      	movs	r2, #2
 8003014:	e000      	b.n	8003018 <ETH_SetMACConfig+0x12c>
 8003016:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003018:	4313      	orrs	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003030:	2001      	movs	r0, #1
 8003032:	f7ff fd47 	bl	8002ac4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	ff20810f 	.word	0xff20810f

0800304c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <ETH_SetDMAConfig+0x110>)
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7b1b      	ldrb	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <ETH_SetDMAConfig+0x2c>
 8003072:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003076:	e000      	b.n	800307a <ETH_SetDMAConfig+0x2e>
 8003078:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	7b5b      	ldrb	r3, [r3, #13]
 800307e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003080:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	7f52      	ldrb	r2, [r2, #29]
 8003086:	2a00      	cmp	r2, #0
 8003088:	d102      	bne.n	8003090 <ETH_SetDMAConfig+0x44>
 800308a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800308e:	e000      	b.n	8003092 <ETH_SetDMAConfig+0x46>
 8003090:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003092:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7b9b      	ldrb	r3, [r3, #14]
 8003098:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800309a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
 80030a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7f9b      	ldrb	r3, [r3, #30]
 80030ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030c0:	4313      	orrs	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d0:	461a      	mov	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7ff fcee 	bl	8002ac4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	791b      	ldrb	r3, [r3, #4]
 80030fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003100:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003106:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800310c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003114:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003116:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800311e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003124:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003132:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003140:	2001      	movs	r0, #1
 8003142:	f7ff fcbf 	bl	8002ac4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f8de3f23 	.word	0xf8de3f23

08003160 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0a6      	sub	sp, #152	; 0x98
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800319c:	2300      	movs	r3, #0
 800319e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fe86 	bl	8002eec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800320c:	2301      	movs	r3, #1
 800320e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003214:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800321a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800321c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003220:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003228:	2300      	movs	r3, #0
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ff08 	bl	800304c <ETH_SetDMAConfig>
}
 800323c:	bf00      	nop
 800323e:	3798      	adds	r7, #152	; 0x98
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3305      	adds	r3, #5
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	3204      	adds	r2, #4
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <ETH_MACAddressConfig+0x68>)
 8003266:	4413      	add	r3, r2
 8003268:	461a      	mov	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3303      	adds	r3, #3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	061a      	lsls	r2, r3, #24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3302      	adds	r3, #2
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3301      	adds	r3, #1
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	4313      	orrs	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <ETH_MACAddressConfig+0x6c>)
 8003296:	4413      	add	r3, r2
 8003298:	461a      	mov	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40028040 	.word	0x40028040
 80032b0:	40028044 	.word	0x40028044

080032b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e03e      	b.n	8003340 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	3206      	adds	r2, #6
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d80c      	bhi.n	8003324 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68d9      	ldr	r1, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e004      	b.n	800332e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3301      	adds	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d9bd      	bls.n	80032c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003358:	611a      	str	r2, [r3, #16]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e046      	b.n	8003402 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2200      	movs	r2, #0
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80033b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	3212      	adds	r2, #18
 80033ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d80c      	bhi.n	80033f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e004      	b.n	80033fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d9b5      	bls.n	8003374 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	60da      	str	r2, [r3, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e175      	b.n	800374c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003460:	2201      	movs	r2, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	f040 8164 	bne.w	8003746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d005      	beq.n	8003496 <HAL_GPIO_Init+0x56>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d130      	bne.n	80034f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 0201 	and.w	r2, r3, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b03      	cmp	r3, #3
 8003502:	d017      	beq.n	8003534 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d123      	bne.n	8003588 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3208      	adds	r2, #8
 8003548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	220f      	movs	r2, #15
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	08da      	lsrs	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3208      	adds	r2, #8
 8003582:	69b9      	ldr	r1, [r7, #24]
 8003584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80be 	beq.w	8003746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	4b66      	ldr	r3, [pc, #408]	; (8003764 <HAL_GPIO_Init+0x324>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a65      	ldr	r2, [pc, #404]	; (8003764 <HAL_GPIO_Init+0x324>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_GPIO_Init+0x324>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035e2:	4a61      	ldr	r2, [pc, #388]	; (8003768 <HAL_GPIO_Init+0x328>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_GPIO_Init+0x32c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d037      	beq.n	800367e <HAL_GPIO_Init+0x23e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_GPIO_Init+0x330>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_GPIO_Init+0x23a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_GPIO_Init+0x334>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <HAL_GPIO_Init+0x236>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a55      	ldr	r2, [pc, #340]	; (8003778 <HAL_GPIO_Init+0x338>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d025      	beq.n	8003672 <HAL_GPIO_Init+0x232>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_GPIO_Init+0x33c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01f      	beq.n	800366e <HAL_GPIO_Init+0x22e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_GPIO_Init+0x340>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x22a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_GPIO_Init+0x344>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x226>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a51      	ldr	r2, [pc, #324]	; (8003788 <HAL_GPIO_Init+0x348>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x222>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_GPIO_Init+0x34c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x21e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4f      	ldr	r2, [pc, #316]	; (8003790 <HAL_GPIO_Init+0x350>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x21a>
 8003656:	2309      	movs	r3, #9
 8003658:	e012      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800365a:	230a      	movs	r3, #10
 800365c:	e010      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800365e:	2308      	movs	r3, #8
 8003660:	e00e      	b.n	8003680 <HAL_GPIO_Init+0x240>
 8003662:	2307      	movs	r3, #7
 8003664:	e00c      	b.n	8003680 <HAL_GPIO_Init+0x240>
 8003666:	2306      	movs	r3, #6
 8003668:	e00a      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800366a:	2305      	movs	r3, #5
 800366c:	e008      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800366e:	2304      	movs	r3, #4
 8003670:	e006      	b.n	8003680 <HAL_GPIO_Init+0x240>
 8003672:	2303      	movs	r3, #3
 8003674:	e004      	b.n	8003680 <HAL_GPIO_Init+0x240>
 8003676:	2302      	movs	r3, #2
 8003678:	e002      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_GPIO_Init+0x240>
 800367e:	2300      	movs	r3, #0
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	f002 0203 	and.w	r2, r2, #3
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	4093      	lsls	r3, r2
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003690:	4935      	ldr	r1, [pc, #212]	; (8003768 <HAL_GPIO_Init+0x328>)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	3302      	adds	r3, #2
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_GPIO_Init+0x354>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <HAL_GPIO_Init+0x354>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_GPIO_Init+0x354>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_GPIO_Init+0x354>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_GPIO_Init+0x354>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_GPIO_Init+0x354>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_GPIO_Init+0x354>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_GPIO_Init+0x354>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3301      	adds	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b0f      	cmp	r3, #15
 8003750:	f67f ae86 	bls.w	8003460 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	40013800 	.word	0x40013800
 800376c:	40020000 	.word	0x40020000
 8003770:	40020400 	.word	0x40020400
 8003774:	40020800 	.word	0x40020800
 8003778:	40020c00 	.word	0x40020c00
 800377c:	40021000 	.word	0x40021000
 8003780:	40021400 	.word	0x40021400
 8003784:	40021800 	.word	0x40021800
 8003788:	40021c00 	.word	0x40021c00
 800378c:	40022000 	.word	0x40022000
 8003790:	40022400 	.word	0x40022400
 8003794:	40013c00 	.word	0x40013c00

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4013      	ands	r3, r2
 80037e2:	041a      	lsls	r2, r3, #16
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	887b      	ldrh	r3, [r7, #2]
 80037ea:	400b      	ands	r3, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	619a      	str	r2, [r3, #24]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003800:	b08f      	sub	sp, #60	; 0x3c
 8003802:	af0a      	add	r7, sp, #40	; 0x28
 8003804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e116      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff f87a 	bl	8002924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2203      	movs	r2, #3
 8003834:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 f900 	bl	8006a54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	687e      	ldr	r6, [r7, #4]
 800385c:	466d      	mov	r5, sp
 800385e:	f106 0410 	add.w	r4, r6, #16
 8003862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800386e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003872:	1d33      	adds	r3, r6, #4
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	f003 f894 	bl	80069a4 <USB_CoreInit>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0d7      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f003 f8ee 	bl	8006a76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e04a      	b.n	8003936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	333d      	adds	r3, #61	; 0x3d
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333c      	adds	r3, #60	; 0x3c
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	b298      	uxth	r0, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3344      	adds	r3, #68	; 0x44
 80038dc:	4602      	mov	r2, r0
 80038de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3340      	adds	r3, #64	; 0x40
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334c      	adds	r3, #76	; 0x4c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3354      	adds	r3, #84	; 0x54
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3af      	bcc.n	80038a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e044      	b.n	80039d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b5      	bcc.n	8003946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	687e      	ldr	r6, [r7, #4]
 80039e2:	466d      	mov	r5, sp
 80039e4:	f106 0410 	add.w	r4, r6, #16
 80039e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f8:	1d33      	adds	r3, r6, #4
 80039fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	f003 f887 	bl	8006b10 <USB_DevInit>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e014      	b.n	8003a3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f80b 	bl	8003a48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fa45 	bl	8006ec6 <USB_DevDisconnect>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	10000003 	.word	0x10000003

08003a90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40007000 	.word	0x40007000

08003ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ade:	f7fe ffe5 	bl	8002aac <HAL_GetTick>
 8003ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ae4:	e009      	b.n	8003afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ae6:	f7fe ffe1 	bl	8002aac <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af4:	d901      	bls.n	8003afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e022      	b.n	8003b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b14:	f7fe ffca 	bl	8002aac <HAL_GetTick>
 8003b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b1a:	e009      	b.n	8003b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b1c:	f7fe ffc6 	bl	8002aac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2a:	d901      	bls.n	8003b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e007      	b.n	8003b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40007000 	.word	0x40007000

08003b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e29b      	b.n	800409e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8087 	beq.w	8003c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d00c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b80:	4b93      	ldr	r3, [pc, #588]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d112      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x62>
 8003b8c:	4b90      	ldr	r3, [pc, #576]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9a:	4b8d      	ldr	r3, [pc, #564]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d06c      	beq.n	8003c80 <HAL_RCC_OscConfig+0x130>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d168      	bne.n	8003c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e275      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x7a>
 8003bbc:	4b84      	ldr	r3, [pc, #528]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a83      	ldr	r2, [pc, #524]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e02e      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x9c>
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7b      	ldr	r2, [pc, #492]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0xc0>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a72      	ldr	r2, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe ff3c 	bl	8002aac <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe ff38 	bl	8002aac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e229      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xe8>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe ff28 	bl	8002aac <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe ff24 	bl	8002aac <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e215      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x110>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d069      	beq.n	8003d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c8e:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b4d      	ldr	r3, [pc, #308]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x190>
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x17a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1e9      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	493d      	ldr	r1, [pc, #244]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e040      	b.n	8003d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe feda 	bl	8002aac <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fe fed6 	bl	8002aac <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1c7      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
 8003d2e:	e018      	b.n	8003d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe feb6 	bl	8002aac <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe feb2 	bl	8002aac <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1a3      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d038      	beq.n	8003de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe fe93 	bl	8002aac <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fe8f 	bl	8002aac <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e180      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x23a>
 8003da8:	e01a      	b.n	8003de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe fe79 	bl	8002aac <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fe75 	bl	8002aac <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d903      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e166      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
 8003dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b92      	ldr	r3, [pc, #584]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ee      	bne.n	8003dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a4 	beq.w	8003f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b8c      	ldr	r3, [pc, #560]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b89      	ldr	r3, [pc, #548]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a88      	ldr	r2, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b86      	ldr	r3, [pc, #536]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	4b83      	ldr	r3, [pc, #524]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e22:	4b80      	ldr	r3, [pc, #512]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7f      	ldr	r2, [pc, #508]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fe3d 	bl	8002aac <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe fe39 	bl	8002aac <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e12a      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x31a>
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a6f      	ldr	r2, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
 8003e68:	e02d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x33c>
 8003e72:	4b6b      	ldr	r3, [pc, #428]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a6a      	ldr	r2, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a67      	ldr	r2, [pc, #412]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x35e>
 8003e94:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe fded 	bl	8002aac <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe fde9 	bl	8002aac <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x386>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fe fdd7 	bl	8002aac <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fdd3 	bl	8002aac <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0c2      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80ae 	beq.w	800409c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d06d      	beq.n	8004028 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d14b      	bne.n	8003fec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a31      	ldr	r2, [pc, #196]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fda4 	bl	8002aac <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fda0 	bl	8002aac <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e091      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	491b      	ldr	r1, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fd72 	bl	8002aac <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fd6e 	bl	8002aac <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e05f      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x47c>
 8003fea:	e057      	b.n	800409c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fd58 	bl	8002aac <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe fd54 	bl	8002aac <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e045      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x4b0>
 800401e:	e03d      	b.n	800409c <HAL_RCC_OscConfig+0x54c>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x558>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d030      	beq.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d129      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d122      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d119      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d10f      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0d0      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	4965      	ldr	r1, [pc, #404]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d040      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e073      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06b      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4936      	ldr	r1, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fe fc84 	bl	8002aac <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fe fc80 	bl	8002aac <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e053      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d210      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4922      	ldr	r1, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x1cc>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1d0>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe f880 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	0800ba3c 	.word	0x0800ba3c
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b094      	sub	sp, #80	; 0x50
 800428a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	2300      	movs	r3, #0
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	2300      	movs	r3, #0
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	4b79      	ldr	r3, [pc, #484]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x40>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	f200 80e1 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x3a>
 80042b6:	e0db      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b73      	ldr	r3, [pc, #460]	; (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042bc:	e0db      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <HAL_RCC_GetSysClockFreq+0x208>)
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042c2:	e0d8      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042f6:	4622      	mov	r2, r4
 80042f8:	462b      	mov	r3, r5
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	0159      	lsls	r1, r3, #5
 8004304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004308:	0150      	lsls	r0, r2, #5
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4621      	mov	r1, r4
 8004310:	1a51      	subs	r1, r2, r1
 8004312:	6139      	str	r1, [r7, #16]
 8004314:	4629      	mov	r1, r5
 8004316:	eb63 0301 	sbc.w	r3, r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004332:	4651      	mov	r1, sl
 8004334:	018a      	lsls	r2, r1, #6
 8004336:	4651      	mov	r1, sl
 8004338:	ebb2 0801 	subs.w	r8, r2, r1
 800433c:	4659      	mov	r1, fp
 800433e:	eb63 0901 	sbc.w	r9, r3, r1
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004356:	4690      	mov	r8, r2
 8004358:	4699      	mov	r9, r3
 800435a:	4623      	mov	r3, r4
 800435c:	eb18 0303 	adds.w	r3, r8, r3
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	462b      	mov	r3, r5
 8004364:	eb49 0303 	adc.w	r3, r9, r3
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004376:	4629      	mov	r1, r5
 8004378:	024b      	lsls	r3, r1, #9
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004380:	4621      	mov	r1, r4
 8004382:	024a      	lsls	r2, r1, #9
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438a:	2200      	movs	r2, #0
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
 800438e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004394:	f7fb ffac 	bl	80002f0 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	e058      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	4611      	mov	r1, r2
 80043ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0159      	lsls	r1, r3, #5
 80043ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ce:	0150      	lsls	r0, r2, #5
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4641      	mov	r1, r8
 80043d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043da:	4649      	mov	r1, r9
 80043dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043f4:	ebb2 040a 	subs.w	r4, r2, sl
 80043f8:	eb63 050b 	sbc.w	r5, r3, fp
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	464b      	mov	r3, r9
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442a:	4629      	mov	r1, r5
 800442c:	028b      	lsls	r3, r1, #10
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004434:	4621      	mov	r1, r4
 8004436:	028a      	lsls	r2, r1, #10
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004448:	f7fb ff52 	bl	80002f0 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004478:	4618      	mov	r0, r3
 800447a:	3750      	adds	r7, #80	; 0x50
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200

08004490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	0800ba4c 	.word	0x0800ba4c

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800ba4c 	.word	0x0800ba4c

080044f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	220f      	movs	r2, #15
 8004506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_GetClockConfig+0x5c>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	08db      	lsrs	r3, r3, #3
 8004532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_RCC_GetClockConfig+0x60>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	40023c00 	.word	0x40023c00

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004584:	4b69      	ldr	r3, [pc, #420]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a68      	ldr	r2, [pc, #416]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800458e:	6093      	str	r3, [r2, #8]
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004598:	4964      	ldr	r1, [pc, #400]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d017      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b6:	4b5d      	ldr	r3, [pc, #372]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	4959      	ldr	r1, [pc, #356]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d4:	d101      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d017      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f2:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	494a      	ldr	r1, [pc, #296]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	d101      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 808b 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004640:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464a:	6413      	str	r3, [r2, #64]	; 0x40
 800464c:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a34      	ldr	r2, [pc, #208]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004664:	f7fe fa22 	bl	8002aac <HAL_GetTick>
 8004668:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466c:	f7fe fa1e 	bl	8002aac <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e38f      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d035      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d02e      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a1d      	ldr	r2, [pc, #116]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046be:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d114      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fe f9e6 	bl	8002aac <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fe f9e2 	bl	8002aac <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e351      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ee      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004712:	d111      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004722:	400b      	ands	r3, r1
 8004724:	4901      	ldr	r1, [pc, #4]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
 800472a:	e00b      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	0ffffcff 	.word	0x0ffffcff
 8004738:	4bac      	ldr	r3, [pc, #688]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4aab      	ldr	r2, [pc, #684]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004742:	6093      	str	r3, [r2, #8]
 8004744:	4ba9      	ldr	r3, [pc, #676]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	49a6      	ldr	r1, [pc, #664]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	4313      	orrs	r3, r2
 8004754:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004762:	4ba2      	ldr	r3, [pc, #648]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	4aa0      	ldr	r2, [pc, #640]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004772:	4b9e      	ldr	r3, [pc, #632]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004774:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	499b      	ldr	r1, [pc, #620]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004790:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479e:	4993      	ldr	r1, [pc, #588]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b2:	4b8e      	ldr	r3, [pc, #568]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c0:	498a      	ldr	r1, [pc, #552]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d4:	4b85      	ldr	r3, [pc, #532]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	4982      	ldr	r1, [pc, #520]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047f6:	4b7d      	ldr	r3, [pc, #500]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	4979      	ldr	r1, [pc, #484]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004818:	4b74      	ldr	r3, [pc, #464]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4971      	ldr	r1, [pc, #452]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800483a:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f023 020c 	bic.w	r2, r3, #12
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	4968      	ldr	r1, [pc, #416]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800485c:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800487e:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	4957      	ldr	r1, [pc, #348]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a0:	4b52      	ldr	r3, [pc, #328]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	494f      	ldr	r1, [pc, #316]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048c2:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	4946      	ldr	r1, [pc, #280]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	493e      	ldr	r1, [pc, #248]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	4935      	ldr	r1, [pc, #212]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004936:	492d      	ldr	r1, [pc, #180]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	4924      	ldr	r1, [pc, #144]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004968:	d101      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	4914      	ldr	r1, [pc, #80]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049bc:	490b      	ldr	r1, [pc, #44]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00f      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e0:	4902      	ldr	r1, [pc, #8]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049fc:	4b8a      	ldr	r3, [pc, #552]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	4986      	ldr	r1, [pc, #536]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a20:	4b81      	ldr	r3, [pc, #516]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	497d      	ldr	r1, [pc, #500]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d006      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80d6 	beq.w	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a4c:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a75      	ldr	r2, [pc, #468]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fe f828 	bl	8002aac <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a60:	f7fe f824 	bl	8002aac <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e195      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a72:	4b6d      	ldr	r3, [pc, #436]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d021      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a92:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	0e1b      	lsrs	r3, r3, #24
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	019a      	lsls	r2, r3, #6
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	4958      	ldr	r1, [pc, #352]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af8:	d129      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004afa:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b08:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0e:	0f1b      	lsrs	r3, r3, #28
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	493e      	ldr	r1, [pc, #248]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b36:	4b3c      	ldr	r3, [pc, #240]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	f023 021f 	bic.w	r2, r3, #31
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4938      	ldr	r1, [pc, #224]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b5a:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	0e1b      	lsrs	r3, r3, #24
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6e:	0f1b      	lsrs	r3, r3, #28
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	019a      	lsls	r2, r3, #6
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	071b      	lsls	r3, r3, #28
 8004b8e:	4926      	ldr	r1, [pc, #152]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	071b      	lsls	r3, r3, #28
 8004bbe:	491a      	ldr	r1, [pc, #104]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fd ff6b 	bl	8002aac <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bda:	f7fd ff67 	bl	8002aac <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d901      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0d8      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	f040 80ce 	bne.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd ff4e 	bl	8002aac <HAL_GetTick>
 8004c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c12:	e00b      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c14:	f7fd ff4a 	bl	8002aac <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d904      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0bb      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c38:	d0ec      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02e      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d12a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c62:	4b51      	ldr	r3, [pc, #324]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c70:	4b4d      	ldr	r3, [pc, #308]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	0f1b      	lsrs	r3, r3, #28
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	4944      	ldr	r1, [pc, #272]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c9e:	4b42      	ldr	r3, [pc, #264]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	493d      	ldr	r1, [pc, #244]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d022      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ccc:	d11d      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cdc:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	0f1b      	lsrs	r3, r3, #28
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	019a      	lsls	r2, r3, #6
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	4929      	ldr	r1, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d028      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	0e1b      	lsrs	r3, r3, #24
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d24:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	019a      	lsls	r2, r3, #6
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	071b      	lsls	r3, r3, #28
 8004d4a:	4917      	ldr	r1, [pc, #92]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4911      	ldr	r1, [pc, #68]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d74:	f7fd fe9a 	bl	8002aac <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d7c:	f7fd fe96 	bl	8002aac <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e007      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9a:	d1ef      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800

08004dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e049      	b.n	8004e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f841 	bl	8004e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f000 fa00 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e054      	b.n	8004f32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a26      	ldr	r2, [pc, #152]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d022      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d018      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <HAL_TIM_Base_Start_IT+0xe8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d115      	bne.n	8004f1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_TIM_Base_Start_IT+0xec>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d015      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0xbe>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d011      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	e008      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40001800 	.word	0x40001800
 8004f5c:	00010007 	.word	0x00010007

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f905 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8f7 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f908 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8db 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8cd 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8de 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d122      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d11b      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0208 	mvn.w	r2, #8
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8b1 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8a3 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8b4 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b10      	cmp	r3, #16
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f887 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f879 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f88a 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0201 	mvn.w	r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd f900 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d10e      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d107      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f91a 	bl	8005344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d10e      	bne.n	800513e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d107      	bne.n	800513e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f90d 	bl	8005358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d10e      	bne.n	800516a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d107      	bne.n	800516a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f838 	bl	80051da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b20      	cmp	r3, #32
 8005176:	d10e      	bne.n	8005196 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b20      	cmp	r3, #32
 8005184:	d107      	bne.n	8005196 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0220 	mvn.w	r2, #32
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8cd 	bl	8005330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a40      	ldr	r2, [pc, #256]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3c      	ldr	r2, [pc, #240]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2f      	ldr	r2, [pc, #188]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d027      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d023      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d017      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <TIM_Base_SetConfig+0x128>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a27      	ldr	r2, [pc, #156]	; (800531c <TIM_Base_SetConfig+0x12c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <TIM_Base_SetConfig+0x130>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a25      	ldr	r2, [pc, #148]	; (8005324 <TIM_Base_SetConfig+0x134>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a24      	ldr	r2, [pc, #144]	; (8005328 <TIM_Base_SetConfig+0x138>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <TIM_Base_SetConfig+0x13c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d108      	bne.n	80052b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <TIM_Base_SetConfig+0x114>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <TIM_Base_SetConfig+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	615a      	str	r2, [r3, #20]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	40001800 	.word	0x40001800
 8005328:	40001c00 	.word	0x40001c00
 800532c:	40002000 	.word	0x40002000

08005330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e040      	b.n	8005400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fd f9d0 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fc10 	bl	8005bd0 <UART_SetConfig>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e022      	b.n	8005400 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fe68 	bl	8006098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 feef 	bl	80061dc <UART_CheckIdleState>
 80053fe:	4603      	mov	r3, r0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	2b20      	cmp	r3, #32
 800541e:	d171      	bne.n	8005504 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Transmit+0x24>
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e06a      	b.n	8005506 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2221      	movs	r2, #33	; 0x21
 800543c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543e:	f7fd fb35 	bl	8002aac <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d108      	bne.n	8005470 <HAL_UART_Transmit+0x68>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e003      	b.n	8005478 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005478:	e02c      	b.n	80054d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fef6 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e038      	b.n	8005506 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	3302      	adds	r3, #2
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e007      	b.n	80054c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1cc      	bne.n	800547a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fec3 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e005      	b.n	8005506 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b08a      	sub	sp, #40	; 0x28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	2b20      	cmp	r3, #32
 8005524:	d132      	bne.n	800558c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_UART_Receive_IT+0x24>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e02b      	b.n	800558e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d018      	beq.n	800557c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	613b      	str	r3, [r7, #16]
   return(result);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69f9      	ldr	r1, [r7, #28]
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	61bb      	str	r3, [r7, #24]
   return(result);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	461a      	mov	r2, r3
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 ff3e 	bl	8006404 <UART_Start_Receive_IT>
 8005588:	4603      	mov	r3, r0
 800558a:	e000      	b.n	800558e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	3728      	adds	r7, #40	; 0x28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b0ba      	sub	sp, #232	; 0xe8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80055c6:	4013      	ands	r3, r2
 80055c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d115      	bne.n	8005600 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00f      	beq.n	8005600 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 82ac 	beq.w	8005b4e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
      }
      return;
 80055fe:	e2a6      	b.n	8005b4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8117 	beq.w	8005838 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800560a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800561a:	4b85      	ldr	r3, [pc, #532]	; (8005830 <HAL_UART_IRQHandler+0x298>)
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 810a 	beq.w	8005838 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d011      	beq.n	8005654 <HAL_UART_IRQHandler+0xbc>
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564a:	f043 0201 	orr.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <HAL_UART_IRQHandler+0xec>
 8005660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2202      	movs	r2, #2
 8005672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567a:	f043 0204 	orr.w	r2, r3, #4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d011      	beq.n	80056b4 <HAL_UART_IRQHandler+0x11c>
 8005690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2204      	movs	r2, #4
 80056a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2208      	movs	r2, #8
 80056de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e6:	f043 0208 	orr.w	r2, r3, #8
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <HAL_UART_IRQHandler+0x18a>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8212 	beq.w	8005b52 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800573a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d005      	beq.n	800577a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800576e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d04f      	beq.n	800581a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 ff08 	bl	8006590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d141      	bne.n	8005812 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d9      	bne.n	800578e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d013      	beq.n	800580a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <HAL_UART_IRQHandler+0x29c>)
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd fade 	bl	8002db0 <HAL_DMA_Abort_IT>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e00f      	b.n	800582a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9c0 	bl	8005b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e00b      	b.n	800582a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9bc 	bl	8005b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e007      	b.n	800582a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9b8 	bl	8005b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005828:	e193      	b.n	8005b52 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582a:	bf00      	nop
    return;
 800582c:	e191      	b.n	8005b52 <HAL_UART_IRQHandler+0x5ba>
 800582e:	bf00      	nop
 8005830:	04000120 	.word	0x04000120
 8005834:	08006659 	.word	0x08006659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	2b01      	cmp	r3, #1
 800583e:	f040 814c 	bne.w	8005ada <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8145 	beq.w	8005ada <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 813e 	beq.w	8005ada <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2210      	movs	r2, #16
 8005864:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	f040 80b6 	bne.w	80059e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005882:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8165 	beq.w	8005b56 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005896:	429a      	cmp	r2, r3
 8005898:	f080 815d 	bcs.w	8005b56 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b0:	f000 8086 	beq.w	80059c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1da      	bne.n	80058b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800590e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800592a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e1      	bne.n	80058fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800595e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800596c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800598e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005990:	f023 0310 	bic.w	r3, r3, #16
 8005994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e4      	bne.n	8005980 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd f988 	bl	8002cd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8e2 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059e0:	e0b9      	b.n	8005b56 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80ab 	beq.w	8005b5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80a6 	beq.w	8005b5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a30:	647b      	str	r3, [r7, #68]	; 0x44
 8005a32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e4      	bne.n	8005a0e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	623b      	str	r3, [r7, #32]
   return(result);
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a68:	633a      	str	r2, [r7, #48]	; 0x30
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e3      	bne.n	8005a44 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 0310 	bic.w	r3, r3, #16
 8005aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e4      	bne.n	8005a90 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f866 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ad8:	e03f      	b.n	8005b5a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00e      	beq.n	8005b04 <HAL_UART_IRQHandler+0x56c>
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f85d 	bl	8005bbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b02:	e02d      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01c      	beq.n	8005b5e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
    }
    return;
 8005b2c:	e017      	b.n	8005b5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d012      	beq.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fd9c 	bl	8006684 <UART_EndTransmit_IT>
    return;
 8005b4c:	e008      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b4e:	bf00      	nop
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b5e:	bf00      	nop
  }

}
 8005b60:	37e8      	adds	r7, #232	; 0xe8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop

08005b68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4ba6      	ldr	r3, [pc, #664]	; (8005e94 <UART_SetConfig+0x2c4>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	6979      	ldr	r1, [r7, #20]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a94      	ldr	r2, [pc, #592]	; (8005e98 <UART_SetConfig+0x2c8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d120      	bne.n	8005c8e <UART_SetConfig+0xbe>
 8005c4c:	4b93      	ldr	r3, [pc, #588]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d816      	bhi.n	8005c88 <UART_SetConfig+0xb8>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x90>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c77 	.word	0x08005c77
 8005c6c:	08005c83 	.word	0x08005c83
 8005c70:	2301      	movs	r3, #1
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e150      	b.n	8005f18 <UART_SetConfig+0x348>
 8005c76:	2302      	movs	r3, #2
 8005c78:	77fb      	strb	r3, [r7, #31]
 8005c7a:	e14d      	b.n	8005f18 <UART_SetConfig+0x348>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e14a      	b.n	8005f18 <UART_SetConfig+0x348>
 8005c82:	2308      	movs	r3, #8
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e147      	b.n	8005f18 <UART_SetConfig+0x348>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	77fb      	strb	r3, [r7, #31]
 8005c8c:	e144      	b.n	8005f18 <UART_SetConfig+0x348>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a83      	ldr	r2, [pc, #524]	; (8005ea0 <UART_SetConfig+0x2d0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d132      	bne.n	8005cfe <UART_SetConfig+0x12e>
 8005c98:	4b80      	ldr	r3, [pc, #512]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d828      	bhi.n	8005cf8 <UART_SetConfig+0x128>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0xdc>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005cf9 	.word	0x08005cf9
 8005cb4:	08005cf9 	.word	0x08005cf9
 8005cb8:	08005cf9 	.word	0x08005cf9
 8005cbc:	08005ced 	.word	0x08005ced
 8005cc0:	08005cf9 	.word	0x08005cf9
 8005cc4:	08005cf9 	.word	0x08005cf9
 8005cc8:	08005cf9 	.word	0x08005cf9
 8005ccc:	08005ce7 	.word	0x08005ce7
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005cf9 	.word	0x08005cf9
 8005cd8:	08005cf9 	.word	0x08005cf9
 8005cdc:	08005cf3 	.word	0x08005cf3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e118      	b.n	8005f18 <UART_SetConfig+0x348>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e115      	b.n	8005f18 <UART_SetConfig+0x348>
 8005cec:	2304      	movs	r3, #4
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e112      	b.n	8005f18 <UART_SetConfig+0x348>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e10f      	b.n	8005f18 <UART_SetConfig+0x348>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e10c      	b.n	8005f18 <UART_SetConfig+0x348>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <UART_SetConfig+0x2d4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d120      	bne.n	8005d4a <UART_SetConfig+0x17a>
 8005d08:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d013      	beq.n	8005d3e <UART_SetConfig+0x16e>
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d814      	bhi.n	8005d44 <UART_SetConfig+0x174>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d009      	beq.n	8005d32 <UART_SetConfig+0x162>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d810      	bhi.n	8005d44 <UART_SetConfig+0x174>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <UART_SetConfig+0x15c>
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d006      	beq.n	8005d38 <UART_SetConfig+0x168>
 8005d2a:	e00b      	b.n	8005d44 <UART_SetConfig+0x174>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e0f2      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d32:	2302      	movs	r3, #2
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e0ef      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e0ec      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e0e9      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d44:	2310      	movs	r3, #16
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e0e6      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <UART_SetConfig+0x2d8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d120      	bne.n	8005d96 <UART_SetConfig+0x1c6>
 8005d54:	4b51      	ldr	r3, [pc, #324]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d60:	d013      	beq.n	8005d8a <UART_SetConfig+0x1ba>
 8005d62:	2bc0      	cmp	r3, #192	; 0xc0
 8005d64:	d814      	bhi.n	8005d90 <UART_SetConfig+0x1c0>
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d009      	beq.n	8005d7e <UART_SetConfig+0x1ae>
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d810      	bhi.n	8005d90 <UART_SetConfig+0x1c0>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <UART_SetConfig+0x1a8>
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d006      	beq.n	8005d84 <UART_SetConfig+0x1b4>
 8005d76:	e00b      	b.n	8005d90 <UART_SetConfig+0x1c0>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e0cc      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e0c9      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d84:	2304      	movs	r3, #4
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e0c6      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e0c3      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d90:	2310      	movs	r3, #16
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e0c0      	b.n	8005f18 <UART_SetConfig+0x348>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a44      	ldr	r2, [pc, #272]	; (8005eac <UART_SetConfig+0x2dc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d125      	bne.n	8005dec <UART_SetConfig+0x21c>
 8005da0:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dae:	d017      	beq.n	8005de0 <UART_SetConfig+0x210>
 8005db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db4:	d817      	bhi.n	8005de6 <UART_SetConfig+0x216>
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d00b      	beq.n	8005dd4 <UART_SetConfig+0x204>
 8005dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc0:	d811      	bhi.n	8005de6 <UART_SetConfig+0x216>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <UART_SetConfig+0x1fe>
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dca:	d006      	beq.n	8005dda <UART_SetConfig+0x20a>
 8005dcc:	e00b      	b.n	8005de6 <UART_SetConfig+0x216>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e0a1      	b.n	8005f18 <UART_SetConfig+0x348>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e09e      	b.n	8005f18 <UART_SetConfig+0x348>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e09b      	b.n	8005f18 <UART_SetConfig+0x348>
 8005de0:	2308      	movs	r3, #8
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e098      	b.n	8005f18 <UART_SetConfig+0x348>
 8005de6:	2310      	movs	r3, #16
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	e095      	b.n	8005f18 <UART_SetConfig+0x348>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2f      	ldr	r2, [pc, #188]	; (8005eb0 <UART_SetConfig+0x2e0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d125      	bne.n	8005e42 <UART_SetConfig+0x272>
 8005df6:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e04:	d017      	beq.n	8005e36 <UART_SetConfig+0x266>
 8005e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0a:	d817      	bhi.n	8005e3c <UART_SetConfig+0x26c>
 8005e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e10:	d00b      	beq.n	8005e2a <UART_SetConfig+0x25a>
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d811      	bhi.n	8005e3c <UART_SetConfig+0x26c>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <UART_SetConfig+0x254>
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e20:	d006      	beq.n	8005e30 <UART_SetConfig+0x260>
 8005e22:	e00b      	b.n	8005e3c <UART_SetConfig+0x26c>
 8005e24:	2301      	movs	r3, #1
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e076      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e073      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e30:	2304      	movs	r3, #4
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e070      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e36:	2308      	movs	r3, #8
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e06d      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e06a      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <UART_SetConfig+0x2e4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d138      	bne.n	8005ebe <UART_SetConfig+0x2ee>
 8005e4c:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <UART_SetConfig+0x2cc>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e5a:	d017      	beq.n	8005e8c <UART_SetConfig+0x2bc>
 8005e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e60:	d82a      	bhi.n	8005eb8 <UART_SetConfig+0x2e8>
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d00b      	beq.n	8005e80 <UART_SetConfig+0x2b0>
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6c:	d824      	bhi.n	8005eb8 <UART_SetConfig+0x2e8>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <UART_SetConfig+0x2aa>
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d006      	beq.n	8005e86 <UART_SetConfig+0x2b6>
 8005e78:	e01e      	b.n	8005eb8 <UART_SetConfig+0x2e8>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e04b      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e80:	2302      	movs	r3, #2
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e048      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e86:	2304      	movs	r3, #4
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e045      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e042      	b.n	8005f18 <UART_SetConfig+0x348>
 8005e92:	bf00      	nop
 8005e94:	efff69f3 	.word	0xefff69f3
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40004400 	.word	0x40004400
 8005ea4:	40004800 	.word	0x40004800
 8005ea8:	40004c00 	.word	0x40004c00
 8005eac:	40005000 	.word	0x40005000
 8005eb0:	40011400 	.word	0x40011400
 8005eb4:	40007800 	.word	0x40007800
 8005eb8:	2310      	movs	r3, #16
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e02c      	b.n	8005f18 <UART_SetConfig+0x348>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a72      	ldr	r2, [pc, #456]	; (800608c <UART_SetConfig+0x4bc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d125      	bne.n	8005f14 <UART_SetConfig+0x344>
 8005ec8:	4b71      	ldr	r3, [pc, #452]	; (8006090 <UART_SetConfig+0x4c0>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ed2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ed6:	d017      	beq.n	8005f08 <UART_SetConfig+0x338>
 8005ed8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005edc:	d817      	bhi.n	8005f0e <UART_SetConfig+0x33e>
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d00b      	beq.n	8005efc <UART_SetConfig+0x32c>
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	d811      	bhi.n	8005f0e <UART_SetConfig+0x33e>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <UART_SetConfig+0x326>
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	d006      	beq.n	8005f02 <UART_SetConfig+0x332>
 8005ef4:	e00b      	b.n	8005f0e <UART_SetConfig+0x33e>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e00d      	b.n	8005f18 <UART_SetConfig+0x348>
 8005efc:	2302      	movs	r3, #2
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e00a      	b.n	8005f18 <UART_SetConfig+0x348>
 8005f02:	2304      	movs	r3, #4
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e007      	b.n	8005f18 <UART_SetConfig+0x348>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e004      	b.n	8005f18 <UART_SetConfig+0x348>
 8005f0e:	2310      	movs	r3, #16
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e001      	b.n	8005f18 <UART_SetConfig+0x348>
 8005f14:	2310      	movs	r3, #16
 8005f16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f20:	d15b      	bne.n	8005fda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f22:	7ffb      	ldrb	r3, [r7, #31]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d828      	bhi.n	8005f7a <UART_SetConfig+0x3aa>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <UART_SetConfig+0x360>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f5d 	.word	0x08005f5d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f7b 	.word	0x08005f7b
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f7b 	.word	0x08005f7b
 8005f48:	08005f7b 	.word	0x08005f7b
 8005f4c:	08005f7b 	.word	0x08005f7b
 8005f50:	08005f73 	.word	0x08005f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fe faa8 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8005f58:	61b8      	str	r0, [r7, #24]
        break;
 8005f5a:	e013      	b.n	8005f84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7fe fab8 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8005f60:	61b8      	str	r0, [r7, #24]
        break;
 8005f62:	e00f      	b.n	8005f84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f64:	4b4b      	ldr	r3, [pc, #300]	; (8006094 <UART_SetConfig+0x4c4>)
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e00c      	b.n	8005f84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6a:	f7fe f98b 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8005f6e:	61b8      	str	r0, [r7, #24]
        break;
 8005f70:	e008      	b.n	8005f84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f76:	61bb      	str	r3, [r7, #24]
        break;
 8005f78:	e004      	b.n	8005f84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	77bb      	strb	r3, [r7, #30]
        break;
 8005f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d074      	beq.n	8006074 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	005a      	lsls	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d916      	bls.n	8005fd4 <UART_SetConfig+0x404>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fac:	d212      	bcs.n	8005fd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	89fa      	ldrh	r2, [r7, #14]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e04f      	b.n	8006074 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77bb      	strb	r3, [r7, #30]
 8005fd8:	e04c      	b.n	8006074 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d828      	bhi.n	8006032 <UART_SetConfig+0x462>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x418>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	08006023 	.word	0x08006023
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006033 	.word	0x08006033
 8006004:	08006033 	.word	0x08006033
 8006008:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe fa4c 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8006010:	61b8      	str	r0, [r7, #24]
        break;
 8006012:	e013      	b.n	800603c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fa5c 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8006018:	61b8      	str	r0, [r7, #24]
        break;
 800601a:	e00f      	b.n	800603c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <UART_SetConfig+0x4c4>)
 800601e:	61bb      	str	r3, [r7, #24]
        break;
 8006020:	e00c      	b.n	800603c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe f92f 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8006026:	61b8      	str	r0, [r7, #24]
        break;
 8006028:	e008      	b.n	800603c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	61bb      	str	r3, [r7, #24]
        break;
 8006030:	e004      	b.n	800603c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	77bb      	strb	r3, [r7, #30]
        break;
 800603a:	bf00      	nop
    }

    if (pclk != 0U)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d018      	beq.n	8006074 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	085a      	lsrs	r2, r3, #1
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	441a      	add	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d909      	bls.n	8006070 <UART_SetConfig+0x4a0>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006062:	d205      	bcs.n	8006070 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e001      	b.n	8006074 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006080:	7fbb      	ldrb	r3, [r7, #30]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40007c00 	.word	0x40007c00
 8006090:	40023800 	.word	0x40023800
 8006094:	00f42400 	.word	0x00f42400

08006098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01a      	beq.n	80061ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006196:	d10a      	bne.n	80061ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061ec:	f7fc fc5e 	bl	8002aac <HAL_GetTick>
 80061f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10e      	bne.n	800621e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f831 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e027      	b.n	800626e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d10e      	bne.n	800624a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f81b 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e011      	b.n	800626e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b09c      	sub	sp, #112	; 0x70
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	e0a7      	b.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	f000 80a3 	beq.w	80063d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fc fc0b 	bl	8002aac <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d13f      	bne.n	8006328 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80062fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e068      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d050      	beq.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006344:	d148      	bne.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
 8006370:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e6      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	613b      	str	r3, [r7, #16]
   return(result);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	66bb      	str	r3, [r7, #104]	; 0x68
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a2:	623a      	str	r2, [r7, #32]
 80063a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	69f9      	ldr	r1, [r7, #28]
 80063a8:	6a3a      	ldr	r2, [r7, #32]
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e5      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e010      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69da      	ldr	r2, [r3, #28]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f43f af48 	beq.w	8006288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3770      	adds	r7, #112	; 0x70
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006404:	b480      	push	{r7}
 8006406:	b097      	sub	sp, #92	; 0x5c
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d10e      	bne.n	8006456 <UART_Start_Receive_IT+0x52>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d105      	bne.n	800644c <UART_Start_Receive_IT+0x48>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800644a:	e02d      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006454:	e028      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10d      	bne.n	800647a <UART_Start_Receive_IT+0x76>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <UART_Start_Receive_IT+0x6c>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800646e:	e01b      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	227f      	movs	r2, #127	; 0x7f
 8006474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006478:	e016      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006482:	d10d      	bne.n	80064a0 <UART_Start_Receive_IT+0x9c>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <UART_Start_Receive_IT+0x92>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	227f      	movs	r2, #127	; 0x7f
 8006490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006494:	e008      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	223f      	movs	r2, #63	; 0x3f
 800649a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800649e:	e003      	b.n	80064a8 <UART_Start_Receive_IT+0xa4>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2222      	movs	r2, #34	; 0x22
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80064da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f4:	d107      	bne.n	8006506 <UART_Start_Receive_IT+0x102>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a21      	ldr	r2, [pc, #132]	; (8006588 <UART_Start_Receive_IT+0x184>)
 8006502:	669a      	str	r2, [r3, #104]	; 0x68
 8006504:	e002      	b.n	800650c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a20      	ldr	r2, [pc, #128]	; (800658c <UART_Start_Receive_IT+0x188>)
 800650a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d019      	beq.n	8006548 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
 8006534:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_Start_Receive_IT+0x110>
 8006546:	e018      	b.n	800657a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	613b      	str	r3, [r7, #16]
   return(result);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f043 0320 	orr.w	r3, r3, #32
 800655c:	653b      	str	r3, [r7, #80]	; 0x50
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	69f9      	ldr	r1, [r7, #28]
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	61bb      	str	r3, [r7, #24]
   return(result);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e6      	bne.n	8006548 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	375c      	adds	r7, #92	; 0x5c
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	0800683f 	.word	0x0800683f
 800658c:	080066d9 	.word	0x080066d9

08006590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b095      	sub	sp, #84	; 0x54
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b6:	643b      	str	r3, [r7, #64]	; 0x40
 80065b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e6      	bne.n	8006598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	2b01      	cmp	r3, #1
 8006604:	d118      	bne.n	8006638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	60bb      	str	r3, [r7, #8]
   return(result);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	647b      	str	r3, [r7, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800664c:	bf00      	nop
 800664e:	3754      	adds	r7, #84	; 0x54
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fa8a 	bl	8005b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60bb      	str	r3, [r7, #8]
   return(result);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fa4c 	bl	8005b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d0:	bf00      	nop
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b096      	sub	sp, #88	; 0x58
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f0:	2b22      	cmp	r3, #34	; 0x22
 80066f2:	f040 8098 	bne.w	8006826 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006700:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006704:	b2d9      	uxtb	r1, r3
 8006706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800670a:	b2da      	uxtb	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	400a      	ands	r2, r1
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d17b      	bne.n	8006836 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800674c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006752:	653b      	str	r3, [r7, #80]	; 0x50
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675c:	647b      	str	r3, [r7, #68]	; 0x44
 800675e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800676a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3308      	adds	r3, #8
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	623b      	str	r3, [r7, #32]
   return(result);
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3308      	adds	r3, #8
 800678e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006790:	633a      	str	r2, [r7, #48]	; 0x30
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e5      	bne.n	8006770 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d12e      	bne.n	800681e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0310 	bic.w	r3, r3, #16
 80067da:	64bb      	str	r3, [r7, #72]	; 0x48
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	69b9      	ldr	r1, [r7, #24]
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	617b      	str	r3, [r7, #20]
   return(result);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e6      	bne.n	80067c6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b10      	cmp	r3, #16
 8006804:	d103      	bne.n	800680e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2210      	movs	r2, #16
 800680c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff f9c4 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800681c:	e00b      	b.n	8006836 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff f9ac 	bl	8005b7c <HAL_UART_RxCpltCallback>
}
 8006824:	e007      	b.n	8006836 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0208 	orr.w	r2, r2, #8
 8006834:	619a      	str	r2, [r3, #24]
}
 8006836:	bf00      	nop
 8006838:	3758      	adds	r7, #88	; 0x58
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b096      	sub	sp, #88	; 0x58
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800684c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006856:	2b22      	cmp	r3, #34	; 0x22
 8006858:	f040 8098 	bne.w	800698c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800686c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006870:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006874:	4013      	ands	r3, r2
 8006876:	b29a      	uxth	r2, r3
 8006878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	1c9a      	adds	r2, r3, #2
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d17b      	bne.n	800699c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
 80068c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e6      	bne.n	80068a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e5      	bne.n	80068d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006922:	2b01      	cmp	r3, #1
 8006924:	d12e      	bne.n	8006984 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	60bb      	str	r3, [r7, #8]
   return(result);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f023 0310 	bic.w	r3, r3, #16
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6979      	ldr	r1, [r7, #20]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	613b      	str	r3, [r7, #16]
   return(result);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b10      	cmp	r3, #16
 800696a:	d103      	bne.n	8006974 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2210      	movs	r2, #16
 8006972:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff f911 	bl	8005ba4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006982:	e00b      	b.n	800699c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff f8f9 	bl	8005b7c <HAL_UART_RxCpltCallback>
}
 800698a:	e007      	b.n	800699c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0208 	orr.w	r2, r2, #8
 800699a:	619a      	str	r2, [r3, #24]
}
 800699c:	bf00      	nop
 800699e:	3758      	adds	r7, #88	; 0x58
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a4:	b084      	sub	sp, #16
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	f107 001c 	add.w	r0, r7, #28
 80069b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d120      	bne.n	80069fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	4b20      	ldr	r3, [pc, #128]	; (8006a50 <USB_CoreInit+0xac>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d105      	bne.n	80069f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa96 	bl	8006f24 <USB_CoreReset>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
 80069fc:	e010      	b.n	8006a20 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa8a 	bl	8006f24 <USB_CoreReset>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d10b      	bne.n	8006a3e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f043 0206 	orr.w	r2, r3, #6
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a4a:	b004      	add	sp, #16
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	ffbdffbf 	.word	0xffbdffbf

08006a54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 0201 	bic.w	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d115      	bne.n	8006ac4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f7fc f80d 	bl	8002ac4 <HAL_Delay>
      ms++;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa29 	bl	8006f08 <USB_GetMode>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d01e      	beq.n	8006afa <USB_SetCurrentMode+0x84>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b31      	cmp	r3, #49	; 0x31
 8006ac0:	d9f0      	bls.n	8006aa4 <USB_SetCurrentMode+0x2e>
 8006ac2:	e01a      	b.n	8006afa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d115      	bne.n	8006af6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	f7fb fff4 	bl	8002ac4 <HAL_Delay>
      ms++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa10 	bl	8006f08 <USB_GetMode>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <USB_SetCurrentMode+0x84>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b31      	cmp	r3, #49	; 0x31
 8006af2:	d9f0      	bls.n	8006ad6 <USB_SetCurrentMode+0x60>
 8006af4:	e001      	b.n	8006afa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e005      	b.n	8006b06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b32      	cmp	r3, #50	; 0x32
 8006afe:	d101      	bne.n	8006b04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b10:	b084      	sub	sp, #16
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	e009      	b.n	8006b44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	3340      	adds	r3, #64	; 0x40
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b0e      	cmp	r3, #14
 8006b48:	d9f2      	bls.n	8006b30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11c      	bne.n	8006b8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5e:	f043 0302 	orr.w	r3, r3, #2
 8006b62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e005      	b.n	8006b96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	680b      	ldr	r3, [r1, #0]
 8006bb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10c      	bne.n	8006bd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f965 	bl	8006e94 <USB_SetDevSpeed>
 8006bca:	e008      	b.n	8006bde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f960 	bl	8006e94 <USB_SetDevSpeed>
 8006bd4:	e003      	b.n	8006bde <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f95b 	bl	8006e94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bde:	2110      	movs	r1, #16
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8f3 	bl	8006dcc <USB_FlushTxFifo>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f91f 	bl	8006e34 <USB_FlushRxFifo>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	461a      	mov	r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e043      	b.n	8006cb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c40:	d118      	bne.n	8006c74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	e013      	b.n	8006c86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e008      	b.n	8006c86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	461a      	mov	r2, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	461a      	mov	r2, r3
 8006c94:	2300      	movs	r3, #0
 8006c96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006caa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d3b7      	bcc.n	8006c2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e043      	b.n	8006d48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd6:	d118      	bne.n	8006d0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	e013      	b.n	8006d1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	461a      	mov	r2, r3
 8006d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e008      	b.n	8006d1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	461a      	mov	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3b7      	bcc.n	8006cc0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f043 0210 	orr.w	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <USB_DevInit+0x2b4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f043 0208 	orr.w	r2, r3, #8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d105      	bne.n	8006db4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <USB_DevInit+0x2b8>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc0:	b004      	add	sp, #16
 8006dc2:	4770      	bx	lr
 8006dc4:	803c3800 	.word	0x803c3800
 8006dc8:	40000004 	.word	0x40000004

08006dcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <USB_FlushTxFifo+0x64>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e01b      	b.n	8006e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	daf2      	bge.n	8006dda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	019b      	lsls	r3, r3, #6
 8006dfc:	f043 0220 	orr.w	r2, r3, #32
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <USB_FlushTxFifo+0x64>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d901      	bls.n	8006e16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e006      	b.n	8006e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d0f0      	beq.n	8006e04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	00030d40 	.word	0x00030d40

08006e34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <USB_FlushRxFifo+0x5c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e018      	b.n	8006e84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	daf2      	bge.n	8006e40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2210      	movs	r2, #16
 8006e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <USB_FlushRxFifo+0x5c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e006      	b.n	8006e84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0310 	and.w	r3, r3, #16
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d0f0      	beq.n	8006e64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	00030d40 	.word	0x00030d40

08006e94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f003 0301 	and.w	r3, r3, #1
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <USB_CoreReset+0x64>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e01b      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	daf2      	bge.n	8006f30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <USB_CoreReset+0x64>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e006      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d0f0      	beq.n	8006f5a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	00030d40 	.word	0x00030d40

08006f8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f9e:	2b84      	cmp	r3, #132	; 0x84
 8006fa0:	d005      	beq.n	8006fae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3303      	adds	r3, #3
 8006fac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fae:	68fb      	ldr	r3, [r7, #12]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fc2:	f3ef 8305 	mrs	r3, IPSR
 8006fc6:	607b      	str	r3, [r7, #4]
  return(result);
 8006fc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fe4:	f001 f962 	bl	80082ac <vTaskStartScheduler>
  
  return osOK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	bd80      	pop	{r7, pc}

08006fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff0:	b089      	sub	sp, #36	; 0x24
 8006ff2:	af04      	add	r7, sp, #16
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d020      	beq.n	8007042 <osThreadCreate+0x54>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01c      	beq.n	8007042 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685c      	ldr	r4, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691e      	ldr	r6, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff ffb6 	bl	8006f8c <makeFreeRtosPriority>
 8007020:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800702a:	9202      	str	r2, [sp, #8]
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	9100      	str	r1, [sp, #0]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4632      	mov	r2, r6
 8007034:	4629      	mov	r1, r5
 8007036:	4620      	mov	r0, r4
 8007038:	f000 ff50 	bl	8007edc <xTaskCreateStatic>
 800703c:	4603      	mov	r3, r0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e01c      	b.n	800707c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685c      	ldr	r4, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800704e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff ff98 	bl	8006f8c <makeFreeRtosPriority>
 800705c:	4602      	mov	r2, r0
 800705e:	f107 030c 	add.w	r3, r7, #12
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	9200      	str	r2, [sp, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	4632      	mov	r2, r6
 800706a:	4629      	mov	r1, r5
 800706c:	4620      	mov	r0, r4
 800706e:	f000 ff98 	bl	8007fa2 <xTaskCreate>
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	d001      	beq.n	800707c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007078:	2300      	movs	r3, #0
 800707a:	e000      	b.n	800707e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800707c:	68fb      	ldr	r3, [r7, #12]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007086 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <osDelay+0x16>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	e000      	b.n	800709e <osDelay+0x18>
 800709c:	2301      	movs	r3, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 f8ce 	bl	8008240 <vTaskDelay>
  
  return osOK;
 80070a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af02      	add	r7, sp, #8
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00f      	beq.n	80070e0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10a      	bne.n	80070dc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2203      	movs	r2, #3
 80070cc:	9200      	str	r2, [sp, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	2001      	movs	r0, #1
 80070d4:	f000 f9c0 	bl	8007458 <xQueueGenericCreateStatic>
 80070d8:	4603      	mov	r3, r0
 80070da:	e016      	b.n	800710a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	e014      	b.n	800710a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d110      	bne.n	8007108 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80070e6:	2203      	movs	r2, #3
 80070e8:	2100      	movs	r1, #0
 80070ea:	2001      	movs	r0, #1
 80070ec:	f000 fa36 	bl	800755c <xQueueGenericCreate>
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <osSemaphoreCreate+0x56>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2200      	movs	r2, #0
 80070fc:	2100      	movs	r1, #0
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fa8e 	bl	8007620 <xQueueGenericSend>
      return sema;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	e000      	b.n	800710a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007108:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	e03a      	b.n	80071a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d103      	bne.n	8007140 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e009      	b.n	8007154 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d006      	beq.n	8007154 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <osSemaphoreWait+0x40>
      ticks = 1;
 8007150:	2301      	movs	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007154:	f7ff ff32 	bl	8006fbc <inHandlerMode>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d017      	beq.n	800718e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800715e:	f107 0308 	add.w	r3, r7, #8
 8007162:	461a      	mov	r2, r3
 8007164:	2100      	movs	r1, #0
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fd0a 	bl	8007b80 <xQueueReceiveFromISR>
 800716c:	4603      	mov	r3, r0
 800716e:	2b01      	cmp	r3, #1
 8007170:	d001      	beq.n	8007176 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007172:	23ff      	movs	r3, #255	; 0xff
 8007174:	e015      	b.n	80071a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d011      	beq.n	80071a0 <osSemaphoreWait+0x8c>
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <osSemaphoreWait+0x98>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	e008      	b.n	80071a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fbe1 	bl	8007958 <xQueueSemaphoreTake>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d001      	beq.n	80071a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800719c:	23ff      	movs	r3, #255	; 0xff
 800719e:	e000      	b.n	80071a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80071c0:	f7ff fefc 	bl	8006fbc <inHandlerMode>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb2b 	bl	800782c <xQueueGiveFromISR>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d001      	beq.n	80071e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80071dc:	23ff      	movs	r3, #255	; 0xff
 80071de:	e017      	b.n	8007210 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <osSemaphoreRelease+0x5e>
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <osSemaphoreRelease+0x68>)
 80071e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	e00a      	b.n	800720e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80071f8:	2300      	movs	r3, #0
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa0e 	bl	8007620 <xQueueGenericSend>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d001      	beq.n	800720e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800720a:	23ff      	movs	r3, #255	; 0xff
 800720c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f103 0208 	add.w	r2, r3, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 0208 	add.w	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0208 	add.w	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d103      	bne.n	80072de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e00c      	b.n	80072f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3308      	adds	r3, #8
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e002      	b.n	80072ec <vListInsert+0x2e>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d2f6      	bcs.n	80072e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6892      	ldr	r2, [r2, #8]
 8007346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6852      	ldr	r2, [r2, #4]
 8007350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d103      	bne.n	8007364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1e5a      	subs	r2, r3, #1
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10c      	bne.n	80073b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	b672      	cpsid	i
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	b662      	cpsie	i
 80073ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80073b2:	f001 feeb 	bl	800918c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	441a      	add	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	3b01      	subs	r3, #1
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	441a      	add	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d114      	bne.n	8007432 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01a      	beq.n	8007446 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3310      	adds	r3, #16
 8007414:	4618      	mov	r0, r3
 8007416:	f001 f9a7 	bl	8008768 <xTaskRemoveFromEventList>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d012      	beq.n	8007446 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <xQueueGenericReset+0xd0>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	e009      	b.n	8007446 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3310      	adds	r3, #16
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fef0 	bl	800721c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3324      	adds	r3, #36	; 0x24
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff feeb 	bl	800721c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007446:	f001 fed5 	bl	80091f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800744a:	2301      	movs	r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08e      	sub	sp, #56	; 0x38
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	b672      	cpsid	i
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	b662      	cpsie	i
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10c      	bne.n	80074a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	b672      	cpsid	i
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	b662      	cpsie	i
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <xQueueGenericCreateStatic+0x5a>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <xQueueGenericCreateStatic+0x5e>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericCreateStatic+0x60>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	b672      	cpsid	i
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	b662      	cpsie	i
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <xQueueGenericCreateStatic+0x8a>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <xQueueGenericCreateStatic+0x8e>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <xQueueGenericCreateStatic+0x90>
 80074e6:	2300      	movs	r3, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	b672      	cpsid	i
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	b662      	cpsie	i
 8007500:	61fb      	str	r3, [r7, #28]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007506:	2348      	movs	r3, #72	; 0x48
 8007508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b48      	cmp	r3, #72	; 0x48
 800750e:	d00c      	beq.n	800752a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	61bb      	str	r3, [r7, #24]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800752a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00d      	beq.n	8007552 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800753e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f847 	bl	80075e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007554:	4618      	mov	r0, r3
 8007556:	3730      	adds	r7, #48	; 0x30
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10c      	bne.n	800758a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	b672      	cpsid	i
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	b662      	cpsie	i
 8007584:	613b      	str	r3, [r7, #16]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e004      	b.n	80075a0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	3348      	adds	r3, #72	; 0x48
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 ff1d 	bl	80093e4 <pvPortMalloc>
 80075aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d011      	beq.n	80075d6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3348      	adds	r3, #72	; 0x48
 80075ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075c4:	79fa      	ldrb	r2, [r7, #7]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f805 	bl	80075e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075d6:	69bb      	ldr	r3, [r7, #24]
	}
 80075d8:	4618      	mov	r0, r3
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d103      	bne.n	80075fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	e002      	b.n	8007602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800760e:	2101      	movs	r1, #1
 8007610:	69b8      	ldr	r0, [r7, #24]
 8007612:	f7ff feb7 	bl	8007384 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08e      	sub	sp, #56	; 0x38
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10c      	bne.n	8007656 <xQueueGenericSend+0x36>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	b672      	cpsid	i
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	b662      	cpsie	i
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <xQueueGenericSend+0x44>
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <xQueueGenericSend+0x48>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <xQueueGenericSend+0x4a>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10c      	bne.n	8007688 <xQueueGenericSend+0x68>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	b672      	cpsid	i
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	b662      	cpsie	i
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d103      	bne.n	8007696 <xQueueGenericSend+0x76>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <xQueueGenericSend+0x7a>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericSend+0x7c>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10c      	bne.n	80076ba <xQueueGenericSend+0x9a>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	623b      	str	r3, [r7, #32]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ba:	f001 fa1d 	bl	8008af8 <xTaskGetSchedulerState>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <xQueueGenericSend+0xaa>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <xQueueGenericSend+0xae>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <xQueueGenericSend+0xb0>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10c      	bne.n	80076ee <xQueueGenericSend+0xce>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	b672      	cpsid	i
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	b662      	cpsie	i
 80076e8:	61fb      	str	r3, [r7, #28]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076ee:	f001 fd4d 	bl	800918c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <xQueueGenericSend+0xe4>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d129      	bne.n	8007758 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800770a:	f000 fad7 	bl	8007cbc <prvCopyDataToQueue>
 800770e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	3324      	adds	r3, #36	; 0x24
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f823 	bl	8008768 <xTaskRemoveFromEventList>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d013      	beq.n	8007750 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007728:	4b3f      	ldr	r3, [pc, #252]	; (8007828 <xQueueGenericSend+0x208>)
 800772a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	e00a      	b.n	8007750 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007740:	4b39      	ldr	r3, [pc, #228]	; (8007828 <xQueueGenericSend+0x208>)
 8007742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007750:	f001 fd50 	bl	80091f4 <vPortExitCritical>
				return pdPASS;
 8007754:	2301      	movs	r3, #1
 8007756:	e063      	b.n	8007820 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800775e:	f001 fd49 	bl	80091f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007762:	2300      	movs	r3, #0
 8007764:	e05c      	b.n	8007820 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800776c:	f107 0314 	add.w	r3, r7, #20
 8007770:	4618      	mov	r0, r3
 8007772:	f001 f85d 	bl	8008830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007776:	2301      	movs	r3, #1
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800777a:	f001 fd3b 	bl	80091f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800777e:	f000 fe03 	bl	8008388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007782:	f001 fd03 	bl	800918c <vPortEnterCritical>
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778c:	b25b      	sxtb	r3, r3
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <xQueueGenericSend+0x17c>
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSend+0x192>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b2:	f001 fd1f 	bl	80091f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077b6:	1d3a      	adds	r2, r7, #4
 80077b8:	f107 0314 	add.w	r3, r7, #20
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 f84c 	bl	800885c <xTaskCheckForTimeOut>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d124      	bne.n	8007814 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077cc:	f000 fb6e 	bl	8007eac <prvIsQueueFull>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d018      	beq.n	8007808 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	3310      	adds	r3, #16
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 ff9c 	bl	800871c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077e6:	f000 faf9 	bl	8007ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077ea:	f000 fddb 	bl	80083a4 <xTaskResumeAll>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f47f af7c 	bne.w	80076ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <xQueueGenericSend+0x208>)
 80077f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	e772      	b.n	80076ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800780a:	f000 fae7 	bl	8007ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800780e:	f000 fdc9 	bl	80083a4 <xTaskResumeAll>
 8007812:	e76c      	b.n	80076ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007816:	f000 fae1 	bl	8007ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800781a:	f000 fdc3 	bl	80083a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800781e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007820:	4618      	mov	r0, r3
 8007822:	3738      	adds	r7, #56	; 0x38
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08e      	sub	sp, #56	; 0x38
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00c      	beq.n	800787c <xQueueGiveFromISR+0x50>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	61fb      	str	r3, [r7, #28]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <xQueueGiveFromISR+0x60>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <xQueueGiveFromISR+0x64>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <xQueueGiveFromISR+0x66>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10c      	bne.n	80078b0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	61bb      	str	r3, [r7, #24]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078b0:	f001 fd54 	bl	800935c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078b4:	f3ef 8211 	mrs	r2, BASEPRI
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	b672      	cpsid	i
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	b662      	cpsie	i
 80078cc:	617a      	str	r2, [r7, #20]
 80078ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d22b      	bcs.n	800793c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fe:	d112      	bne.n	8007926 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d016      	beq.n	8007936 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	4618      	mov	r0, r3
 800790e:	f000 ff2b 	bl	8008768 <xTaskRemoveFromEventList>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e007      	b.n	8007936 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800792a:	3301      	adds	r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	b25a      	sxtb	r2, r3
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007936:	2301      	movs	r3, #1
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
 800793a:	e001      	b.n	8007940 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800793c:	2300      	movs	r3, #0
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800794a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800794e:	4618      	mov	r0, r3
 8007950:	3738      	adds	r7, #56	; 0x38
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	; 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10c      	bne.n	800798e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	b672      	cpsid	i
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	b662      	cpsie	i
 8007988:	623b      	str	r3, [r7, #32]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	b672      	cpsid	i
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	b662      	cpsie	i
 80079aa:	61fb      	str	r3, [r7, #28]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079b0:	f001 f8a2 	bl	8008af8 <xTaskGetSchedulerState>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <xQueueSemaphoreTake+0x68>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <xQueueSemaphoreTake+0x6c>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <xQueueSemaphoreTake+0x6e>
 80079c4:	2300      	movs	r3, #0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10c      	bne.n	80079e4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	b672      	cpsid	i
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	b662      	cpsie	i
 80079de:	61bb      	str	r3, [r7, #24]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079e4:	f001 fbd2 	bl	800918c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d024      	beq.n	8007a3e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	1e5a      	subs	r2, r3, #1
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a04:	f001 fa3e 	bl	8008e84 <pvTaskIncrementMutexHeldCount>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00f      	beq.n	8007a36 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	3310      	adds	r3, #16
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fea4 	bl	8008768 <xTaskRemoveFromEventList>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a26:	4b55      	ldr	r3, [pc, #340]	; (8007b7c <xQueueSemaphoreTake+0x224>)
 8007a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a36:	f001 fbdd 	bl	80091f4 <vPortExitCritical>
				return pdPASS;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e099      	b.n	8007b72 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d113      	bne.n	8007a6c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00c      	beq.n	8007a64 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	b672      	cpsid	i
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	b662      	cpsie	i
 8007a5e:	617b      	str	r3, [r7, #20]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a64:	f001 fbc6 	bl	80091f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e082      	b.n	8007b72 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a72:	f107 030c 	add.w	r3, r7, #12
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 feda 	bl	8008830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a80:	f001 fbb8 	bl	80091f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a84:	f000 fc80 	bl	8008388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a88:	f001 fb80 	bl	800918c <vPortEnterCritical>
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a92:	b25b      	sxtb	r3, r3
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d103      	bne.n	8007aa2 <xQueueSemaphoreTake+0x14a>
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa8:	b25b      	sxtb	r3, r3
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d103      	bne.n	8007ab8 <xQueueSemaphoreTake+0x160>
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab8:	f001 fb9c 	bl	80091f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007abc:	463a      	mov	r2, r7
 8007abe:	f107 030c 	add.w	r3, r7, #12
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fec9 	bl	800885c <xTaskCheckForTimeOut>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d132      	bne.n	8007b36 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad2:	f000 f9d5 	bl	8007e80 <prvIsQueueEmpty>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d026      	beq.n	8007b2a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007ae4:	f001 fb52 	bl	800918c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f821 	bl	8008b34 <xTaskPriorityInherit>
 8007af2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007af4:	f001 fb7e 	bl	80091f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	4611      	mov	r1, r2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fe0b 	bl	800871c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b08:	f000 f968 	bl	8007ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b0c:	f000 fc4a 	bl	80083a4 <xTaskResumeAll>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f af66 	bne.w	80079e4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <xQueueSemaphoreTake+0x224>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	e75c      	b.n	80079e4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b2c:	f000 f956 	bl	8007ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b30:	f000 fc38 	bl	80083a4 <xTaskResumeAll>
 8007b34:	e756      	b.n	80079e4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b38:	f000 f950 	bl	8007ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b3c:	f000 fc32 	bl	80083a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b42:	f000 f99d 	bl	8007e80 <prvIsQueueEmpty>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f43f af4b 	beq.w	80079e4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00d      	beq.n	8007b70 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b54:	f001 fb1a 	bl	800918c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b5a:	f000 f897 	bl	8007c8c <prvGetDisinheritPriorityAfterTimeout>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f8ee 	bl	8008d48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b6c:	f001 fb42 	bl	80091f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3738      	adds	r7, #56	; 0x38
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	e000ed04 	.word	0xe000ed04

08007b80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08e      	sub	sp, #56	; 0x38
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10c      	bne.n	8007bb0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	b672      	cpsid	i
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	b662      	cpsie	i
 8007baa:	623b      	str	r3, [r7, #32]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d103      	bne.n	8007bbe <xQueueReceiveFromISR+0x3e>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <xQueueReceiveFromISR+0x42>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueReceiveFromISR+0x44>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10c      	bne.n	8007be2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	61fb      	str	r3, [r7, #28]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007be2:	f001 fbbb 	bl	800935c <vPortValidateInterruptPriority>
	__asm volatile
 8007be6:	f3ef 8211 	mrs	r2, BASEPRI
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	b672      	cpsid	i
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	b662      	cpsie	i
 8007bfe:	61ba      	str	r2, [r7, #24]
 8007c00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d02f      	beq.n	8007c72 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c20:	f000 f8b6 	bl	8007d90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	1e5a      	subs	r2, r3, #1
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d112      	bne.n	8007c5c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d016      	beq.n	8007c6c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	3310      	adds	r3, #16
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fd90 	bl	8008768 <xTaskRemoveFromEventList>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00e      	beq.n	8007c6c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e007      	b.n	8007c6c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c60:	3301      	adds	r3, #1
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	b25a      	sxtb	r2, r3
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c70:	e001      	b.n	8007c76 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f383 8811 	msr	BASEPRI, r3
}
 8007c80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3738      	adds	r7, #56	; 0x38
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d006      	beq.n	8007caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f1c3 0307 	rsb	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e001      	b.n	8007cae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cae:	68fb      	ldr	r3, [r7, #12]
	}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10d      	bne.n	8007cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d14d      	bne.n	8007d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 ffa4 	bl	8008c34 <xTaskPriorityDisinherit>
 8007cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	609a      	str	r2, [r3, #8]
 8007cf4:	e043      	b.n	8007d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d119      	bne.n	8007d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6858      	ldr	r0, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	461a      	mov	r2, r3
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	f002 f87a 	bl	8009e00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	441a      	add	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d32b      	bcc.n	8007d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	e026      	b.n	8007d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68d8      	ldr	r0, [r3, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	f002 f860 	bl	8009e00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	425b      	negs	r3, r3
 8007d4a:	441a      	add	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d207      	bcs.n	8007d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	425b      	negs	r3, r3
 8007d66:	441a      	add	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d105      	bne.n	8007d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d86:	697b      	ldr	r3, [r7, #20]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d018      	beq.n	8007dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	441a      	add	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d303      	bcc.n	8007dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68d9      	ldr	r1, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6838      	ldr	r0, [r7, #0]
 8007dd0:	f002 f816 	bl	8009e00 <memcpy>
	}
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007de4:	f001 f9d2 	bl	800918c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df0:	e011      	b.n	8007e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d012      	beq.n	8007e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3324      	adds	r3, #36	; 0x24
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fcb2 	bl	8008768 <xTaskRemoveFromEventList>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e0a:	f000 fd8d 	bl	8008928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dce9      	bgt.n	8007df2 <prvUnlockQueue+0x16>
 8007e1e:	e000      	b.n	8007e22 <prvUnlockQueue+0x46>
					break;
 8007e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e2a:	f001 f9e3 	bl	80091f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e2e:	f001 f9ad 	bl	800918c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3a:	e011      	b.n	8007e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3310      	adds	r3, #16
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fc8d 	bl	8008768 <xTaskRemoveFromEventList>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e54:	f000 fd68 	bl	8008928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dce9      	bgt.n	8007e3c <prvUnlockQueue+0x60>
 8007e68:	e000      	b.n	8007e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	22ff      	movs	r2, #255	; 0xff
 8007e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e74:	f001 f9be 	bl	80091f4 <vPortExitCritical>
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e88:	f001 f980 	bl	800918c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e001      	b.n	8007e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e9e:	f001 f9a9 	bl	80091f4 <vPortExitCritical>

	return xReturn;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eb4:	f001 f96a 	bl	800918c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d102      	bne.n	8007eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e001      	b.n	8007ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ece:	f001 f991 	bl	80091f4 <vPortExitCritical>

	return xReturn;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af04      	add	r7, sp, #16
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10c      	bne.n	8007f0a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10c      	bne.n	8007f2a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	b662      	cpsie	i
 8007f24:	61fb      	str	r3, [r7, #28]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f2a:	23a0      	movs	r3, #160	; 0xa0
 8007f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2ba0      	cmp	r3, #160	; 0xa0
 8007f32:	d00c      	beq.n	8007f4e <xTaskCreateStatic+0x72>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	b672      	cpsid	i
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	b662      	cpsie	i
 8007f48:	61bb      	str	r3, [r7, #24]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01e      	beq.n	8007f94 <xTaskCreateStatic+0xb8>
 8007f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01b      	beq.n	8007f94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9303      	str	r3, [sp, #12]
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	9302      	str	r3, [sp, #8]
 8007f76:	f107 0314 	add.w	r3, r7, #20
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f850 	bl	800802c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f8e:	f000 f8ed 	bl	800816c <prvAddNewTaskToReadyList>
 8007f92:	e001      	b.n	8007f98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f98:	697b      	ldr	r3, [r7, #20]
	}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08c      	sub	sp, #48	; 0x30
 8007fa6:	af04      	add	r7, sp, #16
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fa14 	bl	80093e4 <pvPortMalloc>
 8007fbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00e      	beq.n	8007fe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fc4:	20a0      	movs	r0, #160	; 0xa0
 8007fc6:	f001 fa0d 	bl	80093e4 <pvPortMalloc>
 8007fca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fd8:	e005      	b.n	8007fe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fda:	6978      	ldr	r0, [r7, #20]
 8007fdc:	f001 facc 	bl	8009578 <vPortFree>
 8007fe0:	e001      	b.n	8007fe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d017      	beq.n	800801c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ff4:	88fa      	ldrh	r2, [r7, #6]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f80e 	bl	800802c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008010:	69f8      	ldr	r0, [r7, #28]
 8008012:	f000 f8ab 	bl	800816c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
 800801a:	e002      	b.n	8008022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008022:	69bb      	ldr	r3, [r7, #24]
	}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008044:	440b      	add	r3, r1
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f023 0307 	bic.w	r3, r3, #7
 8008052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	b672      	cpsid	i
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	b662      	cpsie	i
 8008072:	617b      	str	r3, [r7, #20]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01f      	beq.n	80080be <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e012      	b.n	80080aa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	7819      	ldrb	r1, [r3, #0]
 800808c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	3334      	adds	r3, #52	; 0x34
 8008094:	460a      	mov	r2, r1
 8008096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	3301      	adds	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d9e9      	bls.n	8008084 <prvInitialiseNewTask+0x58>
 80080b0:	e000      	b.n	80080b4 <prvInitialiseNewTask+0x88>
			{
				break;
 80080b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080bc:	e003      	b.n	80080c6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	2b06      	cmp	r3, #6
 80080ca:	d901      	bls.n	80080d0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080cc:	2306      	movs	r3, #6
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	3304      	adds	r3, #4
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff f8b8 	bl	800725c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	3318      	adds	r3, #24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff f8b3 	bl	800725c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f1c3 0207 	rsb	r2, r3, #7
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	2200      	movs	r2, #0
 8008118:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	334c      	adds	r3, #76	; 0x4c
 8008120:	224c      	movs	r2, #76	; 0x4c
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fd14 	bl	8009b52 <memset>
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <prvInitialiseNewTask+0x134>)
 800812e:	651a      	str	r2, [r3, #80]	; 0x50
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	4a0c      	ldr	r2, [pc, #48]	; (8008164 <prvInitialiseNewTask+0x138>)
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	4a0b      	ldr	r2, [pc, #44]	; (8008168 <prvInitialiseNewTask+0x13c>)
 800813a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	69b8      	ldr	r0, [r7, #24]
 8008142:	f000 ff19 	bl	8008f78 <pxPortInitialiseStack>
 8008146:	4602      	mov	r2, r0
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008158:	bf00      	nop
 800815a:	3720      	adds	r7, #32
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200051d8 	.word	0x200051d8
 8008164:	20005240 	.word	0x20005240
 8008168:	200052a8 	.word	0x200052a8

0800816c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008174:	f001 f80a 	bl	800918c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008178:	4b2a      	ldr	r3, [pc, #168]	; (8008224 <prvAddNewTaskToReadyList+0xb8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	4a29      	ldr	r2, [pc, #164]	; (8008224 <prvAddNewTaskToReadyList+0xb8>)
 8008180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008182:	4b29      	ldr	r3, [pc, #164]	; (8008228 <prvAddNewTaskToReadyList+0xbc>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800818a:	4a27      	ldr	r2, [pc, #156]	; (8008228 <prvAddNewTaskToReadyList+0xbc>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008190:	4b24      	ldr	r3, [pc, #144]	; (8008224 <prvAddNewTaskToReadyList+0xb8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d110      	bne.n	80081ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008198:	f000 fbea 	bl	8008970 <prvInitialiseTaskLists>
 800819c:	e00d      	b.n	80081ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800819e:	4b23      	ldr	r3, [pc, #140]	; (800822c <prvAddNewTaskToReadyList+0xc0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081a6:	4b20      	ldr	r3, [pc, #128]	; (8008228 <prvAddNewTaskToReadyList+0xbc>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d802      	bhi.n	80081ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081b4:	4a1c      	ldr	r2, [pc, #112]	; (8008228 <prvAddNewTaskToReadyList+0xbc>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <prvAddNewTaskToReadyList+0xc4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3301      	adds	r3, #1
 80081c0:	4a1b      	ldr	r2, [pc, #108]	; (8008230 <prvAddNewTaskToReadyList+0xc4>)
 80081c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	2201      	movs	r2, #1
 80081ca:	409a      	lsls	r2, r3
 80081cc:	4b19      	ldr	r3, [pc, #100]	; (8008234 <prvAddNewTaskToReadyList+0xc8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	4a18      	ldr	r2, [pc, #96]	; (8008234 <prvAddNewTaskToReadyList+0xc8>)
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <prvAddNewTaskToReadyList+0xcc>)
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7ff f842 	bl	8007276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081f2:	f000 ffff 	bl	80091f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <prvAddNewTaskToReadyList+0xc0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00e      	beq.n	800821c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081fe:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvAddNewTaskToReadyList+0xbc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	429a      	cmp	r2, r3
 800820a:	d207      	bcs.n	800821c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <prvAddNewTaskToReadyList+0xd0>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	2000158c 	.word	0x2000158c
 8008228:	2000148c 	.word	0x2000148c
 800822c:	20001598 	.word	0x20001598
 8008230:	200015a8 	.word	0x200015a8
 8008234:	20001594 	.word	0x20001594
 8008238:	20001490 	.word	0x20001490
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d019      	beq.n	8008286 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <vTaskDelay+0x64>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <vTaskDelay+0x34>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	b672      	cpsid	i
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	b662      	cpsie	i
 800826e:	60bb      	str	r3, [r7, #8]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008274:	f000 f888 	bl	8008388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fe16 	bl	8008eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008280:	f000 f890 	bl	80083a4 <xTaskResumeAll>
 8008284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <vTaskDelay+0x68>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	200015b4 	.word	0x200015b4
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ba:	463a      	mov	r2, r7
 80082bc:	1d39      	adds	r1, r7, #4
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 fe7c 	bl	8001fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	9202      	str	r2, [sp, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	460a      	mov	r2, r1
 80082da:	4923      	ldr	r1, [pc, #140]	; (8008368 <vTaskStartScheduler+0xbc>)
 80082dc:	4823      	ldr	r0, [pc, #140]	; (800836c <vTaskStartScheduler+0xc0>)
 80082de:	f7ff fdfd 	bl	8007edc <xTaskCreateStatic>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4a22      	ldr	r2, [pc, #136]	; (8008370 <vTaskStartScheduler+0xc4>)
 80082e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <vTaskStartScheduler+0xc4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e001      	b.n	80082fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d11d      	bne.n	800833c <vTaskStartScheduler+0x90>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	b672      	cpsid	i
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	b662      	cpsie	i
 8008314:	613b      	str	r3, [r7, #16]
}
 8008316:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <vTaskStartScheduler+0xc8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	334c      	adds	r3, #76	; 0x4c
 800831e:	4a16      	ldr	r2, [pc, #88]	; (8008378 <vTaskStartScheduler+0xcc>)
 8008320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008322:	4b16      	ldr	r3, [pc, #88]	; (800837c <vTaskStartScheduler+0xd0>)
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <vTaskStartScheduler+0xd4>)
 800832c:	2201      	movs	r2, #1
 800832e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008330:	4b14      	ldr	r3, [pc, #80]	; (8008384 <vTaskStartScheduler+0xd8>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008336:	f000 feab 	bl	8009090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800833a:	e010      	b.n	800835e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d10c      	bne.n	800835e <vTaskStartScheduler+0xb2>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
 8008358:	60fb      	str	r3, [r7, #12]
}
 800835a:	bf00      	nop
 800835c:	e7fe      	b.n	800835c <vTaskStartScheduler+0xb0>
}
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	0800ba28 	.word	0x0800ba28
 800836c:	08008941 	.word	0x08008941
 8008370:	200015b0 	.word	0x200015b0
 8008374:	2000148c 	.word	0x2000148c
 8008378:	20000068 	.word	0x20000068
 800837c:	200015ac 	.word	0x200015ac
 8008380:	20001598 	.word	0x20001598
 8008384:	20001590 	.word	0x20001590

08008388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <vTaskSuspendAll+0x18>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3301      	adds	r3, #1
 8008392:	4a03      	ldr	r2, [pc, #12]	; (80083a0 <vTaskSuspendAll+0x18>)
 8008394:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	200015b4 	.word	0x200015b4

080083a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083b2:	4b42      	ldr	r3, [pc, #264]	; (80084bc <xTaskResumeAll+0x118>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10c      	bne.n	80083d4 <xTaskResumeAll+0x30>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	b672      	cpsid	i
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	b662      	cpsie	i
 80083ce:	603b      	str	r3, [r7, #0]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083d4:	f000 feda 	bl	800918c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083d8:	4b38      	ldr	r3, [pc, #224]	; (80084bc <xTaskResumeAll+0x118>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a37      	ldr	r2, [pc, #220]	; (80084bc <xTaskResumeAll+0x118>)
 80083e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e2:	4b36      	ldr	r3, [pc, #216]	; (80084bc <xTaskResumeAll+0x118>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d161      	bne.n	80084ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083ea:	4b35      	ldr	r3, [pc, #212]	; (80084c0 <xTaskResumeAll+0x11c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d05d      	beq.n	80084ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083f2:	e02e      	b.n	8008452 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f4:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <xTaskResumeAll+0x120>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3318      	adds	r3, #24
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe ff95 	bl	8007330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe ff90 	bl	8007330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	2201      	movs	r2, #1
 8008416:	409a      	lsls	r2, r3
 8008418:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <xTaskResumeAll+0x124>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4313      	orrs	r3, r2
 800841e:	4a2a      	ldr	r2, [pc, #168]	; (80084c8 <xTaskResumeAll+0x124>)
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4a27      	ldr	r2, [pc, #156]	; (80084cc <xTaskResumeAll+0x128>)
 8008430:	441a      	add	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7fe ff1c 	bl	8007276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <xTaskResumeAll+0x12c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800844c:	4b21      	ldr	r3, [pc, #132]	; (80084d4 <xTaskResumeAll+0x130>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <xTaskResumeAll+0x120>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1cc      	bne.n	80083f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008460:	f000 fb2a 	bl	8008ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008464:	4b1c      	ldr	r3, [pc, #112]	; (80084d8 <xTaskResumeAll+0x134>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d010      	beq.n	8008492 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008470:	f000 f836 	bl	80084e0 <xTaskIncrementTick>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800847a:	4b16      	ldr	r3, [pc, #88]	; (80084d4 <xTaskResumeAll+0x130>)
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3b01      	subs	r3, #1
 8008484:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f1      	bne.n	8008470 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800848c:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <xTaskResumeAll+0x134>)
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008492:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <xTaskResumeAll+0x130>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800849a:	2301      	movs	r3, #1
 800849c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <xTaskResumeAll+0x138>)
 80084a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ae:	f000 fea1 	bl	80091f4 <vPortExitCritical>

	return xAlreadyYielded;
 80084b2:	68bb      	ldr	r3, [r7, #8]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200015b4 	.word	0x200015b4
 80084c0:	2000158c 	.word	0x2000158c
 80084c4:	2000154c 	.word	0x2000154c
 80084c8:	20001594 	.word	0x20001594
 80084cc:	20001490 	.word	0x20001490
 80084d0:	2000148c 	.word	0x2000148c
 80084d4:	200015a0 	.word	0x200015a0
 80084d8:	2000159c 	.word	0x2000159c
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ea:	4b4f      	ldr	r3, [pc, #316]	; (8008628 <xTaskIncrementTick+0x148>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 808a 	bne.w	8008608 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084f4:	4b4d      	ldr	r3, [pc, #308]	; (800862c <xTaskIncrementTick+0x14c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084fc:	4a4b      	ldr	r2, [pc, #300]	; (800862c <xTaskIncrementTick+0x14c>)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d122      	bne.n	800854e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008508:	4b49      	ldr	r3, [pc, #292]	; (8008630 <xTaskIncrementTick+0x150>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00c      	beq.n	800852c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	b672      	cpsid	i
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	b662      	cpsie	i
 8008526:	603b      	str	r3, [r7, #0]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xTaskIncrementTick+0x4a>
 800852c:	4b40      	ldr	r3, [pc, #256]	; (8008630 <xTaskIncrementTick+0x150>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	4b40      	ldr	r3, [pc, #256]	; (8008634 <xTaskIncrementTick+0x154>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3e      	ldr	r2, [pc, #248]	; (8008630 <xTaskIncrementTick+0x150>)
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	4a3e      	ldr	r2, [pc, #248]	; (8008634 <xTaskIncrementTick+0x154>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	4b3d      	ldr	r3, [pc, #244]	; (8008638 <xTaskIncrementTick+0x158>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	4a3c      	ldr	r2, [pc, #240]	; (8008638 <xTaskIncrementTick+0x158>)
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	f000 fab5 	bl	8008ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800854e:	4b3b      	ldr	r3, [pc, #236]	; (800863c <xTaskIncrementTick+0x15c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d348      	bcc.n	80085ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008558:	4b35      	ldr	r3, [pc, #212]	; (8008630 <xTaskIncrementTick+0x150>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008562:	4b36      	ldr	r3, [pc, #216]	; (800863c <xTaskIncrementTick+0x15c>)
 8008564:	f04f 32ff 	mov.w	r2, #4294967295
 8008568:	601a      	str	r2, [r3, #0]
					break;
 800856a:	e03e      	b.n	80085ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856c:	4b30      	ldr	r3, [pc, #192]	; (8008630 <xTaskIncrementTick+0x150>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d203      	bcs.n	800858c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008584:	4a2d      	ldr	r2, [pc, #180]	; (800863c <xTaskIncrementTick+0x15c>)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800858a:	e02e      	b.n	80085ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	3304      	adds	r3, #4
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fecd 	bl	8007330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fec4 	bl	8007330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	2201      	movs	r2, #1
 80085ae:	409a      	lsls	r2, r3
 80085b0:	4b23      	ldr	r3, [pc, #140]	; (8008640 <xTaskIncrementTick+0x160>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	4a22      	ldr	r2, [pc, #136]	; (8008640 <xTaskIncrementTick+0x160>)
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <xTaskIncrementTick+0x164>)
 80085c8:	441a      	add	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe fe50 	bl	8007276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085da:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <xTaskIncrementTick+0x168>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d3b9      	bcc.n	8008558 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e8:	e7b6      	b.n	8008558 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ea:	4b17      	ldr	r3, [pc, #92]	; (8008648 <xTaskIncrementTick+0x168>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4914      	ldr	r1, [pc, #80]	; (8008644 <xTaskIncrementTick+0x164>)
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d907      	bls.n	8008612 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e004      	b.n	8008612 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008608:	4b10      	ldr	r3, [pc, #64]	; (800864c <xTaskIncrementTick+0x16c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	4a0f      	ldr	r2, [pc, #60]	; (800864c <xTaskIncrementTick+0x16c>)
 8008610:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <xTaskIncrementTick+0x170>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800861e:	697b      	ldr	r3, [r7, #20]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200015b4 	.word	0x200015b4
 800862c:	20001590 	.word	0x20001590
 8008630:	20001544 	.word	0x20001544
 8008634:	20001548 	.word	0x20001548
 8008638:	200015a4 	.word	0x200015a4
 800863c:	200015ac 	.word	0x200015ac
 8008640:	20001594 	.word	0x20001594
 8008644:	20001490 	.word	0x20001490
 8008648:	2000148c 	.word	0x2000148c
 800864c:	2000159c 	.word	0x2000159c
 8008650:	200015a0 	.word	0x200015a0

08008654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800865a:	4b2a      	ldr	r3, [pc, #168]	; (8008704 <vTaskSwitchContext+0xb0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008662:	4b29      	ldr	r3, [pc, #164]	; (8008708 <vTaskSwitchContext+0xb4>)
 8008664:	2201      	movs	r2, #1
 8008666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008668:	e046      	b.n	80086f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800866a:	4b27      	ldr	r3, [pc, #156]	; (8008708 <vTaskSwitchContext+0xb4>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008670:	4b26      	ldr	r3, [pc, #152]	; (800870c <vTaskSwitchContext+0xb8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	fab3 f383 	clz	r3, r3
 800867c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	f1c3 031f 	rsb	r3, r3, #31
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	4922      	ldr	r1, [pc, #136]	; (8008710 <vTaskSwitchContext+0xbc>)
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <vTaskSwitchContext+0x60>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	b672      	cpsid	i
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	b662      	cpsie	i
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <vTaskSwitchContext+0x5e>
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4a14      	ldr	r2, [pc, #80]	; (8008710 <vTaskSwitchContext+0xbc>)
 80086c0:	4413      	add	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3308      	adds	r3, #8
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d104      	bne.n	80086e4 <vTaskSwitchContext+0x90>
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	4a0a      	ldr	r2, [pc, #40]	; (8008714 <vTaskSwitchContext+0xc0>)
 80086ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <vTaskSwitchContext+0xc0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	334c      	adds	r3, #76	; 0x4c
 80086f4:	4a08      	ldr	r2, [pc, #32]	; (8008718 <vTaskSwitchContext+0xc4>)
 80086f6:	6013      	str	r3, [r2, #0]
}
 80086f8:	bf00      	nop
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	200015b4 	.word	0x200015b4
 8008708:	200015a0 	.word	0x200015a0
 800870c:	20001594 	.word	0x20001594
 8008710:	20001490 	.word	0x20001490
 8008714:	2000148c 	.word	0x2000148c
 8008718:	20000068 	.word	0x20000068

0800871c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10c      	bne.n	8008746 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	b672      	cpsid	i
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	b662      	cpsie	i
 8008740:	60fb      	str	r3, [r7, #12]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008746:	4b07      	ldr	r3, [pc, #28]	; (8008764 <vTaskPlaceOnEventList+0x48>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3318      	adds	r3, #24
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fe fdb5 	bl	80072be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008754:	2101      	movs	r1, #1
 8008756:	6838      	ldr	r0, [r7, #0]
 8008758:	f000 fba8 	bl	8008eac <prvAddCurrentTaskToDelayedList>
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	2000148c 	.word	0x2000148c

08008768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10c      	bne.n	8008798 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	b672      	cpsid	i
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	b662      	cpsie	i
 8008792:	60fb      	str	r3, [r7, #12]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3318      	adds	r3, #24
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fdc7 	bl	8007330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a2:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <xTaskRemoveFromEventList+0xb0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d11c      	bne.n	80087e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fdbe 	bl	8007330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2201      	movs	r2, #1
 80087ba:	409a      	lsls	r2, r3
 80087bc:	4b17      	ldr	r3, [pc, #92]	; (800881c <xTaskRemoveFromEventList+0xb4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	4a16      	ldr	r2, [pc, #88]	; (800881c <xTaskRemoveFromEventList+0xb4>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a13      	ldr	r2, [pc, #76]	; (8008820 <xTaskRemoveFromEventList+0xb8>)
 80087d4:	441a      	add	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7fe fd4a 	bl	8007276 <vListInsertEnd>
 80087e2:	e005      	b.n	80087f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	3318      	adds	r3, #24
 80087e8:	4619      	mov	r1, r3
 80087ea:	480e      	ldr	r0, [pc, #56]	; (8008824 <xTaskRemoveFromEventList+0xbc>)
 80087ec:	f7fe fd43 	bl	8007276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <xTaskRemoveFromEventList+0xc0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d905      	bls.n	800880a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087fe:	2301      	movs	r3, #1
 8008800:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <xTaskRemoveFromEventList+0xc4>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e001      	b.n	800880e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800880e:	697b      	ldr	r3, [r7, #20]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200015b4 	.word	0x200015b4
 800881c:	20001594 	.word	0x20001594
 8008820:	20001490 	.word	0x20001490
 8008824:	2000154c 	.word	0x2000154c
 8008828:	2000148c 	.word	0x2000148c
 800882c:	200015a0 	.word	0x200015a0

08008830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <vTaskInternalSetTimeOutState+0x24>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008840:	4b05      	ldr	r3, [pc, #20]	; (8008858 <vTaskInternalSetTimeOutState+0x28>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	605a      	str	r2, [r3, #4]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	200015a4 	.word	0x200015a4
 8008858:	20001590 	.word	0x20001590

0800885c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10c      	bne.n	8008886 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	b672      	cpsid	i
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	b662      	cpsie	i
 8008880:	613b      	str	r3, [r7, #16]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10c      	bne.n	80088a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	b672      	cpsid	i
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	b662      	cpsie	i
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80088a6:	f000 fc71 	bl	800918c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <xTaskCheckForTimeOut+0xc4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c2:	d102      	bne.n	80088ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e023      	b.n	8008912 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <xTaskCheckForTimeOut+0xc8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d007      	beq.n	80088e6 <xTaskCheckForTimeOut+0x8a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d302      	bcc.n	80088e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	e015      	b.n	8008912 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d20b      	bcs.n	8008908 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ff97 	bl	8008830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	e004      	b.n	8008912 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800890e:	2301      	movs	r3, #1
 8008910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008912:	f000 fc6f 	bl	80091f4 <vPortExitCritical>

	return xReturn;
 8008916:	69fb      	ldr	r3, [r7, #28]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20001590 	.word	0x20001590
 8008924:	200015a4 	.word	0x200015a4

08008928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800892c:	4b03      	ldr	r3, [pc, #12]	; (800893c <vTaskMissedYield+0x14>)
 800892e:	2201      	movs	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
}
 8008932:	bf00      	nop
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	200015a0 	.word	0x200015a0

08008940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008948:	f000 f852 	bl	80089f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <prvIdleTask+0x28>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d9f9      	bls.n	8008948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvIdleTask+0x2c>)
 8008956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008964:	e7f0      	b.n	8008948 <prvIdleTask+0x8>
 8008966:	bf00      	nop
 8008968:	20001490 	.word	0x20001490
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	e00c      	b.n	8008996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4a12      	ldr	r2, [pc, #72]	; (80089d0 <prvInitialiseTaskLists+0x60>)
 8008988:	4413      	add	r3, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fc46 	bl	800721c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3301      	adds	r3, #1
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b06      	cmp	r3, #6
 800899a:	d9ef      	bls.n	800897c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800899c:	480d      	ldr	r0, [pc, #52]	; (80089d4 <prvInitialiseTaskLists+0x64>)
 800899e:	f7fe fc3d 	bl	800721c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089a2:	480d      	ldr	r0, [pc, #52]	; (80089d8 <prvInitialiseTaskLists+0x68>)
 80089a4:	f7fe fc3a 	bl	800721c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a8:	480c      	ldr	r0, [pc, #48]	; (80089dc <prvInitialiseTaskLists+0x6c>)
 80089aa:	f7fe fc37 	bl	800721c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089ae:	480c      	ldr	r0, [pc, #48]	; (80089e0 <prvInitialiseTaskLists+0x70>)
 80089b0:	f7fe fc34 	bl	800721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089b4:	480b      	ldr	r0, [pc, #44]	; (80089e4 <prvInitialiseTaskLists+0x74>)
 80089b6:	f7fe fc31 	bl	800721c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ba:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <prvInitialiseTaskLists+0x78>)
 80089bc:	4a05      	ldr	r2, [pc, #20]	; (80089d4 <prvInitialiseTaskLists+0x64>)
 80089be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <prvInitialiseTaskLists+0x7c>)
 80089c2:	4a05      	ldr	r2, [pc, #20]	; (80089d8 <prvInitialiseTaskLists+0x68>)
 80089c4:	601a      	str	r2, [r3, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20001490 	.word	0x20001490
 80089d4:	2000151c 	.word	0x2000151c
 80089d8:	20001530 	.word	0x20001530
 80089dc:	2000154c 	.word	0x2000154c
 80089e0:	20001560 	.word	0x20001560
 80089e4:	20001578 	.word	0x20001578
 80089e8:	20001544 	.word	0x20001544
 80089ec:	20001548 	.word	0x20001548

080089f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f6:	e019      	b.n	8008a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089f8:	f000 fbc8 	bl	800918c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089fc:	4b10      	ldr	r3, [pc, #64]	; (8008a40 <prvCheckTasksWaitingTermination+0x50>)
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fc91 	bl	8007330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <prvCheckTasksWaitingTermination+0x54>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	4a0b      	ldr	r2, [pc, #44]	; (8008a44 <prvCheckTasksWaitingTermination+0x54>)
 8008a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <prvCheckTasksWaitingTermination+0x58>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	4a0a      	ldr	r2, [pc, #40]	; (8008a48 <prvCheckTasksWaitingTermination+0x58>)
 8008a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a22:	f000 fbe7 	bl	80091f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f810 	bl	8008a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <prvCheckTasksWaitingTermination+0x58>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e1      	bne.n	80089f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001560 	.word	0x20001560
 8008a44:	2000158c 	.word	0x2000158c
 8008a48:	20001574 	.word	0x20001574

08008a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	334c      	adds	r3, #76	; 0x4c
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 f911 	bl	8009c80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d108      	bne.n	8008a7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fd83 	bl	8009578 <vPortFree>
				vPortFree( pxTCB );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fd80 	bl	8009578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a78:	e01a      	b.n	8008ab0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d103      	bne.n	8008a8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fd77 	bl	8009578 <vPortFree>
	}
 8008a8a:	e011      	b.n	8008ab0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d00c      	beq.n	8008ab0 <prvDeleteTCB+0x64>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	b672      	cpsid	i
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	b662      	cpsie	i
 8008aaa:	60fb      	str	r3, [r7, #12]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <prvDeleteTCB+0x62>
	}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <prvResetNextTaskUnblockTime+0x38>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <prvResetNextTaskUnblockTime+0x3c>)
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ad0:	e008      	b.n	8008ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <prvResetNextTaskUnblockTime+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <prvResetNextTaskUnblockTime+0x3c>)
 8008ae2:	6013      	str	r3, [r2, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20001544 	.word	0x20001544
 8008af4:	200015ac 	.word	0x200015ac

08008af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <xTaskGetSchedulerState+0x34>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b06:	2301      	movs	r3, #1
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	e008      	b.n	8008b1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <xTaskGetSchedulerState+0x38>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b14:	2302      	movs	r3, #2
 8008b16:	607b      	str	r3, [r7, #4]
 8008b18:	e001      	b.n	8008b1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b1e:	687b      	ldr	r3, [r7, #4]
	}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20001598 	.word	0x20001598
 8008b30:	200015b4 	.word	0x200015b4

08008b34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d069      	beq.n	8008c1e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4b36      	ldr	r3, [pc, #216]	; (8008c28 <xTaskPriorityInherit+0xf4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d259      	bcs.n	8008c0c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	db06      	blt.n	8008b6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b60:	4b31      	ldr	r3, [pc, #196]	; (8008c28 <xTaskPriorityInherit+0xf4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	f1c3 0207 	rsb	r2, r3, #7
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6959      	ldr	r1, [r3, #20]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4a2b      	ldr	r2, [pc, #172]	; (8008c2c <xTaskPriorityInherit+0xf8>)
 8008b80:	4413      	add	r3, r2
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d13a      	bne.n	8008bfc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fbd0 	bl	8007330 <uxListRemove>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d115      	bne.n	8008bc2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9a:	4924      	ldr	r1, [pc, #144]	; (8008c2c <xTaskPriorityInherit+0xf8>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <xTaskPriorityInherit+0x8e>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	4b1d      	ldr	r3, [pc, #116]	; (8008c30 <xTaskPriorityInherit+0xfc>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	4a1c      	ldr	r2, [pc, #112]	; (8008c30 <xTaskPriorityInherit+0xfc>)
 8008bc0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bc2:	4b19      	ldr	r3, [pc, #100]	; (8008c28 <xTaskPriorityInherit+0xf4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	409a      	lsls	r2, r3
 8008bd4:	4b16      	ldr	r3, [pc, #88]	; (8008c30 <xTaskPriorityInherit+0xfc>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <xTaskPriorityInherit+0xfc>)
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a10      	ldr	r2, [pc, #64]	; (8008c2c <xTaskPriorityInherit+0xf8>)
 8008bec:	441a      	add	r2, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7fe fb3e 	bl	8007276 <vListInsertEnd>
 8008bfa:	e004      	b.n	8008c06 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <xTaskPriorityInherit+0xf4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c06:	2301      	movs	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	e008      	b.n	8008c1e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <xTaskPriorityInherit+0xf4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d201      	bcs.n	8008c1e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	2000148c 	.word	0x2000148c
 8008c2c:	20001490 	.word	0x20001490
 8008c30:	20001594 	.word	0x20001594

08008c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d072      	beq.n	8008d30 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c4a:	4b3c      	ldr	r3, [pc, #240]	; (8008d3c <xTaskPriorityDisinherit+0x108>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d00c      	beq.n	8008c6e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	b672      	cpsid	i
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	b662      	cpsie	i
 8008c68:	60fb      	str	r3, [r7, #12]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10c      	bne.n	8008c90 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	b672      	cpsid	i
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	b662      	cpsie	i
 8008c8a:	60bb      	str	r3, [r7, #8]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d044      	beq.n	8008d30 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d140      	bne.n	8008d30 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fb3c 	bl	8007330 <uxListRemove>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d115      	bne.n	8008cea <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	491f      	ldr	r1, [pc, #124]	; (8008d40 <xTaskPriorityDisinherit+0x10c>)
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTaskPriorityDisinherit+0xb6>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	2201      	movs	r2, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43da      	mvns	r2, r3
 8008ce0:	4b18      	ldr	r3, [pc, #96]	; (8008d44 <xTaskPriorityDisinherit+0x110>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <xTaskPriorityDisinherit+0x110>)
 8008ce8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	f1c3 0207 	rsb	r2, r3, #7
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	2201      	movs	r2, #1
 8008d04:	409a      	lsls	r2, r3
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <xTaskPriorityDisinherit+0x110>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <xTaskPriorityDisinherit+0x110>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <xTaskPriorityDisinherit+0x10c>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe faa5 	bl	8007276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d30:	697b      	ldr	r3, [r7, #20]
	}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	2000148c 	.word	0x2000148c
 8008d40:	20001490 	.word	0x20001490
 8008d44:	20001594 	.word	0x20001594

08008d48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d56:	2301      	movs	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8087 	beq.w	8008e70 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	b672      	cpsid	i
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	b662      	cpsie	i
 8008d7e:	60fb      	str	r3, [r7, #12]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d902      	bls.n	8008d94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	e002      	b.n	8008d9a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d065      	beq.n	8008e70 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d160      	bne.n	8008e70 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dae:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d10c      	bne.n	8008dd2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	b672      	cpsid	i
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	b662      	cpsie	i
 8008dcc:	60bb      	str	r3, [r7, #8]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	db04      	blt.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	f1c3 0207 	rsb	r2, r3, #7
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	6959      	ldr	r1, [r3, #20]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e00:	4413      	add	r3, r2
 8008e02:	4299      	cmp	r1, r3
 8008e04:	d134      	bne.n	8008e70 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fa90 	bl	8007330 <uxListRemove>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d115      	bne.n	8008e42 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	4918      	ldr	r1, [pc, #96]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	2201      	movs	r2, #1
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	43da      	mvns	r2, r3
 8008e38:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	2201      	movs	r2, #1
 8008e48:	409a      	lsls	r2, r3
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4a06      	ldr	r2, [pc, #24]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e62:	441a      	add	r2, r3
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fe fa03 	bl	8007276 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e70:	bf00      	nop
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	2000148c 	.word	0x2000148c
 8008e7c:	20001490 	.word	0x20001490
 8008e80:	20001594 	.word	0x20001594

08008e84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e96:	3201      	adds	r2, #1
 8008e98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008e9a:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
	}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	2000148c 	.word	0x2000148c

08008eac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eb6:	4b29      	ldr	r3, [pc, #164]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebc:	4b28      	ldr	r3, [pc, #160]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fa34 	bl	8007330 <uxListRemove>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ece:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43da      	mvns	r2, r3
 8008edc:	4b21      	ldr	r3, [pc, #132]	; (8008f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d10a      	bne.n	8008f04 <prvAddCurrentTaskToDelayedList+0x58>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	481a      	ldr	r0, [pc, #104]	; (8008f68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008efe:	f7fe f9ba 	bl	8007276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f02:	e026      	b.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f0c:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d209      	bcs.n	8008f30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1c:	4b13      	ldr	r3, [pc, #76]	; (8008f6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fe f9c8 	bl	80072be <vListInsert>
}
 8008f2e:	e010      	b.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7fe f9be 	bl	80072be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f42:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d202      	bcs.n	8008f52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f4c:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6013      	str	r3, [r2, #0]
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20001590 	.word	0x20001590
 8008f60:	2000148c 	.word	0x2000148c
 8008f64:	20001594 	.word	0x20001594
 8008f68:	20001578 	.word	0x20001578
 8008f6c:	20001548 	.word	0x20001548
 8008f70:	20001544 	.word	0x20001544
 8008f74:	200015ac 	.word	0x200015ac

08008f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b04      	subs	r3, #4
 8008f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b04      	subs	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f023 0201 	bic.w	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	; (8008fdc <pxPortInitialiseStack+0x64>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b14      	subs	r3, #20
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f06f 0202 	mvn.w	r2, #2
 8008fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3b20      	subs	r3, #32
 8008fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fce:	68fb      	ldr	r3, [r7, #12]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	08008fe1 	.word	0x08008fe1

08008fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fea:	4b14      	ldr	r3, [pc, #80]	; (800903c <prvTaskExitError+0x5c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d00c      	beq.n	800900e <prvTaskExitError+0x2e>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	b672      	cpsid	i
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	b662      	cpsie	i
 8009008:	60fb      	str	r3, [r7, #12]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <prvTaskExitError+0x2c>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	b672      	cpsid	i
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	b662      	cpsie	i
 8009022:	60bb      	str	r3, [r7, #8]
}
 8009024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009026:	bf00      	nop
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0fc      	beq.n	8009028 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	2000000c 	.word	0x2000000c

08009040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	4770      	bx	lr
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst2>:
 8009060:	2000148c 	.word	0x2000148c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009068:	4808      	ldr	r0, [pc, #32]	; (800908c <prvPortStartFirstTask+0x24>)
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
 800906e:	f380 8808 	msr	MSP, r0
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8814 	msr	CONTROL, r0
 800907a:	b662      	cpsie	i
 800907c:	b661      	cpsie	f
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	df00      	svc	0
 8009088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800908a:	bf00      	nop
 800908c:	e000ed08 	.word	0xe000ed08

08009090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009096:	4b37      	ldr	r3, [pc, #220]	; (8009174 <xPortStartScheduler+0xe4>)
 8009098:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	4b2f      	ldr	r3, [pc, #188]	; (8009178 <xPortStartScheduler+0xe8>)
 80090bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090be:	4b2f      	ldr	r3, [pc, #188]	; (800917c <xPortStartScheduler+0xec>)
 80090c0:	2207      	movs	r2, #7
 80090c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090c4:	e009      	b.n	80090da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090c6:	4b2d      	ldr	r3, [pc, #180]	; (800917c <xPortStartScheduler+0xec>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	4a2b      	ldr	r2, [pc, #172]	; (800917c <xPortStartScheduler+0xec>)
 80090ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e2:	2b80      	cmp	r3, #128	; 0x80
 80090e4:	d0ef      	beq.n	80090c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090e6:	4b25      	ldr	r3, [pc, #148]	; (800917c <xPortStartScheduler+0xec>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1c3 0307 	rsb	r3, r3, #7
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d00c      	beq.n	800910c <xPortStartScheduler+0x7c>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	b672      	cpsid	i
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	b662      	cpsie	i
 8009106:	60bb      	str	r3, [r7, #8]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <xPortStartScheduler+0xec>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	4a1a      	ldr	r2, [pc, #104]	; (800917c <xPortStartScheduler+0xec>)
 8009114:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009116:	4b19      	ldr	r3, [pc, #100]	; (800917c <xPortStartScheduler+0xec>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800911e:	4a17      	ldr	r2, [pc, #92]	; (800917c <xPortStartScheduler+0xec>)
 8009120:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	b2da      	uxtb	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <xPortStartScheduler+0xf0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a14      	ldr	r2, [pc, #80]	; (8009180 <xPortStartScheduler+0xf0>)
 8009130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009134:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <xPortStartScheduler+0xf0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a11      	ldr	r2, [pc, #68]	; (8009180 <xPortStartScheduler+0xf0>)
 800913c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009140:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009142:	f000 f8dd 	bl	8009300 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009146:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <xPortStartScheduler+0xf4>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800914c:	f000 f8fc 	bl	8009348 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <xPortStartScheduler+0xf8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a0c      	ldr	r2, [pc, #48]	; (8009188 <xPortStartScheduler+0xf8>)
 8009156:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800915a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800915c:	f7ff ff84 	bl	8009068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009160:	f7ff fa78 	bl	8008654 <vTaskSwitchContext>
	prvTaskExitError();
 8009164:	f7ff ff3c 	bl	8008fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	e000e400 	.word	0xe000e400
 8009178:	200015b8 	.word	0x200015b8
 800917c:	200015bc 	.word	0x200015bc
 8009180:	e000ed20 	.word	0xe000ed20
 8009184:	2000000c 	.word	0x2000000c
 8009188:	e000ef34 	.word	0xe000ef34

0800918c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	b672      	cpsid	i
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	b662      	cpsie	i
 80091a6:	607b      	str	r3, [r7, #4]
}
 80091a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091aa:	4b10      	ldr	r3, [pc, #64]	; (80091ec <vPortEnterCritical+0x60>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	4a0e      	ldr	r2, [pc, #56]	; (80091ec <vPortEnterCritical+0x60>)
 80091b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091b4:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <vPortEnterCritical+0x60>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d111      	bne.n	80091e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091bc:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <vPortEnterCritical+0x64>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00c      	beq.n	80091e0 <vPortEnterCritical+0x54>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	603b      	str	r3, [r7, #0]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <vPortEnterCritical+0x52>
	}
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	2000000c 	.word	0x2000000c
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <vPortExitCritical+0x54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <vPortExitCritical+0x28>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	b672      	cpsid	i
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	b662      	cpsie	i
 8009216:	607b      	str	r3, [r7, #4]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800921c:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <vPortExitCritical+0x54>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3b01      	subs	r3, #1
 8009222:	4a09      	ldr	r2, [pc, #36]	; (8009248 <vPortExitCritical+0x54>)
 8009224:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <vPortExitCritical+0x54>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <vPortExitCritical+0x46>
 800922e:	2300      	movs	r3, #0
 8009230:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	f383 8811 	msr	BASEPRI, r3
}
 8009238:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	2000000c 	.word	0x2000000c
 800924c:	00000000 	.word	0x00000000

08009250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009250:	f3ef 8009 	mrs	r0, PSP
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <pxCurrentTCBConst>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	f01e 0f10 	tst.w	lr, #16
 8009260:	bf08      	it	eq
 8009262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926a:	6010      	str	r0, [r2, #0]
 800926c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009274:	b672      	cpsid	i
 8009276:	f380 8811 	msr	BASEPRI, r0
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	b662      	cpsie	i
 8009284:	f7ff f9e6 	bl	8008654 <vTaskSwitchContext>
 8009288:	f04f 0000 	mov.w	r0, #0
 800928c:	f380 8811 	msr	BASEPRI, r0
 8009290:	bc09      	pop	{r0, r3}
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	f01e 0f10 	tst.w	lr, #16
 800929e:	bf08      	it	eq
 80092a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092a4:	f380 8809 	msr	PSP, r0
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop

080092b0 <pxCurrentTCBConst>:
 80092b0:	2000148c 	.word	0x2000148c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	b672      	cpsid	i
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	b662      	cpsie	i
 80092d2:	607b      	str	r3, [r7, #4]
}
 80092d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092d6:	f7ff f903 	bl	80084e0 <xTaskIncrementTick>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <SysTick_Handler+0x44>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	2300      	movs	r3, #0
 80092ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	f383 8811 	msr	BASEPRI, r3
}
 80092f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <vPortSetupTimerInterrupt+0x34>)
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800930a:	4b0b      	ldr	r3, [pc, #44]	; (8009338 <vPortSetupTimerInterrupt+0x38>)
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <vPortSetupTimerInterrupt+0x3c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <vPortSetupTimerInterrupt+0x40>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	099b      	lsrs	r3, r3, #6
 800931c:	4a09      	ldr	r2, [pc, #36]	; (8009344 <vPortSetupTimerInterrupt+0x44>)
 800931e:	3b01      	subs	r3, #1
 8009320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <vPortSetupTimerInterrupt+0x34>)
 8009324:	2207      	movs	r2, #7
 8009326:	601a      	str	r2, [r3, #0]
}
 8009328:	bf00      	nop
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000e010 	.word	0xe000e010
 8009338:	e000e018 	.word	0xe000e018
 800933c:	20000000 	.word	0x20000000
 8009340:	10624dd3 	.word	0x10624dd3
 8009344:	e000e014 	.word	0xe000e014

08009348 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009348:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009358 <vPortEnableVFP+0x10>
 800934c:	6801      	ldr	r1, [r0, #0]
 800934e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009352:	6001      	str	r1, [r0, #0]
 8009354:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009356:	bf00      	nop
 8009358:	e000ed88 	.word	0xe000ed88

0800935c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009362:	f3ef 8305 	mrs	r3, IPSR
 8009366:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b0f      	cmp	r3, #15
 800936c:	d916      	bls.n	800939c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800936e:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <vPortValidateInterruptPriority+0x78>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <vPortValidateInterruptPriority+0x7c>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	7afa      	ldrb	r2, [r7, #11]
 800937e:	429a      	cmp	r2, r3
 8009380:	d20c      	bcs.n	800939c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	b672      	cpsid	i
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	b662      	cpsie	i
 8009396:	607b      	str	r3, [r7, #4]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <vPortValidateInterruptPriority+0x80>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093a4:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <vPortValidateInterruptPriority+0x84>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d90c      	bls.n	80093c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	b672      	cpsid	i
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	b662      	cpsie	i
 80093c0:	603b      	str	r3, [r7, #0]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <vPortValidateInterruptPriority+0x68>
	}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	e000e3f0 	.word	0xe000e3f0
 80093d8:	200015b8 	.word	0x200015b8
 80093dc:	e000ed0c 	.word	0xe000ed0c
 80093e0:	200015bc 	.word	0x200015bc

080093e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	; 0x28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093f0:	f7fe ffca 	bl	8008388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093f4:	4b5b      	ldr	r3, [pc, #364]	; (8009564 <pvPortMalloc+0x180>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093fc:	f000 f91a 	bl	8009634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009400:	4b59      	ldr	r3, [pc, #356]	; (8009568 <pvPortMalloc+0x184>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	f040 8092 	bne.w	8009532 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01f      	beq.n	8009454 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009414:	2208      	movs	r2, #8
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4413      	add	r3, r2
 800941a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	2b00      	cmp	r3, #0
 8009424:	d016      	beq.n	8009454 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f023 0307 	bic.w	r3, r3, #7
 800942c:	3308      	adds	r3, #8
 800942e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00c      	beq.n	8009454 <pvPortMalloc+0x70>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	b672      	cpsid	i
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	b662      	cpsie	i
 800944e:	617b      	str	r3, [r7, #20]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d06b      	beq.n	8009532 <pvPortMalloc+0x14e>
 800945a:	4b44      	ldr	r3, [pc, #272]	; (800956c <pvPortMalloc+0x188>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	d866      	bhi.n	8009532 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009464:	4b42      	ldr	r3, [pc, #264]	; (8009570 <pvPortMalloc+0x18c>)
 8009466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009468:	4b41      	ldr	r3, [pc, #260]	; (8009570 <pvPortMalloc+0x18c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800946e:	e004      	b.n	800947a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d903      	bls.n	800948c <pvPortMalloc+0xa8>
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1f1      	bne.n	8009470 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800948c:	4b35      	ldr	r3, [pc, #212]	; (8009564 <pvPortMalloc+0x180>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009492:	429a      	cmp	r2, r3
 8009494:	d04d      	beq.n	8009532 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2208      	movs	r2, #8
 800949c:	4413      	add	r3, r2
 800949e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	1ad2      	subs	r2, r2, r3
 80094b0:	2308      	movs	r3, #8
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d921      	bls.n	80094fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00c      	beq.n	80094e4 <pvPortMalloc+0x100>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	b672      	cpsid	i
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	b662      	cpsie	i
 80094de:	613b      	str	r3, [r7, #16]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094f6:	69b8      	ldr	r0, [r7, #24]
 80094f8:	f000 f8fe 	bl	80096f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094fc:	4b1b      	ldr	r3, [pc, #108]	; (800956c <pvPortMalloc+0x188>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	4a19      	ldr	r2, [pc, #100]	; (800956c <pvPortMalloc+0x188>)
 8009508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800950a:	4b18      	ldr	r3, [pc, #96]	; (800956c <pvPortMalloc+0x188>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b19      	ldr	r3, [pc, #100]	; (8009574 <pvPortMalloc+0x190>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d203      	bcs.n	800951e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <pvPortMalloc+0x188>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a16      	ldr	r2, [pc, #88]	; (8009574 <pvPortMalloc+0x190>)
 800951c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	4b11      	ldr	r3, [pc, #68]	; (8009568 <pvPortMalloc+0x184>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	431a      	orrs	r2, r3
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009532:	f7fe ff37 	bl	80083a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00c      	beq.n	800955a <pvPortMalloc+0x176>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	b672      	cpsid	i
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	b662      	cpsie	i
 8009554:	60fb      	str	r3, [r7, #12]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <pvPortMalloc+0x174>
	return pvReturn;
 800955a:	69fb      	ldr	r3, [r7, #28]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3728      	adds	r7, #40	; 0x28
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	200051c8 	.word	0x200051c8
 8009568:	200051d4 	.word	0x200051d4
 800956c:	200051cc 	.word	0x200051cc
 8009570:	200051c0 	.word	0x200051c0
 8009574:	200051d0 	.word	0x200051d0

08009578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d04c      	beq.n	8009624 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800958a:	2308      	movs	r3, #8
 800958c:	425b      	negs	r3, r3
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	4b23      	ldr	r3, [pc, #140]	; (800962c <vPortFree+0xb4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10c      	bne.n	80095c0 <vPortFree+0x48>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	b672      	cpsid	i
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	b662      	cpsie	i
 80095ba:	60fb      	str	r3, [r7, #12]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00c      	beq.n	80095e2 <vPortFree+0x6a>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	b672      	cpsid	i
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	b662      	cpsie	i
 80095dc:	60bb      	str	r3, [r7, #8]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <vPortFree+0xb4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d019      	beq.n	8009624 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d115      	bne.n	8009624 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <vPortFree+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	43db      	mvns	r3, r3
 8009602:	401a      	ands	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009608:	f7fe febe 	bl	8008388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <vPortFree+0xb8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4413      	add	r3, r2
 8009616:	4a06      	ldr	r2, [pc, #24]	; (8009630 <vPortFree+0xb8>)
 8009618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f000 f86c 	bl	80096f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009620:	f7fe fec0 	bl	80083a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	200051d4 	.word	0x200051d4
 8009630:	200051cc 	.word	0x200051cc

08009634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800963a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800963e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <prvHeapInit+0xac>)
 8009642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00c      	beq.n	8009668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1f      	ldr	r2, [pc, #124]	; (80096e0 <prvHeapInit+0xac>)
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800966c:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <prvHeapInit+0xb0>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <prvHeapInit+0xb0>)
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	4413      	add	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009680:	2208      	movs	r2, #8
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <prvHeapInit+0xb4>)
 8009694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <prvHeapInit+0xb4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <prvHeapInit+0xb4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <prvHeapInit+0xb4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <prvHeapInit+0xb8>)
 80096c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a09      	ldr	r2, [pc, #36]	; (80096f0 <prvHeapInit+0xbc>)
 80096ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvHeapInit+0xc0>)
 80096ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096d2:	601a      	str	r2, [r3, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	200015c0 	.word	0x200015c0
 80096e4:	200051c0 	.word	0x200051c0
 80096e8:	200051c8 	.word	0x200051c8
 80096ec:	200051d0 	.word	0x200051d0
 80096f0:	200051cc 	.word	0x200051cc
 80096f4:	200051d4 	.word	0x200051d4

080096f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <prvInsertBlockIntoFreeList+0xac>)
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e002      	b.n	800970c <prvInsertBlockIntoFreeList+0x14>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d8f7      	bhi.n	8009706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d108      	bne.n	800973a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d118      	bne.n	8009780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d00d      	beq.n	8009776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	441a      	add	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e008      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e003      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d002      	beq.n	8009796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	200051c0 	.word	0x200051c0
 80097a8:	200051c8 	.word	0x200051c8

080097ac <atoi>:
 80097ac:	220a      	movs	r2, #10
 80097ae:	2100      	movs	r1, #0
 80097b0:	f000 b884 	b.w	80098bc <strtol>

080097b4 <_strtol_l.constprop.0>:
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ba:	d001      	beq.n	80097c0 <_strtol_l.constprop.0+0xc>
 80097bc:	2b24      	cmp	r3, #36	; 0x24
 80097be:	d906      	bls.n	80097ce <_strtol_l.constprop.0+0x1a>
 80097c0:	f000 faea 	bl	8009d98 <__errno>
 80097c4:	2316      	movs	r3, #22
 80097c6:	6003      	str	r3, [r0, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098b4 <_strtol_l.constprop.0+0x100>
 80097d2:	460d      	mov	r5, r1
 80097d4:	462e      	mov	r6, r5
 80097d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80097de:	f017 0708 	ands.w	r7, r7, #8
 80097e2:	d1f7      	bne.n	80097d4 <_strtol_l.constprop.0+0x20>
 80097e4:	2c2d      	cmp	r4, #45	; 0x2d
 80097e6:	d132      	bne.n	800984e <_strtol_l.constprop.0+0x9a>
 80097e8:	782c      	ldrb	r4, [r5, #0]
 80097ea:	2701      	movs	r7, #1
 80097ec:	1cb5      	adds	r5, r6, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d05b      	beq.n	80098aa <_strtol_l.constprop.0+0xf6>
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d109      	bne.n	800980a <_strtol_l.constprop.0+0x56>
 80097f6:	2c30      	cmp	r4, #48	; 0x30
 80097f8:	d107      	bne.n	800980a <_strtol_l.constprop.0+0x56>
 80097fa:	782c      	ldrb	r4, [r5, #0]
 80097fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009800:	2c58      	cmp	r4, #88	; 0x58
 8009802:	d14d      	bne.n	80098a0 <_strtol_l.constprop.0+0xec>
 8009804:	786c      	ldrb	r4, [r5, #1]
 8009806:	2310      	movs	r3, #16
 8009808:	3502      	adds	r5, #2
 800980a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800980e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009812:	f04f 0e00 	mov.w	lr, #0
 8009816:	fbb8 f9f3 	udiv	r9, r8, r3
 800981a:	4676      	mov	r6, lr
 800981c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009820:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009824:	f1bc 0f09 	cmp.w	ip, #9
 8009828:	d816      	bhi.n	8009858 <_strtol_l.constprop.0+0xa4>
 800982a:	4664      	mov	r4, ip
 800982c:	42a3      	cmp	r3, r4
 800982e:	dd24      	ble.n	800987a <_strtol_l.constprop.0+0xc6>
 8009830:	f1be 3fff 	cmp.w	lr, #4294967295
 8009834:	d008      	beq.n	8009848 <_strtol_l.constprop.0+0x94>
 8009836:	45b1      	cmp	r9, r6
 8009838:	d31c      	bcc.n	8009874 <_strtol_l.constprop.0+0xc0>
 800983a:	d101      	bne.n	8009840 <_strtol_l.constprop.0+0x8c>
 800983c:	45a2      	cmp	sl, r4
 800983e:	db19      	blt.n	8009874 <_strtol_l.constprop.0+0xc0>
 8009840:	fb06 4603 	mla	r6, r6, r3, r4
 8009844:	f04f 0e01 	mov.w	lr, #1
 8009848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984c:	e7e8      	b.n	8009820 <_strtol_l.constprop.0+0x6c>
 800984e:	2c2b      	cmp	r4, #43	; 0x2b
 8009850:	bf04      	itt	eq
 8009852:	782c      	ldrbeq	r4, [r5, #0]
 8009854:	1cb5      	addeq	r5, r6, #2
 8009856:	e7ca      	b.n	80097ee <_strtol_l.constprop.0+0x3a>
 8009858:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800985c:	f1bc 0f19 	cmp.w	ip, #25
 8009860:	d801      	bhi.n	8009866 <_strtol_l.constprop.0+0xb2>
 8009862:	3c37      	subs	r4, #55	; 0x37
 8009864:	e7e2      	b.n	800982c <_strtol_l.constprop.0+0x78>
 8009866:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800986a:	f1bc 0f19 	cmp.w	ip, #25
 800986e:	d804      	bhi.n	800987a <_strtol_l.constprop.0+0xc6>
 8009870:	3c57      	subs	r4, #87	; 0x57
 8009872:	e7db      	b.n	800982c <_strtol_l.constprop.0+0x78>
 8009874:	f04f 3eff 	mov.w	lr, #4294967295
 8009878:	e7e6      	b.n	8009848 <_strtol_l.constprop.0+0x94>
 800987a:	f1be 3fff 	cmp.w	lr, #4294967295
 800987e:	d105      	bne.n	800988c <_strtol_l.constprop.0+0xd8>
 8009880:	2322      	movs	r3, #34	; 0x22
 8009882:	6003      	str	r3, [r0, #0]
 8009884:	4646      	mov	r6, r8
 8009886:	b942      	cbnz	r2, 800989a <_strtol_l.constprop.0+0xe6>
 8009888:	4630      	mov	r0, r6
 800988a:	e79e      	b.n	80097ca <_strtol_l.constprop.0+0x16>
 800988c:	b107      	cbz	r7, 8009890 <_strtol_l.constprop.0+0xdc>
 800988e:	4276      	negs	r6, r6
 8009890:	2a00      	cmp	r2, #0
 8009892:	d0f9      	beq.n	8009888 <_strtol_l.constprop.0+0xd4>
 8009894:	f1be 0f00 	cmp.w	lr, #0
 8009898:	d000      	beq.n	800989c <_strtol_l.constprop.0+0xe8>
 800989a:	1e69      	subs	r1, r5, #1
 800989c:	6011      	str	r1, [r2, #0]
 800989e:	e7f3      	b.n	8009888 <_strtol_l.constprop.0+0xd4>
 80098a0:	2430      	movs	r4, #48	; 0x30
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1b1      	bne.n	800980a <_strtol_l.constprop.0+0x56>
 80098a6:	2308      	movs	r3, #8
 80098a8:	e7af      	b.n	800980a <_strtol_l.constprop.0+0x56>
 80098aa:	2c30      	cmp	r4, #48	; 0x30
 80098ac:	d0a5      	beq.n	80097fa <_strtol_l.constprop.0+0x46>
 80098ae:	230a      	movs	r3, #10
 80098b0:	e7ab      	b.n	800980a <_strtol_l.constprop.0+0x56>
 80098b2:	bf00      	nop
 80098b4:	0800ba55 	.word	0x0800ba55

080098b8 <_strtol_r>:
 80098b8:	f7ff bf7c 	b.w	80097b4 <_strtol_l.constprop.0>

080098bc <strtol>:
 80098bc:	4613      	mov	r3, r2
 80098be:	460a      	mov	r2, r1
 80098c0:	4601      	mov	r1, r0
 80098c2:	4802      	ldr	r0, [pc, #8]	; (80098cc <strtol+0x10>)
 80098c4:	6800      	ldr	r0, [r0, #0]
 80098c6:	f7ff bf75 	b.w	80097b4 <_strtol_l.constprop.0>
 80098ca:	bf00      	nop
 80098cc:	20000068 	.word	0x20000068

080098d0 <std>:
 80098d0:	2300      	movs	r3, #0
 80098d2:	b510      	push	{r4, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	e9c0 3300 	strd	r3, r3, [r0]
 80098da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098de:	6083      	str	r3, [r0, #8]
 80098e0:	8181      	strh	r1, [r0, #12]
 80098e2:	6643      	str	r3, [r0, #100]	; 0x64
 80098e4:	81c2      	strh	r2, [r0, #14]
 80098e6:	6183      	str	r3, [r0, #24]
 80098e8:	4619      	mov	r1, r3
 80098ea:	2208      	movs	r2, #8
 80098ec:	305c      	adds	r0, #92	; 0x5c
 80098ee:	f000 f930 	bl	8009b52 <memset>
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <std+0x38>)
 80098f4:	6263      	str	r3, [r4, #36]	; 0x24
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <std+0x3c>)
 80098f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <std+0x40>)
 80098fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <std+0x44>)
 8009900:	6224      	str	r4, [r4, #32]
 8009902:	6323      	str	r3, [r4, #48]	; 0x30
 8009904:	bd10      	pop	{r4, pc}
 8009906:	bf00      	nop
 8009908:	08009ac9 	.word	0x08009ac9
 800990c:	08009aef 	.word	0x08009aef
 8009910:	08009b27 	.word	0x08009b27
 8009914:	08009b4b 	.word	0x08009b4b

08009918 <stdio_exit_handler>:
 8009918:	4a02      	ldr	r2, [pc, #8]	; (8009924 <stdio_exit_handler+0xc>)
 800991a:	4903      	ldr	r1, [pc, #12]	; (8009928 <stdio_exit_handler+0x10>)
 800991c:	4803      	ldr	r0, [pc, #12]	; (800992c <stdio_exit_handler+0x14>)
 800991e:	f000 b869 	b.w	80099f4 <_fwalk_sglue>
 8009922:	bf00      	nop
 8009924:	20000010 	.word	0x20000010
 8009928:	0800ad75 	.word	0x0800ad75
 800992c:	2000001c 	.word	0x2000001c

08009930 <cleanup_stdio>:
 8009930:	6841      	ldr	r1, [r0, #4]
 8009932:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <cleanup_stdio+0x34>)
 8009934:	4299      	cmp	r1, r3
 8009936:	b510      	push	{r4, lr}
 8009938:	4604      	mov	r4, r0
 800993a:	d001      	beq.n	8009940 <cleanup_stdio+0x10>
 800993c:	f001 fa1a 	bl	800ad74 <_fflush_r>
 8009940:	68a1      	ldr	r1, [r4, #8]
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <cleanup_stdio+0x38>)
 8009944:	4299      	cmp	r1, r3
 8009946:	d002      	beq.n	800994e <cleanup_stdio+0x1e>
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fa13 	bl	800ad74 <_fflush_r>
 800994e:	68e1      	ldr	r1, [r4, #12]
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <cleanup_stdio+0x3c>)
 8009952:	4299      	cmp	r1, r3
 8009954:	d004      	beq.n	8009960 <cleanup_stdio+0x30>
 8009956:	4620      	mov	r0, r4
 8009958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800995c:	f001 ba0a 	b.w	800ad74 <_fflush_r>
 8009960:	bd10      	pop	{r4, pc}
 8009962:	bf00      	nop
 8009964:	200051d8 	.word	0x200051d8
 8009968:	20005240 	.word	0x20005240
 800996c:	200052a8 	.word	0x200052a8

08009970 <global_stdio_init.part.0>:
 8009970:	b510      	push	{r4, lr}
 8009972:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <global_stdio_init.part.0+0x30>)
 8009974:	4c0b      	ldr	r4, [pc, #44]	; (80099a4 <global_stdio_init.part.0+0x34>)
 8009976:	4a0c      	ldr	r2, [pc, #48]	; (80099a8 <global_stdio_init.part.0+0x38>)
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	4620      	mov	r0, r4
 800997c:	2200      	movs	r2, #0
 800997e:	2104      	movs	r1, #4
 8009980:	f7ff ffa6 	bl	80098d0 <std>
 8009984:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009988:	2201      	movs	r2, #1
 800998a:	2109      	movs	r1, #9
 800998c:	f7ff ffa0 	bl	80098d0 <std>
 8009990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009994:	2202      	movs	r2, #2
 8009996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999a:	2112      	movs	r1, #18
 800999c:	f7ff bf98 	b.w	80098d0 <std>
 80099a0:	20005310 	.word	0x20005310
 80099a4:	200051d8 	.word	0x200051d8
 80099a8:	08009919 	.word	0x08009919

080099ac <__sfp_lock_acquire>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sfp_lock_acquire+0x8>)
 80099ae:	f000 ba1d 	b.w	8009dec <__retarget_lock_acquire_recursive>
 80099b2:	bf00      	nop
 80099b4:	20005319 	.word	0x20005319

080099b8 <__sfp_lock_release>:
 80099b8:	4801      	ldr	r0, [pc, #4]	; (80099c0 <__sfp_lock_release+0x8>)
 80099ba:	f000 ba18 	b.w	8009dee <__retarget_lock_release_recursive>
 80099be:	bf00      	nop
 80099c0:	20005319 	.word	0x20005319

080099c4 <__sinit>:
 80099c4:	b510      	push	{r4, lr}
 80099c6:	4604      	mov	r4, r0
 80099c8:	f7ff fff0 	bl	80099ac <__sfp_lock_acquire>
 80099cc:	6a23      	ldr	r3, [r4, #32]
 80099ce:	b11b      	cbz	r3, 80099d8 <__sinit+0x14>
 80099d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d4:	f7ff bff0 	b.w	80099b8 <__sfp_lock_release>
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <__sinit+0x28>)
 80099da:	6223      	str	r3, [r4, #32]
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <__sinit+0x2c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1f5      	bne.n	80099d0 <__sinit+0xc>
 80099e4:	f7ff ffc4 	bl	8009970 <global_stdio_init.part.0>
 80099e8:	e7f2      	b.n	80099d0 <__sinit+0xc>
 80099ea:	bf00      	nop
 80099ec:	08009931 	.word	0x08009931
 80099f0:	20005310 	.word	0x20005310

080099f4 <_fwalk_sglue>:
 80099f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	4607      	mov	r7, r0
 80099fa:	4688      	mov	r8, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	2600      	movs	r6, #0
 8009a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a04:	f1b9 0901 	subs.w	r9, r9, #1
 8009a08:	d505      	bpl.n	8009a16 <_fwalk_sglue+0x22>
 8009a0a:	6824      	ldr	r4, [r4, #0]
 8009a0c:	2c00      	cmp	r4, #0
 8009a0e:	d1f7      	bne.n	8009a00 <_fwalk_sglue+0xc>
 8009a10:	4630      	mov	r0, r6
 8009a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d907      	bls.n	8009a2c <_fwalk_sglue+0x38>
 8009a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a20:	3301      	adds	r3, #1
 8009a22:	d003      	beq.n	8009a2c <_fwalk_sglue+0x38>
 8009a24:	4629      	mov	r1, r5
 8009a26:	4638      	mov	r0, r7
 8009a28:	47c0      	blx	r8
 8009a2a:	4306      	orrs	r6, r0
 8009a2c:	3568      	adds	r5, #104	; 0x68
 8009a2e:	e7e9      	b.n	8009a04 <_fwalk_sglue+0x10>

08009a30 <siprintf>:
 8009a30:	b40e      	push	{r1, r2, r3}
 8009a32:	b500      	push	{lr}
 8009a34:	b09c      	sub	sp, #112	; 0x70
 8009a36:	ab1d      	add	r3, sp, #116	; 0x74
 8009a38:	9002      	str	r0, [sp, #8]
 8009a3a:	9006      	str	r0, [sp, #24]
 8009a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a40:	4809      	ldr	r0, [pc, #36]	; (8009a68 <siprintf+0x38>)
 8009a42:	9107      	str	r1, [sp, #28]
 8009a44:	9104      	str	r1, [sp, #16]
 8009a46:	4909      	ldr	r1, [pc, #36]	; (8009a6c <siprintf+0x3c>)
 8009a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4c:	9105      	str	r1, [sp, #20]
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	a902      	add	r1, sp, #8
 8009a54:	f000 fb5a 	bl	800a10c <_svfiprintf_r>
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	b01c      	add	sp, #112	; 0x70
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	20000068 	.word	0x20000068
 8009a6c:	ffff0208 	.word	0xffff0208

08009a70 <siscanf>:
 8009a70:	b40e      	push	{r1, r2, r3}
 8009a72:	b510      	push	{r4, lr}
 8009a74:	b09f      	sub	sp, #124	; 0x7c
 8009a76:	ac21      	add	r4, sp, #132	; 0x84
 8009a78:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009a7c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009a80:	9201      	str	r2, [sp, #4]
 8009a82:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009a86:	9004      	str	r0, [sp, #16]
 8009a88:	9008      	str	r0, [sp, #32]
 8009a8a:	f7f6 fbd9 	bl	8000240 <strlen>
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <siscanf+0x50>)
 8009a90:	9005      	str	r0, [sp, #20]
 8009a92:	9009      	str	r0, [sp, #36]	; 0x24
 8009a94:	930d      	str	r3, [sp, #52]	; 0x34
 8009a96:	480b      	ldr	r0, [pc, #44]	; (8009ac4 <siscanf+0x54>)
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	9403      	str	r4, [sp, #12]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9311      	str	r3, [sp, #68]	; 0x44
 8009aa2:	9316      	str	r3, [sp, #88]	; 0x58
 8009aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aa8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4623      	mov	r3, r4
 8009ab0:	f000 fc84 	bl	800a3bc <__ssvfiscanf_r>
 8009ab4:	b01f      	add	sp, #124	; 0x7c
 8009ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aba:	b003      	add	sp, #12
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	08009aeb 	.word	0x08009aeb
 8009ac4:	20000068 	.word	0x20000068

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f000 f93e 	bl	8009d50 <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bfab      	itete	ge
 8009ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ada:	89a3      	ldrhlt	r3, [r4, #12]
 8009adc:	181b      	addge	r3, r3, r0
 8009ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ae2:	bfac      	ite	ge
 8009ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ae6:	81a3      	strhlt	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__seofread>:
 8009aea:	2000      	movs	r0, #0
 8009aec:	4770      	bx	lr

08009aee <__swrite>:
 8009aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af2:	461f      	mov	r7, r3
 8009af4:	898b      	ldrh	r3, [r1, #12]
 8009af6:	05db      	lsls	r3, r3, #23
 8009af8:	4605      	mov	r5, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	4616      	mov	r6, r2
 8009afe:	d505      	bpl.n	8009b0c <__swrite+0x1e>
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	2302      	movs	r3, #2
 8009b06:	2200      	movs	r2, #0
 8009b08:	f000 f910 	bl	8009d2c <_lseek_r>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b16:	81a3      	strh	r3, [r4, #12]
 8009b18:	4632      	mov	r2, r6
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b22:	f000 b927 	b.w	8009d74 <_write_r>

08009b26 <__sseek>:
 8009b26:	b510      	push	{r4, lr}
 8009b28:	460c      	mov	r4, r1
 8009b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2e:	f000 f8fd 	bl	8009d2c <_lseek_r>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	bf15      	itete	ne
 8009b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b42:	81a3      	strheq	r3, [r4, #12]
 8009b44:	bf18      	it	ne
 8009b46:	81a3      	strhne	r3, [r4, #12]
 8009b48:	bd10      	pop	{r4, pc}

08009b4a <__sclose>:
 8009b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4e:	f000 b887 	b.w	8009c60 <_close_r>

08009b52 <memset>:
 8009b52:	4402      	add	r2, r0
 8009b54:	4603      	mov	r3, r0
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d100      	bne.n	8009b5c <memset+0xa>
 8009b5a:	4770      	bx	lr
 8009b5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b60:	e7f9      	b.n	8009b56 <memset+0x4>

08009b62 <strchr>:
 8009b62:	b2c9      	uxtb	r1, r1
 8009b64:	4603      	mov	r3, r0
 8009b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b6a:	b11a      	cbz	r2, 8009b74 <strchr+0x12>
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d1f9      	bne.n	8009b64 <strchr+0x2>
 8009b70:	4618      	mov	r0, r3
 8009b72:	4770      	bx	lr
 8009b74:	2900      	cmp	r1, #0
 8009b76:	bf18      	it	ne
 8009b78:	2300      	movne	r3, #0
 8009b7a:	e7f9      	b.n	8009b70 <strchr+0xe>

08009b7c <strtok>:
 8009b7c:	4b16      	ldr	r3, [pc, #88]	; (8009bd8 <strtok+0x5c>)
 8009b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b80:	681e      	ldr	r6, [r3, #0]
 8009b82:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009b84:	4605      	mov	r5, r0
 8009b86:	b9fc      	cbnz	r4, 8009bc8 <strtok+0x4c>
 8009b88:	2050      	movs	r0, #80	; 0x50
 8009b8a:	9101      	str	r1, [sp, #4]
 8009b8c:	f000 f9b0 	bl	8009ef0 <malloc>
 8009b90:	9901      	ldr	r1, [sp, #4]
 8009b92:	6470      	str	r0, [r6, #68]	; 0x44
 8009b94:	4602      	mov	r2, r0
 8009b96:	b920      	cbnz	r0, 8009ba2 <strtok+0x26>
 8009b98:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <strtok+0x60>)
 8009b9a:	4811      	ldr	r0, [pc, #68]	; (8009be0 <strtok+0x64>)
 8009b9c:	215b      	movs	r1, #91	; 0x5b
 8009b9e:	f000 f93d 	bl	8009e1c <__assert_func>
 8009ba2:	e9c0 4400 	strd	r4, r4, [r0]
 8009ba6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009baa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009bae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009bb2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009bb6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009bba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009bbe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009bc2:	6184      	str	r4, [r0, #24]
 8009bc4:	7704      	strb	r4, [r0, #28]
 8009bc6:	6244      	str	r4, [r0, #36]	; 0x24
 8009bc8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4628      	mov	r0, r5
 8009bce:	b002      	add	sp, #8
 8009bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bd4:	f000 b806 	b.w	8009be4 <__strtok_r>
 8009bd8:	20000068 	.word	0x20000068
 8009bdc:	0800bb55 	.word	0x0800bb55
 8009be0:	0800bb6c 	.word	0x0800bb6c

08009be4 <__strtok_r>:
 8009be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be6:	b908      	cbnz	r0, 8009bec <__strtok_r+0x8>
 8009be8:	6810      	ldr	r0, [r2, #0]
 8009bea:	b188      	cbz	r0, 8009c10 <__strtok_r+0x2c>
 8009bec:	4604      	mov	r4, r0
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009bfa:	b91e      	cbnz	r6, 8009c04 <__strtok_r+0x20>
 8009bfc:	b965      	cbnz	r5, 8009c18 <__strtok_r+0x34>
 8009bfe:	6015      	str	r5, [r2, #0]
 8009c00:	4628      	mov	r0, r5
 8009c02:	e005      	b.n	8009c10 <__strtok_r+0x2c>
 8009c04:	42b5      	cmp	r5, r6
 8009c06:	d1f6      	bne.n	8009bf6 <__strtok_r+0x12>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1f0      	bne.n	8009bee <__strtok_r+0xa>
 8009c0c:	6014      	str	r4, [r2, #0]
 8009c0e:	7003      	strb	r3, [r0, #0]
 8009c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c12:	461c      	mov	r4, r3
 8009c14:	e00c      	b.n	8009c30 <__strtok_r+0x4c>
 8009c16:	b915      	cbnz	r5, 8009c1e <__strtok_r+0x3a>
 8009c18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c22:	42ab      	cmp	r3, r5
 8009c24:	d1f7      	bne.n	8009c16 <__strtok_r+0x32>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f3      	beq.n	8009c12 <__strtok_r+0x2e>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c30:	6014      	str	r4, [r2, #0]
 8009c32:	e7ed      	b.n	8009c10 <__strtok_r+0x2c>

08009c34 <strstr>:
 8009c34:	780a      	ldrb	r2, [r1, #0]
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	b96a      	cbnz	r2, 8009c56 <strstr+0x22>
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d109      	bne.n	8009c54 <strstr+0x20>
 8009c40:	460c      	mov	r4, r1
 8009c42:	4605      	mov	r5, r0
 8009c44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0f6      	beq.n	8009c3a <strstr+0x6>
 8009c4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c50:	429e      	cmp	r6, r3
 8009c52:	d0f7      	beq.n	8009c44 <strstr+0x10>
 8009c54:	3001      	adds	r0, #1
 8009c56:	7803      	ldrb	r3, [r0, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1ef      	bne.n	8009c3c <strstr+0x8>
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	e7ec      	b.n	8009c3a <strstr+0x6>

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_close_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f8 fc85 	bl	800257a <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20005314 	.word	0x20005314

08009c80 <_reclaim_reent>:
 8009c80:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <_reclaim_reent+0xa8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4283      	cmp	r3, r0
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	d04b      	beq.n	8009d24 <_reclaim_reent+0xa4>
 8009c8c:	69c3      	ldr	r3, [r0, #28]
 8009c8e:	b143      	cbz	r3, 8009ca2 <_reclaim_reent+0x22>
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d144      	bne.n	8009d20 <_reclaim_reent+0xa0>
 8009c96:	69e3      	ldr	r3, [r4, #28]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	b111      	cbz	r1, 8009ca2 <_reclaim_reent+0x22>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 f8db 	bl	8009e58 <_free_r>
 8009ca2:	6961      	ldr	r1, [r4, #20]
 8009ca4:	b111      	cbz	r1, 8009cac <_reclaim_reent+0x2c>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f8d6 	bl	8009e58 <_free_r>
 8009cac:	69e1      	ldr	r1, [r4, #28]
 8009cae:	b111      	cbz	r1, 8009cb6 <_reclaim_reent+0x36>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 f8d1 	bl	8009e58 <_free_r>
 8009cb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009cb8:	b111      	cbz	r1, 8009cc0 <_reclaim_reent+0x40>
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 f8cc 	bl	8009e58 <_free_r>
 8009cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc2:	b111      	cbz	r1, 8009cca <_reclaim_reent+0x4a>
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 f8c7 	bl	8009e58 <_free_r>
 8009cca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ccc:	b111      	cbz	r1, 8009cd4 <_reclaim_reent+0x54>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 f8c2 	bl	8009e58 <_free_r>
 8009cd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009cd6:	b111      	cbz	r1, 8009cde <_reclaim_reent+0x5e>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 f8bd 	bl	8009e58 <_free_r>
 8009cde:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ce0:	b111      	cbz	r1, 8009ce8 <_reclaim_reent+0x68>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f8b8 	bl	8009e58 <_free_r>
 8009ce8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009cea:	b111      	cbz	r1, 8009cf2 <_reclaim_reent+0x72>
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 f8b3 	bl	8009e58 <_free_r>
 8009cf2:	6a23      	ldr	r3, [r4, #32]
 8009cf4:	b1b3      	cbz	r3, 8009d24 <_reclaim_reent+0xa4>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cfc:	4718      	bx	r3
 8009cfe:	5949      	ldr	r1, [r1, r5]
 8009d00:	b941      	cbnz	r1, 8009d14 <_reclaim_reent+0x94>
 8009d02:	3504      	adds	r5, #4
 8009d04:	69e3      	ldr	r3, [r4, #28]
 8009d06:	2d80      	cmp	r5, #128	; 0x80
 8009d08:	68d9      	ldr	r1, [r3, #12]
 8009d0a:	d1f8      	bne.n	8009cfe <_reclaim_reent+0x7e>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 f8a3 	bl	8009e58 <_free_r>
 8009d12:	e7c0      	b.n	8009c96 <_reclaim_reent+0x16>
 8009d14:	680e      	ldr	r6, [r1, #0]
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f89e 	bl	8009e58 <_free_r>
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	e7ef      	b.n	8009d00 <_reclaim_reent+0x80>
 8009d20:	2500      	movs	r5, #0
 8009d22:	e7ef      	b.n	8009d04 <_reclaim_reent+0x84>
 8009d24:	bd70      	pop	{r4, r5, r6, pc}
 8009d26:	bf00      	nop
 8009d28:	20000068 	.word	0x20000068

08009d2c <_lseek_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_lseek_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f8 fc44 	bl	80025c8 <_lseek>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_lseek_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_lseek_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20005314 	.word	0x20005314

08009d50 <_read_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	; (8009d70 <_read_r+0x20>)
 8009d54:	4604      	mov	r4, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f8 fbd2 	bl	8002508 <_read>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_read_r+0x1e>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_read_r+0x1e>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20005314 	.word	0x20005314

08009d74 <_write_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d07      	ldr	r5, [pc, #28]	; (8009d94 <_write_r+0x20>)
 8009d78:	4604      	mov	r4, r0
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	2200      	movs	r2, #0
 8009d80:	602a      	str	r2, [r5, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	f7f8 fbdd 	bl	8002542 <_write>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_write_r+0x1e>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_write_r+0x1e>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	20005314 	.word	0x20005314

08009d98 <__errno>:
 8009d98:	4b01      	ldr	r3, [pc, #4]	; (8009da0 <__errno+0x8>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20000068 	.word	0x20000068

08009da4 <__libc_init_array>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4d0d      	ldr	r5, [pc, #52]	; (8009ddc <__libc_init_array+0x38>)
 8009da8:	4c0d      	ldr	r4, [pc, #52]	; (8009de0 <__libc_init_array+0x3c>)
 8009daa:	1b64      	subs	r4, r4, r5
 8009dac:	10a4      	asrs	r4, r4, #2
 8009dae:	2600      	movs	r6, #0
 8009db0:	42a6      	cmp	r6, r4
 8009db2:	d109      	bne.n	8009dc8 <__libc_init_array+0x24>
 8009db4:	4d0b      	ldr	r5, [pc, #44]	; (8009de4 <__libc_init_array+0x40>)
 8009db6:	4c0c      	ldr	r4, [pc, #48]	; (8009de8 <__libc_init_array+0x44>)
 8009db8:	f001 fc08 	bl	800b5cc <_init>
 8009dbc:	1b64      	subs	r4, r4, r5
 8009dbe:	10a4      	asrs	r4, r4, #2
 8009dc0:	2600      	movs	r6, #0
 8009dc2:	42a6      	cmp	r6, r4
 8009dc4:	d105      	bne.n	8009dd2 <__libc_init_array+0x2e>
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dcc:	4798      	blx	r3
 8009dce:	3601      	adds	r6, #1
 8009dd0:	e7ee      	b.n	8009db0 <__libc_init_array+0xc>
 8009dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd6:	4798      	blx	r3
 8009dd8:	3601      	adds	r6, #1
 8009dda:	e7f2      	b.n	8009dc2 <__libc_init_array+0x1e>
 8009ddc:	0800bc58 	.word	0x0800bc58
 8009de0:	0800bc58 	.word	0x0800bc58
 8009de4:	0800bc58 	.word	0x0800bc58
 8009de8:	0800bc5c 	.word	0x0800bc5c

08009dec <__retarget_lock_acquire_recursive>:
 8009dec:	4770      	bx	lr

08009dee <__retarget_lock_release_recursive>:
 8009dee:	4770      	bx	lr

08009df0 <strcpy>:
 8009df0:	4603      	mov	r3, r0
 8009df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009df6:	f803 2b01 	strb.w	r2, [r3], #1
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d1f9      	bne.n	8009df2 <strcpy+0x2>
 8009dfe:	4770      	bx	lr

08009e00 <memcpy>:
 8009e00:	440a      	add	r2, r1
 8009e02:	4291      	cmp	r1, r2
 8009e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e08:	d100      	bne.n	8009e0c <memcpy+0xc>
 8009e0a:	4770      	bx	lr
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e16:	4291      	cmp	r1, r2
 8009e18:	d1f9      	bne.n	8009e0e <memcpy+0xe>
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <__assert_func>:
 8009e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e1e:	4614      	mov	r4, r2
 8009e20:	461a      	mov	r2, r3
 8009e22:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <__assert_func+0x2c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4605      	mov	r5, r0
 8009e28:	68d8      	ldr	r0, [r3, #12]
 8009e2a:	b14c      	cbz	r4, 8009e40 <__assert_func+0x24>
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <__assert_func+0x30>)
 8009e2e:	9100      	str	r1, [sp, #0]
 8009e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e34:	4906      	ldr	r1, [pc, #24]	; (8009e50 <__assert_func+0x34>)
 8009e36:	462b      	mov	r3, r5
 8009e38:	f000 ffc4 	bl	800adc4 <fiprintf>
 8009e3c:	f001 f872 	bl	800af24 <abort>
 8009e40:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <__assert_func+0x38>)
 8009e42:	461c      	mov	r4, r3
 8009e44:	e7f3      	b.n	8009e2e <__assert_func+0x12>
 8009e46:	bf00      	nop
 8009e48:	20000068 	.word	0x20000068
 8009e4c:	0800bbc6 	.word	0x0800bbc6
 8009e50:	0800bbd3 	.word	0x0800bbd3
 8009e54:	0800bc01 	.word	0x0800bc01

08009e58 <_free_r>:
 8009e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e5a:	2900      	cmp	r1, #0
 8009e5c:	d044      	beq.n	8009ee8 <_free_r+0x90>
 8009e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e62:	9001      	str	r0, [sp, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f1a1 0404 	sub.w	r4, r1, #4
 8009e6a:	bfb8      	it	lt
 8009e6c:	18e4      	addlt	r4, r4, r3
 8009e6e:	f000 f8e7 	bl	800a040 <__malloc_lock>
 8009e72:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <_free_r+0x94>)
 8009e74:	9801      	ldr	r0, [sp, #4]
 8009e76:	6813      	ldr	r3, [r2, #0]
 8009e78:	b933      	cbnz	r3, 8009e88 <_free_r+0x30>
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	6014      	str	r4, [r2, #0]
 8009e7e:	b003      	add	sp, #12
 8009e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e84:	f000 b8e2 	b.w	800a04c <__malloc_unlock>
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d908      	bls.n	8009e9e <_free_r+0x46>
 8009e8c:	6825      	ldr	r5, [r4, #0]
 8009e8e:	1961      	adds	r1, r4, r5
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf01      	itttt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	1949      	addeq	r1, r1, r5
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	e7ed      	b.n	8009e7a <_free_r+0x22>
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	b10b      	cbz	r3, 8009ea8 <_free_r+0x50>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d9fa      	bls.n	8009e9e <_free_r+0x46>
 8009ea8:	6811      	ldr	r1, [r2, #0]
 8009eaa:	1855      	adds	r5, r2, r1
 8009eac:	42a5      	cmp	r5, r4
 8009eae:	d10b      	bne.n	8009ec8 <_free_r+0x70>
 8009eb0:	6824      	ldr	r4, [r4, #0]
 8009eb2:	4421      	add	r1, r4
 8009eb4:	1854      	adds	r4, r2, r1
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	6011      	str	r1, [r2, #0]
 8009eba:	d1e0      	bne.n	8009e7e <_free_r+0x26>
 8009ebc:	681c      	ldr	r4, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	6053      	str	r3, [r2, #4]
 8009ec2:	440c      	add	r4, r1
 8009ec4:	6014      	str	r4, [r2, #0]
 8009ec6:	e7da      	b.n	8009e7e <_free_r+0x26>
 8009ec8:	d902      	bls.n	8009ed0 <_free_r+0x78>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	e7d6      	b.n	8009e7e <_free_r+0x26>
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	1961      	adds	r1, r4, r5
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	bf04      	itt	eq
 8009ed8:	6819      	ldreq	r1, [r3, #0]
 8009eda:	685b      	ldreq	r3, [r3, #4]
 8009edc:	6063      	str	r3, [r4, #4]
 8009ede:	bf04      	itt	eq
 8009ee0:	1949      	addeq	r1, r1, r5
 8009ee2:	6021      	streq	r1, [r4, #0]
 8009ee4:	6054      	str	r4, [r2, #4]
 8009ee6:	e7ca      	b.n	8009e7e <_free_r+0x26>
 8009ee8:	b003      	add	sp, #12
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	2000531c 	.word	0x2000531c

08009ef0 <malloc>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <malloc+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f000 b823 	b.w	8009f40 <_malloc_r>
 8009efa:	bf00      	nop
 8009efc:	20000068 	.word	0x20000068

08009f00 <sbrk_aligned>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4e0e      	ldr	r6, [pc, #56]	; (8009f3c <sbrk_aligned+0x3c>)
 8009f04:	460c      	mov	r4, r1
 8009f06:	6831      	ldr	r1, [r6, #0]
 8009f08:	4605      	mov	r5, r0
 8009f0a:	b911      	cbnz	r1, 8009f12 <sbrk_aligned+0x12>
 8009f0c:	f000 fffa 	bl	800af04 <_sbrk_r>
 8009f10:	6030      	str	r0, [r6, #0]
 8009f12:	4621      	mov	r1, r4
 8009f14:	4628      	mov	r0, r5
 8009f16:	f000 fff5 	bl	800af04 <_sbrk_r>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d00a      	beq.n	8009f34 <sbrk_aligned+0x34>
 8009f1e:	1cc4      	adds	r4, r0, #3
 8009f20:	f024 0403 	bic.w	r4, r4, #3
 8009f24:	42a0      	cmp	r0, r4
 8009f26:	d007      	beq.n	8009f38 <sbrk_aligned+0x38>
 8009f28:	1a21      	subs	r1, r4, r0
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 ffea 	bl	800af04 <_sbrk_r>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d101      	bne.n	8009f38 <sbrk_aligned+0x38>
 8009f34:	f04f 34ff 	mov.w	r4, #4294967295
 8009f38:	4620      	mov	r0, r4
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	20005320 	.word	0x20005320

08009f40 <_malloc_r>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	1ccd      	adds	r5, r1, #3
 8009f46:	f025 0503 	bic.w	r5, r5, #3
 8009f4a:	3508      	adds	r5, #8
 8009f4c:	2d0c      	cmp	r5, #12
 8009f4e:	bf38      	it	cc
 8009f50:	250c      	movcc	r5, #12
 8009f52:	2d00      	cmp	r5, #0
 8009f54:	4607      	mov	r7, r0
 8009f56:	db01      	blt.n	8009f5c <_malloc_r+0x1c>
 8009f58:	42a9      	cmp	r1, r5
 8009f5a:	d905      	bls.n	8009f68 <_malloc_r+0x28>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	2600      	movs	r6, #0
 8009f62:	4630      	mov	r0, r6
 8009f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a03c <_malloc_r+0xfc>
 8009f6c:	f000 f868 	bl	800a040 <__malloc_lock>
 8009f70:	f8d8 3000 	ldr.w	r3, [r8]
 8009f74:	461c      	mov	r4, r3
 8009f76:	bb5c      	cbnz	r4, 8009fd0 <_malloc_r+0x90>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7ff ffc0 	bl	8009f00 <sbrk_aligned>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	4604      	mov	r4, r0
 8009f84:	d155      	bne.n	800a032 <_malloc_r+0xf2>
 8009f86:	f8d8 4000 	ldr.w	r4, [r8]
 8009f8a:	4626      	mov	r6, r4
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	d145      	bne.n	800a01c <_malloc_r+0xdc>
 8009f90:	2c00      	cmp	r4, #0
 8009f92:	d048      	beq.n	800a026 <_malloc_r+0xe6>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	4631      	mov	r1, r6
 8009f98:	4638      	mov	r0, r7
 8009f9a:	eb04 0903 	add.w	r9, r4, r3
 8009f9e:	f000 ffb1 	bl	800af04 <_sbrk_r>
 8009fa2:	4581      	cmp	r9, r0
 8009fa4:	d13f      	bne.n	800a026 <_malloc_r+0xe6>
 8009fa6:	6821      	ldr	r1, [r4, #0]
 8009fa8:	1a6d      	subs	r5, r5, r1
 8009faa:	4629      	mov	r1, r5
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7ff ffa7 	bl	8009f00 <sbrk_aligned>
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d037      	beq.n	800a026 <_malloc_r+0xe6>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	442b      	add	r3, r5
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d038      	beq.n	800a036 <_malloc_r+0xf6>
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	42a2      	cmp	r2, r4
 8009fc8:	d12b      	bne.n	800a022 <_malloc_r+0xe2>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	e00f      	b.n	8009ff0 <_malloc_r+0xb0>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	1b52      	subs	r2, r2, r5
 8009fd4:	d41f      	bmi.n	800a016 <_malloc_r+0xd6>
 8009fd6:	2a0b      	cmp	r2, #11
 8009fd8:	d917      	bls.n	800a00a <_malloc_r+0xca>
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	6025      	str	r5, [r4, #0]
 8009fe0:	bf18      	it	ne
 8009fe2:	6059      	strne	r1, [r3, #4]
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	bf08      	it	eq
 8009fe8:	f8c8 1000 	streq.w	r1, [r8]
 8009fec:	5162      	str	r2, [r4, r5]
 8009fee:	604b      	str	r3, [r1, #4]
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f104 060b 	add.w	r6, r4, #11
 8009ff6:	f000 f829 	bl	800a04c <__malloc_unlock>
 8009ffa:	f026 0607 	bic.w	r6, r6, #7
 8009ffe:	1d23      	adds	r3, r4, #4
 800a000:	1af2      	subs	r2, r6, r3
 800a002:	d0ae      	beq.n	8009f62 <_malloc_r+0x22>
 800a004:	1b9b      	subs	r3, r3, r6
 800a006:	50a3      	str	r3, [r4, r2]
 800a008:	e7ab      	b.n	8009f62 <_malloc_r+0x22>
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	6862      	ldr	r2, [r4, #4]
 800a00e:	d1dd      	bne.n	8009fcc <_malloc_r+0x8c>
 800a010:	f8c8 2000 	str.w	r2, [r8]
 800a014:	e7ec      	b.n	8009ff0 <_malloc_r+0xb0>
 800a016:	4623      	mov	r3, r4
 800a018:	6864      	ldr	r4, [r4, #4]
 800a01a:	e7ac      	b.n	8009f76 <_malloc_r+0x36>
 800a01c:	4634      	mov	r4, r6
 800a01e:	6876      	ldr	r6, [r6, #4]
 800a020:	e7b4      	b.n	8009f8c <_malloc_r+0x4c>
 800a022:	4613      	mov	r3, r2
 800a024:	e7cc      	b.n	8009fc0 <_malloc_r+0x80>
 800a026:	230c      	movs	r3, #12
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	4638      	mov	r0, r7
 800a02c:	f000 f80e 	bl	800a04c <__malloc_unlock>
 800a030:	e797      	b.n	8009f62 <_malloc_r+0x22>
 800a032:	6025      	str	r5, [r4, #0]
 800a034:	e7dc      	b.n	8009ff0 <_malloc_r+0xb0>
 800a036:	605b      	str	r3, [r3, #4]
 800a038:	deff      	udf	#255	; 0xff
 800a03a:	bf00      	nop
 800a03c:	2000531c 	.word	0x2000531c

0800a040 <__malloc_lock>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__malloc_lock+0x8>)
 800a042:	f7ff bed3 	b.w	8009dec <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20005318 	.word	0x20005318

0800a04c <__malloc_unlock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_unlock+0x8>)
 800a04e:	f7ff bece 	b.w	8009dee <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20005318 	.word	0x20005318

0800a058 <__ssputs_r>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	688e      	ldr	r6, [r1, #8]
 800a05e:	461f      	mov	r7, r3
 800a060:	42be      	cmp	r6, r7
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	4682      	mov	sl, r0
 800a066:	460c      	mov	r4, r1
 800a068:	4690      	mov	r8, r2
 800a06a:	d82c      	bhi.n	800a0c6 <__ssputs_r+0x6e>
 800a06c:	898a      	ldrh	r2, [r1, #12]
 800a06e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a072:	d026      	beq.n	800a0c2 <__ssputs_r+0x6a>
 800a074:	6965      	ldr	r5, [r4, #20]
 800a076:	6909      	ldr	r1, [r1, #16]
 800a078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a07c:	eba3 0901 	sub.w	r9, r3, r1
 800a080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a084:	1c7b      	adds	r3, r7, #1
 800a086:	444b      	add	r3, r9
 800a088:	106d      	asrs	r5, r5, #1
 800a08a:	429d      	cmp	r5, r3
 800a08c:	bf38      	it	cc
 800a08e:	461d      	movcc	r5, r3
 800a090:	0553      	lsls	r3, r2, #21
 800a092:	d527      	bpl.n	800a0e4 <__ssputs_r+0x8c>
 800a094:	4629      	mov	r1, r5
 800a096:	f7ff ff53 	bl	8009f40 <_malloc_r>
 800a09a:	4606      	mov	r6, r0
 800a09c:	b360      	cbz	r0, 800a0f8 <__ssputs_r+0xa0>
 800a09e:	6921      	ldr	r1, [r4, #16]
 800a0a0:	464a      	mov	r2, r9
 800a0a2:	f7ff fead 	bl	8009e00 <memcpy>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	6126      	str	r6, [r4, #16]
 800a0b4:	6165      	str	r5, [r4, #20]
 800a0b6:	444e      	add	r6, r9
 800a0b8:	eba5 0509 	sub.w	r5, r5, r9
 800a0bc:	6026      	str	r6, [r4, #0]
 800a0be:	60a5      	str	r5, [r4, #8]
 800a0c0:	463e      	mov	r6, r7
 800a0c2:	42be      	cmp	r6, r7
 800a0c4:	d900      	bls.n	800a0c8 <__ssputs_r+0x70>
 800a0c6:	463e      	mov	r6, r7
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	4641      	mov	r1, r8
 800a0ce:	f000 fefe 	bl	800aece <memmove>
 800a0d2:	68a3      	ldr	r3, [r4, #8]
 800a0d4:	1b9b      	subs	r3, r3, r6
 800a0d6:	60a3      	str	r3, [r4, #8]
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	4433      	add	r3, r6
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	f000 ff24 	bl	800af32 <_realloc_r>
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1e0      	bne.n	800a0b2 <__ssputs_r+0x5a>
 800a0f0:	6921      	ldr	r1, [r4, #16]
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	f7ff feb0 	bl	8009e58 <_free_r>
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	f8ca 3000 	str.w	r3, [sl]
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	f04f 30ff 	mov.w	r0, #4294967295
 800a10a:	e7e9      	b.n	800a0e0 <__ssputs_r+0x88>

0800a10c <_svfiprintf_r>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	4698      	mov	r8, r3
 800a112:	898b      	ldrh	r3, [r1, #12]
 800a114:	061b      	lsls	r3, r3, #24
 800a116:	b09d      	sub	sp, #116	; 0x74
 800a118:	4607      	mov	r7, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	4614      	mov	r4, r2
 800a11e:	d50e      	bpl.n	800a13e <_svfiprintf_r+0x32>
 800a120:	690b      	ldr	r3, [r1, #16]
 800a122:	b963      	cbnz	r3, 800a13e <_svfiprintf_r+0x32>
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	f7ff ff0b 	bl	8009f40 <_malloc_r>
 800a12a:	6028      	str	r0, [r5, #0]
 800a12c:	6128      	str	r0, [r5, #16]
 800a12e:	b920      	cbnz	r0, 800a13a <_svfiprintf_r+0x2e>
 800a130:	230c      	movs	r3, #12
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	e0d0      	b.n	800a2dc <_svfiprintf_r+0x1d0>
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	616b      	str	r3, [r5, #20]
 800a13e:	2300      	movs	r3, #0
 800a140:	9309      	str	r3, [sp, #36]	; 0x24
 800a142:	2320      	movs	r3, #32
 800a144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a148:	f8cd 800c 	str.w	r8, [sp, #12]
 800a14c:	2330      	movs	r3, #48	; 0x30
 800a14e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2f4 <_svfiprintf_r+0x1e8>
 800a152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a156:	f04f 0901 	mov.w	r9, #1
 800a15a:	4623      	mov	r3, r4
 800a15c:	469a      	mov	sl, r3
 800a15e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a162:	b10a      	cbz	r2, 800a168 <_svfiprintf_r+0x5c>
 800a164:	2a25      	cmp	r2, #37	; 0x25
 800a166:	d1f9      	bne.n	800a15c <_svfiprintf_r+0x50>
 800a168:	ebba 0b04 	subs.w	fp, sl, r4
 800a16c:	d00b      	beq.n	800a186 <_svfiprintf_r+0x7a>
 800a16e:	465b      	mov	r3, fp
 800a170:	4622      	mov	r2, r4
 800a172:	4629      	mov	r1, r5
 800a174:	4638      	mov	r0, r7
 800a176:	f7ff ff6f 	bl	800a058 <__ssputs_r>
 800a17a:	3001      	adds	r0, #1
 800a17c:	f000 80a9 	beq.w	800a2d2 <_svfiprintf_r+0x1c6>
 800a180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a182:	445a      	add	r2, fp
 800a184:	9209      	str	r2, [sp, #36]	; 0x24
 800a186:	f89a 3000 	ldrb.w	r3, [sl]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 80a1 	beq.w	800a2d2 <_svfiprintf_r+0x1c6>
 800a190:	2300      	movs	r3, #0
 800a192:	f04f 32ff 	mov.w	r2, #4294967295
 800a196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a19a:	f10a 0a01 	add.w	sl, sl, #1
 800a19e:	9304      	str	r3, [sp, #16]
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a8:	4654      	mov	r4, sl
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b0:	4850      	ldr	r0, [pc, #320]	; (800a2f4 <_svfiprintf_r+0x1e8>)
 800a1b2:	f7f6 f84d 	bl	8000250 <memchr>
 800a1b6:	9a04      	ldr	r2, [sp, #16]
 800a1b8:	b9d8      	cbnz	r0, 800a1f2 <_svfiprintf_r+0xe6>
 800a1ba:	06d0      	lsls	r0, r2, #27
 800a1bc:	bf44      	itt	mi
 800a1be:	2320      	movmi	r3, #32
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c4:	0711      	lsls	r1, r2, #28
 800a1c6:	bf44      	itt	mi
 800a1c8:	232b      	movmi	r3, #43	; 0x2b
 800a1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d4:	d015      	beq.n	800a202 <_svfiprintf_r+0xf6>
 800a1d6:	9a07      	ldr	r2, [sp, #28]
 800a1d8:	4654      	mov	r4, sl
 800a1da:	2000      	movs	r0, #0
 800a1dc:	f04f 0c0a 	mov.w	ip, #10
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e6:	3b30      	subs	r3, #48	; 0x30
 800a1e8:	2b09      	cmp	r3, #9
 800a1ea:	d94d      	bls.n	800a288 <_svfiprintf_r+0x17c>
 800a1ec:	b1b0      	cbz	r0, 800a21c <_svfiprintf_r+0x110>
 800a1ee:	9207      	str	r2, [sp, #28]
 800a1f0:	e014      	b.n	800a21c <_svfiprintf_r+0x110>
 800a1f2:	eba0 0308 	sub.w	r3, r0, r8
 800a1f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	46a2      	mov	sl, r4
 800a200:	e7d2      	b.n	800a1a8 <_svfiprintf_r+0x9c>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	1d19      	adds	r1, r3, #4
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	9103      	str	r1, [sp, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfbb      	ittet	lt
 800a20e:	425b      	neglt	r3, r3
 800a210:	f042 0202 	orrlt.w	r2, r2, #2
 800a214:	9307      	strge	r3, [sp, #28]
 800a216:	9307      	strlt	r3, [sp, #28]
 800a218:	bfb8      	it	lt
 800a21a:	9204      	strlt	r2, [sp, #16]
 800a21c:	7823      	ldrb	r3, [r4, #0]
 800a21e:	2b2e      	cmp	r3, #46	; 0x2e
 800a220:	d10c      	bne.n	800a23c <_svfiprintf_r+0x130>
 800a222:	7863      	ldrb	r3, [r4, #1]
 800a224:	2b2a      	cmp	r3, #42	; 0x2a
 800a226:	d134      	bne.n	800a292 <_svfiprintf_r+0x186>
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	1d1a      	adds	r2, r3, #4
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	9203      	str	r2, [sp, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	bfb8      	it	lt
 800a234:	f04f 33ff 	movlt.w	r3, #4294967295
 800a238:	3402      	adds	r4, #2
 800a23a:	9305      	str	r3, [sp, #20]
 800a23c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a304 <_svfiprintf_r+0x1f8>
 800a240:	7821      	ldrb	r1, [r4, #0]
 800a242:	2203      	movs	r2, #3
 800a244:	4650      	mov	r0, sl
 800a246:	f7f6 f803 	bl	8000250 <memchr>
 800a24a:	b138      	cbz	r0, 800a25c <_svfiprintf_r+0x150>
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	eba0 000a 	sub.w	r0, r0, sl
 800a252:	2240      	movs	r2, #64	; 0x40
 800a254:	4082      	lsls	r2, r0
 800a256:	4313      	orrs	r3, r2
 800a258:	3401      	adds	r4, #1
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a260:	4825      	ldr	r0, [pc, #148]	; (800a2f8 <_svfiprintf_r+0x1ec>)
 800a262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a266:	2206      	movs	r2, #6
 800a268:	f7f5 fff2 	bl	8000250 <memchr>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d038      	beq.n	800a2e2 <_svfiprintf_r+0x1d6>
 800a270:	4b22      	ldr	r3, [pc, #136]	; (800a2fc <_svfiprintf_r+0x1f0>)
 800a272:	bb1b      	cbnz	r3, 800a2bc <_svfiprintf_r+0x1b0>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	3307      	adds	r3, #7
 800a278:	f023 0307 	bic.w	r3, r3, #7
 800a27c:	3308      	adds	r3, #8
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a282:	4433      	add	r3, r6
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	e768      	b.n	800a15a <_svfiprintf_r+0x4e>
 800a288:	fb0c 3202 	mla	r2, ip, r2, r3
 800a28c:	460c      	mov	r4, r1
 800a28e:	2001      	movs	r0, #1
 800a290:	e7a6      	b.n	800a1e0 <_svfiprintf_r+0xd4>
 800a292:	2300      	movs	r3, #0
 800a294:	3401      	adds	r4, #1
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	4619      	mov	r1, r3
 800a29a:	f04f 0c0a 	mov.w	ip, #10
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a4:	3a30      	subs	r2, #48	; 0x30
 800a2a6:	2a09      	cmp	r2, #9
 800a2a8:	d903      	bls.n	800a2b2 <_svfiprintf_r+0x1a6>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0c6      	beq.n	800a23c <_svfiprintf_r+0x130>
 800a2ae:	9105      	str	r1, [sp, #20]
 800a2b0:	e7c4      	b.n	800a23c <_svfiprintf_r+0x130>
 800a2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e7f0      	b.n	800a29e <_svfiprintf_r+0x192>
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <_svfiprintf_r+0x1f4>)
 800a2c4:	a904      	add	r1, sp, #16
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f3af 8000 	nop.w
 800a2cc:	1c42      	adds	r2, r0, #1
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	d1d6      	bne.n	800a280 <_svfiprintf_r+0x174>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	065b      	lsls	r3, r3, #25
 800a2d6:	f53f af2d 	bmi.w	800a134 <_svfiprintf_r+0x28>
 800a2da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2dc:	b01d      	add	sp, #116	; 0x74
 800a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	ab03      	add	r3, sp, #12
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <_svfiprintf_r+0x1f4>)
 800a2ea:	a904      	add	r1, sp, #16
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f000 fa4b 	bl	800a788 <_printf_i>
 800a2f2:	e7eb      	b.n	800a2cc <_svfiprintf_r+0x1c0>
 800a2f4:	0800bc02 	.word	0x0800bc02
 800a2f8:	0800bc0c 	.word	0x0800bc0c
 800a2fc:	00000000 	.word	0x00000000
 800a300:	0800a059 	.word	0x0800a059
 800a304:	0800bc08 	.word	0x0800bc08

0800a308 <_sungetc_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	1c4b      	adds	r3, r1, #1
 800a30c:	4614      	mov	r4, r2
 800a30e:	d103      	bne.n	800a318 <_sungetc_r+0x10>
 800a310:	f04f 35ff 	mov.w	r5, #4294967295
 800a314:	4628      	mov	r0, r5
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	8993      	ldrh	r3, [r2, #12]
 800a31a:	f023 0320 	bic.w	r3, r3, #32
 800a31e:	8193      	strh	r3, [r2, #12]
 800a320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a322:	6852      	ldr	r2, [r2, #4]
 800a324:	b2cd      	uxtb	r5, r1
 800a326:	b18b      	cbz	r3, 800a34c <_sungetc_r+0x44>
 800a328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a32a:	4293      	cmp	r3, r2
 800a32c:	dd08      	ble.n	800a340 <_sungetc_r+0x38>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	1e5a      	subs	r2, r3, #1
 800a332:	6022      	str	r2, [r4, #0]
 800a334:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a338:	6863      	ldr	r3, [r4, #4]
 800a33a:	3301      	adds	r3, #1
 800a33c:	6063      	str	r3, [r4, #4]
 800a33e:	e7e9      	b.n	800a314 <_sungetc_r+0xc>
 800a340:	4621      	mov	r1, r4
 800a342:	f000 fd8a 	bl	800ae5a <__submore>
 800a346:	2800      	cmp	r0, #0
 800a348:	d0f1      	beq.n	800a32e <_sungetc_r+0x26>
 800a34a:	e7e1      	b.n	800a310 <_sungetc_r+0x8>
 800a34c:	6921      	ldr	r1, [r4, #16]
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	b151      	cbz	r1, 800a368 <_sungetc_r+0x60>
 800a352:	4299      	cmp	r1, r3
 800a354:	d208      	bcs.n	800a368 <_sungetc_r+0x60>
 800a356:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a35a:	42a9      	cmp	r1, r5
 800a35c:	d104      	bne.n	800a368 <_sungetc_r+0x60>
 800a35e:	3b01      	subs	r3, #1
 800a360:	3201      	adds	r2, #1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	6062      	str	r2, [r4, #4]
 800a366:	e7d5      	b.n	800a314 <_sungetc_r+0xc>
 800a368:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a36c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a370:	6363      	str	r3, [r4, #52]	; 0x34
 800a372:	2303      	movs	r3, #3
 800a374:	63a3      	str	r3, [r4, #56]	; 0x38
 800a376:	4623      	mov	r3, r4
 800a378:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	2301      	movs	r3, #1
 800a380:	e7dc      	b.n	800a33c <_sungetc_r+0x34>

0800a382 <__ssrefill_r>:
 800a382:	b510      	push	{r4, lr}
 800a384:	460c      	mov	r4, r1
 800a386:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a388:	b169      	cbz	r1, 800a3a6 <__ssrefill_r+0x24>
 800a38a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a38e:	4299      	cmp	r1, r3
 800a390:	d001      	beq.n	800a396 <__ssrefill_r+0x14>
 800a392:	f7ff fd61 	bl	8009e58 <_free_r>
 800a396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a398:	6063      	str	r3, [r4, #4]
 800a39a:	2000      	movs	r0, #0
 800a39c:	6360      	str	r0, [r4, #52]	; 0x34
 800a39e:	b113      	cbz	r3, 800a3a6 <__ssrefill_r+0x24>
 800a3a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f043 0320 	orr.w	r3, r3, #32
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ba:	e7f3      	b.n	800a3a4 <__ssrefill_r+0x22>

0800a3bc <__ssvfiscanf_r>:
 800a3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a3cc:	49a6      	ldr	r1, [pc, #664]	; (800a668 <__ssvfiscanf_r+0x2ac>)
 800a3ce:	91a0      	str	r1, [sp, #640]	; 0x280
 800a3d0:	f10d 0804 	add.w	r8, sp, #4
 800a3d4:	49a5      	ldr	r1, [pc, #660]	; (800a66c <__ssvfiscanf_r+0x2b0>)
 800a3d6:	4fa6      	ldr	r7, [pc, #664]	; (800a670 <__ssvfiscanf_r+0x2b4>)
 800a3d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a674 <__ssvfiscanf_r+0x2b8>
 800a3dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	91a1      	str	r1, [sp, #644]	; 0x284
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	7813      	ldrb	r3, [r2, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 815a 	beq.w	800a6a2 <__ssvfiscanf_r+0x2e6>
 800a3ee:	5cf9      	ldrb	r1, [r7, r3]
 800a3f0:	f011 0108 	ands.w	r1, r1, #8
 800a3f4:	f102 0501 	add.w	r5, r2, #1
 800a3f8:	d019      	beq.n	800a42e <__ssvfiscanf_r+0x72>
 800a3fa:	6863      	ldr	r3, [r4, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dd0f      	ble.n	800a420 <__ssvfiscanf_r+0x64>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	781a      	ldrb	r2, [r3, #0]
 800a404:	5cba      	ldrb	r2, [r7, r2]
 800a406:	0712      	lsls	r2, r2, #28
 800a408:	d401      	bmi.n	800a40e <__ssvfiscanf_r+0x52>
 800a40a:	462a      	mov	r2, r5
 800a40c:	e7eb      	b.n	800a3e6 <__ssvfiscanf_r+0x2a>
 800a40e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a410:	3201      	adds	r2, #1
 800a412:	9245      	str	r2, [sp, #276]	; 0x114
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	3301      	adds	r3, #1
 800a418:	3a01      	subs	r2, #1
 800a41a:	6062      	str	r2, [r4, #4]
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	e7ec      	b.n	800a3fa <__ssvfiscanf_r+0x3e>
 800a420:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a422:	4621      	mov	r1, r4
 800a424:	4630      	mov	r0, r6
 800a426:	4798      	blx	r3
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0e9      	beq.n	800a400 <__ssvfiscanf_r+0x44>
 800a42c:	e7ed      	b.n	800a40a <__ssvfiscanf_r+0x4e>
 800a42e:	2b25      	cmp	r3, #37	; 0x25
 800a430:	d012      	beq.n	800a458 <__ssvfiscanf_r+0x9c>
 800a432:	469a      	mov	sl, r3
 800a434:	6863      	ldr	r3, [r4, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f340 8091 	ble.w	800a55e <__ssvfiscanf_r+0x1a2>
 800a43c:	6822      	ldr	r2, [r4, #0]
 800a43e:	7813      	ldrb	r3, [r2, #0]
 800a440:	4553      	cmp	r3, sl
 800a442:	f040 812e 	bne.w	800a6a2 <__ssvfiscanf_r+0x2e6>
 800a446:	6863      	ldr	r3, [r4, #4]
 800a448:	3b01      	subs	r3, #1
 800a44a:	6063      	str	r3, [r4, #4]
 800a44c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a44e:	3201      	adds	r2, #1
 800a450:	3301      	adds	r3, #1
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	9345      	str	r3, [sp, #276]	; 0x114
 800a456:	e7d8      	b.n	800a40a <__ssvfiscanf_r+0x4e>
 800a458:	9141      	str	r1, [sp, #260]	; 0x104
 800a45a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a45c:	7853      	ldrb	r3, [r2, #1]
 800a45e:	2b2a      	cmp	r3, #42	; 0x2a
 800a460:	bf02      	ittt	eq
 800a462:	2310      	moveq	r3, #16
 800a464:	1c95      	addeq	r5, r2, #2
 800a466:	9341      	streq	r3, [sp, #260]	; 0x104
 800a468:	220a      	movs	r2, #10
 800a46a:	46aa      	mov	sl, r5
 800a46c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a470:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d91c      	bls.n	800a4b2 <__ssvfiscanf_r+0xf6>
 800a478:	487e      	ldr	r0, [pc, #504]	; (800a674 <__ssvfiscanf_r+0x2b8>)
 800a47a:	2203      	movs	r2, #3
 800a47c:	f7f5 fee8 	bl	8000250 <memchr>
 800a480:	b138      	cbz	r0, 800a492 <__ssvfiscanf_r+0xd6>
 800a482:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a484:	eba0 0009 	sub.w	r0, r0, r9
 800a488:	2301      	movs	r3, #1
 800a48a:	4083      	lsls	r3, r0
 800a48c:	4313      	orrs	r3, r2
 800a48e:	9341      	str	r3, [sp, #260]	; 0x104
 800a490:	4655      	mov	r5, sl
 800a492:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a496:	2b78      	cmp	r3, #120	; 0x78
 800a498:	d806      	bhi.n	800a4a8 <__ssvfiscanf_r+0xec>
 800a49a:	2b57      	cmp	r3, #87	; 0x57
 800a49c:	d810      	bhi.n	800a4c0 <__ssvfiscanf_r+0x104>
 800a49e:	2b25      	cmp	r3, #37	; 0x25
 800a4a0:	d0c7      	beq.n	800a432 <__ssvfiscanf_r+0x76>
 800a4a2:	d857      	bhi.n	800a554 <__ssvfiscanf_r+0x198>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d065      	beq.n	800a574 <__ssvfiscanf_r+0x1b8>
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800a4ac:	230a      	movs	r3, #10
 800a4ae:	9342      	str	r3, [sp, #264]	; 0x108
 800a4b0:	e076      	b.n	800a5a0 <__ssvfiscanf_r+0x1e4>
 800a4b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a4b4:	fb02 1103 	mla	r1, r2, r3, r1
 800a4b8:	3930      	subs	r1, #48	; 0x30
 800a4ba:	9143      	str	r1, [sp, #268]	; 0x10c
 800a4bc:	4655      	mov	r5, sl
 800a4be:	e7d4      	b.n	800a46a <__ssvfiscanf_r+0xae>
 800a4c0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a4c4:	2a20      	cmp	r2, #32
 800a4c6:	d8ef      	bhi.n	800a4a8 <__ssvfiscanf_r+0xec>
 800a4c8:	a101      	add	r1, pc, #4	; (adr r1, 800a4d0 <__ssvfiscanf_r+0x114>)
 800a4ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a583 	.word	0x0800a583
 800a4d4:	0800a4a9 	.word	0x0800a4a9
 800a4d8:	0800a4a9 	.word	0x0800a4a9
 800a4dc:	0800a5e1 	.word	0x0800a5e1
 800a4e0:	0800a4a9 	.word	0x0800a4a9
 800a4e4:	0800a4a9 	.word	0x0800a4a9
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	0800a4a9 	.word	0x0800a4a9
 800a4f0:	0800a4a9 	.word	0x0800a4a9
 800a4f4:	0800a4a9 	.word	0x0800a4a9
 800a4f8:	0800a4a9 	.word	0x0800a4a9
 800a4fc:	0800a5f7 	.word	0x0800a5f7
 800a500:	0800a5dd 	.word	0x0800a5dd
 800a504:	0800a55b 	.word	0x0800a55b
 800a508:	0800a55b 	.word	0x0800a55b
 800a50c:	0800a55b 	.word	0x0800a55b
 800a510:	0800a4a9 	.word	0x0800a4a9
 800a514:	0800a599 	.word	0x0800a599
 800a518:	0800a4a9 	.word	0x0800a4a9
 800a51c:	0800a4a9 	.word	0x0800a4a9
 800a520:	0800a4a9 	.word	0x0800a4a9
 800a524:	0800a4a9 	.word	0x0800a4a9
 800a528:	0800a607 	.word	0x0800a607
 800a52c:	0800a5d5 	.word	0x0800a5d5
 800a530:	0800a57b 	.word	0x0800a57b
 800a534:	0800a4a9 	.word	0x0800a4a9
 800a538:	0800a4a9 	.word	0x0800a4a9
 800a53c:	0800a603 	.word	0x0800a603
 800a540:	0800a4a9 	.word	0x0800a4a9
 800a544:	0800a5dd 	.word	0x0800a5dd
 800a548:	0800a4a9 	.word	0x0800a4a9
 800a54c:	0800a4a9 	.word	0x0800a4a9
 800a550:	0800a583 	.word	0x0800a583
 800a554:	3b45      	subs	r3, #69	; 0x45
 800a556:	2b02      	cmp	r3, #2
 800a558:	d8a6      	bhi.n	800a4a8 <__ssvfiscanf_r+0xec>
 800a55a:	2305      	movs	r3, #5
 800a55c:	e01f      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a55e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a560:	4621      	mov	r1, r4
 800a562:	4630      	mov	r0, r6
 800a564:	4798      	blx	r3
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f af68 	beq.w	800a43c <__ssvfiscanf_r+0x80>
 800a56c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a56e:	2800      	cmp	r0, #0
 800a570:	f040 808d 	bne.w	800a68e <__ssvfiscanf_r+0x2d2>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	e08f      	b.n	800a69a <__ssvfiscanf_r+0x2de>
 800a57a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a57c:	f042 0220 	orr.w	r2, r2, #32
 800a580:	9241      	str	r2, [sp, #260]	; 0x104
 800a582:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a588:	9241      	str	r2, [sp, #260]	; 0x104
 800a58a:	2210      	movs	r2, #16
 800a58c:	2b6f      	cmp	r3, #111	; 0x6f
 800a58e:	9242      	str	r2, [sp, #264]	; 0x108
 800a590:	bf34      	ite	cc
 800a592:	2303      	movcc	r3, #3
 800a594:	2304      	movcs	r3, #4
 800a596:	e002      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a598:	2300      	movs	r3, #0
 800a59a:	9342      	str	r3, [sp, #264]	; 0x108
 800a59c:	2303      	movs	r3, #3
 800a59e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a5a0:	6863      	ldr	r3, [r4, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dd3d      	ble.n	800a622 <__ssvfiscanf_r+0x266>
 800a5a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a5a8:	0659      	lsls	r1, r3, #25
 800a5aa:	d404      	bmi.n	800a5b6 <__ssvfiscanf_r+0x1fa>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	5cba      	ldrb	r2, [r7, r2]
 800a5b2:	0712      	lsls	r2, r2, #28
 800a5b4:	d43c      	bmi.n	800a630 <__ssvfiscanf_r+0x274>
 800a5b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	dc4b      	bgt.n	800a654 <__ssvfiscanf_r+0x298>
 800a5bc:	466b      	mov	r3, sp
 800a5be:	4622      	mov	r2, r4
 800a5c0:	a941      	add	r1, sp, #260	; 0x104
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f000 fa02 	bl	800a9cc <_scanf_chars>
 800a5c8:	2801      	cmp	r0, #1
 800a5ca:	d06a      	beq.n	800a6a2 <__ssvfiscanf_r+0x2e6>
 800a5cc:	2802      	cmp	r0, #2
 800a5ce:	f47f af1c 	bne.w	800a40a <__ssvfiscanf_r+0x4e>
 800a5d2:	e7cb      	b.n	800a56c <__ssvfiscanf_r+0x1b0>
 800a5d4:	2308      	movs	r3, #8
 800a5d6:	9342      	str	r3, [sp, #264]	; 0x108
 800a5d8:	2304      	movs	r3, #4
 800a5da:	e7e0      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a5dc:	220a      	movs	r2, #10
 800a5de:	e7d5      	b.n	800a58c <__ssvfiscanf_r+0x1d0>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	f000 fc00 	bl	800ade8 <__sccl>
 800a5e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ee:	9341      	str	r3, [sp, #260]	; 0x104
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7d3      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a5f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5fc:	9341      	str	r3, [sp, #260]	; 0x104
 800a5fe:	2300      	movs	r3, #0
 800a600:	e7cd      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a602:	2302      	movs	r3, #2
 800a604:	e7cb      	b.n	800a59e <__ssvfiscanf_r+0x1e2>
 800a606:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a608:	06c3      	lsls	r3, r0, #27
 800a60a:	f53f aefe 	bmi.w	800a40a <__ssvfiscanf_r+0x4e>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a612:	1d19      	adds	r1, r3, #4
 800a614:	9100      	str	r1, [sp, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	07c0      	lsls	r0, r0, #31
 800a61a:	bf4c      	ite	mi
 800a61c:	801a      	strhmi	r2, [r3, #0]
 800a61e:	601a      	strpl	r2, [r3, #0]
 800a620:	e6f3      	b.n	800a40a <__ssvfiscanf_r+0x4e>
 800a622:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a624:	4621      	mov	r1, r4
 800a626:	4630      	mov	r0, r6
 800a628:	4798      	blx	r3
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0bb      	beq.n	800a5a6 <__ssvfiscanf_r+0x1ea>
 800a62e:	e79d      	b.n	800a56c <__ssvfiscanf_r+0x1b0>
 800a630:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a632:	3201      	adds	r2, #1
 800a634:	9245      	str	r2, [sp, #276]	; 0x114
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	3a01      	subs	r2, #1
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	6062      	str	r2, [r4, #4]
 800a63e:	dd02      	ble.n	800a646 <__ssvfiscanf_r+0x28a>
 800a640:	3301      	adds	r3, #1
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	e7b2      	b.n	800a5ac <__ssvfiscanf_r+0x1f0>
 800a646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a648:	4621      	mov	r1, r4
 800a64a:	4630      	mov	r0, r6
 800a64c:	4798      	blx	r3
 800a64e:	2800      	cmp	r0, #0
 800a650:	d0ac      	beq.n	800a5ac <__ssvfiscanf_r+0x1f0>
 800a652:	e78b      	b.n	800a56c <__ssvfiscanf_r+0x1b0>
 800a654:	2b04      	cmp	r3, #4
 800a656:	dc0f      	bgt.n	800a678 <__ssvfiscanf_r+0x2bc>
 800a658:	466b      	mov	r3, sp
 800a65a:	4622      	mov	r2, r4
 800a65c:	a941      	add	r1, sp, #260	; 0x104
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 fa0e 	bl	800aa80 <_scanf_i>
 800a664:	e7b0      	b.n	800a5c8 <__ssvfiscanf_r+0x20c>
 800a666:	bf00      	nop
 800a668:	0800a309 	.word	0x0800a309
 800a66c:	0800a383 	.word	0x0800a383
 800a670:	0800ba55 	.word	0x0800ba55
 800a674:	0800bc08 	.word	0x0800bc08
 800a678:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <__ssvfiscanf_r+0x2ec>)
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f43f aec5 	beq.w	800a40a <__ssvfiscanf_r+0x4e>
 800a680:	466b      	mov	r3, sp
 800a682:	4622      	mov	r2, r4
 800a684:	a941      	add	r1, sp, #260	; 0x104
 800a686:	4630      	mov	r0, r6
 800a688:	f3af 8000 	nop.w
 800a68c:	e79c      	b.n	800a5c8 <__ssvfiscanf_r+0x20c>
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a694:	bf18      	it	ne
 800a696:	f04f 30ff 	movne.w	r0, #4294967295
 800a69a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a6a4:	e7f9      	b.n	800a69a <__ssvfiscanf_r+0x2de>
 800a6a6:	bf00      	nop
 800a6a8:	00000000 	.word	0x00000000

0800a6ac <_printf_common>:
 800a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	4616      	mov	r6, r2
 800a6b2:	4699      	mov	r9, r3
 800a6b4:	688a      	ldr	r2, [r1, #8]
 800a6b6:	690b      	ldr	r3, [r1, #16]
 800a6b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	bfb8      	it	lt
 800a6c0:	4613      	movlt	r3, r2
 800a6c2:	6033      	str	r3, [r6, #0]
 800a6c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	b10a      	cbz	r2, 800a6d2 <_printf_common+0x26>
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	0699      	lsls	r1, r3, #26
 800a6d6:	bf42      	ittt	mi
 800a6d8:	6833      	ldrmi	r3, [r6, #0]
 800a6da:	3302      	addmi	r3, #2
 800a6dc:	6033      	strmi	r3, [r6, #0]
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	f015 0506 	ands.w	r5, r5, #6
 800a6e4:	d106      	bne.n	800a6f4 <_printf_common+0x48>
 800a6e6:	f104 0a19 	add.w	sl, r4, #25
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	6832      	ldr	r2, [r6, #0]
 800a6ee:	1a9b      	subs	r3, r3, r2
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dc26      	bgt.n	800a742 <_printf_common+0x96>
 800a6f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6f8:	1e13      	subs	r3, r2, #0
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	bf18      	it	ne
 800a6fe:	2301      	movne	r3, #1
 800a700:	0692      	lsls	r2, r2, #26
 800a702:	d42b      	bmi.n	800a75c <_printf_common+0xb0>
 800a704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a708:	4649      	mov	r1, r9
 800a70a:	4638      	mov	r0, r7
 800a70c:	47c0      	blx	r8
 800a70e:	3001      	adds	r0, #1
 800a710:	d01e      	beq.n	800a750 <_printf_common+0xa4>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	6922      	ldr	r2, [r4, #16]
 800a716:	f003 0306 	and.w	r3, r3, #6
 800a71a:	2b04      	cmp	r3, #4
 800a71c:	bf02      	ittt	eq
 800a71e:	68e5      	ldreq	r5, [r4, #12]
 800a720:	6833      	ldreq	r3, [r6, #0]
 800a722:	1aed      	subeq	r5, r5, r3
 800a724:	68a3      	ldr	r3, [r4, #8]
 800a726:	bf0c      	ite	eq
 800a728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a72c:	2500      	movne	r5, #0
 800a72e:	4293      	cmp	r3, r2
 800a730:	bfc4      	itt	gt
 800a732:	1a9b      	subgt	r3, r3, r2
 800a734:	18ed      	addgt	r5, r5, r3
 800a736:	2600      	movs	r6, #0
 800a738:	341a      	adds	r4, #26
 800a73a:	42b5      	cmp	r5, r6
 800a73c:	d11a      	bne.n	800a774 <_printf_common+0xc8>
 800a73e:	2000      	movs	r0, #0
 800a740:	e008      	b.n	800a754 <_printf_common+0xa8>
 800a742:	2301      	movs	r3, #1
 800a744:	4652      	mov	r2, sl
 800a746:	4649      	mov	r1, r9
 800a748:	4638      	mov	r0, r7
 800a74a:	47c0      	blx	r8
 800a74c:	3001      	adds	r0, #1
 800a74e:	d103      	bne.n	800a758 <_printf_common+0xac>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	3501      	adds	r5, #1
 800a75a:	e7c6      	b.n	800a6ea <_printf_common+0x3e>
 800a75c:	18e1      	adds	r1, r4, r3
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	2030      	movs	r0, #48	; 0x30
 800a762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a766:	4422      	add	r2, r4
 800a768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a76c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a770:	3302      	adds	r3, #2
 800a772:	e7c7      	b.n	800a704 <_printf_common+0x58>
 800a774:	2301      	movs	r3, #1
 800a776:	4622      	mov	r2, r4
 800a778:	4649      	mov	r1, r9
 800a77a:	4638      	mov	r0, r7
 800a77c:	47c0      	blx	r8
 800a77e:	3001      	adds	r0, #1
 800a780:	d0e6      	beq.n	800a750 <_printf_common+0xa4>
 800a782:	3601      	adds	r6, #1
 800a784:	e7d9      	b.n	800a73a <_printf_common+0x8e>
	...

0800a788 <_printf_i>:
 800a788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	7e0f      	ldrb	r7, [r1, #24]
 800a78e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a790:	2f78      	cmp	r7, #120	; 0x78
 800a792:	4691      	mov	r9, r2
 800a794:	4680      	mov	r8, r0
 800a796:	460c      	mov	r4, r1
 800a798:	469a      	mov	sl, r3
 800a79a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a79e:	d807      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7a0:	2f62      	cmp	r7, #98	; 0x62
 800a7a2:	d80a      	bhi.n	800a7ba <_printf_i+0x32>
 800a7a4:	2f00      	cmp	r7, #0
 800a7a6:	f000 80d4 	beq.w	800a952 <_printf_i+0x1ca>
 800a7aa:	2f58      	cmp	r7, #88	; 0x58
 800a7ac:	f000 80c0 	beq.w	800a930 <_printf_i+0x1a8>
 800a7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7b8:	e03a      	b.n	800a830 <_printf_i+0xa8>
 800a7ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7be:	2b15      	cmp	r3, #21
 800a7c0:	d8f6      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7c2:	a101      	add	r1, pc, #4	; (adr r1, 800a7c8 <_printf_i+0x40>)
 800a7c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7c8:	0800a821 	.word	0x0800a821
 800a7cc:	0800a835 	.word	0x0800a835
 800a7d0:	0800a7b1 	.word	0x0800a7b1
 800a7d4:	0800a7b1 	.word	0x0800a7b1
 800a7d8:	0800a7b1 	.word	0x0800a7b1
 800a7dc:	0800a7b1 	.word	0x0800a7b1
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a7b1 	.word	0x0800a7b1
 800a7e8:	0800a7b1 	.word	0x0800a7b1
 800a7ec:	0800a7b1 	.word	0x0800a7b1
 800a7f0:	0800a7b1 	.word	0x0800a7b1
 800a7f4:	0800a939 	.word	0x0800a939
 800a7f8:	0800a861 	.word	0x0800a861
 800a7fc:	0800a8f3 	.word	0x0800a8f3
 800a800:	0800a7b1 	.word	0x0800a7b1
 800a804:	0800a7b1 	.word	0x0800a7b1
 800a808:	0800a95b 	.word	0x0800a95b
 800a80c:	0800a7b1 	.word	0x0800a7b1
 800a810:	0800a861 	.word	0x0800a861
 800a814:	0800a7b1 	.word	0x0800a7b1
 800a818:	0800a7b1 	.word	0x0800a7b1
 800a81c:	0800a8fb 	.word	0x0800a8fb
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	602a      	str	r2, [r5, #0]
 800a828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a82c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a830:	2301      	movs	r3, #1
 800a832:	e09f      	b.n	800a974 <_printf_i+0x1ec>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	0607      	lsls	r7, r0, #24
 800a83a:	f103 0104 	add.w	r1, r3, #4
 800a83e:	6029      	str	r1, [r5, #0]
 800a840:	d501      	bpl.n	800a846 <_printf_i+0xbe>
 800a842:	681e      	ldr	r6, [r3, #0]
 800a844:	e003      	b.n	800a84e <_printf_i+0xc6>
 800a846:	0646      	lsls	r6, r0, #25
 800a848:	d5fb      	bpl.n	800a842 <_printf_i+0xba>
 800a84a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a84e:	2e00      	cmp	r6, #0
 800a850:	da03      	bge.n	800a85a <_printf_i+0xd2>
 800a852:	232d      	movs	r3, #45	; 0x2d
 800a854:	4276      	negs	r6, r6
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85a:	485a      	ldr	r0, [pc, #360]	; (800a9c4 <_printf_i+0x23c>)
 800a85c:	230a      	movs	r3, #10
 800a85e:	e012      	b.n	800a886 <_printf_i+0xfe>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	6820      	ldr	r0, [r4, #0]
 800a864:	1d19      	adds	r1, r3, #4
 800a866:	6029      	str	r1, [r5, #0]
 800a868:	0605      	lsls	r5, r0, #24
 800a86a:	d501      	bpl.n	800a870 <_printf_i+0xe8>
 800a86c:	681e      	ldr	r6, [r3, #0]
 800a86e:	e002      	b.n	800a876 <_printf_i+0xee>
 800a870:	0641      	lsls	r1, r0, #25
 800a872:	d5fb      	bpl.n	800a86c <_printf_i+0xe4>
 800a874:	881e      	ldrh	r6, [r3, #0]
 800a876:	4853      	ldr	r0, [pc, #332]	; (800a9c4 <_printf_i+0x23c>)
 800a878:	2f6f      	cmp	r7, #111	; 0x6f
 800a87a:	bf0c      	ite	eq
 800a87c:	2308      	moveq	r3, #8
 800a87e:	230a      	movne	r3, #10
 800a880:	2100      	movs	r1, #0
 800a882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a886:	6865      	ldr	r5, [r4, #4]
 800a888:	60a5      	str	r5, [r4, #8]
 800a88a:	2d00      	cmp	r5, #0
 800a88c:	bfa2      	ittt	ge
 800a88e:	6821      	ldrge	r1, [r4, #0]
 800a890:	f021 0104 	bicge.w	r1, r1, #4
 800a894:	6021      	strge	r1, [r4, #0]
 800a896:	b90e      	cbnz	r6, 800a89c <_printf_i+0x114>
 800a898:	2d00      	cmp	r5, #0
 800a89a:	d04b      	beq.n	800a934 <_printf_i+0x1ac>
 800a89c:	4615      	mov	r5, r2
 800a89e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8a6:	5dc7      	ldrb	r7, [r0, r7]
 800a8a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8ac:	4637      	mov	r7, r6
 800a8ae:	42bb      	cmp	r3, r7
 800a8b0:	460e      	mov	r6, r1
 800a8b2:	d9f4      	bls.n	800a89e <_printf_i+0x116>
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d10b      	bne.n	800a8d0 <_printf_i+0x148>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	07de      	lsls	r6, r3, #31
 800a8bc:	d508      	bpl.n	800a8d0 <_printf_i+0x148>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	6861      	ldr	r1, [r4, #4]
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	bfde      	ittt	le
 800a8c6:	2330      	movle	r3, #48	; 0x30
 800a8c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8d0:	1b52      	subs	r2, r2, r5
 800a8d2:	6122      	str	r2, [r4, #16]
 800a8d4:	f8cd a000 	str.w	sl, [sp]
 800a8d8:	464b      	mov	r3, r9
 800a8da:	aa03      	add	r2, sp, #12
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f7ff fee4 	bl	800a6ac <_printf_common>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d14a      	bne.n	800a97e <_printf_i+0x1f6>
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	b004      	add	sp, #16
 800a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f043 0320 	orr.w	r3, r3, #32
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	4833      	ldr	r0, [pc, #204]	; (800a9c8 <_printf_i+0x240>)
 800a8fc:	2778      	movs	r7, #120	; 0x78
 800a8fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	6829      	ldr	r1, [r5, #0]
 800a906:	061f      	lsls	r7, r3, #24
 800a908:	f851 6b04 	ldr.w	r6, [r1], #4
 800a90c:	d402      	bmi.n	800a914 <_printf_i+0x18c>
 800a90e:	065f      	lsls	r7, r3, #25
 800a910:	bf48      	it	mi
 800a912:	b2b6      	uxthmi	r6, r6
 800a914:	07df      	lsls	r7, r3, #31
 800a916:	bf48      	it	mi
 800a918:	f043 0320 	orrmi.w	r3, r3, #32
 800a91c:	6029      	str	r1, [r5, #0]
 800a91e:	bf48      	it	mi
 800a920:	6023      	strmi	r3, [r4, #0]
 800a922:	b91e      	cbnz	r6, 800a92c <_printf_i+0x1a4>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	f023 0320 	bic.w	r3, r3, #32
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	2310      	movs	r3, #16
 800a92e:	e7a7      	b.n	800a880 <_printf_i+0xf8>
 800a930:	4824      	ldr	r0, [pc, #144]	; (800a9c4 <_printf_i+0x23c>)
 800a932:	e7e4      	b.n	800a8fe <_printf_i+0x176>
 800a934:	4615      	mov	r5, r2
 800a936:	e7bd      	b.n	800a8b4 <_printf_i+0x12c>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	6826      	ldr	r6, [r4, #0]
 800a93c:	6961      	ldr	r1, [r4, #20]
 800a93e:	1d18      	adds	r0, r3, #4
 800a940:	6028      	str	r0, [r5, #0]
 800a942:	0635      	lsls	r5, r6, #24
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	d501      	bpl.n	800a94c <_printf_i+0x1c4>
 800a948:	6019      	str	r1, [r3, #0]
 800a94a:	e002      	b.n	800a952 <_printf_i+0x1ca>
 800a94c:	0670      	lsls	r0, r6, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0x1c0>
 800a950:	8019      	strh	r1, [r3, #0]
 800a952:	2300      	movs	r3, #0
 800a954:	6123      	str	r3, [r4, #16]
 800a956:	4615      	mov	r5, r2
 800a958:	e7bc      	b.n	800a8d4 <_printf_i+0x14c>
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	1d1a      	adds	r2, r3, #4
 800a95e:	602a      	str	r2, [r5, #0]
 800a960:	681d      	ldr	r5, [r3, #0]
 800a962:	6862      	ldr	r2, [r4, #4]
 800a964:	2100      	movs	r1, #0
 800a966:	4628      	mov	r0, r5
 800a968:	f7f5 fc72 	bl	8000250 <memchr>
 800a96c:	b108      	cbz	r0, 800a972 <_printf_i+0x1ea>
 800a96e:	1b40      	subs	r0, r0, r5
 800a970:	6060      	str	r0, [r4, #4]
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	2300      	movs	r3, #0
 800a978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97c:	e7aa      	b.n	800a8d4 <_printf_i+0x14c>
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	462a      	mov	r2, r5
 800a982:	4649      	mov	r1, r9
 800a984:	4640      	mov	r0, r8
 800a986:	47d0      	blx	sl
 800a988:	3001      	adds	r0, #1
 800a98a:	d0ad      	beq.n	800a8e8 <_printf_i+0x160>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	079b      	lsls	r3, r3, #30
 800a990:	d413      	bmi.n	800a9ba <_printf_i+0x232>
 800a992:	68e0      	ldr	r0, [r4, #12]
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	4298      	cmp	r0, r3
 800a998:	bfb8      	it	lt
 800a99a:	4618      	movlt	r0, r3
 800a99c:	e7a6      	b.n	800a8ec <_printf_i+0x164>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	47d0      	blx	sl
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d09d      	beq.n	800a8e8 <_printf_i+0x160>
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	9903      	ldr	r1, [sp, #12]
 800a9b2:	1a5b      	subs	r3, r3, r1
 800a9b4:	42ab      	cmp	r3, r5
 800a9b6:	dcf2      	bgt.n	800a99e <_printf_i+0x216>
 800a9b8:	e7eb      	b.n	800a992 <_printf_i+0x20a>
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	f104 0619 	add.w	r6, r4, #25
 800a9c0:	e7f5      	b.n	800a9ae <_printf_i+0x226>
 800a9c2:	bf00      	nop
 800a9c4:	0800bc13 	.word	0x0800bc13
 800a9c8:	0800bc24 	.word	0x0800bc24

0800a9cc <_scanf_chars>:
 800a9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	688a      	ldr	r2, [r1, #8]
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b932      	cbnz	r2, 800a9e8 <_scanf_chars+0x1c>
 800a9da:	698a      	ldr	r2, [r1, #24]
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	bf0c      	ite	eq
 800a9e0:	2201      	moveq	r2, #1
 800a9e2:	f04f 32ff 	movne.w	r2, #4294967295
 800a9e6:	608a      	str	r2, [r1, #8]
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aa7c <_scanf_chars+0xb0>
 800a9ee:	06d1      	lsls	r1, r2, #27
 800a9f0:	bf5f      	itttt	pl
 800a9f2:	681a      	ldrpl	r2, [r3, #0]
 800a9f4:	1d11      	addpl	r1, r2, #4
 800a9f6:	6019      	strpl	r1, [r3, #0]
 800a9f8:	6816      	ldrpl	r6, [r2, #0]
 800a9fa:	2700      	movs	r7, #0
 800a9fc:	69a0      	ldr	r0, [r4, #24]
 800a9fe:	b188      	cbz	r0, 800aa24 <_scanf_chars+0x58>
 800aa00:	2801      	cmp	r0, #1
 800aa02:	d107      	bne.n	800aa14 <_scanf_chars+0x48>
 800aa04:	682a      	ldr	r2, [r5, #0]
 800aa06:	7811      	ldrb	r1, [r2, #0]
 800aa08:	6962      	ldr	r2, [r4, #20]
 800aa0a:	5c52      	ldrb	r2, [r2, r1]
 800aa0c:	b952      	cbnz	r2, 800aa24 <_scanf_chars+0x58>
 800aa0e:	2f00      	cmp	r7, #0
 800aa10:	d031      	beq.n	800aa76 <_scanf_chars+0xaa>
 800aa12:	e022      	b.n	800aa5a <_scanf_chars+0x8e>
 800aa14:	2802      	cmp	r0, #2
 800aa16:	d120      	bne.n	800aa5a <_scanf_chars+0x8e>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aa20:	071b      	lsls	r3, r3, #28
 800aa22:	d41a      	bmi.n	800aa5a <_scanf_chars+0x8e>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	06da      	lsls	r2, r3, #27
 800aa28:	bf5e      	ittt	pl
 800aa2a:	682b      	ldrpl	r3, [r5, #0]
 800aa2c:	781b      	ldrbpl	r3, [r3, #0]
 800aa2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aa32:	682a      	ldr	r2, [r5, #0]
 800aa34:	686b      	ldr	r3, [r5, #4]
 800aa36:	3201      	adds	r2, #1
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	68a2      	ldr	r2, [r4, #8]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	3a01      	subs	r2, #1
 800aa40:	606b      	str	r3, [r5, #4]
 800aa42:	3701      	adds	r7, #1
 800aa44:	60a2      	str	r2, [r4, #8]
 800aa46:	b142      	cbz	r2, 800aa5a <_scanf_chars+0x8e>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dcd7      	bgt.n	800a9fc <_scanf_chars+0x30>
 800aa4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa50:	4629      	mov	r1, r5
 800aa52:	4640      	mov	r0, r8
 800aa54:	4798      	blx	r3
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d0d0      	beq.n	800a9fc <_scanf_chars+0x30>
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f013 0310 	ands.w	r3, r3, #16
 800aa60:	d105      	bne.n	800aa6e <_scanf_chars+0xa2>
 800aa62:	68e2      	ldr	r2, [r4, #12]
 800aa64:	3201      	adds	r2, #1
 800aa66:	60e2      	str	r2, [r4, #12]
 800aa68:	69a2      	ldr	r2, [r4, #24]
 800aa6a:	b102      	cbz	r2, 800aa6e <_scanf_chars+0xa2>
 800aa6c:	7033      	strb	r3, [r6, #0]
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	443b      	add	r3, r7
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	2000      	movs	r0, #0
 800aa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa7a:	bf00      	nop
 800aa7c:	0800ba55 	.word	0x0800ba55

0800aa80 <_scanf_i>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4698      	mov	r8, r3
 800aa86:	4b74      	ldr	r3, [pc, #464]	; (800ac58 <_scanf_i+0x1d8>)
 800aa88:	460c      	mov	r4, r1
 800aa8a:	4682      	mov	sl, r0
 800aa8c:	4616      	mov	r6, r2
 800aa8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa92:	b087      	sub	sp, #28
 800aa94:	ab03      	add	r3, sp, #12
 800aa96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa9a:	4b70      	ldr	r3, [pc, #448]	; (800ac5c <_scanf_i+0x1dc>)
 800aa9c:	69a1      	ldr	r1, [r4, #24]
 800aa9e:	4a70      	ldr	r2, [pc, #448]	; (800ac60 <_scanf_i+0x1e0>)
 800aaa0:	2903      	cmp	r1, #3
 800aaa2:	bf18      	it	ne
 800aaa4:	461a      	movne	r2, r3
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	9201      	str	r2, [sp, #4]
 800aaaa:	1e5a      	subs	r2, r3, #1
 800aaac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aab0:	bf88      	it	hi
 800aab2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aab6:	4627      	mov	r7, r4
 800aab8:	bf82      	ittt	hi
 800aaba:	eb03 0905 	addhi.w	r9, r3, r5
 800aabe:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aac2:	60a3      	strhi	r3, [r4, #8]
 800aac4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aac8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aacc:	bf98      	it	ls
 800aace:	f04f 0900 	movls.w	r9, #0
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	463d      	mov	r5, r7
 800aad6:	f04f 0b00 	mov.w	fp, #0
 800aada:	6831      	ldr	r1, [r6, #0]
 800aadc:	ab03      	add	r3, sp, #12
 800aade:	7809      	ldrb	r1, [r1, #0]
 800aae0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aae4:	2202      	movs	r2, #2
 800aae6:	f7f5 fbb3 	bl	8000250 <memchr>
 800aaea:	b328      	cbz	r0, 800ab38 <_scanf_i+0xb8>
 800aaec:	f1bb 0f01 	cmp.w	fp, #1
 800aaf0:	d159      	bne.n	800aba6 <_scanf_i+0x126>
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	b92a      	cbnz	r2, 800ab02 <_scanf_i+0x82>
 800aaf6:	6822      	ldr	r2, [r4, #0]
 800aaf8:	2308      	movs	r3, #8
 800aafa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab08:	6022      	str	r2, [r4, #0]
 800ab0a:	68a2      	ldr	r2, [r4, #8]
 800ab0c:	1e51      	subs	r1, r2, #1
 800ab0e:	60a1      	str	r1, [r4, #8]
 800ab10:	b192      	cbz	r2, 800ab38 <_scanf_i+0xb8>
 800ab12:	6832      	ldr	r2, [r6, #0]
 800ab14:	1c51      	adds	r1, r2, #1
 800ab16:	6031      	str	r1, [r6, #0]
 800ab18:	7812      	ldrb	r2, [r2, #0]
 800ab1a:	f805 2b01 	strb.w	r2, [r5], #1
 800ab1e:	6872      	ldr	r2, [r6, #4]
 800ab20:	3a01      	subs	r2, #1
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	6072      	str	r2, [r6, #4]
 800ab26:	dc07      	bgt.n	800ab38 <_scanf_i+0xb8>
 800ab28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4790      	blx	r2
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f040 8085 	bne.w	800ac42 <_scanf_i+0x1c2>
 800ab38:	f10b 0b01 	add.w	fp, fp, #1
 800ab3c:	f1bb 0f03 	cmp.w	fp, #3
 800ab40:	d1cb      	bne.n	800aada <_scanf_i+0x5a>
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	b90b      	cbnz	r3, 800ab4a <_scanf_i+0xca>
 800ab46:	230a      	movs	r3, #10
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	4945      	ldr	r1, [pc, #276]	; (800ac64 <_scanf_i+0x1e4>)
 800ab4e:	6960      	ldr	r0, [r4, #20]
 800ab50:	1ac9      	subs	r1, r1, r3
 800ab52:	f000 f949 	bl	800ade8 <__sccl>
 800ab56:	f04f 0b00 	mov.w	fp, #0
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d03d      	beq.n	800abde <_scanf_i+0x15e>
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	6960      	ldr	r0, [r4, #20]
 800ab66:	f891 c000 	ldrb.w	ip, [r1]
 800ab6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d035      	beq.n	800abde <_scanf_i+0x15e>
 800ab72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ab76:	d124      	bne.n	800abc2 <_scanf_i+0x142>
 800ab78:	0510      	lsls	r0, r2, #20
 800ab7a:	d522      	bpl.n	800abc2 <_scanf_i+0x142>
 800ab7c:	f10b 0b01 	add.w	fp, fp, #1
 800ab80:	f1b9 0f00 	cmp.w	r9, #0
 800ab84:	d003      	beq.n	800ab8e <_scanf_i+0x10e>
 800ab86:	3301      	adds	r3, #1
 800ab88:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	6873      	ldr	r3, [r6, #4]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	6073      	str	r3, [r6, #4]
 800ab96:	dd1b      	ble.n	800abd0 <_scanf_i+0x150>
 800ab98:	6833      	ldr	r3, [r6, #0]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	60a3      	str	r3, [r4, #8]
 800aba4:	e7d9      	b.n	800ab5a <_scanf_i+0xda>
 800aba6:	f1bb 0f02 	cmp.w	fp, #2
 800abaa:	d1ae      	bne.n	800ab0a <_scanf_i+0x8a>
 800abac:	6822      	ldr	r2, [r4, #0]
 800abae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800abb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800abb6:	d1bf      	bne.n	800ab38 <_scanf_i+0xb8>
 800abb8:	2310      	movs	r3, #16
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abc0:	e7a2      	b.n	800ab08 <_scanf_i+0x88>
 800abc2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800abc6:	6022      	str	r2, [r4, #0]
 800abc8:	780b      	ldrb	r3, [r1, #0]
 800abca:	f805 3b01 	strb.w	r3, [r5], #1
 800abce:	e7de      	b.n	800ab8e <_scanf_i+0x10e>
 800abd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abd4:	4631      	mov	r1, r6
 800abd6:	4650      	mov	r0, sl
 800abd8:	4798      	blx	r3
 800abda:	2800      	cmp	r0, #0
 800abdc:	d0df      	beq.n	800ab9e <_scanf_i+0x11e>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	05d9      	lsls	r1, r3, #23
 800abe2:	d50d      	bpl.n	800ac00 <_scanf_i+0x180>
 800abe4:	42bd      	cmp	r5, r7
 800abe6:	d909      	bls.n	800abfc <_scanf_i+0x17c>
 800abe8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800abec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abf0:	4632      	mov	r2, r6
 800abf2:	4650      	mov	r0, sl
 800abf4:	4798      	blx	r3
 800abf6:	f105 39ff 	add.w	r9, r5, #4294967295
 800abfa:	464d      	mov	r5, r9
 800abfc:	42bd      	cmp	r5, r7
 800abfe:	d028      	beq.n	800ac52 <_scanf_i+0x1d2>
 800ac00:	6822      	ldr	r2, [r4, #0]
 800ac02:	f012 0210 	ands.w	r2, r2, #16
 800ac06:	d113      	bne.n	800ac30 <_scanf_i+0x1b0>
 800ac08:	702a      	strb	r2, [r5, #0]
 800ac0a:	6863      	ldr	r3, [r4, #4]
 800ac0c:	9e01      	ldr	r6, [sp, #4]
 800ac0e:	4639      	mov	r1, r7
 800ac10:	4650      	mov	r0, sl
 800ac12:	47b0      	blx	r6
 800ac14:	f8d8 3000 	ldr.w	r3, [r8]
 800ac18:	6821      	ldr	r1, [r4, #0]
 800ac1a:	1d1a      	adds	r2, r3, #4
 800ac1c:	f8c8 2000 	str.w	r2, [r8]
 800ac20:	f011 0f20 	tst.w	r1, #32
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	d00f      	beq.n	800ac48 <_scanf_i+0x1c8>
 800ac28:	6018      	str	r0, [r3, #0]
 800ac2a:	68e3      	ldr	r3, [r4, #12]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	60e3      	str	r3, [r4, #12]
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	1bed      	subs	r5, r5, r7
 800ac34:	445d      	add	r5, fp
 800ac36:	442b      	add	r3, r5
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	b007      	add	sp, #28
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	f04f 0b00 	mov.w	fp, #0
 800ac46:	e7ca      	b.n	800abde <_scanf_i+0x15e>
 800ac48:	07ca      	lsls	r2, r1, #31
 800ac4a:	bf4c      	ite	mi
 800ac4c:	8018      	strhmi	r0, [r3, #0]
 800ac4e:	6018      	strpl	r0, [r3, #0]
 800ac50:	e7eb      	b.n	800ac2a <_scanf_i+0x1aa>
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7f2      	b.n	800ac3c <_scanf_i+0x1bc>
 800ac56:	bf00      	nop
 800ac58:	0800ba30 	.word	0x0800ba30
 800ac5c:	0800b075 	.word	0x0800b075
 800ac60:	080098b9 	.word	0x080098b9
 800ac64:	0800bc45 	.word	0x0800bc45

0800ac68 <__sflush_r>:
 800ac68:	898a      	ldrh	r2, [r1, #12]
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	0710      	lsls	r0, r2, #28
 800ac72:	460c      	mov	r4, r1
 800ac74:	d458      	bmi.n	800ad28 <__sflush_r+0xc0>
 800ac76:	684b      	ldr	r3, [r1, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc05      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dc02      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac8a:	2e00      	cmp	r6, #0
 800ac8c:	d0f9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac94:	682f      	ldr	r7, [r5, #0]
 800ac96:	6a21      	ldr	r1, [r4, #32]
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	d032      	beq.n	800ad02 <__sflush_r+0x9a>
 800ac9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	075a      	lsls	r2, r3, #29
 800aca2:	d505      	bpl.n	800acb0 <__sflush_r+0x48>
 800aca4:	6863      	ldr	r3, [r4, #4]
 800aca6:	1ac0      	subs	r0, r0, r3
 800aca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acaa:	b10b      	cbz	r3, 800acb0 <__sflush_r+0x48>
 800acac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acae:	1ac0      	subs	r0, r0, r3
 800acb0:	2300      	movs	r3, #0
 800acb2:	4602      	mov	r2, r0
 800acb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acb6:	6a21      	ldr	r1, [r4, #32]
 800acb8:	4628      	mov	r0, r5
 800acba:	47b0      	blx	r6
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	d106      	bne.n	800acd0 <__sflush_r+0x68>
 800acc2:	6829      	ldr	r1, [r5, #0]
 800acc4:	291d      	cmp	r1, #29
 800acc6:	d82b      	bhi.n	800ad20 <__sflush_r+0xb8>
 800acc8:	4a29      	ldr	r2, [pc, #164]	; (800ad70 <__sflush_r+0x108>)
 800acca:	410a      	asrs	r2, r1
 800accc:	07d6      	lsls	r6, r2, #31
 800acce:	d427      	bmi.n	800ad20 <__sflush_r+0xb8>
 800acd0:	2200      	movs	r2, #0
 800acd2:	6062      	str	r2, [r4, #4]
 800acd4:	04d9      	lsls	r1, r3, #19
 800acd6:	6922      	ldr	r2, [r4, #16]
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	d504      	bpl.n	800ace6 <__sflush_r+0x7e>
 800acdc:	1c42      	adds	r2, r0, #1
 800acde:	d101      	bne.n	800ace4 <__sflush_r+0x7c>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b903      	cbnz	r3, 800ace6 <__sflush_r+0x7e>
 800ace4:	6560      	str	r0, [r4, #84]	; 0x54
 800ace6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ace8:	602f      	str	r7, [r5, #0]
 800acea:	2900      	cmp	r1, #0
 800acec:	d0c9      	beq.n	800ac82 <__sflush_r+0x1a>
 800acee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf2:	4299      	cmp	r1, r3
 800acf4:	d002      	beq.n	800acfc <__sflush_r+0x94>
 800acf6:	4628      	mov	r0, r5
 800acf8:	f7ff f8ae 	bl	8009e58 <_free_r>
 800acfc:	2000      	movs	r0, #0
 800acfe:	6360      	str	r0, [r4, #52]	; 0x34
 800ad00:	e7c0      	b.n	800ac84 <__sflush_r+0x1c>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b0      	blx	r6
 800ad08:	1c41      	adds	r1, r0, #1
 800ad0a:	d1c8      	bne.n	800ac9e <__sflush_r+0x36>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0c5      	beq.n	800ac9e <__sflush_r+0x36>
 800ad12:	2b1d      	cmp	r3, #29
 800ad14:	d001      	beq.n	800ad1a <__sflush_r+0xb2>
 800ad16:	2b16      	cmp	r3, #22
 800ad18:	d101      	bne.n	800ad1e <__sflush_r+0xb6>
 800ad1a:	602f      	str	r7, [r5, #0]
 800ad1c:	e7b1      	b.n	800ac82 <__sflush_r+0x1a>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	e7ad      	b.n	800ac84 <__sflush_r+0x1c>
 800ad28:	690f      	ldr	r7, [r1, #16]
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d0a9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ad2e:	0793      	lsls	r3, r2, #30
 800ad30:	680e      	ldr	r6, [r1, #0]
 800ad32:	bf08      	it	eq
 800ad34:	694b      	ldreq	r3, [r1, #20]
 800ad36:	600f      	str	r7, [r1, #0]
 800ad38:	bf18      	it	ne
 800ad3a:	2300      	movne	r3, #0
 800ad3c:	eba6 0807 	sub.w	r8, r6, r7
 800ad40:	608b      	str	r3, [r1, #8]
 800ad42:	f1b8 0f00 	cmp.w	r8, #0
 800ad46:	dd9c      	ble.n	800ac82 <__sflush_r+0x1a>
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad4c:	4643      	mov	r3, r8
 800ad4e:	463a      	mov	r2, r7
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b0      	blx	r6
 800ad54:	2800      	cmp	r0, #0
 800ad56:	dc06      	bgt.n	800ad66 <__sflush_r+0xfe>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e78e      	b.n	800ac84 <__sflush_r+0x1c>
 800ad66:	4407      	add	r7, r0
 800ad68:	eba8 0800 	sub.w	r8, r8, r0
 800ad6c:	e7e9      	b.n	800ad42 <__sflush_r+0xda>
 800ad6e:	bf00      	nop
 800ad70:	dfbffffe 	.word	0xdfbffffe

0800ad74 <_fflush_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	690b      	ldr	r3, [r1, #16]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	b913      	cbnz	r3, 800ad84 <_fflush_r+0x10>
 800ad7e:	2500      	movs	r5, #0
 800ad80:	4628      	mov	r0, r5
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	b118      	cbz	r0, 800ad8e <_fflush_r+0x1a>
 800ad86:	6a03      	ldr	r3, [r0, #32]
 800ad88:	b90b      	cbnz	r3, 800ad8e <_fflush_r+0x1a>
 800ad8a:	f7fe fe1b 	bl	80099c4 <__sinit>
 800ad8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0f3      	beq.n	800ad7e <_fflush_r+0xa>
 800ad96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad98:	07d0      	lsls	r0, r2, #31
 800ad9a:	d404      	bmi.n	800ada6 <_fflush_r+0x32>
 800ad9c:	0599      	lsls	r1, r3, #22
 800ad9e:	d402      	bmi.n	800ada6 <_fflush_r+0x32>
 800ada0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ada2:	f7ff f823 	bl	8009dec <__retarget_lock_acquire_recursive>
 800ada6:	4628      	mov	r0, r5
 800ada8:	4621      	mov	r1, r4
 800adaa:	f7ff ff5d 	bl	800ac68 <__sflush_r>
 800adae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb0:	07da      	lsls	r2, r3, #31
 800adb2:	4605      	mov	r5, r0
 800adb4:	d4e4      	bmi.n	800ad80 <_fflush_r+0xc>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	059b      	lsls	r3, r3, #22
 800adba:	d4e1      	bmi.n	800ad80 <_fflush_r+0xc>
 800adbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adbe:	f7ff f816 	bl	8009dee <__retarget_lock_release_recursive>
 800adc2:	e7dd      	b.n	800ad80 <_fflush_r+0xc>

0800adc4 <fiprintf>:
 800adc4:	b40e      	push	{r1, r2, r3}
 800adc6:	b503      	push	{r0, r1, lr}
 800adc8:	4601      	mov	r1, r0
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	4805      	ldr	r0, [pc, #20]	; (800ade4 <fiprintf+0x20>)
 800adce:	f853 2b04 	ldr.w	r2, [r3], #4
 800add2:	6800      	ldr	r0, [r0, #0]
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	f000 f979 	bl	800b0cc <_vfiprintf_r>
 800adda:	b002      	add	sp, #8
 800addc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade0:	b003      	add	sp, #12
 800ade2:	4770      	bx	lr
 800ade4:	20000068 	.word	0x20000068

0800ade8 <__sccl>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	780b      	ldrb	r3, [r1, #0]
 800adec:	4604      	mov	r4, r0
 800adee:	2b5e      	cmp	r3, #94	; 0x5e
 800adf0:	bf0b      	itete	eq
 800adf2:	784b      	ldrbeq	r3, [r1, #1]
 800adf4:	1c4a      	addne	r2, r1, #1
 800adf6:	1c8a      	addeq	r2, r1, #2
 800adf8:	2100      	movne	r1, #0
 800adfa:	bf08      	it	eq
 800adfc:	2101      	moveq	r1, #1
 800adfe:	3801      	subs	r0, #1
 800ae00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ae04:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ae08:	42a8      	cmp	r0, r5
 800ae0a:	d1fb      	bne.n	800ae04 <__sccl+0x1c>
 800ae0c:	b90b      	cbnz	r3, 800ae12 <__sccl+0x2a>
 800ae0e:	1e50      	subs	r0, r2, #1
 800ae10:	bd70      	pop	{r4, r5, r6, pc}
 800ae12:	f081 0101 	eor.w	r1, r1, #1
 800ae16:	54e1      	strb	r1, [r4, r3]
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ae20:	2d2d      	cmp	r5, #45	; 0x2d
 800ae22:	d005      	beq.n	800ae30 <__sccl+0x48>
 800ae24:	2d5d      	cmp	r5, #93	; 0x5d
 800ae26:	d016      	beq.n	800ae56 <__sccl+0x6e>
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d0f1      	beq.n	800ae10 <__sccl+0x28>
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	e7f2      	b.n	800ae16 <__sccl+0x2e>
 800ae30:	7846      	ldrb	r6, [r0, #1]
 800ae32:	2e5d      	cmp	r6, #93	; 0x5d
 800ae34:	d0fa      	beq.n	800ae2c <__sccl+0x44>
 800ae36:	42b3      	cmp	r3, r6
 800ae38:	dcf8      	bgt.n	800ae2c <__sccl+0x44>
 800ae3a:	3002      	adds	r0, #2
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	3201      	adds	r2, #1
 800ae40:	4296      	cmp	r6, r2
 800ae42:	54a1      	strb	r1, [r4, r2]
 800ae44:	dcfb      	bgt.n	800ae3e <__sccl+0x56>
 800ae46:	1af2      	subs	r2, r6, r3
 800ae48:	3a01      	subs	r2, #1
 800ae4a:	1c5d      	adds	r5, r3, #1
 800ae4c:	42b3      	cmp	r3, r6
 800ae4e:	bfa8      	it	ge
 800ae50:	2200      	movge	r2, #0
 800ae52:	18ab      	adds	r3, r5, r2
 800ae54:	e7e1      	b.n	800ae1a <__sccl+0x32>
 800ae56:	4610      	mov	r0, r2
 800ae58:	e7da      	b.n	800ae10 <__sccl+0x28>

0800ae5a <__submore>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae66:	4299      	cmp	r1, r3
 800ae68:	d11d      	bne.n	800aea6 <__submore+0x4c>
 800ae6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae6e:	f7ff f867 	bl	8009f40 <_malloc_r>
 800ae72:	b918      	cbnz	r0, 800ae7c <__submore+0x22>
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae80:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ae86:	6360      	str	r0, [r4, #52]	; 0x34
 800ae88:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ae8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ae90:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ae94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ae98:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ae9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aea0:	6020      	str	r0, [r4, #0]
 800aea2:	2000      	movs	r0, #0
 800aea4:	e7e8      	b.n	800ae78 <__submore+0x1e>
 800aea6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aea8:	0077      	lsls	r7, r6, #1
 800aeaa:	463a      	mov	r2, r7
 800aeac:	f000 f841 	bl	800af32 <_realloc_r>
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0de      	beq.n	800ae74 <__submore+0x1a>
 800aeb6:	eb00 0806 	add.w	r8, r0, r6
 800aeba:	4601      	mov	r1, r0
 800aebc:	4632      	mov	r2, r6
 800aebe:	4640      	mov	r0, r8
 800aec0:	f7fe ff9e 	bl	8009e00 <memcpy>
 800aec4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aec8:	f8c4 8000 	str.w	r8, [r4]
 800aecc:	e7e9      	b.n	800aea2 <__submore+0x48>

0800aece <memmove>:
 800aece:	4288      	cmp	r0, r1
 800aed0:	b510      	push	{r4, lr}
 800aed2:	eb01 0402 	add.w	r4, r1, r2
 800aed6:	d902      	bls.n	800aede <memmove+0x10>
 800aed8:	4284      	cmp	r4, r0
 800aeda:	4623      	mov	r3, r4
 800aedc:	d807      	bhi.n	800aeee <memmove+0x20>
 800aede:	1e43      	subs	r3, r0, #1
 800aee0:	42a1      	cmp	r1, r4
 800aee2:	d008      	beq.n	800aef6 <memmove+0x28>
 800aee4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aee8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeec:	e7f8      	b.n	800aee0 <memmove+0x12>
 800aeee:	4402      	add	r2, r0
 800aef0:	4601      	mov	r1, r0
 800aef2:	428a      	cmp	r2, r1
 800aef4:	d100      	bne.n	800aef8 <memmove+0x2a>
 800aef6:	bd10      	pop	{r4, pc}
 800aef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aefc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af00:	e7f7      	b.n	800aef2 <memmove+0x24>
	...

0800af04 <_sbrk_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d06      	ldr	r5, [pc, #24]	; (800af20 <_sbrk_r+0x1c>)
 800af08:	2300      	movs	r3, #0
 800af0a:	4604      	mov	r4, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	f7f7 fb68 	bl	80025e4 <_sbrk>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_sbrk_r+0x1a>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_sbrk_r+0x1a>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	20005314 	.word	0x20005314

0800af24 <abort>:
 800af24:	b508      	push	{r3, lr}
 800af26:	2006      	movs	r0, #6
 800af28:	f000 faa8 	bl	800b47c <raise>
 800af2c:	2001      	movs	r0, #1
 800af2e:	f7f7 fae1 	bl	80024f4 <_exit>

0800af32 <_realloc_r>:
 800af32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af36:	4680      	mov	r8, r0
 800af38:	4614      	mov	r4, r2
 800af3a:	460e      	mov	r6, r1
 800af3c:	b921      	cbnz	r1, 800af48 <_realloc_r+0x16>
 800af3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af42:	4611      	mov	r1, r2
 800af44:	f7fe bffc 	b.w	8009f40 <_malloc_r>
 800af48:	b92a      	cbnz	r2, 800af56 <_realloc_r+0x24>
 800af4a:	f7fe ff85 	bl	8009e58 <_free_r>
 800af4e:	4625      	mov	r5, r4
 800af50:	4628      	mov	r0, r5
 800af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af56:	f000 faad 	bl	800b4b4 <_malloc_usable_size_r>
 800af5a:	4284      	cmp	r4, r0
 800af5c:	4607      	mov	r7, r0
 800af5e:	d802      	bhi.n	800af66 <_realloc_r+0x34>
 800af60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af64:	d812      	bhi.n	800af8c <_realloc_r+0x5a>
 800af66:	4621      	mov	r1, r4
 800af68:	4640      	mov	r0, r8
 800af6a:	f7fe ffe9 	bl	8009f40 <_malloc_r>
 800af6e:	4605      	mov	r5, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d0ed      	beq.n	800af50 <_realloc_r+0x1e>
 800af74:	42bc      	cmp	r4, r7
 800af76:	4622      	mov	r2, r4
 800af78:	4631      	mov	r1, r6
 800af7a:	bf28      	it	cs
 800af7c:	463a      	movcs	r2, r7
 800af7e:	f7fe ff3f 	bl	8009e00 <memcpy>
 800af82:	4631      	mov	r1, r6
 800af84:	4640      	mov	r0, r8
 800af86:	f7fe ff67 	bl	8009e58 <_free_r>
 800af8a:	e7e1      	b.n	800af50 <_realloc_r+0x1e>
 800af8c:	4635      	mov	r5, r6
 800af8e:	e7df      	b.n	800af50 <_realloc_r+0x1e>

0800af90 <_strtoul_l.constprop.0>:
 800af90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af94:	4f36      	ldr	r7, [pc, #216]	; (800b070 <_strtoul_l.constprop.0+0xe0>)
 800af96:	4686      	mov	lr, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	4628      	mov	r0, r5
 800af9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afa0:	5d3e      	ldrb	r6, [r7, r4]
 800afa2:	f016 0608 	ands.w	r6, r6, #8
 800afa6:	d1f8      	bne.n	800af9a <_strtoul_l.constprop.0+0xa>
 800afa8:	2c2d      	cmp	r4, #45	; 0x2d
 800afaa:	d130      	bne.n	800b00e <_strtoul_l.constprop.0+0x7e>
 800afac:	782c      	ldrb	r4, [r5, #0]
 800afae:	2601      	movs	r6, #1
 800afb0:	1c85      	adds	r5, r0, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d057      	beq.n	800b066 <_strtoul_l.constprop.0+0xd6>
 800afb6:	2b10      	cmp	r3, #16
 800afb8:	d109      	bne.n	800afce <_strtoul_l.constprop.0+0x3e>
 800afba:	2c30      	cmp	r4, #48	; 0x30
 800afbc:	d107      	bne.n	800afce <_strtoul_l.constprop.0+0x3e>
 800afbe:	7828      	ldrb	r0, [r5, #0]
 800afc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800afc4:	2858      	cmp	r0, #88	; 0x58
 800afc6:	d149      	bne.n	800b05c <_strtoul_l.constprop.0+0xcc>
 800afc8:	786c      	ldrb	r4, [r5, #1]
 800afca:	2310      	movs	r3, #16
 800afcc:	3502      	adds	r5, #2
 800afce:	f04f 38ff 	mov.w	r8, #4294967295
 800afd2:	2700      	movs	r7, #0
 800afd4:	fbb8 f8f3 	udiv	r8, r8, r3
 800afd8:	fb03 f908 	mul.w	r9, r3, r8
 800afdc:	ea6f 0909 	mvn.w	r9, r9
 800afe0:	4638      	mov	r0, r7
 800afe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800afe6:	f1bc 0f09 	cmp.w	ip, #9
 800afea:	d815      	bhi.n	800b018 <_strtoul_l.constprop.0+0x88>
 800afec:	4664      	mov	r4, ip
 800afee:	42a3      	cmp	r3, r4
 800aff0:	dd23      	ble.n	800b03a <_strtoul_l.constprop.0+0xaa>
 800aff2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aff6:	d007      	beq.n	800b008 <_strtoul_l.constprop.0+0x78>
 800aff8:	4580      	cmp	r8, r0
 800affa:	d31b      	bcc.n	800b034 <_strtoul_l.constprop.0+0xa4>
 800affc:	d101      	bne.n	800b002 <_strtoul_l.constprop.0+0x72>
 800affe:	45a1      	cmp	r9, r4
 800b000:	db18      	blt.n	800b034 <_strtoul_l.constprop.0+0xa4>
 800b002:	fb00 4003 	mla	r0, r0, r3, r4
 800b006:	2701      	movs	r7, #1
 800b008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b00c:	e7e9      	b.n	800afe2 <_strtoul_l.constprop.0+0x52>
 800b00e:	2c2b      	cmp	r4, #43	; 0x2b
 800b010:	bf04      	itt	eq
 800b012:	782c      	ldrbeq	r4, [r5, #0]
 800b014:	1c85      	addeq	r5, r0, #2
 800b016:	e7cc      	b.n	800afb2 <_strtoul_l.constprop.0+0x22>
 800b018:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b01c:	f1bc 0f19 	cmp.w	ip, #25
 800b020:	d801      	bhi.n	800b026 <_strtoul_l.constprop.0+0x96>
 800b022:	3c37      	subs	r4, #55	; 0x37
 800b024:	e7e3      	b.n	800afee <_strtoul_l.constprop.0+0x5e>
 800b026:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b02a:	f1bc 0f19 	cmp.w	ip, #25
 800b02e:	d804      	bhi.n	800b03a <_strtoul_l.constprop.0+0xaa>
 800b030:	3c57      	subs	r4, #87	; 0x57
 800b032:	e7dc      	b.n	800afee <_strtoul_l.constprop.0+0x5e>
 800b034:	f04f 37ff 	mov.w	r7, #4294967295
 800b038:	e7e6      	b.n	800b008 <_strtoul_l.constprop.0+0x78>
 800b03a:	1c7b      	adds	r3, r7, #1
 800b03c:	d106      	bne.n	800b04c <_strtoul_l.constprop.0+0xbc>
 800b03e:	2322      	movs	r3, #34	; 0x22
 800b040:	f8ce 3000 	str.w	r3, [lr]
 800b044:	4638      	mov	r0, r7
 800b046:	b932      	cbnz	r2, 800b056 <_strtoul_l.constprop.0+0xc6>
 800b048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b04c:	b106      	cbz	r6, 800b050 <_strtoul_l.constprop.0+0xc0>
 800b04e:	4240      	negs	r0, r0
 800b050:	2a00      	cmp	r2, #0
 800b052:	d0f9      	beq.n	800b048 <_strtoul_l.constprop.0+0xb8>
 800b054:	b107      	cbz	r7, 800b058 <_strtoul_l.constprop.0+0xc8>
 800b056:	1e69      	subs	r1, r5, #1
 800b058:	6011      	str	r1, [r2, #0]
 800b05a:	e7f5      	b.n	800b048 <_strtoul_l.constprop.0+0xb8>
 800b05c:	2430      	movs	r4, #48	; 0x30
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1b5      	bne.n	800afce <_strtoul_l.constprop.0+0x3e>
 800b062:	2308      	movs	r3, #8
 800b064:	e7b3      	b.n	800afce <_strtoul_l.constprop.0+0x3e>
 800b066:	2c30      	cmp	r4, #48	; 0x30
 800b068:	d0a9      	beq.n	800afbe <_strtoul_l.constprop.0+0x2e>
 800b06a:	230a      	movs	r3, #10
 800b06c:	e7af      	b.n	800afce <_strtoul_l.constprop.0+0x3e>
 800b06e:	bf00      	nop
 800b070:	0800ba55 	.word	0x0800ba55

0800b074 <_strtoul_r>:
 800b074:	f7ff bf8c 	b.w	800af90 <_strtoul_l.constprop.0>

0800b078 <__sfputc_r>:
 800b078:	6893      	ldr	r3, [r2, #8]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	b410      	push	{r4}
 800b080:	6093      	str	r3, [r2, #8]
 800b082:	da08      	bge.n	800b096 <__sfputc_r+0x1e>
 800b084:	6994      	ldr	r4, [r2, #24]
 800b086:	42a3      	cmp	r3, r4
 800b088:	db01      	blt.n	800b08e <__sfputc_r+0x16>
 800b08a:	290a      	cmp	r1, #10
 800b08c:	d103      	bne.n	800b096 <__sfputc_r+0x1e>
 800b08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b092:	f000 b935 	b.w	800b300 <__swbuf_r>
 800b096:	6813      	ldr	r3, [r2, #0]
 800b098:	1c58      	adds	r0, r3, #1
 800b09a:	6010      	str	r0, [r2, #0]
 800b09c:	7019      	strb	r1, [r3, #0]
 800b09e:	4608      	mov	r0, r1
 800b0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <__sfputs_r>:
 800b0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	460f      	mov	r7, r1
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	18d5      	adds	r5, r2, r3
 800b0b0:	42ac      	cmp	r4, r5
 800b0b2:	d101      	bne.n	800b0b8 <__sfputs_r+0x12>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e007      	b.n	800b0c8 <__sfputs_r+0x22>
 800b0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0bc:	463a      	mov	r2, r7
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f7ff ffda 	bl	800b078 <__sfputc_r>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d1f3      	bne.n	800b0b0 <__sfputs_r+0xa>
 800b0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0cc <_vfiprintf_r>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	b09d      	sub	sp, #116	; 0x74
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	4698      	mov	r8, r3
 800b0d8:	4606      	mov	r6, r0
 800b0da:	b118      	cbz	r0, 800b0e4 <_vfiprintf_r+0x18>
 800b0dc:	6a03      	ldr	r3, [r0, #32]
 800b0de:	b90b      	cbnz	r3, 800b0e4 <_vfiprintf_r+0x18>
 800b0e0:	f7fe fc70 	bl	80099c4 <__sinit>
 800b0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e6:	07d9      	lsls	r1, r3, #31
 800b0e8:	d405      	bmi.n	800b0f6 <_vfiprintf_r+0x2a>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	059a      	lsls	r2, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_vfiprintf_r+0x2a>
 800b0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0f2:	f7fe fe7b 	bl	8009dec <__retarget_lock_acquire_recursive>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	071b      	lsls	r3, r3, #28
 800b0fa:	d501      	bpl.n	800b100 <_vfiprintf_r+0x34>
 800b0fc:	692b      	ldr	r3, [r5, #16]
 800b0fe:	b99b      	cbnz	r3, 800b128 <_vfiprintf_r+0x5c>
 800b100:	4629      	mov	r1, r5
 800b102:	4630      	mov	r0, r6
 800b104:	f000 f93a 	bl	800b37c <__swsetup_r>
 800b108:	b170      	cbz	r0, 800b128 <_vfiprintf_r+0x5c>
 800b10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b10c:	07dc      	lsls	r4, r3, #31
 800b10e:	d504      	bpl.n	800b11a <_vfiprintf_r+0x4e>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	b01d      	add	sp, #116	; 0x74
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	0598      	lsls	r0, r3, #22
 800b11e:	d4f7      	bmi.n	800b110 <_vfiprintf_r+0x44>
 800b120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b122:	f7fe fe64 	bl	8009dee <__retarget_lock_release_recursive>
 800b126:	e7f3      	b.n	800b110 <_vfiprintf_r+0x44>
 800b128:	2300      	movs	r3, #0
 800b12a:	9309      	str	r3, [sp, #36]	; 0x24
 800b12c:	2320      	movs	r3, #32
 800b12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b132:	f8cd 800c 	str.w	r8, [sp, #12]
 800b136:	2330      	movs	r3, #48	; 0x30
 800b138:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2ec <_vfiprintf_r+0x220>
 800b13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b140:	f04f 0901 	mov.w	r9, #1
 800b144:	4623      	mov	r3, r4
 800b146:	469a      	mov	sl, r3
 800b148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14c:	b10a      	cbz	r2, 800b152 <_vfiprintf_r+0x86>
 800b14e:	2a25      	cmp	r2, #37	; 0x25
 800b150:	d1f9      	bne.n	800b146 <_vfiprintf_r+0x7a>
 800b152:	ebba 0b04 	subs.w	fp, sl, r4
 800b156:	d00b      	beq.n	800b170 <_vfiprintf_r+0xa4>
 800b158:	465b      	mov	r3, fp
 800b15a:	4622      	mov	r2, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff ffa1 	bl	800b0a6 <__sfputs_r>
 800b164:	3001      	adds	r0, #1
 800b166:	f000 80a9 	beq.w	800b2bc <_vfiprintf_r+0x1f0>
 800b16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b16c:	445a      	add	r2, fp
 800b16e:	9209      	str	r2, [sp, #36]	; 0x24
 800b170:	f89a 3000 	ldrb.w	r3, [sl]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 80a1 	beq.w	800b2bc <_vfiprintf_r+0x1f0>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f04f 32ff 	mov.w	r2, #4294967295
 800b180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b184:	f10a 0a01 	add.w	sl, sl, #1
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b190:	931a      	str	r3, [sp, #104]	; 0x68
 800b192:	4654      	mov	r4, sl
 800b194:	2205      	movs	r2, #5
 800b196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19a:	4854      	ldr	r0, [pc, #336]	; (800b2ec <_vfiprintf_r+0x220>)
 800b19c:	f7f5 f858 	bl	8000250 <memchr>
 800b1a0:	9a04      	ldr	r2, [sp, #16]
 800b1a2:	b9d8      	cbnz	r0, 800b1dc <_vfiprintf_r+0x110>
 800b1a4:	06d1      	lsls	r1, r2, #27
 800b1a6:	bf44      	itt	mi
 800b1a8:	2320      	movmi	r3, #32
 800b1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ae:	0713      	lsls	r3, r2, #28
 800b1b0:	bf44      	itt	mi
 800b1b2:	232b      	movmi	r3, #43	; 0x2b
 800b1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1be:	d015      	beq.n	800b1ec <_vfiprintf_r+0x120>
 800b1c0:	9a07      	ldr	r2, [sp, #28]
 800b1c2:	4654      	mov	r4, sl
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	f04f 0c0a 	mov.w	ip, #10
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d0:	3b30      	subs	r3, #48	; 0x30
 800b1d2:	2b09      	cmp	r3, #9
 800b1d4:	d94d      	bls.n	800b272 <_vfiprintf_r+0x1a6>
 800b1d6:	b1b0      	cbz	r0, 800b206 <_vfiprintf_r+0x13a>
 800b1d8:	9207      	str	r2, [sp, #28]
 800b1da:	e014      	b.n	800b206 <_vfiprintf_r+0x13a>
 800b1dc:	eba0 0308 	sub.w	r3, r0, r8
 800b1e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	9304      	str	r3, [sp, #16]
 800b1e8:	46a2      	mov	sl, r4
 800b1ea:	e7d2      	b.n	800b192 <_vfiprintf_r+0xc6>
 800b1ec:	9b03      	ldr	r3, [sp, #12]
 800b1ee:	1d19      	adds	r1, r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	9103      	str	r1, [sp, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bfbb      	ittet	lt
 800b1f8:	425b      	neglt	r3, r3
 800b1fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b1fe:	9307      	strge	r3, [sp, #28]
 800b200:	9307      	strlt	r3, [sp, #28]
 800b202:	bfb8      	it	lt
 800b204:	9204      	strlt	r2, [sp, #16]
 800b206:	7823      	ldrb	r3, [r4, #0]
 800b208:	2b2e      	cmp	r3, #46	; 0x2e
 800b20a:	d10c      	bne.n	800b226 <_vfiprintf_r+0x15a>
 800b20c:	7863      	ldrb	r3, [r4, #1]
 800b20e:	2b2a      	cmp	r3, #42	; 0x2a
 800b210:	d134      	bne.n	800b27c <_vfiprintf_r+0x1b0>
 800b212:	9b03      	ldr	r3, [sp, #12]
 800b214:	1d1a      	adds	r2, r3, #4
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	9203      	str	r2, [sp, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	bfb8      	it	lt
 800b21e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b222:	3402      	adds	r4, #2
 800b224:	9305      	str	r3, [sp, #20]
 800b226:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b2fc <_vfiprintf_r+0x230>
 800b22a:	7821      	ldrb	r1, [r4, #0]
 800b22c:	2203      	movs	r2, #3
 800b22e:	4650      	mov	r0, sl
 800b230:	f7f5 f80e 	bl	8000250 <memchr>
 800b234:	b138      	cbz	r0, 800b246 <_vfiprintf_r+0x17a>
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	eba0 000a 	sub.w	r0, r0, sl
 800b23c:	2240      	movs	r2, #64	; 0x40
 800b23e:	4082      	lsls	r2, r0
 800b240:	4313      	orrs	r3, r2
 800b242:	3401      	adds	r4, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	4829      	ldr	r0, [pc, #164]	; (800b2f0 <_vfiprintf_r+0x224>)
 800b24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b250:	2206      	movs	r2, #6
 800b252:	f7f4 fffd 	bl	8000250 <memchr>
 800b256:	2800      	cmp	r0, #0
 800b258:	d03f      	beq.n	800b2da <_vfiprintf_r+0x20e>
 800b25a:	4b26      	ldr	r3, [pc, #152]	; (800b2f4 <_vfiprintf_r+0x228>)
 800b25c:	bb1b      	cbnz	r3, 800b2a6 <_vfiprintf_r+0x1da>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3307      	adds	r3, #7
 800b262:	f023 0307 	bic.w	r3, r3, #7
 800b266:	3308      	adds	r3, #8
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26c:	443b      	add	r3, r7
 800b26e:	9309      	str	r3, [sp, #36]	; 0x24
 800b270:	e768      	b.n	800b144 <_vfiprintf_r+0x78>
 800b272:	fb0c 3202 	mla	r2, ip, r2, r3
 800b276:	460c      	mov	r4, r1
 800b278:	2001      	movs	r0, #1
 800b27a:	e7a6      	b.n	800b1ca <_vfiprintf_r+0xfe>
 800b27c:	2300      	movs	r3, #0
 800b27e:	3401      	adds	r4, #1
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	4619      	mov	r1, r3
 800b284:	f04f 0c0a 	mov.w	ip, #10
 800b288:	4620      	mov	r0, r4
 800b28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28e:	3a30      	subs	r2, #48	; 0x30
 800b290:	2a09      	cmp	r2, #9
 800b292:	d903      	bls.n	800b29c <_vfiprintf_r+0x1d0>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0c6      	beq.n	800b226 <_vfiprintf_r+0x15a>
 800b298:	9105      	str	r1, [sp, #20]
 800b29a:	e7c4      	b.n	800b226 <_vfiprintf_r+0x15a>
 800b29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7f0      	b.n	800b288 <_vfiprintf_r+0x1bc>
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <_vfiprintf_r+0x22c>)
 800b2ae:	a904      	add	r1, sp, #16
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f3af 8000 	nop.w
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	1c78      	adds	r0, r7, #1
 800b2ba:	d1d6      	bne.n	800b26a <_vfiprintf_r+0x19e>
 800b2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2be:	07d9      	lsls	r1, r3, #31
 800b2c0:	d405      	bmi.n	800b2ce <_vfiprintf_r+0x202>
 800b2c2:	89ab      	ldrh	r3, [r5, #12]
 800b2c4:	059a      	lsls	r2, r3, #22
 800b2c6:	d402      	bmi.n	800b2ce <_vfiprintf_r+0x202>
 800b2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ca:	f7fe fd90 	bl	8009dee <__retarget_lock_release_recursive>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	065b      	lsls	r3, r3, #25
 800b2d2:	f53f af1d 	bmi.w	800b110 <_vfiprintf_r+0x44>
 800b2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2d8:	e71c      	b.n	800b114 <_vfiprintf_r+0x48>
 800b2da:	ab03      	add	r3, sp, #12
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	462a      	mov	r2, r5
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <_vfiprintf_r+0x22c>)
 800b2e2:	a904      	add	r1, sp, #16
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff fa4f 	bl	800a788 <_printf_i>
 800b2ea:	e7e4      	b.n	800b2b6 <_vfiprintf_r+0x1ea>
 800b2ec:	0800bc02 	.word	0x0800bc02
 800b2f0:	0800bc0c 	.word	0x0800bc0c
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	0800b0a7 	.word	0x0800b0a7
 800b2fc:	0800bc08 	.word	0x0800bc08

0800b300 <__swbuf_r>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	460e      	mov	r6, r1
 800b304:	4614      	mov	r4, r2
 800b306:	4605      	mov	r5, r0
 800b308:	b118      	cbz	r0, 800b312 <__swbuf_r+0x12>
 800b30a:	6a03      	ldr	r3, [r0, #32]
 800b30c:	b90b      	cbnz	r3, 800b312 <__swbuf_r+0x12>
 800b30e:	f7fe fb59 	bl	80099c4 <__sinit>
 800b312:	69a3      	ldr	r3, [r4, #24]
 800b314:	60a3      	str	r3, [r4, #8]
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	071a      	lsls	r2, r3, #28
 800b31a:	d525      	bpl.n	800b368 <__swbuf_r+0x68>
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	b31b      	cbz	r3, 800b368 <__swbuf_r+0x68>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	6922      	ldr	r2, [r4, #16]
 800b324:	1a98      	subs	r0, r3, r2
 800b326:	6963      	ldr	r3, [r4, #20]
 800b328:	b2f6      	uxtb	r6, r6
 800b32a:	4283      	cmp	r3, r0
 800b32c:	4637      	mov	r7, r6
 800b32e:	dc04      	bgt.n	800b33a <__swbuf_r+0x3a>
 800b330:	4621      	mov	r1, r4
 800b332:	4628      	mov	r0, r5
 800b334:	f7ff fd1e 	bl	800ad74 <_fflush_r>
 800b338:	b9e0      	cbnz	r0, 800b374 <__swbuf_r+0x74>
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	60a3      	str	r3, [r4, #8]
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	701e      	strb	r6, [r3, #0]
 800b348:	6962      	ldr	r2, [r4, #20]
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d004      	beq.n	800b35a <__swbuf_r+0x5a>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d506      	bpl.n	800b364 <__swbuf_r+0x64>
 800b356:	2e0a      	cmp	r6, #10
 800b358:	d104      	bne.n	800b364 <__swbuf_r+0x64>
 800b35a:	4621      	mov	r1, r4
 800b35c:	4628      	mov	r0, r5
 800b35e:	f7ff fd09 	bl	800ad74 <_fflush_r>
 800b362:	b938      	cbnz	r0, 800b374 <__swbuf_r+0x74>
 800b364:	4638      	mov	r0, r7
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 f806 	bl	800b37c <__swsetup_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	d0d5      	beq.n	800b320 <__swbuf_r+0x20>
 800b374:	f04f 37ff 	mov.w	r7, #4294967295
 800b378:	e7f4      	b.n	800b364 <__swbuf_r+0x64>
	...

0800b37c <__swsetup_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4b2a      	ldr	r3, [pc, #168]	; (800b428 <__swsetup_r+0xac>)
 800b380:	4605      	mov	r5, r0
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	460c      	mov	r4, r1
 800b386:	b118      	cbz	r0, 800b390 <__swsetup_r+0x14>
 800b388:	6a03      	ldr	r3, [r0, #32]
 800b38a:	b90b      	cbnz	r3, 800b390 <__swsetup_r+0x14>
 800b38c:	f7fe fb1a 	bl	80099c4 <__sinit>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b396:	0718      	lsls	r0, r3, #28
 800b398:	d422      	bmi.n	800b3e0 <__swsetup_r+0x64>
 800b39a:	06d9      	lsls	r1, r3, #27
 800b39c:	d407      	bmi.n	800b3ae <__swsetup_r+0x32>
 800b39e:	2309      	movs	r3, #9
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	e034      	b.n	800b418 <__swsetup_r+0x9c>
 800b3ae:	0758      	lsls	r0, r3, #29
 800b3b0:	d512      	bpl.n	800b3d8 <__swsetup_r+0x5c>
 800b3b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b4:	b141      	cbz	r1, 800b3c8 <__swsetup_r+0x4c>
 800b3b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	d002      	beq.n	800b3c4 <__swsetup_r+0x48>
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f7fe fd4a 	bl	8009e58 <_free_r>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	6363      	str	r3, [r4, #52]	; 0x34
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	6023      	str	r3, [r4, #0]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f043 0308 	orr.w	r3, r3, #8
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	b94b      	cbnz	r3, 800b3f8 <__swsetup_r+0x7c>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ee:	d003      	beq.n	800b3f8 <__swsetup_r+0x7c>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f000 f88c 	bl	800b510 <__smakebuf_r>
 800b3f8:	89a0      	ldrh	r0, [r4, #12]
 800b3fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3fe:	f010 0301 	ands.w	r3, r0, #1
 800b402:	d00a      	beq.n	800b41a <__swsetup_r+0x9e>
 800b404:	2300      	movs	r3, #0
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	6963      	ldr	r3, [r4, #20]
 800b40a:	425b      	negs	r3, r3
 800b40c:	61a3      	str	r3, [r4, #24]
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	b943      	cbnz	r3, 800b424 <__swsetup_r+0xa8>
 800b412:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b416:	d1c4      	bne.n	800b3a2 <__swsetup_r+0x26>
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	0781      	lsls	r1, r0, #30
 800b41c:	bf58      	it	pl
 800b41e:	6963      	ldrpl	r3, [r4, #20]
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	e7f4      	b.n	800b40e <__swsetup_r+0x92>
 800b424:	2000      	movs	r0, #0
 800b426:	e7f7      	b.n	800b418 <__swsetup_r+0x9c>
 800b428:	20000068 	.word	0x20000068

0800b42c <_raise_r>:
 800b42c:	291f      	cmp	r1, #31
 800b42e:	b538      	push	{r3, r4, r5, lr}
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	d904      	bls.n	800b440 <_raise_r+0x14>
 800b436:	2316      	movs	r3, #22
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b442:	b112      	cbz	r2, 800b44a <_raise_r+0x1e>
 800b444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b448:	b94b      	cbnz	r3, 800b45e <_raise_r+0x32>
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 f830 	bl	800b4b0 <_getpid_r>
 800b450:	462a      	mov	r2, r5
 800b452:	4601      	mov	r1, r0
 800b454:	4620      	mov	r0, r4
 800b456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b45a:	f000 b817 	b.w	800b48c <_kill_r>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d00a      	beq.n	800b478 <_raise_r+0x4c>
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	d103      	bne.n	800b46e <_raise_r+0x42>
 800b466:	2316      	movs	r3, #22
 800b468:	6003      	str	r3, [r0, #0]
 800b46a:	2001      	movs	r0, #1
 800b46c:	e7e7      	b.n	800b43e <_raise_r+0x12>
 800b46e:	2400      	movs	r4, #0
 800b470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b474:	4628      	mov	r0, r5
 800b476:	4798      	blx	r3
 800b478:	2000      	movs	r0, #0
 800b47a:	e7e0      	b.n	800b43e <_raise_r+0x12>

0800b47c <raise>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	; (800b488 <raise+0xc>)
 800b47e:	4601      	mov	r1, r0
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	f7ff bfd3 	b.w	800b42c <_raise_r>
 800b486:	bf00      	nop
 800b488:	20000068 	.word	0x20000068

0800b48c <_kill_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	; (800b4ac <_kill_r+0x20>)
 800b490:	2300      	movs	r3, #0
 800b492:	4604      	mov	r4, r0
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	f7f7 f81b 	bl	80024d4 <_kill>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	d102      	bne.n	800b4a8 <_kill_r+0x1c>
 800b4a2:	682b      	ldr	r3, [r5, #0]
 800b4a4:	b103      	cbz	r3, 800b4a8 <_kill_r+0x1c>
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	bd38      	pop	{r3, r4, r5, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20005314 	.word	0x20005314

0800b4b0 <_getpid_r>:
 800b4b0:	f7f7 b808 	b.w	80024c4 <_getpid>

0800b4b4 <_malloc_usable_size_r>:
 800b4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b8:	1f18      	subs	r0, r3, #4
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bfbc      	itt	lt
 800b4be:	580b      	ldrlt	r3, [r1, r0]
 800b4c0:	18c0      	addlt	r0, r0, r3
 800b4c2:	4770      	bx	lr

0800b4c4 <__swhatbuf_r>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	b096      	sub	sp, #88	; 0x58
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	461e      	mov	r6, r3
 800b4d4:	da0d      	bge.n	800b4f2 <__swhatbuf_r+0x2e>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4dc:	f04f 0100 	mov.w	r1, #0
 800b4e0:	bf0c      	ite	eq
 800b4e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b4e6:	2340      	movne	r3, #64	; 0x40
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	6031      	str	r1, [r6, #0]
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	b016      	add	sp, #88	; 0x58
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	466a      	mov	r2, sp
 800b4f4:	f000 f848 	bl	800b588 <_fstat_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dbec      	blt.n	800b4d6 <__swhatbuf_r+0x12>
 800b4fc:	9901      	ldr	r1, [sp, #4]
 800b4fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b502:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b506:	4259      	negs	r1, r3
 800b508:	4159      	adcs	r1, r3
 800b50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b50e:	e7eb      	b.n	800b4e8 <__swhatbuf_r+0x24>

0800b510 <__smakebuf_r>:
 800b510:	898b      	ldrh	r3, [r1, #12]
 800b512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b514:	079d      	lsls	r5, r3, #30
 800b516:	4606      	mov	r6, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	d507      	bpl.n	800b52c <__smakebuf_r+0x1c>
 800b51c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	2301      	movs	r3, #1
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	b002      	add	sp, #8
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	ab01      	add	r3, sp, #4
 800b52e:	466a      	mov	r2, sp
 800b530:	f7ff ffc8 	bl	800b4c4 <__swhatbuf_r>
 800b534:	9900      	ldr	r1, [sp, #0]
 800b536:	4605      	mov	r5, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	f7fe fd01 	bl	8009f40 <_malloc_r>
 800b53e:	b948      	cbnz	r0, 800b554 <__smakebuf_r+0x44>
 800b540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b544:	059a      	lsls	r2, r3, #22
 800b546:	d4ef      	bmi.n	800b528 <__smakebuf_r+0x18>
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	f043 0302 	orr.w	r3, r3, #2
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	e7e3      	b.n	800b51c <__smakebuf_r+0xc>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	6163      	str	r3, [r4, #20]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	b15b      	cbz	r3, 800b580 <__smakebuf_r+0x70>
 800b568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 f81d 	bl	800b5ac <_isatty_r>
 800b572:	b128      	cbz	r0, 800b580 <__smakebuf_r+0x70>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	431d      	orrs	r5, r3
 800b584:	81a5      	strh	r5, [r4, #12]
 800b586:	e7cf      	b.n	800b528 <__smakebuf_r+0x18>

0800b588 <_fstat_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d07      	ldr	r5, [pc, #28]	; (800b5a8 <_fstat_r+0x20>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	4611      	mov	r1, r2
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	f7f6 fffc 	bl	8002592 <_fstat>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d102      	bne.n	800b5a4 <_fstat_r+0x1c>
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	b103      	cbz	r3, 800b5a4 <_fstat_r+0x1c>
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20005314 	.word	0x20005314

0800b5ac <_isatty_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d06      	ldr	r5, [pc, #24]	; (800b5c8 <_isatty_r+0x1c>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f7f6 fffb 	bl	80025b2 <_isatty>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_isatty_r+0x1a>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_isatty_r+0x1a>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20005314 	.word	0x20005314

0800b5cc <_init>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	bf00      	nop
 800b5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d2:	bc08      	pop	{r3}
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	4770      	bx	lr

0800b5d8 <_fini>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	bf00      	nop
 800b5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5de:	bc08      	pop	{r3}
 800b5e0:	469e      	mov	lr, r3
 800b5e2:	4770      	bx	lr
