
FreeRTOS_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007198  08007198  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a0  080071a0  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080071a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000064  0800720c  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000104  080072ac  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000515c  200001a4  0800734c  000201a4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005300  0800734c  00025300  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d2  2**0
                  CONTENTS, READONLY
 15 .debug_info   000209c1  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004782  00000000  00000000  00040bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000019c8  00000000  00000000  00045358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001406  00000000  00000000  00046d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c73b  00000000  00000000  00048126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00020218  00000000  00000000  00074861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010db8e  00000000  00000000  00094a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006f98  00000000  00000000  001a2608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000087  00000000  00000000  001a95a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a4 	.word	0x200001a4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006ff8 	.word	0x08006ff8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a8 	.word	0x200001a8
 800023c:	08006ff8 	.word	0x08006ff8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Wifi_RxCallBack>:
{
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
}
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8000540:	4b9a      	ldr	r3, [pc, #616]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000542:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d018      	beq.n	8000582 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8000550:	4b96      	ldr	r3, [pc, #600]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000552:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000556:	4619      	mov	r1, r3
 8000558:	4b94      	ldr	r3, [pc, #592]	; (80007ac <Wifi_RxCallBack+0x270>)
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	4b93      	ldr	r3, [pc, #588]	; (80007ac <Wifi_RxCallBack+0x270>)
 800055e:	440b      	add	r3, r1
 8000560:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8000562:	4b92      	ldr	r3, [pc, #584]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000564:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800056c:	f080 80ab 	bcs.w	80006c6 <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8000570:	4b8e      	ldr	r3, [pc, #568]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000572:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000576:	3301      	adds	r3, #1
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b8c      	ldr	r3, [pc, #560]	; (80007ac <Wifi_RxCallBack+0x270>)
 800057c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8000580:	e0a1      	b.n	80006c6 <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8000582:	f000 fef3 	bl	800136c <HAL_GetTick>
 8000586:	4602      	mov	r2, r0
 8000588:	4b88      	ldr	r3, [pc, #544]	; (80007ac <Wifi_RxCallBack+0x270>)
 800058a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2b32      	cmp	r3, #50	; 0x32
 8000592:	d903      	bls.n	800059c <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8000594:	4b85      	ldr	r3, [pc, #532]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 800059c:	4b83      	ldr	r3, [pc, #524]	; (80007ac <Wifi_RxCallBack+0x270>)
 800059e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d167      	bne.n	8000676 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 80005a6:	4b81      	ldr	r3, [pc, #516]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005a8:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80005ac:	f083 0301 	eor.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d028      	beq.n	8000608 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 80005b6:	4b7d      	ldr	r3, [pc, #500]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005b8:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80005bc:	4619      	mov	r1, r3
 80005be:	4b7b      	ldr	r3, [pc, #492]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	4b7a      	ldr	r3, [pc, #488]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005c4:	440b      	add	r3, r1
 80005c6:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 80005ca:	4b78      	ldr	r3, [pc, #480]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005cc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b75      	ldr	r3, [pc, #468]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005d6:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 80005da:	4b74      	ldr	r3, [pc, #464]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005dc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4a72      	ldr	r2, [pc, #456]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005e4:	4413      	add	r3, r2
 80005e6:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 80005ea:	2b3a      	cmp	r3, #58	; 0x3a
 80005ec:	d16b      	bne.n	80006c6 <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 80005ee:	4b6f      	ldr	r3, [pc, #444]	; (80007ac <Wifi_RxCallBack+0x270>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 80005f6:	486e      	ldr	r0, [pc, #440]	; (80007b0 <Wifi_RxCallBack+0x274>)
 80005f8:	f006 fb8c 	bl	8006d14 <atoi>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b6a      	ldr	r3, [pc, #424]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000602:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000606:	e05e      	b.n	80006c6 <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000608:	4b68      	ldr	r3, [pc, #416]	; (80007ac <Wifi_RxCallBack+0x270>)
 800060a:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800060e:	4619      	mov	r1, r3
 8000610:	4b66      	ldr	r3, [pc, #408]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b65      	ldr	r3, [pc, #404]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000616:	440b      	add	r3, r1
 8000618:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 800061c:	4b63      	ldr	r3, [pc, #396]	; (80007ac <Wifi_RxCallBack+0x270>)
 800061e:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000622:	3301      	adds	r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b61      	ldr	r3, [pc, #388]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000628:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 800062c:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <Wifi_RxCallBack+0x270>)
 800062e:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 8000632:	2b2c      	cmp	r3, #44	; 0x2c
 8000634:	d107      	bne.n	8000646 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8000636:	4b5d      	ldr	r3, [pc, #372]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000638:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 800063c:	3b30      	subs	r3, #48	; 0x30
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b5a      	ldr	r3, [pc, #360]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000642:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8000646:	4b59      	ldr	r3, [pc, #356]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000648:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800064c:	2b03      	cmp	r3, #3
 800064e:	d93a      	bls.n	80006c6 <Wifi_RxCallBack+0x18a>
 8000650:	4b56      	ldr	r3, [pc, #344]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000652:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000656:	3b01      	subs	r3, #1
 8000658:	4a54      	ldr	r2, [pc, #336]	; (80007ac <Wifi_RxCallBack+0x270>)
 800065a:	4413      	add	r3, r2
 800065c:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000660:	2b3a      	cmp	r3, #58	; 0x3a
 8000662:	d130      	bne.n	80006c6 <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8000664:	4853      	ldr	r0, [pc, #332]	; (80007b4 <Wifi_RxCallBack+0x278>)
 8000666:	f006 fb55 	bl	8006d14 <atoi>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000670:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000674:	e027      	b.n	80006c6 <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000678:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 800067c:	4619      	mov	r1, r3
 800067e:	4b4b      	ldr	r3, [pc, #300]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000684:	440b      	add	r3, r1
 8000686:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 800068a:	4b48      	ldr	r3, [pc, #288]	; (80007ac <Wifi_RxCallBack+0x270>)
 800068c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000694:	d207      	bcs.n	80006a6 <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000698:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b42      	ldr	r3, [pc, #264]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006a2:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006a8:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006ae:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d307      	bcc.n	80006c6 <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 80006b6:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 80006be:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	4938      	ldr	r1, [pc, #224]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006ca:	483b      	ldr	r0, [pc, #236]	; (80007b8 <Wifi_RxCallBack+0x27c>)
 80006cc:	f003 fb7f 	bl	8003dce <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 80006d0:	4b36      	ldr	r3, [pc, #216]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006d2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d966      	bls.n	80007a8 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006dc:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80006e0:	3b04      	subs	r3, #4
 80006e2:	4a32      	ldr	r2, [pc, #200]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006e4:	4413      	add	r3, r2
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	2b2b      	cmp	r3, #43	; 0x2b
 80006ea:	d15d      	bne.n	80007a8 <Wifi_RxCallBack+0x26c>
 80006ec:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006ee:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80006f2:	3b03      	subs	r3, #3
 80006f4:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <Wifi_RxCallBack+0x270>)
 80006f6:	4413      	add	r3, r2
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	2b49      	cmp	r3, #73	; 0x49
 80006fc:	d154      	bne.n	80007a8 <Wifi_RxCallBack+0x26c>
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000700:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000704:	3b02      	subs	r3, #2
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000708:	4413      	add	r3, r2
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	2b50      	cmp	r3, #80	; 0x50
 800070e:	d14b      	bne.n	80007a8 <Wifi_RxCallBack+0x26c>
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000712:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000716:	3b01      	subs	r3, #1
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <Wifi_RxCallBack+0x270>)
 800071a:	4413      	add	r3, r2
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	2b44      	cmp	r3, #68	; 0x44
 8000720:	d142      	bne.n	80007a8 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 8000722:	2208      	movs	r2, #8
 8000724:	2100      	movs	r1, #0
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <Wifi_RxCallBack+0x280>)
 8000728:	f006 fb84 	bl	8006e34 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <Wifi_RxCallBack+0x270>)
 800072e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000732:	3b04      	subs	r3, #4
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000736:	4413      	add	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <Wifi_RxCallBack+0x270>)
 800073e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000742:	3b03      	subs	r3, #3
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000746:	4413      	add	r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <Wifi_RxCallBack+0x270>)
 800074e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000752:	3b02      	subs	r3, #2
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000756:	4413      	add	r3, r2
 8000758:	2200      	movs	r2, #0
 800075a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <Wifi_RxCallBack+0x270>)
 800075e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000762:	3b01      	subs	r3, #1
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000766:	4413      	add	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <Wifi_RxCallBack+0x270>)
 800076e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000772:	3b04      	subs	r3, #4
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000778:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <Wifi_RxCallBack+0x270>)
 800077e:	2200      	movs	r2, #0
 8000780:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <Wifi_RxCallBack+0x270>)
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <Wifi_RxCallBack+0x270>)
 8000796:	2200      	movs	r2, #0
 8000798:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 800079c:	f000 fde6 	bl	800136c <HAL_GetTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a02      	ldr	r2, [pc, #8]	; (80007ac <Wifi_RxCallBack+0x270>)
 80007a4:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer  
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001c0 	.word	0x200001c0
 80007b0:	200008c5 	.word	0x200008c5
 80007b4:	200008c7 	.word	0x200008c7
 80007b8:	20000e58 	.word	0x20000e58
 80007bc:	200008c4 	.word	0x200008c4

080007c0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ETH_Init+0x84>)
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <MX_ETH_Init+0x88>)
 80007c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_ETH_Init+0x8c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_ETH_Init+0x8c>)
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_ETH_Init+0x8c>)
 80007d8:	22e1      	movs	r2, #225	; 0xe1
 80007da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_ETH_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_ETH_Init+0x8c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_ETH_Init+0x84>)
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <MX_ETH_Init+0x8c>)
 80007f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_ETH_Init+0x84>)
 80007f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ETH_Init+0x84>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <MX_ETH_Init+0x90>)
 8000800:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_ETH_Init+0x84>)
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_ETH_Init+0x94>)
 8000806:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_ETH_Init+0x84>)
 800080a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800080e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_ETH_Init+0x84>)
 8000812:	f000 ff4f 	bl	80016b4 <HAL_ETH_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 fa9c 	bl	8000d58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000820:	2238      	movs	r2, #56	; 0x38
 8000822:	2100      	movs	r1, #0
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_ETH_Init+0x98>)
 8000826:	f006 fb05 	bl	8006e34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_ETH_Init+0x98>)
 800082c:	2221      	movs	r2, #33	; 0x21
 800082e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_ETH_Init+0x98>)
 8000832:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000836:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_ETH_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000aac 	.word	0x20000aac
 8000848:	40028000 	.word	0x40028000
 800084c:	20000b5c 	.word	0x20000b5c
 8000850:	20000104 	.word	0x20000104
 8000854:	20000064 	.word	0x20000064
 8000858:	20000a74 	.word	0x20000a74

0800085c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a4e      	ldr	r2, [pc, #312]	; (80009b4 <HAL_ETH_MspInit+0x158>)
 800087a:	4293      	cmp	r3, r2
 800087c:	f040 8096 	bne.w	80009ac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000880:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a4c      	ldr	r2, [pc, #304]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 8000886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a46      	ldr	r2, [pc, #280]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 800089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a40      	ldr	r2, [pc, #256]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a34      	ldr	r2, [pc, #208]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a2e      	ldr	r2, [pc, #184]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 8000916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_ETH_MspInit+0x15c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000928:	2332      	movs	r3, #50	; 0x32
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000938:	230b      	movs	r3, #11
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	481e      	ldr	r0, [pc, #120]	; (80009bc <HAL_ETH_MspInit+0x160>)
 8000944:	f001 f9dc 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000948:	2386      	movs	r3, #134	; 0x86
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	4817      	ldr	r0, [pc, #92]	; (80009c0 <HAL_ETH_MspInit+0x164>)
 8000964:	f001 f9cc 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800097a:	230b      	movs	r3, #11
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	480f      	ldr	r0, [pc, #60]	; (80009c4 <HAL_ETH_MspInit+0x168>)
 8000986:	f001 f9bb 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800098a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099c:	230b      	movs	r3, #11
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4808      	ldr	r0, [pc, #32]	; (80009c8 <HAL_ETH_MspInit+0x16c>)
 80009a8:	f001 f9aa 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009ac:	bf00      	nop
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40028000 	.word	0x40028000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40021800 	.word	0x40021800

080009cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <vApplicationGetIdleTaskMemory+0x30>)
 80009e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000b6c 	.word	0x20000b6c
 80009fc:	20000c0c 	.word	0x20000c0c

08000a00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_FREERTOS_Init+0x58>)
 8000a08:	f107 041c 	add.w	r4, r7, #28
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 ff28 	bl	8005876 <osThreadCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <MX_FREERTOS_Init+0x5c>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of WiFiReceiveTask */
  osThreadDef(WiFiReceiveTask, StartWiFiReceiveTask, osPriorityNormal, 0, 128);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_FREERTOS_Init+0x60>)
 8000a2e:	463c      	mov	r4, r7
 8000a30:	461d      	mov	r5, r3
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WiFiReceiveTaskHandle = osThreadCreate(osThread(WiFiReceiveTask), NULL);
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 ff17 	bl	8005876 <osThreadCreate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <MX_FREERTOS_Init+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a4e:	bf00      	nop
 8000a50:	3738      	adds	r7, #56	; 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	0800701c 	.word	0x0800701c
 8000a5c:	20000b64 	.word	0x20000b64
 8000a60:	08007048 	.word	0x08007048
 8000a64:	20000b68 	.word	0x20000b68

08000a68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
//	Wifi_Init(osPriorityNormal);
	uint8_t data[] = "HELLO WORLD \r\n";
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <StartDefaultTask+0x3c>)
 8000a72:	f107 0408 	add.w	r4, r7, #8
 8000a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a78:	c407      	stmia	r4!, {r0, r1, r2}
 8000a7a:	8023      	strh	r3, [r4, #0]
 8000a7c:	3402      	adds	r4, #2
 8000a7e:	0c1b      	lsrs	r3, r3, #16
 8000a80:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, data, sizeof(data), 10);
 8000a82:	f107 0108 	add.w	r1, r7, #8
 8000a86:	230a      	movs	r3, #10
 8000a88:	220f      	movs	r2, #15
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <StartDefaultTask+0x40>)
 8000a8c:	f003 f91c 	bl	8003cc8 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <StartDefaultTask+0x44>)
 8000a94:	f001 faf9 	bl	800208a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9c:	f004 ff37 	bl	800590e <osDelay>
	  HAL_UART_Transmit(&huart1, data, sizeof(data), 10);
 8000aa0:	e7ef      	b.n	8000a82 <StartDefaultTask+0x1a>
 8000aa2:	bf00      	nop
 8000aa4:	08007064 	.word	0x08007064
 8000aa8:	20000e58 	.word	0x20000e58
 8000aac:	40020400 	.word	0x40020400

08000ab0 <StartWiFiReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWiFiReceiveTask */
void StartWiFiReceiveTask(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWiFiReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f004 ff28 	bl	800590e <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartWiFiReceiveTask+0x8>

08000ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b47      	ldr	r3, [pc, #284]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a46      	ldr	r2, [pc, #280]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b44      	ldr	r3, [pc, #272]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a40      	ldr	r2, [pc, #256]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_GPIO_Init+0x134>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <MX_GPIO_Init+0x138>)
 8000b6e:	f001 fa73 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x13c>)
 8000b78:	f001 fa6e 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	481b      	ldr	r0, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x140>)
 8000b94:	f001 f8b4 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b98:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_GPIO_Init+0x138>)
 8000bb2:	f001 f8a5 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <MX_GPIO_Init+0x13c>)
 8000bce:	f001 f897 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_GPIO_Init+0x13c>)
 8000be6:	f001 f88b 	bl	8001d00 <HAL_GPIO_Init>

}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	40020800 	.word	0x40020800

08000c04 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t wifi_data[] = "A/0";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	//if( huart == huart1 )
		Wifi_RxCallBack();
 8000c0c:	f7ff fc96 	bl	800053c <Wifi_RxCallBack>
	//	HAL_UART_Receive_IT(&huart1,&wifi_data[0],1);

}//-------------------------------------------
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fb85 	bl	800132a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f818 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f7ff ff4c 	bl	8000ac0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c28:	f7ff fdca 	bl	80007c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c2c:	f000 f9b2 	bl	8000f94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c30:	f000 faaa 	bl	8001188 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000c34:	f000 f97e 	bl	8000f34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c38:	f7ff fee2 	bl	8000a00 <MX_FREERTOS_Init>


	HAL_UART_Receive_IT(&huart1,&wifi_data[0],1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4903      	ldr	r1, [pc, #12]	; (8000c4c <main+0x34>)
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <main+0x38>)
 8000c42:	f003 f8c4 	bl	8003dce <HAL_UART_Receive_IT>

  /* Start scheduler */
  osKernelStart();
 8000c46:	f004 fe0f 	bl	8005868 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <main+0x32>
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000e58 	.word	0x20000e58

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2234      	movs	r2, #52	; 0x34
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f006 f8e6 	bl	8006e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c78:	f001 fb6a 	bl	8002350 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <SystemClock_Config+0xd8>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <SystemClock_Config+0xd8>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <SystemClock_Config+0xd8>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <SystemClock_Config+0xdc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <SystemClock_Config+0xdc>)
 8000c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <SystemClock_Config+0xdc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cc4:	23d8      	movs	r3, #216	; 0xd8
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fb99 	bl	8002410 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce4:	f000 f838 	bl	8000d58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ce8:	f001 fb42 	bl	8002370 <HAL_PWREx_EnableOverDrive>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cf2:	f000 f831 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2107      	movs	r1, #7
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fe29 	bl	800296c <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d20:	f000 f81a 	bl	8000d58 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3750      	adds	r7, #80	; 0x50
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 fafd 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	f06f 0001 	mvn.w	r0, #1
 8000da2:	f000 fbcb 	bl	800153c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <HAL_InitTick+0xe0>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <HAL_InitTick+0xe0>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_InitTick+0xe0>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 ffe6 	bl	8002db8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000df6:	f001 ffb7 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8000dfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000dfc:	e004      	b.n	8000e08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dfe:	f001 ffb3 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8000e02:	4603      	mov	r3, r0
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <HAL_InitTick+0xe4>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	0c9b      	lsrs	r3, r3, #18
 8000e12:	3b01      	subs	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e24:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e3c:	4817      	ldr	r0, [pc, #92]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e3e:	f002 fc15 	bl	800366c <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d11b      	bne.n	8000e88 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e52:	f002 fc6d 	bl	8003730 <HAL_TIM_Base_Start_IT>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e64:	2036      	movs	r0, #54	; 0x36
 8000e66:	f000 fb85 	bl	8001574 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d808      	bhi.n	8000e82 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2036      	movs	r0, #54	; 0x36
 8000e76:	f000 fb61 	bl	800153c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_InitTick+0xf0>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e002      	b.n	8000e88 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3738      	adds	r7, #56	; 0x38
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	20000e0c 	.word	0x20000e0c
 8000ea0:	40001000 	.word	0x40001000
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <USART1_IRQHandler+0x10>)
 8000eda:	f002 ffbd 	bl	8003e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000e58 	.word	0x20000e58

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f002 ffb3 	bl	8003e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000ee0 	.word	0x20000ee0

08000efc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM6_DAC_IRQHandler+0x10>)
 8000f02:	f002 fc8d 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000e0c 	.word	0x20000e0c

08000f10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	f002 fe58 	bl	8003c2c <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f7ff fee9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000e58 	.word	0x20000e58
 8000f90:	40011000 	.word	0x40011000

08000f94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <MX_USART3_UART_Init+0x5c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART3_UART_Init+0x58>)
 8000fd8:	f002 fe28 	bl	8003c2c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fe2:	f7ff feb9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000ee0 	.word	0x20000ee0
 8000ff0:	40004800 	.word	0x40004800

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b0      	sub	sp, #192	; 0xc0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2290      	movs	r2, #144	; 0x90
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 ff0d 	bl	8006e34 <memset>
  if(uartHandle->Instance==USART1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a55      	ldr	r2, [pc, #340]	; (8001174 <HAL_UART_MspInit+0x180>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d159      	bne.n	80010d8 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001028:	2300      	movs	r3, #0
 800102a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fef3 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff fe8c 	bl	8000d58 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6453      	str	r3, [r2, #68]	; 0x44
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <HAL_UART_MspInit+0x184>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b47      	ldr	r3, [pc, #284]	; (8001178 <HAL_UART_MspInit+0x184>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_UART_MspInit+0x184>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b44      	ldr	r3, [pc, #272]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800108a:	2304      	movs	r3, #4
 800108c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001094:	4619      	mov	r1, r3
 8001096:	4839      	ldr	r0, [pc, #228]	; (800117c <HAL_UART_MspInit+0x188>)
 8001098:	f000 fe32 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800109c:	2340      	movs	r3, #64	; 0x40
 800109e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010be:	4619      	mov	r1, r3
 80010c0:	482e      	ldr	r0, [pc, #184]	; (800117c <HAL_UART_MspInit+0x188>)
 80010c2:	f000 fe1d 	bl	8001d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2105      	movs	r1, #5
 80010ca:	2025      	movs	r0, #37	; 0x25
 80010cc:	f000 fa36 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010d0:	2025      	movs	r0, #37	; 0x25
 80010d2:	f000 fa4f 	bl	8001574 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010d6:	e049      	b.n	800116c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_UART_MspInit+0x18c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d144      	bne.n	800116c <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fe93 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80010fc:	f7ff fe2c 	bl	8000d58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_UART_MspInit+0x184>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x184>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_UART_MspInit+0x184>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x184>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001130:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114a:	2307      	movs	r3, #7
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001150:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001154:	4619      	mov	r1, r3
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_UART_MspInit+0x190>)
 8001158:	f000 fdd2 	bl	8001d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2027      	movs	r0, #39	; 0x27
 8001162:	f000 f9eb 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001166:	2027      	movs	r0, #39	; 0x27
 8001168:	f000 fa04 	bl	8001574 <HAL_NVIC_EnableIRQ>
}
 800116c:	bf00      	nop
 800116e:	37c0      	adds	r7, #192	; 0xc0
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40011000 	.word	0x40011000
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400
 8001180:	40004800 	.word	0x40004800
 8001184:	40020c00 	.word	0x40020c00

08001188 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001196:	2206      	movs	r2, #6
 8001198:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119c:	2202      	movs	r2, #2
 800119e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011cc:	f000 ff77 	bl	80020be <HAL_PCD_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011d6:	f7ff fdbf 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000f68 	.word	0x20000f68

080011e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0ae      	sub	sp, #184	; 0xb8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2290      	movs	r2, #144	; 0x90
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fe15 	bl	8006e34 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001212:	d159      	bne.n	80012c8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001218:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fdf9 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001230:	f7ff fd92 	bl	8000d58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800124c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001266:	230a      	movs	r3, #10
 8001268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001270:	4619      	mov	r1, r3
 8001272:	4818      	ldr	r0, [pc, #96]	; (80012d4 <HAL_PCD_MspInit+0xf0>)
 8001274:	f000 fd44 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001290:	4619      	mov	r1, r3
 8001292:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_PCD_MspInit+0xf0>)
 8001294:	f000 fd34 	bl	8001d00 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 800129e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a2:	6353      	str	r3, [r2, #52]	; 0x34
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 80012b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ba:	6453      	str	r3, [r2, #68]	; 0x44
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_PCD_MspInit+0xec>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	37b8      	adds	r7, #184	; 0xb8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001302:	f7ff fe05 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f005 fdf9 	bl	8006efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fc85 	bl	8000c18 <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800131c:	080071a8 	.word	0x080071a8
  ldr r2, =_sbss
 8001320:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001324:	20005300 	.word	0x20005300

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>

0800132a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 f8f9 	bl	8001526 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff fd3d 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133a:	f7ff fd13 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20001470 	.word	0x20001470

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20001470 	.word	0x20001470

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000000c 	.word	0x2000000c

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	05fa0000 	.word	0x05fa0000

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff4c 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154e:	f7ff ff61 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001552:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff ffb1 	bl	80014c0 <NVIC_EncodePriority>
 800155e:	4602      	mov	r2, r0
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff80 	bl	800146c <__NVIC_SetPriority>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff54 	bl	8001430 <__NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800159e:	f7ff fee5 	bl	800136c <HAL_GetTick>
 80015a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e052      	b.n	8001668 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0216 	bic.w	r2, r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <HAL_DMA_Abort+0x62>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	e013      	b.n	800163c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001614:	f7ff feaa 	bl	800136c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b05      	cmp	r3, #5
 8001620:	d90c      	bls.n	800163c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e015      	b.n	8001668 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e4      	bne.n	8001614 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d004      	beq.n	800168e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00c      	b.n	80016a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06a      	b.n	800179c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2223      	movs	r2, #35	; 0x23
 80016d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff f8bf 	bl	800085c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_ETH_Init+0xf0>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a30      	ldr	r2, [pc, #192]	; (80017a4 <HAL_ETH_Init+0xf0>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_ETH_Init+0xf0>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_ETH_Init+0xf4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_ETH_Init+0xf4>)
 80016fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001700:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_ETH_Init+0xf4>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4927      	ldr	r1, [pc, #156]	; (80017a8 <HAL_ETH_Init+0xf4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_ETH_Init+0xf4>)
 8001712:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172c:	f7ff fe1e 	bl	800136c <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001732:	e011      	b.n	8001758 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001734:	f7ff fe1a 	bl	800136c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001742:	d909      	bls.n	8001758 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	22e0      	movs	r2, #224	; 0xe0
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e021      	b.n	800179c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f958 	bl	8001a20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f9ff 	bl	8001b74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa55 	bl	8001c26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	461a      	mov	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9bd 	bl	8001b04 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2210      	movs	r2, #16
 8001796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40013800 	.word	0x40013800

080017ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <ETH_SetMACConfig+0x15c>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	7c1b      	ldrb	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <ETH_SetMACConfig+0x28>
 80017ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017d2:	e000      	b.n	80017d6 <ETH_SetMACConfig+0x2a>
 80017d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	7c5b      	ldrb	r3, [r3, #17]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <ETH_SetMACConfig+0x38>
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	e000      	b.n	80017e6 <ETH_SetMACConfig+0x3a>
 80017e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7fdb      	ldrb	r3, [r3, #31]
 80017f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	7f92      	ldrb	r2, [r2, #30]
 8001800:	2a00      	cmp	r2, #0
 8001802:	d102      	bne.n	800180a <ETH_SetMACConfig+0x5e>
 8001804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001808:	e000      	b.n	800180c <ETH_SetMACConfig+0x60>
 800180a:	2200      	movs	r2, #0
                        macconf->Speed |
 800180c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	7f1b      	ldrb	r3, [r3, #28]
 8001812:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001814:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800181a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f892 2020 	ldrb.w	r2, [r2, #32]
 800182a:	2a00      	cmp	r2, #0
 800182c:	d102      	bne.n	8001834 <ETH_SetMACConfig+0x88>
 800182e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001832:	e000      	b.n	8001836 <ETH_SetMACConfig+0x8a>
 8001834:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001836:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	7bdb      	ldrb	r3, [r3, #15]
 800183c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800183e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001844:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800184c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800184e:	4313      	orrs	r3, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff fd8c 	bl	8001384 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001892:	2a00      	cmp	r2, #0
 8001894:	d101      	bne.n	800189a <ETH_SetMACConfig+0xee>
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	e000      	b.n	800189c <ETH_SetMACConfig+0xf0>
 800189a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800189c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018aa:	2a01      	cmp	r2, #1
 80018ac:	d101      	bne.n	80018b2 <ETH_SetMACConfig+0x106>
 80018ae:	2208      	movs	r2, #8
 80018b0:	e000      	b.n	80018b4 <ETH_SetMACConfig+0x108>
 80018b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018bc:	2a01      	cmp	r2, #1
 80018be:	d101      	bne.n	80018c4 <ETH_SetMACConfig+0x118>
 80018c0:	2204      	movs	r2, #4
 80018c2:	e000      	b.n	80018c6 <ETH_SetMACConfig+0x11a>
 80018c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80018ce:	2a01      	cmp	r2, #1
 80018d0:	d101      	bne.n	80018d6 <ETH_SetMACConfig+0x12a>
 80018d2:	2202      	movs	r2, #2
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0x12c>
 80018d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d8:	4313      	orrs	r3, r2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff fd47 	bl	8001384 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	ff20810f 	.word	0xff20810f

0800190c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <ETH_SetDMAConfig+0x110>)
 8001926:	4013      	ands	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	7b1b      	ldrb	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <ETH_SetDMAConfig+0x2c>
 8001932:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001936:	e000      	b.n	800193a <ETH_SetDMAConfig+0x2e>
 8001938:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	7b5b      	ldrb	r3, [r3, #13]
 800193e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001940:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	7f52      	ldrb	r2, [r2, #29]
 8001946:	2a00      	cmp	r2, #0
 8001948:	d102      	bne.n	8001950 <ETH_SetDMAConfig+0x44>
 800194a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800194e:	e000      	b.n	8001952 <ETH_SetDMAConfig+0x46>
 8001950:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001952:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7b9b      	ldrb	r3, [r3, #14]
 8001958:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800195a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001960:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	7f1b      	ldrb	r3, [r3, #28]
 8001966:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001968:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7f9b      	ldrb	r3, [r3, #30]
 800196e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001970:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001976:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001980:	4313      	orrs	r3, r2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff fcee 	bl	8001384 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b0:	461a      	mov	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	791b      	ldrb	r3, [r3, #4]
 80019ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fcbf 	bl	8001384 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	f8de3f23 	.word	0xf8de3f23

08001a20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0a6      	sub	sp, #152	; 0x98
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fe86 	bl	80017ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff08 	bl	800190c <ETH_SetDMAConfig>
}
 8001afc:	bf00      	nop
 8001afe:	3798      	adds	r7, #152	; 0x98
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3305      	adds	r3, #5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	3204      	adds	r2, #4
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <ETH_MACAddressConfig+0x68>)
 8001b26:	4413      	add	r3, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3303      	adds	r3, #3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	061a      	lsls	r2, r3, #24
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <ETH_MACAddressConfig+0x6c>)
 8001b56:	4413      	add	r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40028040 	.word	0x40028040
 8001b70:	40028044 	.word	0x40028044

08001b74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e03e      	b.n	8001c00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	3206      	adds	r2, #6
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d80c      	bhi.n	8001be4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68d9      	ldr	r1, [r3, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	e004      	b.n	8001bee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d9bd      	bls.n	8001b82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e046      	b.n	8001cc2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6919      	ldr	r1, [r3, #16]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c78:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	3212      	adds	r2, #18
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d80c      	bhi.n	8001cb2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6919      	ldr	r1, [r3, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	e004      	b.n	8001cbc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d9b5      	bls.n	8001c34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	60da      	str	r2, [r3, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e175      	b.n	800200c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8164 	bne.w	8002006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_Init+0x56>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d017      	beq.n	8001df4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80be 	beq.w	8002006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a65      	ldr	r2, [pc, #404]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ea2:	4a61      	ldr	r2, [pc, #388]	; (8002028 <HAL_GPIO_Init+0x328>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_GPIO_Init+0x32c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d037      	beq.n	8001f3e <HAL_GPIO_Init+0x23e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d031      	beq.n	8001f3a <HAL_GPIO_Init+0x23a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02b      	beq.n	8001f36 <HAL_GPIO_Init+0x236>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a55      	ldr	r2, [pc, #340]	; (8002038 <HAL_GPIO_Init+0x338>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d025      	beq.n	8001f32 <HAL_GPIO_Init+0x232>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_GPIO_Init+0x33c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01f      	beq.n	8001f2e <HAL_GPIO_Init+0x22e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a53      	ldr	r2, [pc, #332]	; (8002040 <HAL_GPIO_Init+0x340>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d019      	beq.n	8001f2a <HAL_GPIO_Init+0x22a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_GPIO_Init+0x344>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x348>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a50      	ldr	r2, [pc, #320]	; (800204c <HAL_GPIO_Init+0x34c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001f16:	2309      	movs	r3, #9
 8001f18:	e012      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	e010      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f1e:	2308      	movs	r3, #8
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x328>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f88:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_GPIO_Init+0x354>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_GPIO_Init+0x354>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae86 	bls.w	8001d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40021400 	.word	0x40021400
 8002044:	40021800 	.word	0x40021800
 8002048:	40021c00 	.word	0x40021c00
 800204c:	40022000 	.word	0x40022000
 8002050:	40022400 	.word	0x40022400
 8002054:	40013c00 	.word	0x40013c00

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	041a      	lsls	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	400b      	ands	r3, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c0:	b08f      	sub	sp, #60	; 0x3c
 80020c2:	af0a      	add	r7, sp, #40	; 0x28
 80020c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e116      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff f87a 	bl	80011e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f8f6 	bl	8005300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	687e      	ldr	r6, [r7, #4]
 800211c:	466d      	mov	r5, sp
 800211e:	f106 0410 	add.w	r4, r6, #16
 8002122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002132:	1d33      	adds	r3, r6, #4
 8002134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002136:	6838      	ldr	r0, [r7, #0]
 8002138:	f003 f88a 	bl	8005250 <USB_CoreInit>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0d7      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f8e4 	bl	8005322 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e04a      	b.n	80021f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	333d      	adds	r3, #61	; 0x3d
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	333c      	adds	r3, #60	; 0x3c
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	b298      	uxth	r0, r3
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3344      	adds	r3, #68	; 0x44
 800219c:	4602      	mov	r2, r0
 800219e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3340      	adds	r3, #64	; 0x40
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3348      	adds	r3, #72	; 0x48
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334c      	adds	r3, #76	; 0x4c
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3af      	bcc.n	8002160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e044      	b.n	8002290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3301      	adds	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3b5      	bcc.n	8002206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	687e      	ldr	r6, [r7, #4]
 80022a2:	466d      	mov	r5, sp
 80022a4:	f106 0410 	add.w	r4, r6, #16
 80022a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b8:	1d33      	adds	r3, r6, #4
 80022ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f003 f87d 	bl	80053bc <USB_DevInit>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e014      	b.n	80022fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f80b 	bl	8002308 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fa3b 	bl	8005772 <USB_DevDisconnect>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002308 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_PCDEx_ActivateLPM+0x44>)
 8002338:	4313      	orrs	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	10000003 	.word	0x10000003

08002350 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40007000 	.word	0x40007000

08002370 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_PWREx_EnableOverDrive+0x98>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_PWREx_EnableOverDrive+0x98>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_PWREx_EnableOverDrive+0x98>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800239e:	f7fe ffe5 	bl	800136c <HAL_GetTick>
 80023a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a4:	e009      	b.n	80023ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a6:	f7fe ffe1 	bl	800136c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b4:	d901      	bls.n	80023ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e022      	b.n	8002400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d1ee      	bne.n	80023a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7fe ffca 	bl	800136c <HAL_GetTick>
 80023d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023da:	e009      	b.n	80023f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023dc:	f7fe ffc6 	bl	800136c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ea:	d901      	bls.n	80023f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e007      	b.n	8002400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023fc:	d1ee      	bne.n	80023dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e29b      	b.n	800295e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b04      	cmp	r3, #4
 800243e:	d00c      	beq.n	800245a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002440:	4b93      	ldr	r3, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d112      	bne.n	8002472 <HAL_RCC_OscConfig+0x62>
 800244c:	4b90      	ldr	r3, [pc, #576]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002458:	d10b      	bne.n	8002472 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245a:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d06c      	beq.n	8002540 <HAL_RCC_OscConfig+0x130>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d168      	bne.n	8002540 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e275      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x7a>
 800247c:	4b84      	ldr	r3, [pc, #528]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a83      	ldr	r2, [pc, #524]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e02e      	b.n	80024e8 <HAL_RCC_OscConfig+0xd8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x9c>
 8002492:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7e      	ldr	r2, [pc, #504]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7b      	ldr	r2, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xd8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a72      	ldr	r2, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xd8>
 80024d0:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6b      	ldr	r2, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff3c 	bl	800136c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff38 	bl	800136c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e229      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ff28 	bl	800136c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ff24 	bl	800136c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e215      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x110>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d069      	beq.n	8002622 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254e:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x190>
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x17a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1e9      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	493d      	ldr	r1, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e040      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe feda 	bl	800136c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fed6 	bl	800136c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1c7      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4929      	ldr	r1, [pc, #164]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	e018      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe feb6 	bl	800136c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002604:	f7fe feb2 	bl	800136c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1a3      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d038      	beq.n	80026a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fe93 	bl	800136c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe fe8f 	bl	800136c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e180      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x23a>
 8002668:	e01a      	b.n	80026a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_RCC_OscConfig+0x280>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fe79 	bl	800136c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe fe75 	bl	800136c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d903      	bls.n	8002694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e166      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
 8002690:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a4 	beq.w	80027f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a88      	ldr	r2, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d6:	4b83      	ldr	r3, [pc, #524]	; (80028e4 <HAL_RCC_OscConfig+0x4d4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026e2:	4b80      	ldr	r3, [pc, #512]	; (80028e4 <HAL_RCC_OscConfig+0x4d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7f      	ldr	r2, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0x4d4>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe3d 	bl	800136c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe fe39 	bl	800136c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e12a      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002708:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x4d4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x31a>
 800271c:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e02d      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x33c>
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a6a      	ldr	r2, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	e01c      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x35e>
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a61      	ldr	r2, [pc, #388]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d015      	beq.n	80027ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fded 	bl	800136c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fde9 	bl	800136c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0d8      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ee      	beq.n	8002796 <HAL_RCC_OscConfig+0x386>
 80027b8:	e014      	b.n	80027e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fdd7 	bl	800136c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe fdd3 	bl	800136c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0c2      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ee      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80ae 	beq.w	800295c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d06d      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d14b      	bne.n	80028ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800281a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fda4 	bl	800136c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fda0 	bl	800136c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e091      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	491b      	ldr	r1, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd72 	bl	800136c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fd6e 	bl	800136c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e05f      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x47c>
 80028aa:	e057      	b.n	800295c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fd58 	bl	800136c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fd54 	bl	800136c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e045      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4b0>
 80028de:	e03d      	b.n	800295c <HAL_RCC_OscConfig+0x54c>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_RCC_OscConfig+0x558>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d030      	beq.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d129      	bne.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d122      	bne.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002920:	4293      	cmp	r3, r2
 8002922:	d119      	bne.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d10f      	bne.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0d0      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d910      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 020f 	bic.w	r2, r3, #15
 800299a:	4965      	ldr	r1, [pc, #404]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0b8      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029cc:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a58      	ldr	r2, [pc, #352]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	494d      	ldr	r1, [pc, #308]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d040      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d115      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e07f      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e073      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06b      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4936      	ldr	r1, [pc, #216]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe fc84 	bl	800136c <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fc80 	bl	800136c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e053      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d210      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020f 	bic.w	r2, r3, #15
 8002aa6:	4922      	ldr	r1, [pc, #136]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e032      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4916      	ldr	r1, [pc, #88]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	490e      	ldr	r1, [pc, #56]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afe:	f000 f821 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	490a      	ldr	r1, [pc, #40]	; (8002b38 <HAL_RCC_ClockConfig+0x1cc>)
 8002b10:	5ccb      	ldrb	r3, [r1, r3]
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1d0>)
 8002b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f948 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00
 8002b34:	40023800 	.word	0x40023800
 8002b38:	0800707c 	.word	0x0800707c
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	20000008 	.word	0x20000008

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b48:	b094      	sub	sp, #80	; 0x50
 8002b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b50:	2300      	movs	r3, #0
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b54:	2300      	movs	r3, #0
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d00d      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x40>
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	f200 80e1 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b76:	e0db      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7c:	e0db      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b73      	ldr	r3, [pc, #460]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b82:	e0d8      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b84:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc8:	0150      	lsls	r0, r2, #5
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4621      	mov	r1, r4
 8002bd0:	1a51      	subs	r1, r2, r1
 8002bd2:	6139      	str	r1, [r7, #16]
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be8:	4659      	mov	r1, fp
 8002bea:	018b      	lsls	r3, r1, #6
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	018a      	lsls	r2, r1, #6
 8002bf6:	4651      	mov	r1, sl
 8002bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c16:	4690      	mov	r8, r2
 8002c18:	4699      	mov	r9, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	eb18 0303 	adds.w	r3, r8, r3
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	462b      	mov	r3, r5
 8002c24:	eb49 0303 	adc.w	r3, r9, r3
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c36:	4629      	mov	r1, r5
 8002c38:	024b      	lsls	r3, r1, #9
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c40:	4621      	mov	r1, r4
 8002c42:	024a      	lsls	r2, r1, #9
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c54:	f7fd faf4 	bl	8000240 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c60:	e058      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
 8002c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	464b      	mov	r3, r9
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	0159      	lsls	r1, r3, #5
 8002c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8e:	0150      	lsls	r0, r2, #5
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4641      	mov	r1, r8
 8002c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	eb45 0303 	adc.w	r3, r5, r3
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cea:	4629      	mov	r1, r5
 8002cec:	028b      	lsls	r3, r1, #10
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	028a      	lsls	r2, r1, #10
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d08:	f7fd fa9a 	bl	8000240 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3750      	adds	r7, #80	; 0x50
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	0800708c 	.word	0x0800708c

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d94:	f7ff ffdc 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0b5b      	lsrs	r3, r3, #13
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	0800708c 	.word	0x0800708c

08002db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCC_GetClockConfig+0x5c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_RCC_GetClockConfig+0x60>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	601a      	str	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40023c00 	.word	0x40023c00

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e44:	4b69      	ldr	r3, [pc, #420]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	4964      	ldr	r1, [pc, #400]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	4959      	ldr	r1, [pc, #356]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb2:	4b4e      	ldr	r3, [pc, #312]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	494a      	ldr	r1, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808b 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0c:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe fa22 	bl	800136c <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fa1e 	bl	800136c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e38f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d035      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d02e      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f9e6 	bl	800136c <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe f9e2 	bl	800136c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e351      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd2:	d111      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	4901      	ldr	r1, [pc, #4]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e00b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	0ffffcff 	.word	0x0ffffcff
 8002ff8:	4bac      	ldr	r3, [pc, #688]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4aab      	ldr	r2, [pc, #684]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	4ba9      	ldr	r3, [pc, #676]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	49a6      	ldr	r1, [pc, #664]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	4313      	orrs	r3, r2
 8003014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003022:	4ba2      	ldr	r3, [pc, #648]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003028:	4aa0      	ldr	r2, [pc, #640]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003032:	4b9e      	ldr	r3, [pc, #632]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	499b      	ldr	r1, [pc, #620]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003050:	4b96      	ldr	r3, [pc, #600]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305e:	4993      	ldr	r1, [pc, #588]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003072:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003080:	498a      	ldr	r1, [pc, #552]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003094:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a2:	4982      	ldr	r1, [pc, #520]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b6:	4b7d      	ldr	r3, [pc, #500]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	4979      	ldr	r1, [pc, #484]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b74      	ldr	r3, [pc, #464]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4971      	ldr	r1, [pc, #452]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f023 020c 	bic.w	r2, r3, #12
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	4968      	ldr	r1, [pc, #416]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311c:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	4960      	ldr	r1, [pc, #384]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	4957      	ldr	r1, [pc, #348]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003160:	4b52      	ldr	r3, [pc, #328]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	494f      	ldr	r1, [pc, #316]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4946      	ldr	r1, [pc, #280]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a4:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	493e      	ldr	r1, [pc, #248]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	4935      	ldr	r1, [pc, #212]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f6:	492d      	ldr	r1, [pc, #180]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	4924      	ldr	r1, [pc, #144]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	4914      	ldr	r1, [pc, #80]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327c:	490b      	ldr	r1, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a0:	4902      	ldr	r1, [pc, #8]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032a8:	e002      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032bc:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	4986      	ldr	r1, [pc, #536]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032e0:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f0:	497d      	ldr	r1, [pc, #500]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d006      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80d6 	beq.w	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800330c:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a75      	ldr	r2, [pc, #468]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003318:	f7fe f828 	bl	800136c <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003320:	f7fe f824 	bl	800136c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e195      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d021      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11d      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003366:	0e1b      	lsrs	r3, r3, #24
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	019a      	lsls	r2, r3, #6
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	071b      	lsls	r3, r3, #28
 8003386:	4958      	ldr	r1, [pc, #352]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b8:	d129      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033ba:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033c8:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ce:	0f1b      	lsrs	r3, r3, #28
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	019a      	lsls	r2, r3, #6
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	493e      	ldr	r1, [pc, #248]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fc:	f023 021f 	bic.w	r2, r3, #31
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	3b01      	subs	r3, #1
 8003406:	4938      	ldr	r1, [pc, #224]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003428:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342e:	0f1b      	lsrs	r3, r3, #28
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	019a      	lsls	r2, r3, #6
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	4926      	ldr	r1, [pc, #152]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	019a      	lsls	r2, r3, #6
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	071b      	lsls	r3, r3, #28
 800347e:	491a      	ldr	r1, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003492:	f7fd ff6b 	bl	800136c <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800349a:	f7fd ff67 	bl	800136c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0d8      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f040 80ce 	bne.w	800365c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fd ff4e 	bl	800136c <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034d2:	e00b      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034d4:	f7fd ff4a 	bl	800136c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d904      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0bb      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f8:	d0ec      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d12a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	0f1b      	lsrs	r3, r3, #28
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	019a      	lsls	r2, r3, #6
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	431a      	orrs	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	071b      	lsls	r3, r3, #28
 8003556:	4944      	ldr	r1, [pc, #272]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	493d      	ldr	r1, [pc, #244]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d11d      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	0e1b      	lsrs	r3, r3, #24
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	0f1b      	lsrs	r3, r3, #28
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	019a      	lsls	r2, r3, #6
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	061b      	lsls	r3, r3, #24
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	071b      	lsls	r3, r3, #28
 80035c2:	4929      	ldr	r1, [pc, #164]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d028      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	0e1b      	lsrs	r3, r3, #24
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	019a      	lsls	r2, r3, #6
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	4917      	ldr	r1, [pc, #92]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4911      	ldr	r1, [pc, #68]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fd fe9a 	bl	800136c <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800363c:	f7fd fe96 	bl	800136c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e007      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365a:	d1ef      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e049      	b.n	8003712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f841 	bl	800371a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fa00 	bl	8003ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e054      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d01d      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <HAL_TIM_Base_Start_IT+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_TIM_Base_Start_IT+0xd8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_TIM_Base_Start_IT+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_Start_IT+0xe0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIM_Base_Start_IT+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_Start_IT+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d115      	bne.n	80037dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_TIM_Base_Start_IT+0xec>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d015      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d011      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e008      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40001800 	.word	0x40001800
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0202 	mvn.w	r2, #2
 800384c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f905 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8f7 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f908 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8db 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8cd 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8de 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8b1 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8a3 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8b4 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0210 	mvn.w	r2, #16
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2208      	movs	r2, #8
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f887 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f879 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f88a 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd f9c8 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f91a 	bl	8003c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f90d 	bl	8003c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f838 	bl	8003a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0220 	mvn.w	r2, #32
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8cd 	bl	8003bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <TIM_Base_SetConfig+0x114>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d00f      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3d      	ldr	r2, [pc, #244]	; (8003bc8 <TIM_Base_SetConfig+0x118>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3c      	ldr	r2, [pc, #240]	; (8003bcc <TIM_Base_SetConfig+0x11c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a3b      	ldr	r2, [pc, #236]	; (8003bd0 <TIM_Base_SetConfig+0x120>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a3a      	ldr	r2, [pc, #232]	; (8003bd4 <TIM_Base_SetConfig+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <TIM_Base_SetConfig+0x114>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d027      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	; (8003bc8 <TIM_Base_SetConfig+0x118>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d023      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <TIM_Base_SetConfig+0x11c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <TIM_Base_SetConfig+0x120>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <TIM_Base_SetConfig+0x124>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d017      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <TIM_Base_SetConfig+0x128>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <TIM_Base_SetConfig+0x12c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00f      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a26      	ldr	r2, [pc, #152]	; (8003be0 <TIM_Base_SetConfig+0x130>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <TIM_Base_SetConfig+0x134>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <TIM_Base_SetConfig+0x138>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	; (8003bec <TIM_Base_SetConfig+0x13c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <TIM_Base_SetConfig+0x114>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0xf8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <TIM_Base_SetConfig+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800
 8003be4:	40001800 	.word	0x40001800
 8003be8:	40001c00 	.word	0x40001c00
 8003bec:	40002000 	.word	0x40002000

08003bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd f9d0 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fc06 	bl	800447c <UART_SetConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e022      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fe5e 	bl	8004944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fee5 	bl	8004a88 <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d171      	bne.n	8003dc4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x24>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e06a      	b.n	8003dc6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fb35 	bl	800136c <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02c      	b.n	8003d94 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 feec 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e038      	b.n	8003dc6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e007      	b.n	8003d82 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1cc      	bne.n	8003d3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2140      	movs	r1, #64	; 0x40
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 feb9 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e005      	b.n	8003dc6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b08a      	sub	sp, #40	; 0x28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d132      	bne.n	8003e4c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_UART_Receive_IT+0x24>
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e02b      	b.n	8003e4e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	613b      	str	r3, [r7, #16]
   return(result);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	69f9      	ldr	r1, [r7, #28]
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e6      	bne.n	8003e0a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 ff34 	bl	8004cb0 <UART_Start_Receive_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	e000      	b.n	8003e4e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0ba      	sub	sp, #232	; 0xe8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e82:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e86:	4013      	ands	r3, r2
 8003e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d115      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 82ac 	beq.w	800440e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
      }
      return;
 8003ebe:	e2a6      	b.n	800440e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8117 	beq.w	80040f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ed6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eda:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <HAL_UART_IRQHandler+0x298>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 810a 	beq.w	80040f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d011      	beq.n	8003f14 <HAL_UART_IRQHandler+0xbc>
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2201      	movs	r2, #1
 8003f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d011      	beq.n	8003f44 <HAL_UART_IRQHandler+0xec>
 8003f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d011      	beq.n	8003f74 <HAL_UART_IRQHandler+0x11c>
 8003f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2204      	movs	r2, #4
 8003f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2208      	movs	r2, #8
 8003f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x18a>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8212 	beq.w	8004412 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800402e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004032:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004036:	2b00      	cmp	r3, #0
 8004038:	d04f      	beq.n	80040da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fefe 	bl	8004e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d141      	bne.n	80040d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800407a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1d9      	bne.n	800404e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d013      	beq.n	80040ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_UART_IRQHandler+0x29c>)
 80040a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fade 	bl	8001670 <HAL_DMA_Abort_IT>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d017      	beq.n	80040ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040c4:	4610      	mov	r0, r2
 80040c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	e00f      	b.n	80040ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9b6 	bl	800443c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00b      	b.n	80040ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9b2 	bl	800443c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e007      	b.n	80040ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9ae 	bl	800443c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040e8:	e193      	b.n	8004412 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ea:	bf00      	nop
    return;
 80040ec:	e191      	b.n	8004412 <HAL_UART_IRQHandler+0x5ba>
 80040ee:	bf00      	nop
 80040f0:	04000120 	.word	0x04000120
 80040f4:	08004f05 	.word	0x08004f05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	f040 814c 	bne.w	800439a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8145 	beq.w	800439a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 813e 	beq.w	800439a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2210      	movs	r2, #16
 8004124:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	f040 80b6 	bne.w	80042a2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004142:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8165 	beq.w	8004416 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004156:	429a      	cmp	r2, r3
 8004158:	f080 815d 	bcs.w	8004416 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	f000 8086 	beq.w	8004280 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800418c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1da      	bne.n	8004174 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e1      	bne.n	80041be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800420a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800421e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004224:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800422c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e3      	bne.n	80041fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004262:	65bb      	str	r3, [r7, #88]	; 0x58
 8004264:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e4      	bne.n	8004240 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd f988 	bl	8001590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004292:	b29b      	uxth	r3, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8d8 	bl	8004450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a0:	e0b9      	b.n	8004416 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80ab 	beq.w	800441a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80042c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a6 	beq.w	800441a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
 80042f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e4      	bne.n	80042ce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	623b      	str	r3, [r7, #32]
   return(result);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004328:	633a      	str	r2, [r7, #48]	; 0x30
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e3      	bne.n	8004304 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	60fb      	str	r3, [r7, #12]
   return(result);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	617b      	str	r3, [r7, #20]
   return(result);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e4      	bne.n	8004350 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f85c 	bl	8004450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004398:	e03f      	b.n	800441a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <HAL_UART_IRQHandler+0x56c>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f853 	bl	8004468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c2:	e02d      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
    }
    return;
 80043ec:	e017      	b.n	800441e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_UART_IRQHandler+0x5c8>
 80043fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fd92 	bl	8004f30 <UART_EndTransmit_IT>
    return;
 800440c:	e008      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
      return;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
      return;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_UART_IRQHandler+0x5c8>
    return;
 800441e:	bf00      	nop
  }

}
 8004420:	37e8      	adds	r7, #232	; 0xe8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop

08004428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4ba6      	ldr	r3, [pc, #664]	; (8004740 <UART_SetConfig+0x2c4>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a94      	ldr	r2, [pc, #592]	; (8004744 <UART_SetConfig+0x2c8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d120      	bne.n	800453a <UART_SetConfig+0xbe>
 80044f8:	4b93      	ldr	r3, [pc, #588]	; (8004748 <UART_SetConfig+0x2cc>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b03      	cmp	r3, #3
 8004504:	d816      	bhi.n	8004534 <UART_SetConfig+0xb8>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x90>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004529 	.word	0x08004529
 8004514:	08004523 	.word	0x08004523
 8004518:	0800452f 	.word	0x0800452f
 800451c:	2301      	movs	r3, #1
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e150      	b.n	80047c4 <UART_SetConfig+0x348>
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e14d      	b.n	80047c4 <UART_SetConfig+0x348>
 8004528:	2304      	movs	r3, #4
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e14a      	b.n	80047c4 <UART_SetConfig+0x348>
 800452e:	2308      	movs	r3, #8
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e147      	b.n	80047c4 <UART_SetConfig+0x348>
 8004534:	2310      	movs	r3, #16
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e144      	b.n	80047c4 <UART_SetConfig+0x348>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a83      	ldr	r2, [pc, #524]	; (800474c <UART_SetConfig+0x2d0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d132      	bne.n	80045aa <UART_SetConfig+0x12e>
 8004544:	4b80      	ldr	r3, [pc, #512]	; (8004748 <UART_SetConfig+0x2cc>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b0c      	cmp	r3, #12
 8004550:	d828      	bhi.n	80045a4 <UART_SetConfig+0x128>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0xdc>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800458d 	.word	0x0800458d
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045a5 	.word	0x080045a5
 8004568:	08004599 	.word	0x08004599
 800456c:	080045a5 	.word	0x080045a5
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045a5 	.word	0x080045a5
 8004578:	08004593 	.word	0x08004593
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045a5 	.word	0x080045a5
 8004588:	0800459f 	.word	0x0800459f
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e118      	b.n	80047c4 <UART_SetConfig+0x348>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e115      	b.n	80047c4 <UART_SetConfig+0x348>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e112      	b.n	80047c4 <UART_SetConfig+0x348>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e10f      	b.n	80047c4 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e10c      	b.n	80047c4 <UART_SetConfig+0x348>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a68      	ldr	r2, [pc, #416]	; (8004750 <UART_SetConfig+0x2d4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0x17a>
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045be:	2b30      	cmp	r3, #48	; 0x30
 80045c0:	d013      	beq.n	80045ea <UART_SetConfig+0x16e>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x174>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x162>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d810      	bhi.n	80045f0 <UART_SetConfig+0x174>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x15c>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x168>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x174>
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0f2      	b.n	80047c4 <UART_SetConfig+0x348>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0ef      	b.n	80047c4 <UART_SetConfig+0x348>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0ec      	b.n	80047c4 <UART_SetConfig+0x348>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0e9      	b.n	80047c4 <UART_SetConfig+0x348>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0e6      	b.n	80047c4 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a56      	ldr	r2, [pc, #344]	; (8004754 <UART_SetConfig+0x2d8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0x1c6>
 8004600:	4b51      	ldr	r3, [pc, #324]	; (8004748 <UART_SetConfig+0x2cc>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800460a:	2bc0      	cmp	r3, #192	; 0xc0
 800460c:	d013      	beq.n	8004636 <UART_SetConfig+0x1ba>
 800460e:	2bc0      	cmp	r3, #192	; 0xc0
 8004610:	d814      	bhi.n	800463c <UART_SetConfig+0x1c0>
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d009      	beq.n	800462a <UART_SetConfig+0x1ae>
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d810      	bhi.n	800463c <UART_SetConfig+0x1c0>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x1a8>
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x1b4>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x1c0>
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e0cc      	b.n	80047c4 <UART_SetConfig+0x348>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e0c9      	b.n	80047c4 <UART_SetConfig+0x348>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0c6      	b.n	80047c4 <UART_SetConfig+0x348>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0c3      	b.n	80047c4 <UART_SetConfig+0x348>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0c0      	b.n	80047c4 <UART_SetConfig+0x348>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a44      	ldr	r2, [pc, #272]	; (8004758 <UART_SetConfig+0x2dc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d125      	bne.n	8004698 <UART_SetConfig+0x21c>
 800464c:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <UART_SetConfig+0x2cc>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d017      	beq.n	800468c <UART_SetConfig+0x210>
 800465c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004660:	d817      	bhi.n	8004692 <UART_SetConfig+0x216>
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d00b      	beq.n	8004680 <UART_SetConfig+0x204>
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	d811      	bhi.n	8004692 <UART_SetConfig+0x216>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <UART_SetConfig+0x1fe>
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d006      	beq.n	8004686 <UART_SetConfig+0x20a>
 8004678:	e00b      	b.n	8004692 <UART_SetConfig+0x216>
 800467a:	2300      	movs	r3, #0
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e0a1      	b.n	80047c4 <UART_SetConfig+0x348>
 8004680:	2302      	movs	r3, #2
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e09e      	b.n	80047c4 <UART_SetConfig+0x348>
 8004686:	2304      	movs	r3, #4
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e09b      	b.n	80047c4 <UART_SetConfig+0x348>
 800468c:	2308      	movs	r3, #8
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e098      	b.n	80047c4 <UART_SetConfig+0x348>
 8004692:	2310      	movs	r3, #16
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e095      	b.n	80047c4 <UART_SetConfig+0x348>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2f      	ldr	r2, [pc, #188]	; (800475c <UART_SetConfig+0x2e0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d125      	bne.n	80046ee <UART_SetConfig+0x272>
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <UART_SetConfig+0x2cc>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b0:	d017      	beq.n	80046e2 <UART_SetConfig+0x266>
 80046b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b6:	d817      	bhi.n	80046e8 <UART_SetConfig+0x26c>
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046bc:	d00b      	beq.n	80046d6 <UART_SetConfig+0x25a>
 80046be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c2:	d811      	bhi.n	80046e8 <UART_SetConfig+0x26c>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x254>
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x260>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x26c>
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e076      	b.n	80047c4 <UART_SetConfig+0x348>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e073      	b.n	80047c4 <UART_SetConfig+0x348>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e070      	b.n	80047c4 <UART_SetConfig+0x348>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e06d      	b.n	80047c4 <UART_SetConfig+0x348>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e06a      	b.n	80047c4 <UART_SetConfig+0x348>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <UART_SetConfig+0x2e4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d138      	bne.n	800476a <UART_SetConfig+0x2ee>
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <UART_SetConfig+0x2cc>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004706:	d017      	beq.n	8004738 <UART_SetConfig+0x2bc>
 8004708:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800470c:	d82a      	bhi.n	8004764 <UART_SetConfig+0x2e8>
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004712:	d00b      	beq.n	800472c <UART_SetConfig+0x2b0>
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d824      	bhi.n	8004764 <UART_SetConfig+0x2e8>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <UART_SetConfig+0x2aa>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004722:	d006      	beq.n	8004732 <UART_SetConfig+0x2b6>
 8004724:	e01e      	b.n	8004764 <UART_SetConfig+0x2e8>
 8004726:	2300      	movs	r3, #0
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e04b      	b.n	80047c4 <UART_SetConfig+0x348>
 800472c:	2302      	movs	r3, #2
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e048      	b.n	80047c4 <UART_SetConfig+0x348>
 8004732:	2304      	movs	r3, #4
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e045      	b.n	80047c4 <UART_SetConfig+0x348>
 8004738:	2308      	movs	r3, #8
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e042      	b.n	80047c4 <UART_SetConfig+0x348>
 800473e:	bf00      	nop
 8004740:	efff69f3 	.word	0xefff69f3
 8004744:	40011000 	.word	0x40011000
 8004748:	40023800 	.word	0x40023800
 800474c:	40004400 	.word	0x40004400
 8004750:	40004800 	.word	0x40004800
 8004754:	40004c00 	.word	0x40004c00
 8004758:	40005000 	.word	0x40005000
 800475c:	40011400 	.word	0x40011400
 8004760:	40007800 	.word	0x40007800
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e02c      	b.n	80047c4 <UART_SetConfig+0x348>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a72      	ldr	r2, [pc, #456]	; (8004938 <UART_SetConfig+0x4bc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d125      	bne.n	80047c0 <UART_SetConfig+0x344>
 8004774:	4b71      	ldr	r3, [pc, #452]	; (800493c <UART_SetConfig+0x4c0>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800477e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004782:	d017      	beq.n	80047b4 <UART_SetConfig+0x338>
 8004784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004788:	d817      	bhi.n	80047ba <UART_SetConfig+0x33e>
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478e:	d00b      	beq.n	80047a8 <UART_SetConfig+0x32c>
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	d811      	bhi.n	80047ba <UART_SetConfig+0x33e>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <UART_SetConfig+0x326>
 800479a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800479e:	d006      	beq.n	80047ae <UART_SetConfig+0x332>
 80047a0:	e00b      	b.n	80047ba <UART_SetConfig+0x33e>
 80047a2:	2300      	movs	r3, #0
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e00d      	b.n	80047c4 <UART_SetConfig+0x348>
 80047a8:	2302      	movs	r3, #2
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e00a      	b.n	80047c4 <UART_SetConfig+0x348>
 80047ae:	2304      	movs	r3, #4
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e007      	b.n	80047c4 <UART_SetConfig+0x348>
 80047b4:	2308      	movs	r3, #8
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e004      	b.n	80047c4 <UART_SetConfig+0x348>
 80047ba:	2310      	movs	r3, #16
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e001      	b.n	80047c4 <UART_SetConfig+0x348>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d15b      	bne.n	8004886 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80047ce:	7ffb      	ldrb	r3, [r7, #31]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d828      	bhi.n	8004826 <UART_SetConfig+0x3aa>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x360>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe fab2 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8004804:	61b8      	str	r0, [r7, #24]
        break;
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe fac2 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 800480c:	61b8      	str	r0, [r7, #24]
        break;
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <UART_SetConfig+0x4c4>)
 8004812:	61bb      	str	r3, [r7, #24]
        break;
 8004814:	e00c      	b.n	8004830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe f995 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 800481a:	61b8      	str	r0, [r7, #24]
        break;
 800481c:	e008      	b.n	8004830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e004      	b.n	8004830 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	77bb      	strb	r3, [r7, #30]
        break;
 800482e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d074      	beq.n	8004920 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	005a      	lsls	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	d916      	bls.n	8004880 <UART_SetConfig+0x404>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d212      	bcs.n	8004880 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f023 030f 	bic.w	r3, r3, #15
 8004862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	b29a      	uxth	r2, r3
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	4313      	orrs	r3, r2
 8004874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	89fa      	ldrh	r2, [r7, #14]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	e04f      	b.n	8004920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77bb      	strb	r3, [r7, #30]
 8004884:	e04c      	b.n	8004920 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004886:	7ffb      	ldrb	r3, [r7, #31]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d828      	bhi.n	80048de <UART_SetConfig+0x462>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0x418>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	080048df 	.word	0x080048df
 80048a4:	080048cf 	.word	0x080048cf
 80048a8:	080048df 	.word	0x080048df
 80048ac:	080048df 	.word	0x080048df
 80048b0:	080048df 	.word	0x080048df
 80048b4:	080048d7 	.word	0x080048d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b8:	f7fe fa56 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 80048bc:	61b8      	str	r0, [r7, #24]
        break;
 80048be:	e013      	b.n	80048e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c0:	f7fe fa66 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 80048c4:	61b8      	str	r0, [r7, #24]
        break;
 80048c6:	e00f      	b.n	80048e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <UART_SetConfig+0x4c4>)
 80048ca:	61bb      	str	r3, [r7, #24]
        break;
 80048cc:	e00c      	b.n	80048e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ce:	f7fe f939 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80048d2:	61b8      	str	r0, [r7, #24]
        break;
 80048d4:	e008      	b.n	80048e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e004      	b.n	80048e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	77bb      	strb	r3, [r7, #30]
        break;
 80048e6:	bf00      	nop
    }

    if (pclk != 0U)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d018      	beq.n	8004920 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085a      	lsrs	r2, r3, #1
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	441a      	add	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b0f      	cmp	r3, #15
 8004906:	d909      	bls.n	800491c <UART_SetConfig+0x4a0>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d205      	bcs.n	800491c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e001      	b.n	8004920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800492c:	7fbb      	ldrb	r3, [r7, #30]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40007c00 	.word	0x40007c00
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400

08004944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d10a      	bne.n	8004a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a98:	f7fc fc68 	bl	800136c <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d10e      	bne.n	8004aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f831 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e027      	b.n	8004b1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d10e      	bne.n	8004af6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f81b 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e011      	b.n	8004b1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b09c      	sub	sp, #112	; 0x70
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b32:	e0a7      	b.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	f000 80a3 	beq.w	8004c84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fc fc15 	bl	800136c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d13f      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b68:	667b      	str	r3, [r7, #100]	; 0x64
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e6      	bne.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e068      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d050      	beq.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf0:	d148      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e6      	bne.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c4e:	623a      	str	r2, [r7, #32]
 8004c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	69f9      	ldr	r1, [r7, #28]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e010      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	f43f af48 	beq.w	8004b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3770      	adds	r7, #112	; 0x70
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b097      	sub	sp, #92	; 0x5c
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d10e      	bne.n	8004d02 <UART_Start_Receive_IT+0x52>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <UART_Start_Receive_IT+0x48>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cf6:	e02d      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	22ff      	movs	r2, #255	; 0xff
 8004cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d00:	e028      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10d      	bne.n	8004d26 <UART_Start_Receive_IT+0x76>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <UART_Start_Receive_IT+0x6c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	22ff      	movs	r2, #255	; 0xff
 8004d16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d1a:	e01b      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	227f      	movs	r2, #127	; 0x7f
 8004d20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d24:	e016      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2e:	d10d      	bne.n	8004d4c <UART_Start_Receive_IT+0x9c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <UART_Start_Receive_IT+0x92>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	227f      	movs	r2, #127	; 0x7f
 8004d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d40:	e008      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	223f      	movs	r2, #63	; 0x3f
 8004d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d4a:	e003      	b.n	8004d54 <UART_Start_Receive_IT+0xa4>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2222      	movs	r2, #34	; 0x22
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d84:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d107      	bne.n	8004db2 <UART_Start_Receive_IT+0x102>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <UART_Start_Receive_IT+0x184>)
 8004dae:	669a      	str	r2, [r3, #104]	; 0x68
 8004db0:	e002      	b.n	8004db8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <UART_Start_Receive_IT+0x188>)
 8004db6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d019      	beq.n	8004df4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_Start_Receive_IT+0x110>
 8004df2:	e018      	b.n	8004e26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f043 0320 	orr.w	r3, r3, #32
 8004e08:	653b      	str	r3, [r7, #80]	; 0x50
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	375c      	adds	r7, #92	; 0x5c
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	080050eb 	.word	0x080050eb
 8004e38:	08004f85 	.word	0x08004f85

08004e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b095      	sub	sp, #84	; 0x54
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
 8004e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e6      	bne.n	8004e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d118      	bne.n	8004ee4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e6      	bne.n	8004eb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ef8:	bf00      	nop
 8004efa:	3754      	adds	r7, #84	; 0x54
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fa8a 	bl	800443c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e6      	bne.n	8004f38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fa56 	bl	8004428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7c:	bf00      	nop
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b096      	sub	sp, #88	; 0x58
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9c:	2b22      	cmp	r3, #34	; 0x22
 8004f9e:	f040 8098 	bne.w	80050d2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004fb0:	b2d9      	uxtb	r1, r3
 8004fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d17b      	bne.n	80050e2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005008:	647b      	str	r3, [r7, #68]	; 0x44
 800500a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800500e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	623b      	str	r3, [r7, #32]
   return(result);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503c:	633a      	str	r2, [r7, #48]	; 0x30
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	2b01      	cmp	r3, #1
 800506a:	d12e      	bne.n	80050ca <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0310 	bic.w	r3, r3, #16
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d103      	bne.n	80050ba <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff f9c4 	bl	8004450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050c8:	e00b      	b.n	80050e2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb fd9a 	bl	8000c04 <HAL_UART_RxCpltCallback>
}
 80050d0:	e007      	b.n	80050e2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	619a      	str	r2, [r3, #24]
}
 80050e2:	bf00      	nop
 80050e4:	3758      	adds	r7, #88	; 0x58
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b096      	sub	sp, #88	; 0x58
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005102:	2b22      	cmp	r3, #34	; 0x22
 8005104:	f040 8098 	bne.w	8005238 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005118:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800511c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005120:	4013      	ands	r3, r2
 8005122:	b29a      	uxth	r2, r3
 8005124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005126:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d17b      	bne.n	8005248 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
 8005170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d12e      	bne.n	8005230 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	647b      	str	r3, [r7, #68]	; 0x44
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	613b      	str	r3, [r7, #16]
   return(result);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d103      	bne.n	8005220 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2210      	movs	r2, #16
 800521e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff f911 	bl	8004450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800522e:	e00b      	b.n	8005248 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fb fce7 	bl	8000c04 <HAL_UART_RxCpltCallback>
}
 8005236:	e007      	b.n	8005248 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	619a      	str	r2, [r3, #24]
}
 8005248:	bf00      	nop
 800524a:	3758      	adds	r7, #88	; 0x58
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005250:	b084      	sub	sp, #16
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	f107 001c 	add.w	r0, r7, #28
 800525e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b01      	cmp	r3, #1
 8005266:	d120      	bne.n	80052aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <USB_CoreInit+0xac>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d105      	bne.n	800529e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa96 	bl	80057d0 <USB_CoreReset>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	e010      	b.n	80052cc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa8a 	bl	80057d0 <USB_CoreReset>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10b      	bne.n	80052ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f043 0206 	orr.w	r2, r3, #6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052f6:	b004      	add	sp, #16
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	ffbdffbf 	.word	0xffbdffbf

08005300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 0201 	bic.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d115      	bne.n	8005370 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005350:	2001      	movs	r0, #1
 8005352:	f7fc f817 	bl	8001384 <HAL_Delay>
      ms++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3301      	adds	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa29 	bl	80057b4 <USB_GetMode>
 8005362:	4603      	mov	r3, r0
 8005364:	2b01      	cmp	r3, #1
 8005366:	d01e      	beq.n	80053a6 <USB_SetCurrentMode+0x84>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b31      	cmp	r3, #49	; 0x31
 800536c:	d9f0      	bls.n	8005350 <USB_SetCurrentMode+0x2e>
 800536e:	e01a      	b.n	80053a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d115      	bne.n	80053a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005382:	2001      	movs	r0, #1
 8005384:	f7fb fffe 	bl	8001384 <HAL_Delay>
      ms++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa10 	bl	80057b4 <USB_GetMode>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <USB_SetCurrentMode+0x84>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b31      	cmp	r3, #49	; 0x31
 800539e:	d9f0      	bls.n	8005382 <USB_SetCurrentMode+0x60>
 80053a0:	e001      	b.n	80053a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e005      	b.n	80053b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b32      	cmp	r3, #50	; 0x32
 80053aa:	d101      	bne.n	80053b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053bc:	b084      	sub	sp, #16
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e009      	b.n	80053f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3340      	adds	r3, #64	; 0x40
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	2200      	movs	r2, #0
 80053e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3301      	adds	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b0e      	cmp	r3, #14
 80053f4:	d9f2      	bls.n	80053dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11c      	bne.n	8005436 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540a:	f043 0302 	orr.w	r3, r3, #2
 800540e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e005      	b.n	8005442 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	4619      	mov	r1, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	461a      	mov	r2, r3
 800545e:	680b      	ldr	r3, [r1, #0]
 8005460:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10c      	bne.n	8005482 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800546e:	2100      	movs	r1, #0
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f965 	bl	8005740 <USB_SetDevSpeed>
 8005476:	e008      	b.n	800548a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f960 	bl	8005740 <USB_SetDevSpeed>
 8005480:	e003      	b.n	800548a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005482:	2103      	movs	r1, #3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f95b 	bl	8005740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800548a:	2110      	movs	r1, #16
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8f3 	bl	8005678 <USB_FlushTxFifo>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f91f 	bl	80056e0 <USB_FlushRxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	461a      	mov	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	461a      	mov	r2, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	461a      	mov	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	e043      	b.n	800555e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ec:	d118      	bne.n	8005520 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e013      	b.n	8005532 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e008      	b.n	8005532 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	461a      	mov	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	461a      	mov	r2, r3
 8005552:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3301      	adds	r3, #1
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3b7      	bcc.n	80054d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e043      	b.n	80055f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005582:	d118      	bne.n	80055b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	461a      	mov	r2, r3
 8005598:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e013      	b.n	80055c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	461a      	mov	r2, r3
 80055ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e008      	b.n	80055c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	461a      	mov	r2, r3
 80055e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3301      	adds	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d3b7      	bcc.n	800556c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800561c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f043 0210 	orr.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <USB_DevInit+0x2b4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800563c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d105      	bne.n	8005660 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <USB_DevInit+0x2b8>)
 800565a:	4313      	orrs	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800566c:	b004      	add	sp, #16
 800566e:	4770      	bx	lr
 8005670:	803c3800 	.word	0x803c3800
 8005674:	40000004 	.word	0x40000004

08005678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a13      	ldr	r2, [pc, #76]	; (80056dc <USB_FlushTxFifo+0x64>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e01b      	b.n	80056d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	daf2      	bge.n	8005686 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	019b      	lsls	r3, r3, #6
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a08      	ldr	r2, [pc, #32]	; (80056dc <USB_FlushTxFifo+0x64>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e006      	b.n	80056d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d0f0      	beq.n	80056b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	00030d40 	.word	0x00030d40

080056e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <USB_FlushRxFifo+0x5c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e018      	b.n	8005730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	daf2      	bge.n	80056ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2210      	movs	r2, #16
 800570e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <USB_FlushRxFifo+0x5c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e006      	b.n	8005730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d0f0      	beq.n	8005710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	00030d40 	.word	0x00030d40

08005740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a0:	f043 0302 	orr.w	r3, r3, #2
 80057a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0301 	and.w	r3, r3, #1
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_CoreReset+0x64>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e01b      	b.n	8005826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	daf2      	bge.n	80057dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <USB_CoreReset+0x64>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e006      	b.n	8005826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d0f0      	beq.n	8005806 <USB_CoreReset+0x36>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	00030d40 	.word	0x00030d40

08005838 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584a:	2b84      	cmp	r3, #132	; 0x84
 800584c:	d005      	beq.n	800585a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800584e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	3303      	adds	r3, #3
 8005858:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800586c:	f000 fb00 	bl	8005e70 <vTaskStartScheduler>
  
  return osOK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	bd80      	pop	{r7, pc}

08005876 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005878:	b089      	sub	sp, #36	; 0x24
 800587a:	af04      	add	r7, sp, #16
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d020      	beq.n	80058ca <osThreadCreate+0x54>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01c      	beq.n	80058ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685c      	ldr	r4, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691e      	ldr	r6, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff ffc8 	bl	8005838 <makeFreeRtosPriority>
 80058a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b2:	9202      	str	r2, [sp, #8]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	9100      	str	r1, [sp, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4632      	mov	r2, r6
 80058bc:	4629      	mov	r1, r5
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f8ed 	bl	8005a9e <xTaskCreateStatic>
 80058c4:	4603      	mov	r3, r0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e01c      	b.n	8005904 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685c      	ldr	r4, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ffaa 	bl	8005838 <makeFreeRtosPriority>
 80058e4:	4602      	mov	r2, r0
 80058e6:	f107 030c 	add.w	r3, r7, #12
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	9200      	str	r2, [sp, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	4632      	mov	r2, r6
 80058f2:	4629      	mov	r1, r5
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 f935 	bl	8005b64 <xTaskCreate>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d001      	beq.n	8005904 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800590e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <osDelay+0x16>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e000      	b.n	8005926 <osDelay+0x18>
 8005924:	2301      	movs	r3, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa6c 	bl	8005e04 <vTaskDelay>
  
  return osOK;
 800592c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 0208 	add.w	r2, r3, #8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f103 0208 	add.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f103 0208 	add.w	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d103      	bne.n	80059f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e00c      	b.n	8005a12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3308      	adds	r3, #8
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e002      	b.n	8005a06 <vListInsert+0x2e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d2f6      	bcs.n	8005a00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6852      	ldr	r2, [r2, #4]
 8005a6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d103      	bne.n	8005a7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b08e      	sub	sp, #56	; 0x38
 8005aa2:	af04      	add	r7, sp, #16
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	b672      	cpsid	i
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	b662      	cpsie	i
 8005ac6:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10c      	bne.n	8005aec <xTaskCreateStatic+0x4e>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	61fb      	str	r3, [r7, #28]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aec:	23a0      	movs	r3, #160	; 0xa0
 8005aee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2ba0      	cmp	r3, #160	; 0xa0
 8005af4:	d00c      	beq.n	8005b10 <xTaskCreateStatic+0x72>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	61bb      	str	r3, [r7, #24]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01e      	beq.n	8005b56 <xTaskCreateStatic+0xb8>
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01b      	beq.n	8005b56 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f851 	bl	8005bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b50:	f000 f8ee 	bl	8005d30 <prvAddNewTaskToReadyList>
 8005b54:	e001      	b.n	8005b5a <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b5a:	697b      	ldr	r3, [r7, #20]
	}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3728      	adds	r7, #40	; 0x28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af04      	add	r7, sp, #16
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fee7 	bl	800694c <pvPortMalloc>
 8005b7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00e      	beq.n	8005ba4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b86:	20a0      	movs	r0, #160	; 0xa0
 8005b88:	f000 fee0 	bl	800694c <pvPortMalloc>
 8005b8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
 8005b9a:	e005      	b.n	8005ba8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b9c:	6978      	ldr	r0, [r7, #20]
 8005b9e:	f000 ff9f 	bl	8006ae0 <vPortFree>
 8005ba2:	e001      	b.n	8005ba8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d017      	beq.n	8005bde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9303      	str	r3, [sp, #12]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	9302      	str	r3, [sp, #8]
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f80f 	bl	8005bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd2:	69f8      	ldr	r0, [r7, #28]
 8005bd4:	f000 f8ac 	bl	8005d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e002      	b.n	8005be4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bde:	f04f 33ff 	mov.w	r3, #4294967295
 8005be2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be4:	69bb      	ldr	r3, [r7, #24]
	}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c08:	440b      	add	r3, r1
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f023 0307 	bic.w	r3, r3, #7
 8005c16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	b672      	cpsid	i
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	b662      	cpsie	i
 8005c36:	617b      	str	r3, [r7, #20]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01f      	beq.n	8005c82 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e012      	b.n	8005c6e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	7819      	ldrb	r1, [r3, #0]
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	3334      	adds	r3, #52	; 0x34
 8005c58:	460a      	mov	r2, r1
 8005c5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d9e9      	bls.n	8005c48 <prvInitialiseNewTask+0x58>
 8005c74:	e000      	b.n	8005c78 <prvInitialiseNewTask+0x88>
			{
				break;
 8005c76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c80:	e003      	b.n	8005c8a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d901      	bls.n	8005c94 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c90:	2306      	movs	r3, #6
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fe63 	bl	8005976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fe5e 	bl	8005976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f1c3 0207 	rsb	r2, r3, #7
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	334c      	adds	r3, #76	; 0x4c
 8005ce4:	224c      	movs	r2, #76	; 0x4c
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 f8a3 	bl	8006e34 <memset>
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <prvInitialiseNewTask+0x134>)
 8005cf2:	651a      	str	r2, [r3, #80]	; 0x50
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <prvInitialiseNewTask+0x138>)
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <prvInitialiseNewTask+0x13c>)
 8005cfe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	69b8      	ldr	r0, [r7, #24]
 8005d06:	f000 fc2d 	bl	8006564 <pxPortInitialiseStack>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d1c:	bf00      	nop
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200051c0 	.word	0x200051c0
 8005d28:	20005228 	.word	0x20005228
 8005d2c:	20005290 	.word	0x20005290

08005d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d38:	f000 fd20 	bl	800677c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d3c:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <prvAddNewTaskToReadyList+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <prvAddNewTaskToReadyList+0xb8>)
 8005d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d46:	4b29      	ldr	r3, [pc, #164]	; (8005dec <prvAddNewTaskToReadyList+0xbc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d4e:	4a27      	ldr	r2, [pc, #156]	; (8005dec <prvAddNewTaskToReadyList+0xbc>)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <prvAddNewTaskToReadyList+0xb8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d110      	bne.n	8005d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d5c:	f000 fad8 	bl	8006310 <prvInitialiseTaskLists>
 8005d60:	e00d      	b.n	8005d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d62:	4b23      	ldr	r3, [pc, #140]	; (8005df0 <prvAddNewTaskToReadyList+0xc0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d6a:	4b20      	ldr	r3, [pc, #128]	; (8005dec <prvAddNewTaskToReadyList+0xbc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d802      	bhi.n	8005d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d78:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <prvAddNewTaskToReadyList+0xbc>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <prvAddNewTaskToReadyList+0xc4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <prvAddNewTaskToReadyList+0xc4>)
 8005d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	4b19      	ldr	r3, [pc, #100]	; (8005df8 <prvAddNewTaskToReadyList+0xc8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <prvAddNewTaskToReadyList+0xc8>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <prvAddNewTaskToReadyList+0xcc>)
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7ff fded 	bl	8005990 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005db6:	f000 fd15 	bl	80067e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <prvAddNewTaskToReadyList+0xc0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00e      	beq.n	8005de0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <prvAddNewTaskToReadyList+0xbc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d207      	bcs.n	8005de0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <prvAddNewTaskToReadyList+0xd0>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20001574 	.word	0x20001574
 8005dec:	20001474 	.word	0x20001474
 8005df0:	20001580 	.word	0x20001580
 8005df4:	20001590 	.word	0x20001590
 8005df8:	2000157c 	.word	0x2000157c
 8005dfc:	20001478 	.word	0x20001478
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d019      	beq.n	8005e4a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <vTaskDelay+0x64>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <vTaskDelay+0x34>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	b672      	cpsid	i
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	b662      	cpsie	i
 8005e32:	60bb      	str	r3, [r7, #8]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e38:	f000 f888 	bl	8005f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb2a 	bl	8006498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e44:	f000 f890 	bl	8005f68 <xTaskResumeAll>
 8005e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <vTaskDelay+0x68>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	2000159c 	.word	0x2000159c
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e7e:	463a      	mov	r2, r7
 8005e80:	1d39      	adds	r1, r7, #4
 8005e82:	f107 0308 	add.w	r3, r7, #8
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa fda0 	bl	80009cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	9202      	str	r2, [sp, #8]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	4923      	ldr	r1, [pc, #140]	; (8005f2c <vTaskStartScheduler+0xbc>)
 8005ea0:	4823      	ldr	r0, [pc, #140]	; (8005f30 <vTaskStartScheduler+0xc0>)
 8005ea2:	f7ff fdfc 	bl	8005a9e <xTaskCreateStatic>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <vTaskStartScheduler+0xc4>)
 8005eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eac:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <vTaskStartScheduler+0xc4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e001      	b.n	8005ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d11d      	bne.n	8005f00 <vTaskStartScheduler+0x90>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	b672      	cpsid	i
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	b662      	cpsie	i
 8005ed8:	613b      	str	r3, [r7, #16]
}
 8005eda:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <vTaskStartScheduler+0xc8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	334c      	adds	r3, #76	; 0x4c
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <vTaskStartScheduler+0xcc>)
 8005ee4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <vTaskStartScheduler+0xd0>)
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eee:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <vTaskStartScheduler+0xd4>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <vTaskStartScheduler+0xd8>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005efa:	f000 fbc1 	bl	8006680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005efe:	e010      	b.n	8005f22 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d10c      	bne.n	8005f22 <vTaskStartScheduler+0xb2>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	b672      	cpsid	i
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	b662      	cpsie	i
 8005f1c:	60fb      	str	r3, [r7, #12]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <vTaskStartScheduler+0xb0>
}
 8005f22:	bf00      	nop
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08007074 	.word	0x08007074
 8005f30:	080062e1 	.word	0x080062e1
 8005f34:	20001598 	.word	0x20001598
 8005f38:	20001474 	.word	0x20001474
 8005f3c:	20000060 	.word	0x20000060
 8005f40:	20001594 	.word	0x20001594
 8005f44:	20001580 	.word	0x20001580
 8005f48:	20001578 	.word	0x20001578

08005f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <vTaskSuspendAll+0x18>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	4a03      	ldr	r2, [pc, #12]	; (8005f64 <vTaskSuspendAll+0x18>)
 8005f58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	2000159c 	.word	0x2000159c

08005f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f76:	4b42      	ldr	r3, [pc, #264]	; (8006080 <xTaskResumeAll+0x118>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <xTaskResumeAll+0x30>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	b672      	cpsid	i
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	b662      	cpsie	i
 8005f92:	603b      	str	r3, [r7, #0]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f98:	f000 fbf0 	bl	800677c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f9c:	4b38      	ldr	r3, [pc, #224]	; (8006080 <xTaskResumeAll+0x118>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	4a37      	ldr	r2, [pc, #220]	; (8006080 <xTaskResumeAll+0x118>)
 8005fa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <xTaskResumeAll+0x118>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d161      	bne.n	8006072 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fae:	4b35      	ldr	r3, [pc, #212]	; (8006084 <xTaskResumeAll+0x11c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d05d      	beq.n	8006072 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb6:	e02e      	b.n	8006016 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb8:	4b33      	ldr	r3, [pc, #204]	; (8006088 <xTaskResumeAll+0x120>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fd40 	bl	8005a4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fd3b 	bl	8005a4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	2201      	movs	r2, #1
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	4b2b      	ldr	r3, [pc, #172]	; (800608c <xTaskResumeAll+0x124>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <xTaskResumeAll+0x124>)
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a27      	ldr	r2, [pc, #156]	; (8006090 <xTaskResumeAll+0x128>)
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7ff fcc7 	bl	8005990 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <xTaskResumeAll+0x12c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	429a      	cmp	r2, r3
 800600e:	d302      	bcc.n	8006016 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006010:	4b21      	ldr	r3, [pc, #132]	; (8006098 <xTaskResumeAll+0x130>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006016:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <xTaskResumeAll+0x120>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1cc      	bne.n	8005fb8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006024:	f000 fa18 	bl	8006458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <xTaskResumeAll+0x134>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006034:	f000 f836 	bl	80060a4 <xTaskIncrementTick>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800603e:	4b16      	ldr	r3, [pc, #88]	; (8006098 <xTaskResumeAll+0x130>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3b01      	subs	r3, #1
 8006048:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f1      	bne.n	8006034 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006050:	4b12      	ldr	r3, [pc, #72]	; (800609c <xTaskResumeAll+0x134>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006056:	4b10      	ldr	r3, [pc, #64]	; (8006098 <xTaskResumeAll+0x130>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <xTaskResumeAll+0x138>)
 8006064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006072:	f000 fbb7 	bl	80067e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006076:	68bb      	ldr	r3, [r7, #8]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	2000159c 	.word	0x2000159c
 8006084:	20001574 	.word	0x20001574
 8006088:	20001534 	.word	0x20001534
 800608c:	2000157c 	.word	0x2000157c
 8006090:	20001478 	.word	0x20001478
 8006094:	20001474 	.word	0x20001474
 8006098:	20001588 	.word	0x20001588
 800609c:	20001584 	.word	0x20001584
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ae:	4b4f      	ldr	r3, [pc, #316]	; (80061ec <xTaskIncrementTick+0x148>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 808a 	bne.w	80061cc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060b8:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <xTaskIncrementTick+0x14c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060c0:	4a4b      	ldr	r2, [pc, #300]	; (80061f0 <xTaskIncrementTick+0x14c>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d122      	bne.n	8006112 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80060cc:	4b49      	ldr	r3, [pc, #292]	; (80061f4 <xTaskIncrementTick+0x150>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xTaskIncrementTick+0x4a>
 80060f0:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <xTaskIncrementTick+0x150>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <xTaskIncrementTick+0x154>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3e      	ldr	r2, [pc, #248]	; (80061f4 <xTaskIncrementTick+0x150>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	4a3e      	ldr	r2, [pc, #248]	; (80061f8 <xTaskIncrementTick+0x154>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <xTaskIncrementTick+0x158>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <xTaskIncrementTick+0x158>)
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	f000 f9a3 	bl	8006458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006112:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <xTaskIncrementTick+0x15c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	d348      	bcc.n	80061ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611c:	4b35      	ldr	r3, [pc, #212]	; (80061f4 <xTaskIncrementTick+0x150>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006126:	4b36      	ldr	r3, [pc, #216]	; (8006200 <xTaskIncrementTick+0x15c>)
 8006128:	f04f 32ff 	mov.w	r2, #4294967295
 800612c:	601a      	str	r2, [r3, #0]
					break;
 800612e:	e03e      	b.n	80061ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006130:	4b30      	ldr	r3, [pc, #192]	; (80061f4 <xTaskIncrementTick+0x150>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d203      	bcs.n	8006150 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006148:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <xTaskIncrementTick+0x15c>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800614e:	e02e      	b.n	80061ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3304      	adds	r3, #4
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fc78 	bl	8005a4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d004      	beq.n	800616c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3318      	adds	r3, #24
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fc6f 	bl	8005a4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2201      	movs	r2, #1
 8006172:	409a      	lsls	r2, r3
 8006174:	4b23      	ldr	r3, [pc, #140]	; (8006204 <xTaskIncrementTick+0x160>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4313      	orrs	r3, r2
 800617a:	4a22      	ldr	r2, [pc, #136]	; (8006204 <xTaskIncrementTick+0x160>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4a1f      	ldr	r2, [pc, #124]	; (8006208 <xTaskIncrementTick+0x164>)
 800618c:	441a      	add	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f7ff fbfb 	bl	8005990 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <xTaskIncrementTick+0x168>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3b9      	bcc.n	800611c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ac:	e7b6      	b.n	800611c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <xTaskIncrementTick+0x168>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	4914      	ldr	r1, [pc, #80]	; (8006208 <xTaskIncrementTick+0x164>)
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d907      	bls.n	80061d6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e004      	b.n	80061d6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <xTaskIncrementTick+0x16c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	4a0f      	ldr	r2, [pc, #60]	; (8006210 <xTaskIncrementTick+0x16c>)
 80061d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061d6:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <xTaskIncrementTick+0x170>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80061de:	2301      	movs	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000159c 	.word	0x2000159c
 80061f0:	20001578 	.word	0x20001578
 80061f4:	2000152c 	.word	0x2000152c
 80061f8:	20001530 	.word	0x20001530
 80061fc:	2000158c 	.word	0x2000158c
 8006200:	20001594 	.word	0x20001594
 8006204:	2000157c 	.word	0x2000157c
 8006208:	20001478 	.word	0x20001478
 800620c:	20001474 	.word	0x20001474
 8006210:	20001584 	.word	0x20001584
 8006214:	20001588 	.word	0x20001588

08006218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800621e:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <vTaskSwitchContext+0xb0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <vTaskSwitchContext+0xb4>)
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800622c:	e046      	b.n	80062bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <vTaskSwitchContext+0xb4>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b26      	ldr	r3, [pc, #152]	; (80062d0 <vTaskSwitchContext+0xb8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	fab3 f383 	clz	r3, r3
 8006240:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006242:	7afb      	ldrb	r3, [r7, #11]
 8006244:	f1c3 031f 	rsb	r3, r3, #31
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	4922      	ldr	r1, [pc, #136]	; (80062d4 <vTaskSwitchContext+0xbc>)
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <vTaskSwitchContext+0x60>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	b672      	cpsid	i
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	b662      	cpsie	i
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vTaskSwitchContext+0x5e>
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <vTaskSwitchContext+0xbc>)
 8006284:	4413      	add	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3308      	adds	r3, #8
 800629a:	429a      	cmp	r2, r3
 800629c:	d104      	bne.n	80062a8 <vTaskSwitchContext+0x90>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <vTaskSwitchContext+0xc0>)
 80062b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <vTaskSwitchContext+0xc0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	334c      	adds	r3, #76	; 0x4c
 80062b8:	4a08      	ldr	r2, [pc, #32]	; (80062dc <vTaskSwitchContext+0xc4>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2000159c 	.word	0x2000159c
 80062cc:	20001588 	.word	0x20001588
 80062d0:	2000157c 	.word	0x2000157c
 80062d4:	20001478 	.word	0x20001478
 80062d8:	20001474 	.word	0x20001474
 80062dc:	20000060 	.word	0x20000060

080062e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062e8:	f000 f852 	bl	8006390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <prvIdleTask+0x28>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d9f9      	bls.n	80062e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <prvIdleTask+0x2c>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006304:	e7f0      	b.n	80062e8 <prvIdleTask+0x8>
 8006306:	bf00      	nop
 8006308:	20001478 	.word	0x20001478
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	e00c      	b.n	8006336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <prvInitialiseTaskLists+0x60>)
 8006328:	4413      	add	r3, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fb03 	bl	8005936 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3301      	adds	r3, #1
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b06      	cmp	r3, #6
 800633a:	d9ef      	bls.n	800631c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800633c:	480d      	ldr	r0, [pc, #52]	; (8006374 <prvInitialiseTaskLists+0x64>)
 800633e:	f7ff fafa 	bl	8005936 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006342:	480d      	ldr	r0, [pc, #52]	; (8006378 <prvInitialiseTaskLists+0x68>)
 8006344:	f7ff faf7 	bl	8005936 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006348:	480c      	ldr	r0, [pc, #48]	; (800637c <prvInitialiseTaskLists+0x6c>)
 800634a:	f7ff faf4 	bl	8005936 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800634e:	480c      	ldr	r0, [pc, #48]	; (8006380 <prvInitialiseTaskLists+0x70>)
 8006350:	f7ff faf1 	bl	8005936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006354:	480b      	ldr	r0, [pc, #44]	; (8006384 <prvInitialiseTaskLists+0x74>)
 8006356:	f7ff faee 	bl	8005936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <prvInitialiseTaskLists+0x78>)
 800635c:	4a05      	ldr	r2, [pc, #20]	; (8006374 <prvInitialiseTaskLists+0x64>)
 800635e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <prvInitialiseTaskLists+0x7c>)
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <prvInitialiseTaskLists+0x68>)
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20001478 	.word	0x20001478
 8006374:	20001504 	.word	0x20001504
 8006378:	20001518 	.word	0x20001518
 800637c:	20001534 	.word	0x20001534
 8006380:	20001548 	.word	0x20001548
 8006384:	20001560 	.word	0x20001560
 8006388:	2000152c 	.word	0x2000152c
 800638c:	20001530 	.word	0x20001530

08006390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006396:	e019      	b.n	80063cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006398:	f000 f9f0 	bl	800677c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <prvCheckTasksWaitingTermination+0x50>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fb4e 	bl	8005a4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <prvCheckTasksWaitingTermination+0x54>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <prvCheckTasksWaitingTermination+0x54>)
 80063b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <prvCheckTasksWaitingTermination+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3b01      	subs	r3, #1
 80063be:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <prvCheckTasksWaitingTermination+0x58>)
 80063c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063c2:	f000 fa0f 	bl	80067e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f810 	bl	80063ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063cc:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <prvCheckTasksWaitingTermination+0x58>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e1      	bne.n	8006398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20001548 	.word	0x20001548
 80063e4:	20001574 	.word	0x20001574
 80063e8:	2000155c 	.word	0x2000155c

080063ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	334c      	adds	r3, #76	; 0x4c
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fd23 	bl	8006e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fb67 	bl	8006ae0 <vPortFree>
				vPortFree( pxTCB );
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb64 	bl	8006ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006418:	e01a      	b.n	8006450 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006420:	2b01      	cmp	r3, #1
 8006422:	d103      	bne.n	800642c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fb5b 	bl	8006ae0 <vPortFree>
	}
 800642a:	e011      	b.n	8006450 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006432:	2b02      	cmp	r3, #2
 8006434:	d00c      	beq.n	8006450 <prvDeleteTCB+0x64>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	b672      	cpsid	i
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	b662      	cpsie	i
 800644a:	60fb      	str	r3, [r7, #12]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <prvDeleteTCB+0x62>
	}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
 800646e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006470:	e008      	b.n	8006484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 8006482:	6013      	str	r3, [r2, #0]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	2000152c 	.word	0x2000152c
 8006494:	20001594 	.word	0x20001594

08006498 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064a2:	4b29      	ldr	r3, [pc, #164]	; (8006548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff facb 	bl	8005a4a <uxListRemove>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2201      	movs	r2, #1
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	4b21      	ldr	r3, [pc, #132]	; (8006550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4013      	ands	r3, r2
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d10a      	bne.n	80064f0 <prvAddCurrentTaskToDelayedList+0x58>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	481a      	ldr	r0, [pc, #104]	; (8006554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064ea:	f7ff fa51 	bl	8005990 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ee:	e026      	b.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f8:	4b14      	ldr	r3, [pc, #80]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d209      	bcs.n	800651c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7ff fa5f 	bl	80059d8 <vListInsert>
}
 800651a:	e010      	b.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <prvAddCurrentTaskToDelayedList+0xc4>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7ff fa55 	bl	80059d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d202      	bcs.n	800653e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6013      	str	r3, [r2, #0]
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20001578 	.word	0x20001578
 800654c:	20001474 	.word	0x20001474
 8006550:	2000157c 	.word	0x2000157c
 8006554:	20001560 	.word	0x20001560
 8006558:	20001530 	.word	0x20001530
 800655c:	2000152c 	.word	0x2000152c
 8006560:	20001594 	.word	0x20001594

08006564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3b04      	subs	r3, #4
 8006574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800657c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b04      	subs	r3, #4
 8006582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b04      	subs	r3, #4
 8006592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006594:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <pxPortInitialiseStack+0x64>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b14      	subs	r3, #20
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f06f 0202 	mvn.w	r2, #2
 80065b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b20      	subs	r3, #32
 80065b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	080065cd 	.word	0x080065cd

080065cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvTaskExitError+0x5c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d00c      	beq.n	80065fa <prvTaskExitError+0x2e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	b672      	cpsid	i
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	b662      	cpsie	i
 80065f4:	60fb      	str	r3, [r7, #12]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <prvTaskExitError+0x2c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	60bb      	str	r3, [r7, #8]
}
 8006610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006612:	bf00      	nop
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0fc      	beq.n	8006614 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000010 	.word	0x20000010
 800662c:	00000000 	.word	0x00000000

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	4770      	bx	lr
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst2>:
 8006650:	20001474 	.word	0x20001474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006658:	4808      	ldr	r0, [pc, #32]	; (800667c <prvPortStartFirstTask+0x24>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8814 	msr	CONTROL, r0
 800666a:	b662      	cpsie	i
 800666c:	b661      	cpsie	f
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	df00      	svc	0
 8006678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667a:	bf00      	nop
 800667c:	e000ed08 	.word	0xe000ed08

08006680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006686:	4b37      	ldr	r3, [pc, #220]	; (8006764 <xPortStartScheduler+0xe4>)
 8006688:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <xPortStartScheduler+0xe8>)
 80066ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ae:	4b2f      	ldr	r3, [pc, #188]	; (800676c <xPortStartScheduler+0xec>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b4:	e009      	b.n	80066ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066b6:	4b2d      	ldr	r3, [pc, #180]	; (800676c <xPortStartScheduler+0xec>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a2b      	ldr	r2, [pc, #172]	; (800676c <xPortStartScheduler+0xec>)
 80066be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d0ef      	beq.n	80066b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d6:	4b25      	ldr	r3, [pc, #148]	; (800676c <xPortStartScheduler+0xec>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00c      	beq.n	80066fc <xPortStartScheduler+0x7c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <xPortStartScheduler+0xec>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <xPortStartScheduler+0xec>)
 8006704:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <xPortStartScheduler+0xec>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800670e:	4a17      	ldr	r2, [pc, #92]	; (800676c <xPortStartScheduler+0xec>)
 8006710:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <xPortStartScheduler+0xf0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <xPortStartScheduler+0xf0>)
 8006720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006724:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <xPortStartScheduler+0xf0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a11      	ldr	r2, [pc, #68]	; (8006770 <xPortStartScheduler+0xf0>)
 800672c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006730:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006732:	f000 f8dd 	bl	80068f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <xPortStartScheduler+0xf4>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800673c:	f000 f8fc 	bl	8006938 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <xPortStartScheduler+0xf8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0c      	ldr	r2, [pc, #48]	; (8006778 <xPortStartScheduler+0xf8>)
 8006746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800674a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800674c:	f7ff ff84 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006750:	f7ff fd62 	bl	8006218 <vTaskSwitchContext>
	prvTaskExitError();
 8006754:	f7ff ff3a 	bl	80065cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	e000e400 	.word	0xe000e400
 8006768:	200015a0 	.word	0x200015a0
 800676c:	200015a4 	.word	0x200015a4
 8006770:	e000ed20 	.word	0xe000ed20
 8006774:	20000010 	.word	0x20000010
 8006778:	e000ef34 	.word	0xe000ef34

0800677c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	607b      	str	r3, [r7, #4]
}
 8006798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <vPortEnterCritical+0x60>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <vPortEnterCritical+0x60>)
 80067a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <vPortEnterCritical+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d111      	bne.n	80067d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <vPortEnterCritical+0x64>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <vPortEnterCritical+0x54>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	b672      	cpsid	i
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	b662      	cpsie	i
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vPortEnterCritical+0x52>
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20000010 	.word	0x20000010
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <vPortExitCritical+0x54>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <vPortExitCritical+0x28>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	607b      	str	r3, [r7, #4]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <vPortExitCritical+0x54>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <vPortExitCritical+0x54>)
 8006814:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <vPortExitCritical+0x54>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <vPortExitCritical+0x46>
 800681e:	2300      	movs	r3, #0
 8006820:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006828:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000010 	.word	0x20000010
 800683c:	00000000 	.word	0x00000000

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006864:	b672      	cpsid	i
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	b662      	cpsie	i
 8006874:	f7ff fcd0 	bl	8006218 <vTaskSwitchContext>
 8006878:	f04f 0000 	mov.w	r0, #0
 800687c:	f380 8811 	msr	BASEPRI, r0
 8006880:	bc09      	pop	{r0, r3}
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f01e 0f10 	tst.w	lr, #16
 800688e:	bf08      	it	eq
 8006890:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006894:	f380 8809 	msr	PSP, r0
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <pxCurrentTCBConst>:
 80068a0:	20001474 	.word	0x20001474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	b672      	cpsid	i
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	b662      	cpsie	i
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c6:	f7ff fbed 	bl	80060a4 <xTaskIncrementTick>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <SysTick_Handler+0x44>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <vPortSetupTimerInterrupt+0x34>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <vPortSetupTimerInterrupt+0x38>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vPortSetupTimerInterrupt+0x3c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <vPortSetupTimerInterrupt+0x40>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <vPortSetupTimerInterrupt+0x44>)
 800690e:	3b01      	subs	r3, #1
 8006910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <vPortSetupTimerInterrupt+0x34>)
 8006914:	2207      	movs	r2, #7
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	e000e010 	.word	0xe000e010
 8006928:	e000e018 	.word	0xe000e018
 800692c:	20000004 	.word	0x20000004
 8006930:	10624dd3 	.word	0x10624dd3
 8006934:	e000e014 	.word	0xe000e014

08006938 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006938:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006948 <vPortEnableVFP+0x10>
 800693c:	6801      	ldr	r1, [r0, #0]
 800693e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006942:	6001      	str	r1, [r0, #0]
 8006944:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006946:	bf00      	nop
 8006948:	e000ed88 	.word	0xe000ed88

0800694c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006958:	f7ff faf8 	bl	8005f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800695c:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <pvPortMalloc+0x180>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006964:	f000 f91a 	bl	8006b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006968:	4b59      	ldr	r3, [pc, #356]	; (8006ad0 <pvPortMalloc+0x184>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8092 	bne.w	8006a9a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01f      	beq.n	80069bc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800697c:	2208      	movs	r2, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	3308      	adds	r3, #8
 8006996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <pvPortMalloc+0x70>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	617b      	str	r3, [r7, #20]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d06b      	beq.n	8006a9a <pvPortMalloc+0x14e>
 80069c2:	4b44      	ldr	r3, [pc, #272]	; (8006ad4 <pvPortMalloc+0x188>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d866      	bhi.n	8006a9a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <pvPortMalloc+0x18c>)
 80069ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069d0:	4b41      	ldr	r3, [pc, #260]	; (8006ad8 <pvPortMalloc+0x18c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d6:	e004      	b.n	80069e2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <pvPortMalloc+0xa8>
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f1      	bne.n	80069d8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069f4:	4b35      	ldr	r3, [pc, #212]	; (8006acc <pvPortMalloc+0x180>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d04d      	beq.n	8006a9a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2208      	movs	r2, #8
 8006a04:	4413      	add	r3, r2
 8006a06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	2308      	movs	r3, #8
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d921      	bls.n	8006a64 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <pvPortMalloc+0x100>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	b672      	cpsid	i
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	b662      	cpsie	i
 8006a46:	613b      	str	r3, [r7, #16]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a5e:	69b8      	ldr	r0, [r7, #24]
 8006a60:	f000 f8fe 	bl	8006c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a72:	4b18      	ldr	r3, [pc, #96]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <pvPortMalloc+0x190>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d203      	bcs.n	8006a86 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <pvPortMalloc+0x188>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <pvPortMalloc+0x190>)
 8006a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <pvPortMalloc+0x184>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a9a:	f7ff fa65 	bl	8005f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <pvPortMalloc+0x176>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <pvPortMalloc+0x174>
	return pvReturn;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	200051b0 	.word	0x200051b0
 8006ad0:	200051bc 	.word	0x200051bc
 8006ad4:	200051b4 	.word	0x200051b4
 8006ad8:	200051a8 	.word	0x200051a8
 8006adc:	200051b8 	.word	0x200051b8

08006ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04c      	beq.n	8006b8c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af2:	2308      	movs	r3, #8
 8006af4:	425b      	negs	r3, r3
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <vPortFree+0xb4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10c      	bne.n	8006b28 <vPortFree+0x48>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <vPortFree+0x6a>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	b672      	cpsid	i
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	b662      	cpsie	i
 8006b44:	60bb      	str	r3, [r7, #8]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <vPortFree+0xb4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d019      	beq.n	8006b8c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortFree+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b70:	f7ff f9ec 	bl	8005f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <vPortFree+0xb8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	4a06      	ldr	r2, [pc, #24]	; (8006b98 <vPortFree+0xb8>)
 8006b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b82:	6938      	ldr	r0, [r7, #16]
 8006b84:	f000 f86c 	bl	8006c60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b88:	f7ff f9ee 	bl	8005f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8c:	bf00      	nop
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	200051bc 	.word	0x200051bc
 8006b98:	200051b4 	.word	0x200051b4

08006b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ba2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvHeapInit+0xac>)
 8006baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00c      	beq.n	8006bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3307      	adds	r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <prvHeapInit+0xac>)
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <prvHeapInit+0xb0>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <prvHeapInit+0xb0>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006be8:	2208      	movs	r2, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <prvHeapInit+0xb4>)
 8006bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bfe:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <prvHeapInit+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <prvHeapInit+0xb4>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <prvHeapInit+0xb8>)
 8006c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <prvHeapInit+0xbc>)
 8006c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <prvHeapInit+0xc0>)
 8006c36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	200015a8 	.word	0x200015a8
 8006c4c:	200051a8 	.word	0x200051a8
 8006c50:	200051b0 	.word	0x200051b0
 8006c54:	200051b8 	.word	0x200051b8
 8006c58:	200051b4 	.word	0x200051b4
 8006c5c:	200051bc 	.word	0x200051bc

08006c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c68:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <prvInsertBlockIntoFreeList+0xac>)
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e002      	b.n	8006c74 <prvInsertBlockIntoFreeList+0x14>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d8f7      	bhi.n	8006c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d108      	bne.n	8006ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d118      	bne.n	8006ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <prvInsertBlockIntoFreeList+0xb0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d00d      	beq.n	8006cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e008      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e003      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d002      	beq.n	8006cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	200051a8 	.word	0x200051a8
 8006d10:	200051b0 	.word	0x200051b0

08006d14 <atoi>:
 8006d14:	220a      	movs	r2, #10
 8006d16:	2100      	movs	r1, #0
 8006d18:	f000 b882 	b.w	8006e20 <strtol>

08006d1c <_strtol_l.constprop.0>:
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d22:	d001      	beq.n	8006d28 <_strtol_l.constprop.0+0xc>
 8006d24:	2b24      	cmp	r3, #36	; 0x24
 8006d26:	d906      	bls.n	8006d36 <_strtol_l.constprop.0+0x1a>
 8006d28:	f000 f8e2 	bl	8006ef0 <__errno>
 8006d2c:	2316      	movs	r3, #22
 8006d2e:	6003      	str	r3, [r0, #0]
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e1c <_strtol_l.constprop.0+0x100>
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	462e      	mov	r6, r5
 8006d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d46:	f017 0708 	ands.w	r7, r7, #8
 8006d4a:	d1f7      	bne.n	8006d3c <_strtol_l.constprop.0+0x20>
 8006d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d4e:	d132      	bne.n	8006db6 <_strtol_l.constprop.0+0x9a>
 8006d50:	782c      	ldrb	r4, [r5, #0]
 8006d52:	2701      	movs	r7, #1
 8006d54:	1cb5      	adds	r5, r6, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d05b      	beq.n	8006e12 <_strtol_l.constprop.0+0xf6>
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d109      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006d5e:	2c30      	cmp	r4, #48	; 0x30
 8006d60:	d107      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006d62:	782c      	ldrb	r4, [r5, #0]
 8006d64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d68:	2c58      	cmp	r4, #88	; 0x58
 8006d6a:	d14d      	bne.n	8006e08 <_strtol_l.constprop.0+0xec>
 8006d6c:	786c      	ldrb	r4, [r5, #1]
 8006d6e:	2310      	movs	r3, #16
 8006d70:	3502      	adds	r5, #2
 8006d72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d76:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d7a:	f04f 0e00 	mov.w	lr, #0
 8006d7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d82:	4676      	mov	r6, lr
 8006d84:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d8c:	f1bc 0f09 	cmp.w	ip, #9
 8006d90:	d816      	bhi.n	8006dc0 <_strtol_l.constprop.0+0xa4>
 8006d92:	4664      	mov	r4, ip
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	dd24      	ble.n	8006de2 <_strtol_l.constprop.0+0xc6>
 8006d98:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d9c:	d008      	beq.n	8006db0 <_strtol_l.constprop.0+0x94>
 8006d9e:	45b1      	cmp	r9, r6
 8006da0:	d31c      	bcc.n	8006ddc <_strtol_l.constprop.0+0xc0>
 8006da2:	d101      	bne.n	8006da8 <_strtol_l.constprop.0+0x8c>
 8006da4:	45a2      	cmp	sl, r4
 8006da6:	db19      	blt.n	8006ddc <_strtol_l.constprop.0+0xc0>
 8006da8:	fb06 4603 	mla	r6, r6, r3, r4
 8006dac:	f04f 0e01 	mov.w	lr, #1
 8006db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006db4:	e7e8      	b.n	8006d88 <_strtol_l.constprop.0+0x6c>
 8006db6:	2c2b      	cmp	r4, #43	; 0x2b
 8006db8:	bf04      	itt	eq
 8006dba:	782c      	ldrbeq	r4, [r5, #0]
 8006dbc:	1cb5      	addeq	r5, r6, #2
 8006dbe:	e7ca      	b.n	8006d56 <_strtol_l.constprop.0+0x3a>
 8006dc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006dc4:	f1bc 0f19 	cmp.w	ip, #25
 8006dc8:	d801      	bhi.n	8006dce <_strtol_l.constprop.0+0xb2>
 8006dca:	3c37      	subs	r4, #55	; 0x37
 8006dcc:	e7e2      	b.n	8006d94 <_strtol_l.constprop.0+0x78>
 8006dce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006dd2:	f1bc 0f19 	cmp.w	ip, #25
 8006dd6:	d804      	bhi.n	8006de2 <_strtol_l.constprop.0+0xc6>
 8006dd8:	3c57      	subs	r4, #87	; 0x57
 8006dda:	e7db      	b.n	8006d94 <_strtol_l.constprop.0+0x78>
 8006ddc:	f04f 3eff 	mov.w	lr, #4294967295
 8006de0:	e7e6      	b.n	8006db0 <_strtol_l.constprop.0+0x94>
 8006de2:	f1be 3fff 	cmp.w	lr, #4294967295
 8006de6:	d105      	bne.n	8006df4 <_strtol_l.constprop.0+0xd8>
 8006de8:	2322      	movs	r3, #34	; 0x22
 8006dea:	6003      	str	r3, [r0, #0]
 8006dec:	4646      	mov	r6, r8
 8006dee:	b942      	cbnz	r2, 8006e02 <_strtol_l.constprop.0+0xe6>
 8006df0:	4630      	mov	r0, r6
 8006df2:	e79e      	b.n	8006d32 <_strtol_l.constprop.0+0x16>
 8006df4:	b107      	cbz	r7, 8006df8 <_strtol_l.constprop.0+0xdc>
 8006df6:	4276      	negs	r6, r6
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	d0f9      	beq.n	8006df0 <_strtol_l.constprop.0+0xd4>
 8006dfc:	f1be 0f00 	cmp.w	lr, #0
 8006e00:	d000      	beq.n	8006e04 <_strtol_l.constprop.0+0xe8>
 8006e02:	1e69      	subs	r1, r5, #1
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	e7f3      	b.n	8006df0 <_strtol_l.constprop.0+0xd4>
 8006e08:	2430      	movs	r4, #48	; 0x30
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b1      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	e7af      	b.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e12:	2c30      	cmp	r4, #48	; 0x30
 8006e14:	d0a5      	beq.n	8006d62 <_strtol_l.constprop.0+0x46>
 8006e16:	230a      	movs	r3, #10
 8006e18:	e7ab      	b.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e1a:	bf00      	nop
 8006e1c:	08007095 	.word	0x08007095

08006e20 <strtol>:
 8006e20:	4613      	mov	r3, r2
 8006e22:	460a      	mov	r2, r1
 8006e24:	4601      	mov	r1, r0
 8006e26:	4802      	ldr	r0, [pc, #8]	; (8006e30 <strtol+0x10>)
 8006e28:	6800      	ldr	r0, [r0, #0]
 8006e2a:	f7ff bf77 	b.w	8006d1c <_strtol_l.constprop.0>
 8006e2e:	bf00      	nop
 8006e30:	20000060 	.word	0x20000060

08006e34 <memset>:
 8006e34:	4402      	add	r2, r0
 8006e36:	4603      	mov	r3, r0
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d100      	bne.n	8006e3e <memset+0xa>
 8006e3c:	4770      	bx	lr
 8006e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e42:	e7f9      	b.n	8006e38 <memset+0x4>

08006e44 <_reclaim_reent>:
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <_reclaim_reent+0xa8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4283      	cmp	r3, r0
 8006e4a:	b570      	push	{r4, r5, r6, lr}
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	d04b      	beq.n	8006ee8 <_reclaim_reent+0xa4>
 8006e50:	69c3      	ldr	r3, [r0, #28]
 8006e52:	b143      	cbz	r3, 8006e66 <_reclaim_reent+0x22>
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d144      	bne.n	8006ee4 <_reclaim_reent+0xa0>
 8006e5a:	69e3      	ldr	r3, [r4, #28]
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	b111      	cbz	r1, 8006e66 <_reclaim_reent+0x22>
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f871 	bl	8006f48 <_free_r>
 8006e66:	6961      	ldr	r1, [r4, #20]
 8006e68:	b111      	cbz	r1, 8006e70 <_reclaim_reent+0x2c>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f86c 	bl	8006f48 <_free_r>
 8006e70:	69e1      	ldr	r1, [r4, #28]
 8006e72:	b111      	cbz	r1, 8006e7a <_reclaim_reent+0x36>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f867 	bl	8006f48 <_free_r>
 8006e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e7c:	b111      	cbz	r1, 8006e84 <_reclaim_reent+0x40>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f862 	bl	8006f48 <_free_r>
 8006e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e86:	b111      	cbz	r1, 8006e8e <_reclaim_reent+0x4a>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f85d 	bl	8006f48 <_free_r>
 8006e8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e90:	b111      	cbz	r1, 8006e98 <_reclaim_reent+0x54>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f858 	bl	8006f48 <_free_r>
 8006e98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e9a:	b111      	cbz	r1, 8006ea2 <_reclaim_reent+0x5e>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 f853 	bl	8006f48 <_free_r>
 8006ea2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006ea4:	b111      	cbz	r1, 8006eac <_reclaim_reent+0x68>
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f84e 	bl	8006f48 <_free_r>
 8006eac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006eae:	b111      	cbz	r1, 8006eb6 <_reclaim_reent+0x72>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 f849 	bl	8006f48 <_free_r>
 8006eb6:	6a23      	ldr	r3, [r4, #32]
 8006eb8:	b1b3      	cbz	r3, 8006ee8 <_reclaim_reent+0xa4>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ec0:	4718      	bx	r3
 8006ec2:	5949      	ldr	r1, [r1, r5]
 8006ec4:	b941      	cbnz	r1, 8006ed8 <_reclaim_reent+0x94>
 8006ec6:	3504      	adds	r5, #4
 8006ec8:	69e3      	ldr	r3, [r4, #28]
 8006eca:	2d80      	cmp	r5, #128	; 0x80
 8006ecc:	68d9      	ldr	r1, [r3, #12]
 8006ece:	d1f8      	bne.n	8006ec2 <_reclaim_reent+0x7e>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 f839 	bl	8006f48 <_free_r>
 8006ed6:	e7c0      	b.n	8006e5a <_reclaim_reent+0x16>
 8006ed8:	680e      	ldr	r6, [r1, #0]
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f834 	bl	8006f48 <_free_r>
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	e7ef      	b.n	8006ec4 <_reclaim_reent+0x80>
 8006ee4:	2500      	movs	r5, #0
 8006ee6:	e7ef      	b.n	8006ec8 <_reclaim_reent+0x84>
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	bf00      	nop
 8006eec:	20000060 	.word	0x20000060

08006ef0 <__errno>:
 8006ef0:	4b01      	ldr	r3, [pc, #4]	; (8006ef8 <__errno+0x8>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000060 	.word	0x20000060

08006efc <__libc_init_array>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	4d0d      	ldr	r5, [pc, #52]	; (8006f34 <__libc_init_array+0x38>)
 8006f00:	4c0d      	ldr	r4, [pc, #52]	; (8006f38 <__libc_init_array+0x3c>)
 8006f02:	1b64      	subs	r4, r4, r5
 8006f04:	10a4      	asrs	r4, r4, #2
 8006f06:	2600      	movs	r6, #0
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	d109      	bne.n	8006f20 <__libc_init_array+0x24>
 8006f0c:	4d0b      	ldr	r5, [pc, #44]	; (8006f3c <__libc_init_array+0x40>)
 8006f0e:	4c0c      	ldr	r4, [pc, #48]	; (8006f40 <__libc_init_array+0x44>)
 8006f10:	f000 f872 	bl	8006ff8 <_init>
 8006f14:	1b64      	subs	r4, r4, r5
 8006f16:	10a4      	asrs	r4, r4, #2
 8006f18:	2600      	movs	r6, #0
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	d105      	bne.n	8006f2a <__libc_init_array+0x2e>
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f24:	4798      	blx	r3
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7ee      	b.n	8006f08 <__libc_init_array+0xc>
 8006f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2e:	4798      	blx	r3
 8006f30:	3601      	adds	r6, #1
 8006f32:	e7f2      	b.n	8006f1a <__libc_init_array+0x1e>
 8006f34:	080071a0 	.word	0x080071a0
 8006f38:	080071a0 	.word	0x080071a0
 8006f3c:	080071a0 	.word	0x080071a0
 8006f40:	080071a4 	.word	0x080071a4

08006f44 <__retarget_lock_acquire_recursive>:
 8006f44:	4770      	bx	lr

08006f46 <__retarget_lock_release_recursive>:
 8006f46:	4770      	bx	lr

08006f48 <_free_r>:
 8006f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	d044      	beq.n	8006fd8 <_free_r+0x90>
 8006f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f52:	9001      	str	r0, [sp, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f1a1 0404 	sub.w	r4, r1, #4
 8006f5a:	bfb8      	it	lt
 8006f5c:	18e4      	addlt	r4, r4, r3
 8006f5e:	f000 f83f 	bl	8006fe0 <__malloc_lock>
 8006f62:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <_free_r+0x94>)
 8006f64:	9801      	ldr	r0, [sp, #4]
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	b933      	cbnz	r3, 8006f78 <_free_r+0x30>
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	6014      	str	r4, [r2, #0]
 8006f6e:	b003      	add	sp, #12
 8006f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f74:	f000 b83a 	b.w	8006fec <__malloc_unlock>
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	d908      	bls.n	8006f8e <_free_r+0x46>
 8006f7c:	6825      	ldr	r5, [r4, #0]
 8006f7e:	1961      	adds	r1, r4, r5
 8006f80:	428b      	cmp	r3, r1
 8006f82:	bf01      	itttt	eq
 8006f84:	6819      	ldreq	r1, [r3, #0]
 8006f86:	685b      	ldreq	r3, [r3, #4]
 8006f88:	1949      	addeq	r1, r1, r5
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	e7ed      	b.n	8006f6a <_free_r+0x22>
 8006f8e:	461a      	mov	r2, r3
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b10b      	cbz	r3, 8006f98 <_free_r+0x50>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d9fa      	bls.n	8006f8e <_free_r+0x46>
 8006f98:	6811      	ldr	r1, [r2, #0]
 8006f9a:	1855      	adds	r5, r2, r1
 8006f9c:	42a5      	cmp	r5, r4
 8006f9e:	d10b      	bne.n	8006fb8 <_free_r+0x70>
 8006fa0:	6824      	ldr	r4, [r4, #0]
 8006fa2:	4421      	add	r1, r4
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	d1e0      	bne.n	8006f6e <_free_r+0x26>
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	6053      	str	r3, [r2, #4]
 8006fb2:	440c      	add	r4, r1
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	e7da      	b.n	8006f6e <_free_r+0x26>
 8006fb8:	d902      	bls.n	8006fc0 <_free_r+0x78>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	e7d6      	b.n	8006f6e <_free_r+0x26>
 8006fc0:	6825      	ldr	r5, [r4, #0]
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	bf04      	itt	eq
 8006fc8:	6819      	ldreq	r1, [r3, #0]
 8006fca:	685b      	ldreq	r3, [r3, #4]
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	bf04      	itt	eq
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	6054      	str	r4, [r2, #4]
 8006fd6:	e7ca      	b.n	8006f6e <_free_r+0x26>
 8006fd8:	b003      	add	sp, #12
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	200052fc 	.word	0x200052fc

08006fe0 <__malloc_lock>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__malloc_lock+0x8>)
 8006fe2:	f7ff bfaf 	b.w	8006f44 <__retarget_lock_acquire_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200052f8 	.word	0x200052f8

08006fec <__malloc_unlock>:
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <__malloc_unlock+0x8>)
 8006fee:	f7ff bfaa 	b.w	8006f46 <__retarget_lock_release_recursive>
 8006ff2:	bf00      	nop
 8006ff4:	200052f8 	.word	0x200052f8

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
