
FreeRTOS_LED_stripe_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004224  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c4  080045c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004634  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004634  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f0d  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fca  00000000  00000000  00028fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000653  00000000  00000000  0002b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d59  00000000  00000000  0002be9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9c9  00000000  00000000  00053bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0618  00000000  00000000  0005f5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027f0  00000000  00000000  0014fbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  001523c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800440c 	.word	0x0800440c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800440c 	.word	0x0800440c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_DMA_Init+0x38>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <MX_DMA_Init+0x38>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_DMA_Init+0x38>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	203b      	movs	r0, #59	; 0x3b
 8000600:	f001 f885 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000604:	203b      	movs	r0, #59	; 0x3b
 8000606:	f001 f89e 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b7f      	ldr	r3, [pc, #508]	; (800082c <MX_GPIO_Init+0x214>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a7e      	ldr	r2, [pc, #504]	; (800082c <MX_GPIO_Init+0x214>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b7c      	ldr	r3, [pc, #496]	; (800082c <MX_GPIO_Init+0x214>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b79      	ldr	r3, [pc, #484]	; (800082c <MX_GPIO_Init+0x214>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a78      	ldr	r2, [pc, #480]	; (800082c <MX_GPIO_Init+0x214>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b76      	ldr	r3, [pc, #472]	; (800082c <MX_GPIO_Init+0x214>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b73      	ldr	r3, [pc, #460]	; (800082c <MX_GPIO_Init+0x214>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a72      	ldr	r2, [pc, #456]	; (800082c <MX_GPIO_Init+0x214>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b70      	ldr	r3, [pc, #448]	; (800082c <MX_GPIO_Init+0x214>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b6d      	ldr	r3, [pc, #436]	; (800082c <MX_GPIO_Init+0x214>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a6c      	ldr	r2, [pc, #432]	; (800082c <MX_GPIO_Init+0x214>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b6a      	ldr	r3, [pc, #424]	; (800082c <MX_GPIO_Init+0x214>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <MX_GPIO_Init+0x214>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <MX_GPIO_Init+0x214>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <MX_GPIO_Init+0x214>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b61      	ldr	r3, [pc, #388]	; (800082c <MX_GPIO_Init+0x214>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a60      	ldr	r2, [pc, #384]	; (800082c <MX_GPIO_Init+0x214>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b5e      	ldr	r3, [pc, #376]	; (800082c <MX_GPIO_Init+0x214>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c4:	485a      	ldr	r0, [pc, #360]	; (8000830 <MX_GPIO_Init+0x218>)
 80006c6:	f001 fd7d 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4859      	ldr	r0, [pc, #356]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006d0:	f001 fd78 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4853      	ldr	r0, [pc, #332]	; (8000838 <MX_GPIO_Init+0x220>)
 80006ec:	f001 fbbe 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000700:	230b      	movs	r3, #11
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	484b      	ldr	r0, [pc, #300]	; (8000838 <MX_GPIO_Init+0x220>)
 800070c:	f001 fbae 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000710:	2386      	movs	r3, #134	; 0x86
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4844      	ldr	r0, [pc, #272]	; (800083c <MX_GPIO_Init+0x224>)
 800072c:	f001 fb9e 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000730:	f244 0381 	movw	r3, #16513	; 0x4081
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4839      	ldr	r0, [pc, #228]	; (8000830 <MX_GPIO_Init+0x218>)
 800074a:	f001 fb8f 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4831      	ldr	r0, [pc, #196]	; (8000830 <MX_GPIO_Init+0x218>)
 800076c:	f001 fb7e 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000770:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000782:	2307      	movs	r3, #7
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	482c      	ldr	r0, [pc, #176]	; (8000840 <MX_GPIO_Init+0x228>)
 800078e:	f001 fb6d 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4822      	ldr	r0, [pc, #136]	; (8000834 <MX_GPIO_Init+0x21c>)
 80007aa:	f001 fb5f 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <MX_GPIO_Init+0x21c>)
 80007c2:	f001 fb53 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d8:	230a      	movs	r3, #10
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4816      	ldr	r0, [pc, #88]	; (800083c <MX_GPIO_Init+0x224>)
 80007e4:	f001 fb42 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <MX_GPIO_Init+0x224>)
 80007fe:	f001 fb35 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000802:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000814:	230b      	movs	r3, #11
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000820:	f001 fb24 	bl	8001e6c <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400
 8000834:	40021800 	.word	0x40021800
 8000838:	40020800 	.word	0x40020800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020c00 	.word	0x40020c00

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000848:	b092      	sub	sp, #72	; 0x48
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fe03 	bl	8001456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f89a 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f7ff fee0 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 8000858:	f7ff fec0 	bl	80005dc <MX_DMA_Init>
  MX_SPI1_Init();
 800085c:	f000 f908 	bl	8000a70 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Transmit 4 empty bytes to ensure SDO is low.
  uint8_t d[4] = {0};
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000864:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	2204      	movs	r2, #4
 800086c:	4843      	ldr	r0, [pc, #268]	; (800097c <main+0x138>)
 800086e:	f002 fa1e 	bl	8002cae <HAL_SPI_Transmit>

  // Create handle and configure
  ws2812b_handle_t hws2812b;

  hws2812b.config.packing = PACKING; // See macro above
 8000872:	2301      	movs	r3, #1
 8000874:	763b      	strb	r3, [r7, #24]
  hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000876:	233f      	movs	r3, #63	; 0x3f
 8000878:	76bb      	strb	r3, [r7, #26]
  hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 800087a:	2303      	movs	r3, #3
 800087c:	767b      	strb	r3, [r7, #25]
  hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 800087e:	2301      	movs	r3, #1
 8000880:	76fb      	strb	r3, [r7, #27]
  hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000886:	2304      	movs	r3, #4
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 800088a:	2300      	movs	r3, #0
 800088c:	773b      	strb	r3, [r7, #28]

  // Create array of LEDs & set LED color
  ws2812b_led_t leds[LED_COUNT];

  for(int i=0;i<LED_COUNT;i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
 8000892:	e01d      	b.n	80008d0 <main+0x8c>
	  leds[i].red = 0x40;
 8000894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	3348      	adds	r3, #72	; 0x48
 800089e:	443b      	add	r3, r7
 80008a0:	3b48      	subs	r3, #72	; 0x48
 80008a2:	2240      	movs	r2, #64	; 0x40
 80008a4:	701a      	strb	r2, [r3, #0]
	  leds[i].green = 0x00;
 80008a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	3348      	adds	r3, #72	; 0x48
 80008b0:	443b      	add	r3, r7
 80008b2:	3b47      	subs	r3, #71	; 0x47
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = 0x00;
 80008b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	3348      	adds	r3, #72	; 0x48
 80008c2:	443b      	add	r3, r7
 80008c4:	3b46      	subs	r3, #70	; 0x46
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<LED_COUNT;i++) {
 80008ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008cc:	3301      	adds	r3, #1
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
 80008d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	ddde      	ble.n	8000894 <main+0x50>
  }

  // Add LEDs and count to handle
  hws2812b.led_count = LED_COUNT;
 80008d6:	2307      	movs	r3, #7
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  hws2812b.leds = leds;
 80008da:	463b      	mov	r3, r7
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Initialize the driver
  if(ws2812b_init(&hws2812b)){
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 faa4 	bl	8000e30 <ws2812b_init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <main+0xb8>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <main+0x13c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4823      	ldr	r0, [pc, #140]	; (8000984 <main+0x140>)
 80008f6:	f002 ff15 	bl	8003724 <iprintf>
	  while(1) {;}
 80008fa:	e7fe      	b.n	80008fa <main+0xb6>
  }

  // Create buffer
  uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fc31 	bl	8001168 <ws2812b_required_buffer_len>
 8000906:	4601      	mov	r1, r0
 8000908:	460b      	mov	r3, r1
 800090a:	3b01      	subs	r3, #1
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
 800090e:	2300      	movs	r3, #0
 8000910:	4688      	mov	r8, r1
 8000912:	4699      	mov	r9, r3
 8000914:	f04f 0200 	mov.w	r2, #0
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000928:	2300      	movs	r3, #0
 800092a:	460c      	mov	r4, r1
 800092c:	461d      	mov	r5, r3
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	f04f 0300 	mov.w	r3, #0
 8000936:	00eb      	lsls	r3, r5, #3
 8000938:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800093c:	00e2      	lsls	r2, r4, #3
 800093e:	1dcb      	adds	r3, r1, #7
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	ebad 0d03 	sub.w	sp, sp, r3
 8000948:	466b      	mov	r3, sp
 800094a:	3300      	adds	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fc22 	bl	800119e <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fc02 	bl	8001168 <ws2812b_required_buffer_len>
 8000964:	4603      	mov	r3, r0
 8000966:	b29b      	uxth	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <main+0x138>)
 800096e:	f002 fb0d 	bl	8002f8c <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8000972:	200a      	movs	r0, #10
 8000974:	f000 fdcc 	bl	8001510 <HAL_Delay>
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000978:	e7e9      	b.n	800094e <main+0x10a>
 800097a:	bf00      	nop
 800097c:	20000084 	.word	0x20000084
 8000980:	2000014c 	.word	0x2000014c
 8000984:	08004424 	.word	0x08004424

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	; 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 ff19 	bl	80037ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <SystemClock_Config+0xd4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <SystemClock_Config+0xd4>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemClock_Config+0xd4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <SystemClock_Config+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <SystemClock_Config+0xd8>)
 80009ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <SystemClock_Config+0xd8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 80009f0:	230d      	movs	r3, #13
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009f4:	23d8      	movs	r3, #216	; 0xd8
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fc45 	bl	8002298 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a14:	f000 f826 	bl	8000a64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a18:	f001 fbee 	bl	80021f8 <HAL_PWREx_EnableOverDrive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a22:	f000 f81f 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2107      	movs	r1, #7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fed5 	bl	80027f4 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a50:	f000 f808 	bl	8000a64 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3750      	adds	r7, #80	; 0x50
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_SPI1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a88:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000acc:	2208      	movs	r2, #8
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_SPI1_Init+0x74>)
 8000ad2:	f002 f841 	bl	8002b58 <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000adc:	f7ff ffc2 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000084 	.word	0x20000084
 8000ae8:	40013000 	.word	0x40013000

08000aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a3c      	ldr	r2, [pc, #240]	; (8000bfc <HAL_SPI_MspInit+0x110>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d171      	bne.n	8000bf2 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a3b      	ldr	r2, [pc, #236]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a35      	ldr	r2, [pc, #212]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_SPI_MspInit+0x114>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b56:	2320      	movs	r3, #32
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b66:	2305      	movs	r3, #5
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <HAL_SPI_MspInit+0x118>)
 8000b72:	f001 f97b 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481d      	ldr	r0, [pc, #116]	; (8000c08 <HAL_SPI_MspInit+0x11c>)
 8000b92:	f001 f96b 	bl	8001e6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000b9e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ba2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000ba6:	2240      	movs	r2, #64	; 0x40
 8000ba8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bd8:	f000 fdd0 	bl	800177c <HAL_DMA_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8000be2:	f7ff ff3f 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bea:	655a      	str	r2, [r3, #84]	; 0x54
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_SPI_MspInit+0x120>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40013000 	.word	0x40013000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	200000e8 	.word	0x200000e8
 8000c10:	40026458 	.word	0x40026458

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 fc12 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA2_Stream3_IRQHandler+0x10>)
 8000cb6:	f000 fe6f 	bl	8001998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000e8 	.word	0x200000e8

08000cc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
  }

  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
  }
  return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fd4c 	bl	800386c <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20080000 	.word	0x20080000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	20000148 	.word	0x20000148
 8000e08:	200002e0 	.word	0x200002e0

08000e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8000e38:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <ws2812b_init+0x1f4>)
 8000e3a:	4a7b      	ldr	r2, [pc, #492]	; (8001028 <ws2812b_init+0x1f8>)
 8000e3c:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8000e3e:	4b7a      	ldr	r3, [pc, #488]	; (8001028 <ws2812b_init+0x1f8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d009      	beq.n	8000e60 <ws2812b_init+0x30>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <ws2812b_init+0x30>
 8000e54:	4875      	ldr	r0, [pc, #468]	; (800102c <ws2812b_init+0x1fc>)
 8000e56:	f000 f9f5 	bl	8001244 <set_init_error_msg>
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e17f      	b.n	8001160 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	789b      	ldrb	r3, [r3, #2]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d01d      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	789b      	ldrb	r3, [r3, #2]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d019      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d015      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d011      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	2b3f      	cmp	r3, #63	; 0x3f
 8000e86:	d00d      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	d009      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d005      	beq.n	8000ea4 <ws2812b_init+0x74>
 8000e98:	4865      	ldr	r0, [pc, #404]	; (8001030 <ws2812b_init+0x200>)
 8000e9a:	f000 f9d3 	bl	8001244 <set_init_error_msg>
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e15d      	b.n	8001160 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d01d      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d019      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	d015      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d011      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eca:	d00d      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	785b      	ldrb	r3, [r3, #1]
 8000ed0:	2b1f      	cmp	r3, #31
 8000ed2:	d009      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eda:	d005      	beq.n	8000ee8 <ws2812b_init+0xb8>
 8000edc:	4855      	ldr	r0, [pc, #340]	; (8001034 <ws2812b_init+0x204>)
 8000ede:	f000 f9b1 	bl	8001244 <set_init_error_msg>
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e13b      	b.n	8001160 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <ws2812b_init+0xd4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d005      	beq.n	8000f04 <ws2812b_init+0xd4>
 8000ef8:	484f      	ldr	r0, [pc, #316]	; (8001038 <ws2812b_init+0x208>)
 8000efa:	f000 f9a3 	bl	8001244 <set_init_error_msg>
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e12d      	b.n	8001160 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d009      	beq.n	8000f20 <ws2812b_init+0xf0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <ws2812b_init+0xf0>
 8000f14:	4849      	ldr	r0, [pc, #292]	; (800103c <ws2812b_init+0x20c>)
 8000f16:	f000 f995 	bl	8001244 <set_init_error_msg>
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e11f      	b.n	8001160 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	789a      	ldrb	r2, [r3, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d805      	bhi.n	8000f38 <ws2812b_init+0x108>
 8000f2c:	4844      	ldr	r0, [pc, #272]	; (8001040 <ws2812b_init+0x210>)
 8000f2e:	f000 f989 	bl	8001244 <set_init_error_msg>
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e113      	b.n	8001160 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d109      	bne.n	8000f54 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	2b0e      	cmp	r3, #14
 8000f46:	d905      	bls.n	8000f54 <ws2812b_init+0x124>
 8000f48:	483e      	ldr	r0, [pc, #248]	; (8001044 <ws2812b_init+0x214>)
 8000f4a:	f000 f97b 	bl	8001244 <set_init_error_msg>
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e105      	b.n	8001160 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	78db      	ldrb	r3, [r3, #3]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	789b      	ldrb	r3, [r3, #2]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 80e9 	bne.w	8001158 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d15c      	bne.n	8001048 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	10db      	asrs	r3, r3, #3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	b25a      	sxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e5b      	ldrb	r3, [r3, #25]
 8000fa0:	105b      	asrs	r3, r3, #1
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7e5b      	ldrb	r3, [r3, #25]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e5b      	ldrb	r3, [r3, #25]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7e1b      	ldrb	r3, [r3, #24]
 8000fdc:	10db      	asrs	r3, r3, #3
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e1b      	ldrb	r3, [r3, #24]
 8000fea:	105b      	asrs	r3, r3, #1
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	b25b      	sxtb	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b25a      	sxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7e1b      	ldrb	r3, [r3, #24]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	b25b      	sxtb	r3, r3
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	b25b      	sxtb	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b25b      	sxtb	r3, r3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	761a      	strb	r2, [r3, #24]
 8001022:	e099      	b.n	8001158 <ws2812b_init+0x328>
 8001024:	2000014c 	.word	0x2000014c
 8001028:	20000150 	.word	0x20000150
 800102c:	08004444 	.word	0x08004444
 8001030:	08004468 	.word	0x08004468
 8001034:	08004490 	.word	0x08004490
 8001038:	080044b8 	.word	0x080044b8
 800103c:	080044e0 	.word	0x080044e0
 8001040:	0800450c 	.word	0x0800450c
 8001044:	08004540 	.word	0x08004540
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e5b      	ldrb	r3, [r3, #25]
 800104c:	09db      	lsrs	r3, r3, #7
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b25a      	sxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	115b      	asrs	r3, r3, #5
 8001058:	b25b      	sxtb	r3, r3
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b25a      	sxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e5b      	ldrb	r3, [r3, #25]
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	b25b      	sxtb	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b25a      	sxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7e5b      	ldrb	r3, [r3, #25]
 800107a:	105b      	asrs	r3, r3, #1
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b25a      	sxtb	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7e5b      	ldrb	r3, [r3, #25]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	b25b      	sxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b25a      	sxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e5b      	ldrb	r3, [r3, #25]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e5b      	ldrb	r3, [r3, #25]
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e5b      	ldrb	r3, [r3, #25]
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7e1b      	ldrb	r3, [r3, #24]
 80010d4:	09db      	lsrs	r3, r3, #7
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7e1b      	ldrb	r3, [r3, #24]
 80010de:	115b      	asrs	r3, r3, #5
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e1b      	ldrb	r3, [r3, #24]
 80010f0:	10db      	asrs	r3, r3, #3
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e1b      	ldrb	r3, [r3, #24]
 8001102:	105b      	asrs	r3, r3, #1
 8001104:	b25b      	sxtb	r3, r3
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b25a      	sxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	b25b      	sxtb	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b25a      	sxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7e1b      	ldrb	r3, [r3, #24]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	b25b      	sxtb	r3, r3
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b25a      	sxtb	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001140:	b25b      	sxtb	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b25a      	sxtb	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7e1b      	ldrb	r3, [r3, #24]
 800114a:	01db      	lsls	r3, r3, #7
 800114c:	b25b      	sxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <ws2812b_required_buffer_len+0x18>
 800117c:	2318      	movs	r3, #24
 800117e:	e000      	b.n	8001182 <ws2812b_required_buffer_len+0x1a>
 8001180:	230c      	movs	r3, #12
 8001182:	fb03 f202 	mul.w	r2, r3, r2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	441a      	add	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e008      	b.n	80011c6 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
    buffer++;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	3301      	adds	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3f1      	bcc.n	80011b4 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e01a      	b.n	800120c <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	463a      	mov	r2, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f85a 	bl	8001298 <add_byte>
    add_byte(ws, led->red, &buffer);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	463a      	mov	r2, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f853 	bl	8001298 <add_byte>
    add_byte(ws, led->blue, &buffer);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	463a      	mov	r2, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f84c 	bl	8001298 <add_byte>
    led++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3303      	adds	r3, #3
 8001204:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3df      	bcc.n	80011d6 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	e008      	b.n	800122e <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
    buffer++;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3301      	adds	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3f1      	bcc.n	800121c <ws2812b_fill_buffer+0x7e>
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8001250:	e00b      	b.n	800126a <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	7819      	ldrb	r1, [r3, #0]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <set_init_error_msg+0x50>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
    i++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b3a      	cmp	r3, #58	; 0x3a
 800126e:	dc05      	bgt.n	800127c <set_init_error_msg+0x38>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ea      	bne.n	8001252 <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <set_init_error_msg+0x50>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000150 	.word	0x20000150

08001298 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	460b      	mov	r3, r1
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d118      	bne.n	80012e0 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e011      	b.n	80012d8 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681c      	ldr	r4, [r3, #0]
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	461a      	mov	r2, r3
 80012bc:	6979      	ldr	r1, [r7, #20]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f844 	bl	800134c <construct_double_pulse>
 80012c4:	4603      	mov	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3302      	adds	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9ea      	bls.n	80012b4 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 80012de:	e017      	b.n	8001310 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e011      	b.n	800130a <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	461a      	mov	r2, r3
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f811 	bl	8001318 <construct_single_pulse>
 80012f6:	4603      	mov	r3, r0
 80012f8:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3301      	adds	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d9ea      	bls.n	80012e6 <add_byte+0x4e>
}
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}

08001318 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	fa21 f303 	lsr.w	r3, r1, r3
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <construct_single_pulse+0x24>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	7e1b      	ldrb	r3, [r3, #24]
 800133a:	e001      	b.n	8001340 <construct_single_pulse+0x28>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7e5b      	ldrb	r3, [r3, #25]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	7e1b      	ldrb	r3, [r3, #24]
 800135e:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	7e5b      	ldrb	r3, [r3, #25]
 8001364:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d121      	bne.n	80013b2 <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3301      	adds	r3, #1
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	fa21 f303 	lsr.w	r3, r1, r3
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <construct_double_pulse+0x38>
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	e000      	b.n	8001386 <construct_double_pulse+0x3a>
 8001384:	7d7b      	ldrb	r3, [r7, #21]
 8001386:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	fa21 f303 	lsr.w	r3, r1, r3
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <construct_double_pulse+0x54>
 8001398:	7dbb      	ldrb	r3, [r7, #22]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	b25b      	sxtb	r3, r3
 800139e:	e002      	b.n	80013a6 <construct_double_pulse+0x5a>
 80013a0:	7d7b      	ldrb	r3, [r7, #21]
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	75fb      	strb	r3, [r7, #23]
 80013b0:	e020      	b.n	80013f4 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	fa21 f303 	lsr.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <construct_double_pulse+0x7a>
 80013c2:	7dbb      	ldrb	r3, [r7, #22]
 80013c4:	e000      	b.n	80013c8 <construct_double_pulse+0x7c>
 80013c6:	7d7b      	ldrb	r3, [r7, #21]
 80013c8:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	fa21 f303 	lsr.w	r3, r1, r3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <construct_double_pulse+0x98>
 80013dc:	7dbb      	ldrb	r3, [r7, #22]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	e002      	b.n	80013ea <construct_double_pulse+0x9e>
 80013e4:	7d7b      	ldrb	r3, [r7, #21]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001420:	4c0b      	ldr	r4, [pc, #44]	; (8001450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142e:	f7ff fced 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f002 fa21 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fa05 	bl	8000844 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001448:	080045cc 	.word	0x080045cc
  ldr r2, =_sbss
 800144c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001450:	200002dc 	.word	0x200002dc

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>

08001456 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f94c 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001460:	2000      	movs	r0, #0
 8001462:	f000 f805 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fbd5 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f967 	bl	8001762 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f92f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	2000018c 	.word	0x2000018c

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000018c 	.word	0x2000018c

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	05fa0000 	.word	0x05fa0000

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff feb6 	bl	80014f8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e099      	b.n	80018cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	e00f      	b.n	80017da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ba:	f7ff fe9d 	bl	80014f8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d908      	bls.n	80017da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e078      	b.n	80018cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e8      	bne.n	80017ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_DMA_Init+0x158>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	2b04      	cmp	r3, #4
 8001832:	d107      	bne.n	8001844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4313      	orrs	r3, r2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f023 0307 	bic.w	r3, r3, #7
 800185a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2b04      	cmp	r3, #4
 800186c:	d117      	bne.n	800189e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa77 	bl	8001d74 <DMA_CheckFifoParam>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2240      	movs	r2, #64	; 0x40
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800189a:	2301      	movs	r3, #1
 800189c:	e016      	b.n	80018cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa2e 	bl	8001d08 <DMA_CalcBaseAndBitshift>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	223f      	movs	r2, #63	; 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	e010803f 	.word	0xe010803f

080018d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_DMA_Start_IT+0x26>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e048      	b.n	8001990 <HAL_DMA_Start_IT+0xb8>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d137      	bne.n	8001982 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f9c0 	bl	8001cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	223f      	movs	r2, #63	; 0x3f
 8001932:	409a      	lsls	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0216 	orr.w	r2, r2, #22
 8001946:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001956:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0208 	orr.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e005      	b.n	800198e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80019a4:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <HAL_DMA_IRQHandler+0x248>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a8e      	ldr	r2, [pc, #568]	; (8001be4 <HAL_DMA_IRQHandler+0x24c>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2208      	movs	r2, #8
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	2208      	movs	r2, #8
 80019f2:	409a      	lsls	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	2201      	movs	r2, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d012      	beq.n	8001a3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2201      	movs	r2, #1
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	f043 0202 	orr.w	r2, r3, #2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2204      	movs	r2, #4
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00b      	beq.n	8001a70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	2210      	movs	r2, #16
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d043      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d03c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2210      	movs	r2, #16
 8001a94:	409a      	lsls	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d018      	beq.n	8001ada <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d024      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
 8001ac6:	e01f      	b.n	8001b08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e016      	b.n	8001b08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0208 	bic.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 808f 	beq.w	8001c38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8087 	beq.w	8001c38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	2220      	movs	r2, #32
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d136      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0216 	bic.w	r2, r2, #22
 8001b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x1da>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0208 	bic.w	r2, r2, #8
 8001b80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	223f      	movs	r2, #63	; 0x3f
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d07e      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
        }
        return;
 8001bae:	e079      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01d      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d031      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
 8001bdc:	e02c      	b.n	8001c38 <HAL_DMA_IRQHandler+0x2a0>
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000
 8001be4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e01e      	b.n	8001c38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10f      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0210 	bic.w	r2, r2, #16
 8001c16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d032      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d022      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2205      	movs	r2, #5
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d307      	bcc.n	8001c80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f2      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x2cc>
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
 8001ca2:	e000      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ca4:	bf00      	nop
    }
  }
}
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d108      	bne.n	8001cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cea:	e007      	b.n	8001cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3b10      	subs	r3, #16
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <DMA_CalcBaseAndBitshift+0x60>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <DMA_CalcBaseAndBitshift+0x64>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d908      	bls.n	8001d48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <DMA_CalcBaseAndBitshift+0x68>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	1d1a      	adds	r2, r3, #4
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58
 8001d46:	e006      	b.n	8001d56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <DMA_CalcBaseAndBitshift+0x68>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	aaaaaaab 	.word	0xaaaaaaab
 8001d6c:	08004580 	.word	0x08004580
 8001d70:	fffffc00 	.word	0xfffffc00

08001d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11f      	bne.n	8001dce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d856      	bhi.n	8001e42 <DMA_CheckFifoParam+0xce>
 8001d94:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <DMA_CheckFifoParam+0x28>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001dbf 	.word	0x08001dbf
 8001da4:	08001dad 	.word	0x08001dad
 8001da8:	08001e43 	.word	0x08001e43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d046      	beq.n	8001e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dbc:	e043      	b.n	8001e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dc6:	d140      	bne.n	8001e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dcc:	e03d      	b.n	8001e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd6:	d121      	bne.n	8001e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d837      	bhi.n	8001e4e <DMA_CheckFifoParam+0xda>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <DMA_CheckFifoParam+0x70>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001dfb 	.word	0x08001dfb
 8001dec:	08001df5 	.word	0x08001df5
 8001df0:	08001e0d 	.word	0x08001e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e030      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d025      	beq.n	8001e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0a:	e022      	b.n	8001e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e14:	d11f      	bne.n	8001e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e1a:	e01c      	b.n	8001e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d903      	bls.n	8001e2a <DMA_CheckFifoParam+0xb6>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d003      	beq.n	8001e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e28:	e018      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2e:	e015      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e40:	e00b      	b.n	8001e5a <DMA_CheckFifoParam+0xe6>
      break;
 8001e42:	bf00      	nop
 8001e44:	e00a      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e008      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e006      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e004      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e002      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e175      	b.n	8002178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8164 	bne.w	8002172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_GPIO_Init+0x56>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d130      	bne.n	8001f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80be 	beq.w	8002172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_GPIO_Init+0x324>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_GPIO_Init+0x324>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_GPIO_Init+0x324>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800200e:	4a61      	ldr	r2, [pc, #388]	; (8002194 <HAL_GPIO_Init+0x328>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_GPIO_Init+0x32c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d037      	beq.n	80020aa <HAL_GPIO_Init+0x23e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a57      	ldr	r2, [pc, #348]	; (800219c <HAL_GPIO_Init+0x330>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d031      	beq.n	80020a6 <HAL_GPIO_Init+0x23a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a56      	ldr	r2, [pc, #344]	; (80021a0 <HAL_GPIO_Init+0x334>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <HAL_GPIO_Init+0x236>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_GPIO_Init+0x338>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x232>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a54      	ldr	r2, [pc, #336]	; (80021a8 <HAL_GPIO_Init+0x33c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a53      	ldr	r2, [pc, #332]	; (80021ac <HAL_GPIO_Init+0x340>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x22a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_GPIO_Init+0x344>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_GPIO_Init+0x348>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_GPIO_Init+0x34c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <HAL_GPIO_Init+0x350>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x21a>
 8002082:	2309      	movs	r3, #9
 8002084:	e012      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002086:	230a      	movs	r3, #10
 8002088:	e010      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208a:	2308      	movs	r3, #8
 800208c:	e00e      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208e:	2307      	movs	r3, #7
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002092:	2306      	movs	r3, #6
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020bc:	4935      	ldr	r1, [pc, #212]	; (8002194 <HAL_GPIO_Init+0x328>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_GPIO_Init+0x354>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a34      	ldr	r2, [pc, #208]	; (80021c0 <HAL_GPIO_Init+0x354>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_GPIO_Init+0x354>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_GPIO_Init+0x354>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_GPIO_Init+0x354>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_GPIO_Init+0x354>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_GPIO_Init+0x354>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_GPIO_Init+0x354>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f ae86 	bls.w	8001e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40013800 	.word	0x40013800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40021400 	.word	0x40021400
 80021b0:	40021800 	.word	0x40021800
 80021b4:	40021c00 	.word	0x40021c00
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40022400 	.word	0x40022400
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021e0:	e003      	b.n	80021ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002226:	f7ff f967 	bl	80014f8 <HAL_GetTick>
 800222a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800222c:	e009      	b.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800222e:	f7ff f963 	bl	80014f8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223c:	d901      	bls.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e022      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d1ee      	bne.n	800222e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225c:	f7ff f94c 	bl	80014f8 <HAL_GetTick>
 8002260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002262:	e009      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002264:	f7ff f948 	bl	80014f8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002272:	d901      	bls.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e007      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002284:	d1ee      	bne.n	8002264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000

08002298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e29b      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b96      	ldr	r3, [pc, #600]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c8:	4b93      	ldr	r3, [pc, #588]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
 80022d4:	4b90      	ldr	r3, [pc, #576]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x130>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e275      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x7a>
 8002304:	4b84      	ldr	r3, [pc, #528]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x9c>
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7b      	ldr	r2, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xc0>
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002358:	4b6f      	ldr	r3, [pc, #444]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6e      	ldr	r2, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6b      	ldr	r2, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff f8be 	bl	80014f8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f8ba 	bl	80014f8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e229      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f8aa 	bl	80014f8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff f8a6 	bl	80014f8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e215      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x110>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d069      	beq.n	80024aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1e9      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	493d      	ldr	r1, [pc, #244]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e040      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff f85c 	bl	80014f8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7ff f858 	bl	80014f8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1c7      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4929      	ldr	r1, [pc, #164]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a26      	ldr	r2, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f838 	bl	80014f8 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff f834 	bl	80014f8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1a3      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d038      	beq.n	8002528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7ff f815 	bl	80014f8 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7ff f811 	bl	80014f8 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e180      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x23a>
 80024f0:	e01a      	b.n	8002528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fffb 	bl	80014f8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002506:	f7fe fff7 	bl	80014f8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d903      	bls.n	800251c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e166      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
 8002518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	4b92      	ldr	r3, [pc, #584]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a4 	beq.w	800267e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a88      	ldr	r2, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b86      	ldr	r3, [pc, #536]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800256a:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7f      	ldr	r2, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe ffbf 	bl	80014f8 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe ffbb 	bl	80014f8 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e12a      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31a>
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a6f      	ldr	r2, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	e02d      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x33c>
 80025ba:	4b6b      	ldr	r3, [pc, #428]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a6a      	ldr	r2, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a67      	ldr	r2, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x35e>
 80025dc:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a61      	ldr	r2, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe ff6f 	bl	80014f8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe ff6b 	bl	80014f8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d8      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x386>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe ff59 	bl	80014f8 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe ff55 	bl	80014f8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c2      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80ae 	beq.w	80027e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d06d      	beq.n	8002770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d14b      	bne.n	8002734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe ff26 	bl	80014f8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe ff22 	bl	80014f8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e091      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	491b      	ldr	r1, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fef4 	bl	80014f8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fef0 	bl	80014f8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e05f      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x47c>
 8002732:	e057      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe feda 	bl	80014f8 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fed6 	bl	80014f8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e045      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x4b0>
 8002766:	e03d      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x558>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d030      	beq.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d129      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d122      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d119      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	4965      	ldr	r1, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fe06 	bl	80014f8 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fe02 	bl	80014f8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fd62 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08004570 	.word	0x08004570
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b090      	sub	sp, #64	; 0x40
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
 80029d8:	2300      	movs	r3, #0
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80a1 	bhi.w	8002b38 <HAL_RCC_GetSysClockFreq+0x16c>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e09b      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a04:	e09b      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a0a:	e098      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d028      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a34:	2100      	movs	r1, #0
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a38:	fb03 f201 	mul.w	r2, r3, r1
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a46:	fba0 1202 	umull	r1, r2, r0, r2
 8002a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	4413      	add	r3, r2
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	61fa      	str	r2, [r7, #28]
 8002a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a66:	f7fd fc3b 	bl	80002e0 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a72:	e053      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a74:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	617a      	str	r2, [r7, #20]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a86:	f04f 0b00 	mov.w	fp, #0
 8002a8a:	4652      	mov	r2, sl
 8002a8c:	465b      	mov	r3, fp
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	ebb2 080a 	subs.w	r8, r2, sl
 8002aa6:	eb63 090b 	sbc.w	r9, r3, fp
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ab6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002abe:	ebb2 0408 	subs.w	r4, r2, r8
 8002ac2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	00eb      	lsls	r3, r5, #3
 8002ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad4:	00e2      	lsls	r2, r4, #3
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	461d      	mov	r5, r3
 8002ada:	eb14 030a 	adds.w	r3, r4, sl
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	eb45 030b 	adc.w	r3, r5, fp
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af2:	4629      	mov	r1, r5
 8002af4:	028b      	lsls	r3, r1, #10
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002afc:	4621      	mov	r1, r4
 8002afe:	028a      	lsls	r2, r1, #10
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	2200      	movs	r2, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	f7fd fbe6 	bl	80002e0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3740      	adds	r7, #64	; 0x40
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	018cba80 	.word	0x018cba80

08002b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09d      	b.n	8002ca6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7a:	d009      	beq.n	8002b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
 8002b82:	e005      	b.n	8002b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd ff9e 	bl	8000aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd0:	d902      	bls.n	8002bd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e002      	b.n	8002bde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002be6:	d007      	beq.n	8002bf8 <HAL_SPI_Init+0xa0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	ea42 0103 	orr.w	r1, r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0204 	and.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c74:	ea42 0103 	orr.w	r1, r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_SPI_Transmit+0x22>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e158      	b.n	8002f82 <HAL_SPI_Transmit+0x2d4>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd8:	f7fe fc0e 	bl	80014f8 <HAL_GetTick>
 8002cdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d002      	beq.n	8002cf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf2:	e13d      	b.n	8002f70 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0x52>
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d04:	e134      	b.n	8002f70 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	d10f      	bne.n	8002d72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d98:	d94b      	bls.n	8002e32 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Transmit+0xfa>
 8002da2:	8afb      	ldrh	r3, [r7, #22]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d13e      	bne.n	8002e26 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dcc:	e02b      	b.n	8002e26 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d112      	bne.n	8002e02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e00:	e011      	b.n	8002e26 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe fb79 	bl	80014f8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Transmit+0x16c>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x172>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e24:	e0a4      	b.n	8002f70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ce      	bne.n	8002dce <HAL_SPI_Transmit+0x120>
 8002e30:	e07c      	b.n	8002f2c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Transmit+0x192>
 8002e3a:	8afb      	ldrh	r3, [r7, #22]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d170      	bne.n	8002f22 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d912      	bls.n	8002e70 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b02      	subs	r3, #2
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6e:	e058      	b.n	8002f22 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e96:	e044      	b.n	8002f22 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d12b      	bne.n	8002efe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d912      	bls.n	8002ed6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	1c9a      	adds	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b02      	subs	r3, #2
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ed4:	e025      	b.n	8002f22 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efc:	e011      	b.n	8002f22 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efe:	f7fe fafb 	bl	80014f8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d803      	bhi.n	8002f16 <HAL_SPI_Transmit+0x268>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Transmit+0x26e>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f20:	e026      	b.n	8002f70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1b5      	bne.n	8002e98 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fadd 	bl	80034f0 <SPI_EndRxTxTransaction>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e000      	b.n	8002f70 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_SPI_Transmit_DMA+0x20>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0d8      	b.n	800315e <HAL_SPI_Transmit_DMA+0x1d2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc4:	e0c6      	b.n	8003154 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_Transmit_DMA+0x46>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fd6:	e0bd      	b.n	8003154 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003022:	d10f      	bne.n	8003044 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_SPI_Transmit_DMA+0x1dc>)
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_SPI_Transmit_DMA+0x1e0>)
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	4a45      	ldr	r2, [pc, #276]	; (8003170 <HAL_SPI_Transmit_DMA+0x1e4>)
 800305a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	2200      	movs	r2, #0
 8003062:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003072:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800307c:	d82d      	bhi.n	80030da <HAL_SPI_Transmit_DMA+0x14e>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d127      	bne.n	80030da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10f      	bne.n	80030b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b6:	e010      	b.n	80030da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4619      	mov	r1, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030f2:	f7fe fbf1 	bl	80018d8 <HAL_DMA_Start_IT>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00c      	beq.n	8003116 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003114:	e01e      	b.n	8003154 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d007      	beq.n	8003134 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0202 	orr.w	r2, r2, #2
 8003152:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	08003259 	.word	0x08003259
 800316c:	080031b1 	.word	0x080031b1
 8003170:	08003275 	.word	0x08003275

08003174 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031be:	f7fe f99b 	bl	80014f8 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d03b      	beq.n	800324c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0220 	bic.w	r2, r2, #32
 80031e2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0202 	bic.w	r2, r2, #2
 80031f2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f000 f979 	bl	80034f0 <SPI_EndRxTxTransaction>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003244:	6978      	ldr	r0, [r7, #20]
 8003246:	f7ff ffa9 	bl	800319c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800324a:	e002      	b.n	8003252 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800324c:	6978      	ldr	r0, [r7, #20]
 800324e:	f7ff ff91 	bl	8003174 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff ff8e 	bl	8003188 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0203 	bic.w	r2, r2, #3
 8003290:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff78 	bl	800319c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c4:	f7fe f918 	bl	80014f8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d4:	f7fe f910 	bl	80014f8 <HAL_GetTick>
 80032d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	015b      	lsls	r3, r3, #5
 80032e0:	0d1b      	lsrs	r3, r3, #20
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ea:	e054      	b.n	8003396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d050      	beq.n	8003396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f4:	f7fe f900 	bl	80014f8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	429a      	cmp	r2, r3
 8003302:	d902      	bls.n	800330a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d13d      	bne.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003322:	d111      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332c:	d004      	beq.n	8003338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d107      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d10f      	bne.n	8003372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e017      	b.n	80033b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3b01      	subs	r3, #1
 8003394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d19b      	bne.n	80032ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033d6:	f7fe f88f 	bl	80014f8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033e6:	f7fe f887 	bl	80014f8 <HAL_GetTick>
 80033ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00da      	lsls	r2, r3, #3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	0d1b      	lsrs	r3, r3, #20
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800340c:	e060      	b.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003414:	d107      	bne.n	8003426 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003424:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d050      	beq.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800342e:	f7fe f863 	bl	80014f8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	429a      	cmp	r2, r3
 800343c:	d902      	bls.n	8003444 <SPI_WaitFifoStateUntilTimeout+0x80>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d13d      	bne.n	80034c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003452:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345c:	d111      	bne.n	8003482 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003466:	d004      	beq.n	8003472 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d107      	bne.n	8003482 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003480:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	d10f      	bne.n	80034ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e010      	b.n	80034e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d196      	bne.n	800340e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff ff5b 	bl	80033c4 <SPI_WaitFifoStateUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e046      	b.n	80035b2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <SPI_EndRxTxTransaction+0xcc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <SPI_EndRxTxTransaction+0xd0>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0d5b      	lsrs	r3, r3, #21
 8003530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003542:	d112      	bne.n	800356a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff feb0 	bl	80032b4 <SPI_WaitFlagStateUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e023      	b.n	80035b2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b01      	subs	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d0f2      	beq.n	800356a <SPI_EndRxTxTransaction+0x7a>
 8003584:	e000      	b.n	8003588 <SPI_EndRxTxTransaction+0x98>
        break;
 8003586:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff15 	bl	80033c4 <SPI_WaitFifoStateUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e000      	b.n	80035b2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000
 80035c0:	165e9f81 	.word	0x165e9f81

080035c4 <std>:
 80035c4:	2300      	movs	r3, #0
 80035c6:	b510      	push	{r4, lr}
 80035c8:	4604      	mov	r4, r0
 80035ca:	e9c0 3300 	strd	r3, r3, [r0]
 80035ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035d2:	6083      	str	r3, [r0, #8]
 80035d4:	8181      	strh	r1, [r0, #12]
 80035d6:	6643      	str	r3, [r0, #100]	; 0x64
 80035d8:	81c2      	strh	r2, [r0, #14]
 80035da:	6183      	str	r3, [r0, #24]
 80035dc:	4619      	mov	r1, r3
 80035de:	2208      	movs	r2, #8
 80035e0:	305c      	adds	r0, #92	; 0x5c
 80035e2:	f000 f8f4 	bl	80037ce <memset>
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <std+0x38>)
 80035e8:	6263      	str	r3, [r4, #36]	; 0x24
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <std+0x3c>)
 80035ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <std+0x40>)
 80035f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <std+0x44>)
 80035f4:	6224      	str	r4, [r4, #32]
 80035f6:	6323      	str	r3, [r4, #48]	; 0x30
 80035f8:	bd10      	pop	{r4, pc}
 80035fa:	bf00      	nop
 80035fc:	08003749 	.word	0x08003749
 8003600:	0800376b 	.word	0x0800376b
 8003604:	080037a3 	.word	0x080037a3
 8003608:	080037c7 	.word	0x080037c7

0800360c <stdio_exit_handler>:
 800360c:	4a02      	ldr	r2, [pc, #8]	; (8003618 <stdio_exit_handler+0xc>)
 800360e:	4903      	ldr	r1, [pc, #12]	; (800361c <stdio_exit_handler+0x10>)
 8003610:	4803      	ldr	r0, [pc, #12]	; (8003620 <stdio_exit_handler+0x14>)
 8003612:	f000 b869 	b.w	80036e8 <_fwalk_sglue>
 8003616:	bf00      	nop
 8003618:	2000000c 	.word	0x2000000c
 800361c:	08004169 	.word	0x08004169
 8003620:	20000018 	.word	0x20000018

08003624 <cleanup_stdio>:
 8003624:	6841      	ldr	r1, [r0, #4]
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <cleanup_stdio+0x34>)
 8003628:	4299      	cmp	r1, r3
 800362a:	b510      	push	{r4, lr}
 800362c:	4604      	mov	r4, r0
 800362e:	d001      	beq.n	8003634 <cleanup_stdio+0x10>
 8003630:	f000 fd9a 	bl	8004168 <_fflush_r>
 8003634:	68a1      	ldr	r1, [r4, #8]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <cleanup_stdio+0x38>)
 8003638:	4299      	cmp	r1, r3
 800363a:	d002      	beq.n	8003642 <cleanup_stdio+0x1e>
 800363c:	4620      	mov	r0, r4
 800363e:	f000 fd93 	bl	8004168 <_fflush_r>
 8003642:	68e1      	ldr	r1, [r4, #12]
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <cleanup_stdio+0x3c>)
 8003646:	4299      	cmp	r1, r3
 8003648:	d004      	beq.n	8003654 <cleanup_stdio+0x30>
 800364a:	4620      	mov	r0, r4
 800364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003650:	f000 bd8a 	b.w	8004168 <_fflush_r>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	20000190 	.word	0x20000190
 800365c:	200001f8 	.word	0x200001f8
 8003660:	20000260 	.word	0x20000260

08003664 <global_stdio_init.part.0>:
 8003664:	b510      	push	{r4, lr}
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <global_stdio_init.part.0+0x30>)
 8003668:	4c0b      	ldr	r4, [pc, #44]	; (8003698 <global_stdio_init.part.0+0x34>)
 800366a:	4a0c      	ldr	r2, [pc, #48]	; (800369c <global_stdio_init.part.0+0x38>)
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	4620      	mov	r0, r4
 8003670:	2200      	movs	r2, #0
 8003672:	2104      	movs	r1, #4
 8003674:	f7ff ffa6 	bl	80035c4 <std>
 8003678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800367c:	2201      	movs	r2, #1
 800367e:	2109      	movs	r1, #9
 8003680:	f7ff ffa0 	bl	80035c4 <std>
 8003684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003688:	2202      	movs	r2, #2
 800368a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800368e:	2112      	movs	r1, #18
 8003690:	f7ff bf98 	b.w	80035c4 <std>
 8003694:	200002c8 	.word	0x200002c8
 8003698:	20000190 	.word	0x20000190
 800369c:	0800360d 	.word	0x0800360d

080036a0 <__sfp_lock_acquire>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sfp_lock_acquire+0x8>)
 80036a2:	f000 b90d 	b.w	80038c0 <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	200002d1 	.word	0x200002d1

080036ac <__sfp_lock_release>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sfp_lock_release+0x8>)
 80036ae:	f000 b908 	b.w	80038c2 <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	200002d1 	.word	0x200002d1

080036b8 <__sinit>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
 80036bc:	f7ff fff0 	bl	80036a0 <__sfp_lock_acquire>
 80036c0:	6a23      	ldr	r3, [r4, #32]
 80036c2:	b11b      	cbz	r3, 80036cc <__sinit+0x14>
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f7ff bff0 	b.w	80036ac <__sfp_lock_release>
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__sinit+0x28>)
 80036ce:	6223      	str	r3, [r4, #32]
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <__sinit+0x2c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f5      	bne.n	80036c4 <__sinit+0xc>
 80036d8:	f7ff ffc4 	bl	8003664 <global_stdio_init.part.0>
 80036dc:	e7f2      	b.n	80036c4 <__sinit+0xc>
 80036de:	bf00      	nop
 80036e0:	08003625 	.word	0x08003625
 80036e4:	200002c8 	.word	0x200002c8

080036e8 <_fwalk_sglue>:
 80036e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036ec:	4607      	mov	r7, r0
 80036ee:	4688      	mov	r8, r1
 80036f0:	4614      	mov	r4, r2
 80036f2:	2600      	movs	r6, #0
 80036f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036f8:	f1b9 0901 	subs.w	r9, r9, #1
 80036fc:	d505      	bpl.n	800370a <_fwalk_sglue+0x22>
 80036fe:	6824      	ldr	r4, [r4, #0]
 8003700:	2c00      	cmp	r4, #0
 8003702:	d1f7      	bne.n	80036f4 <_fwalk_sglue+0xc>
 8003704:	4630      	mov	r0, r6
 8003706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d907      	bls.n	8003720 <_fwalk_sglue+0x38>
 8003710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003714:	3301      	adds	r3, #1
 8003716:	d003      	beq.n	8003720 <_fwalk_sglue+0x38>
 8003718:	4629      	mov	r1, r5
 800371a:	4638      	mov	r0, r7
 800371c:	47c0      	blx	r8
 800371e:	4306      	orrs	r6, r0
 8003720:	3568      	adds	r5, #104	; 0x68
 8003722:	e7e9      	b.n	80036f8 <_fwalk_sglue+0x10>

08003724 <iprintf>:
 8003724:	b40f      	push	{r0, r1, r2, r3}
 8003726:	b507      	push	{r0, r1, r2, lr}
 8003728:	4906      	ldr	r1, [pc, #24]	; (8003744 <iprintf+0x20>)
 800372a:	ab04      	add	r3, sp, #16
 800372c:	6808      	ldr	r0, [r1, #0]
 800372e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003732:	6881      	ldr	r1, [r0, #8]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f000 f9e7 	bl	8003b08 <_vfiprintf_r>
 800373a:	b003      	add	sp, #12
 800373c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003740:	b004      	add	sp, #16
 8003742:	4770      	bx	lr
 8003744:	20000064 	.word	0x20000064

08003748 <__sread>:
 8003748:	b510      	push	{r4, lr}
 800374a:	460c      	mov	r4, r1
 800374c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003750:	f000 f868 	bl	8003824 <_read_r>
 8003754:	2800      	cmp	r0, #0
 8003756:	bfab      	itete	ge
 8003758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800375a:	89a3      	ldrhlt	r3, [r4, #12]
 800375c:	181b      	addge	r3, r3, r0
 800375e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003762:	bfac      	ite	ge
 8003764:	6563      	strge	r3, [r4, #84]	; 0x54
 8003766:	81a3      	strhlt	r3, [r4, #12]
 8003768:	bd10      	pop	{r4, pc}

0800376a <__swrite>:
 800376a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376e:	461f      	mov	r7, r3
 8003770:	898b      	ldrh	r3, [r1, #12]
 8003772:	05db      	lsls	r3, r3, #23
 8003774:	4605      	mov	r5, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4616      	mov	r6, r2
 800377a:	d505      	bpl.n	8003788 <__swrite+0x1e>
 800377c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003780:	2302      	movs	r3, #2
 8003782:	2200      	movs	r2, #0
 8003784:	f000 f83c 	bl	8003800 <_lseek_r>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800378e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	4632      	mov	r2, r6
 8003796:	463b      	mov	r3, r7
 8003798:	4628      	mov	r0, r5
 800379a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800379e:	f000 b853 	b.w	8003848 <_write_r>

080037a2 <__sseek>:
 80037a2:	b510      	push	{r4, lr}
 80037a4:	460c      	mov	r4, r1
 80037a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037aa:	f000 f829 	bl	8003800 <_lseek_r>
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	bf15      	itete	ne
 80037b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037be:	81a3      	strheq	r3, [r4, #12]
 80037c0:	bf18      	it	ne
 80037c2:	81a3      	strhne	r3, [r4, #12]
 80037c4:	bd10      	pop	{r4, pc}

080037c6 <__sclose>:
 80037c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ca:	f000 b809 	b.w	80037e0 <_close_r>

080037ce <memset>:
 80037ce:	4402      	add	r2, r0
 80037d0:	4603      	mov	r3, r0
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d100      	bne.n	80037d8 <memset+0xa>
 80037d6:	4770      	bx	lr
 80037d8:	f803 1b01 	strb.w	r1, [r3], #1
 80037dc:	e7f9      	b.n	80037d2 <memset+0x4>
	...

080037e0 <_close_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4d06      	ldr	r5, [pc, #24]	; (80037fc <_close_r+0x1c>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fd faa3 	bl	8000d36 <_close>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_close_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_close_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200002cc 	.word	0x200002cc

08003800 <_lseek_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d07      	ldr	r5, [pc, #28]	; (8003820 <_lseek_r+0x20>)
 8003804:	4604      	mov	r4, r0
 8003806:	4608      	mov	r0, r1
 8003808:	4611      	mov	r1, r2
 800380a:	2200      	movs	r2, #0
 800380c:	602a      	str	r2, [r5, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f7fd fab8 	bl	8000d84 <_lseek>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_lseek_r+0x1e>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_lseek_r+0x1e>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	200002cc 	.word	0x200002cc

08003824 <_read_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d07      	ldr	r5, [pc, #28]	; (8003844 <_read_r+0x20>)
 8003828:	4604      	mov	r4, r0
 800382a:	4608      	mov	r0, r1
 800382c:	4611      	mov	r1, r2
 800382e:	2200      	movs	r2, #0
 8003830:	602a      	str	r2, [r5, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f7fd fa46 	bl	8000cc4 <_read>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_read_r+0x1e>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	b103      	cbz	r3, 8003842 <_read_r+0x1e>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	200002cc 	.word	0x200002cc

08003848 <_write_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4d07      	ldr	r5, [pc, #28]	; (8003868 <_write_r+0x20>)
 800384c:	4604      	mov	r4, r0
 800384e:	4608      	mov	r0, r1
 8003850:	4611      	mov	r1, r2
 8003852:	2200      	movs	r2, #0
 8003854:	602a      	str	r2, [r5, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f7fd fa51 	bl	8000cfe <_write>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_write_r+0x1e>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_write_r+0x1e>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200002cc 	.word	0x200002cc

0800386c <__errno>:
 800386c:	4b01      	ldr	r3, [pc, #4]	; (8003874 <__errno+0x8>)
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000064 	.word	0x20000064

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4d0d      	ldr	r5, [pc, #52]	; (80038b0 <__libc_init_array+0x38>)
 800387c:	4c0d      	ldr	r4, [pc, #52]	; (80038b4 <__libc_init_array+0x3c>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	2600      	movs	r6, #0
 8003884:	42a6      	cmp	r6, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	4d0b      	ldr	r5, [pc, #44]	; (80038b8 <__libc_init_array+0x40>)
 800388a:	4c0c      	ldr	r4, [pc, #48]	; (80038bc <__libc_init_array+0x44>)
 800388c:	f000 fdbe 	bl	800440c <_init>
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	2600      	movs	r6, #0
 8003896:	42a6      	cmp	r6, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a0:	4798      	blx	r3
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038aa:	4798      	blx	r3
 80038ac:	3601      	adds	r6, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	080045c4 	.word	0x080045c4
 80038b4:	080045c4 	.word	0x080045c4
 80038b8:	080045c4 	.word	0x080045c4
 80038bc:	080045c8 	.word	0x080045c8

080038c0 <__retarget_lock_acquire_recursive>:
 80038c0:	4770      	bx	lr

080038c2 <__retarget_lock_release_recursive>:
 80038c2:	4770      	bx	lr

080038c4 <_free_r>:
 80038c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038c6:	2900      	cmp	r1, #0
 80038c8:	d044      	beq.n	8003954 <_free_r+0x90>
 80038ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ce:	9001      	str	r0, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f1a1 0404 	sub.w	r4, r1, #4
 80038d6:	bfb8      	it	lt
 80038d8:	18e4      	addlt	r4, r4, r3
 80038da:	f000 f8df 	bl	8003a9c <__malloc_lock>
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <_free_r+0x94>)
 80038e0:	9801      	ldr	r0, [sp, #4]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	b933      	cbnz	r3, 80038f4 <_free_r+0x30>
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	6014      	str	r4, [r2, #0]
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f0:	f000 b8da 	b.w	8003aa8 <__malloc_unlock>
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d908      	bls.n	800390a <_free_r+0x46>
 80038f8:	6825      	ldr	r5, [r4, #0]
 80038fa:	1961      	adds	r1, r4, r5
 80038fc:	428b      	cmp	r3, r1
 80038fe:	bf01      	itttt	eq
 8003900:	6819      	ldreq	r1, [r3, #0]
 8003902:	685b      	ldreq	r3, [r3, #4]
 8003904:	1949      	addeq	r1, r1, r5
 8003906:	6021      	streq	r1, [r4, #0]
 8003908:	e7ed      	b.n	80038e6 <_free_r+0x22>
 800390a:	461a      	mov	r2, r3
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	b10b      	cbz	r3, 8003914 <_free_r+0x50>
 8003910:	42a3      	cmp	r3, r4
 8003912:	d9fa      	bls.n	800390a <_free_r+0x46>
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	1855      	adds	r5, r2, r1
 8003918:	42a5      	cmp	r5, r4
 800391a:	d10b      	bne.n	8003934 <_free_r+0x70>
 800391c:	6824      	ldr	r4, [r4, #0]
 800391e:	4421      	add	r1, r4
 8003920:	1854      	adds	r4, r2, r1
 8003922:	42a3      	cmp	r3, r4
 8003924:	6011      	str	r1, [r2, #0]
 8003926:	d1e0      	bne.n	80038ea <_free_r+0x26>
 8003928:	681c      	ldr	r4, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	440c      	add	r4, r1
 8003930:	6014      	str	r4, [r2, #0]
 8003932:	e7da      	b.n	80038ea <_free_r+0x26>
 8003934:	d902      	bls.n	800393c <_free_r+0x78>
 8003936:	230c      	movs	r3, #12
 8003938:	6003      	str	r3, [r0, #0]
 800393a:	e7d6      	b.n	80038ea <_free_r+0x26>
 800393c:	6825      	ldr	r5, [r4, #0]
 800393e:	1961      	adds	r1, r4, r5
 8003940:	428b      	cmp	r3, r1
 8003942:	bf04      	itt	eq
 8003944:	6819      	ldreq	r1, [r3, #0]
 8003946:	685b      	ldreq	r3, [r3, #4]
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	bf04      	itt	eq
 800394c:	1949      	addeq	r1, r1, r5
 800394e:	6021      	streq	r1, [r4, #0]
 8003950:	6054      	str	r4, [r2, #4]
 8003952:	e7ca      	b.n	80038ea <_free_r+0x26>
 8003954:	b003      	add	sp, #12
 8003956:	bd30      	pop	{r4, r5, pc}
 8003958:	200002d4 	.word	0x200002d4

0800395c <sbrk_aligned>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0e      	ldr	r6, [pc, #56]	; (8003998 <sbrk_aligned+0x3c>)
 8003960:	460c      	mov	r4, r1
 8003962:	6831      	ldr	r1, [r6, #0]
 8003964:	4605      	mov	r5, r0
 8003966:	b911      	cbnz	r1, 800396e <sbrk_aligned+0x12>
 8003968:	f000 fcbc 	bl	80042e4 <_sbrk_r>
 800396c:	6030      	str	r0, [r6, #0]
 800396e:	4621      	mov	r1, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 fcb7 	bl	80042e4 <_sbrk_r>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	d00a      	beq.n	8003990 <sbrk_aligned+0x34>
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d007      	beq.n	8003994 <sbrk_aligned+0x38>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4628      	mov	r0, r5
 8003988:	f000 fcac 	bl	80042e4 <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d101      	bne.n	8003994 <sbrk_aligned+0x38>
 8003990:	f04f 34ff 	mov.w	r4, #4294967295
 8003994:	4620      	mov	r0, r4
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	200002d8 	.word	0x200002d8

0800399c <_malloc_r>:
 800399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a0:	1ccd      	adds	r5, r1, #3
 80039a2:	f025 0503 	bic.w	r5, r5, #3
 80039a6:	3508      	adds	r5, #8
 80039a8:	2d0c      	cmp	r5, #12
 80039aa:	bf38      	it	cc
 80039ac:	250c      	movcc	r5, #12
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	4607      	mov	r7, r0
 80039b2:	db01      	blt.n	80039b8 <_malloc_r+0x1c>
 80039b4:	42a9      	cmp	r1, r5
 80039b6:	d905      	bls.n	80039c4 <_malloc_r+0x28>
 80039b8:	230c      	movs	r3, #12
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	2600      	movs	r6, #0
 80039be:	4630      	mov	r0, r6
 80039c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a98 <_malloc_r+0xfc>
 80039c8:	f000 f868 	bl	8003a9c <__malloc_lock>
 80039cc:	f8d8 3000 	ldr.w	r3, [r8]
 80039d0:	461c      	mov	r4, r3
 80039d2:	bb5c      	cbnz	r4, 8003a2c <_malloc_r+0x90>
 80039d4:	4629      	mov	r1, r5
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7ff ffc0 	bl	800395c <sbrk_aligned>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	4604      	mov	r4, r0
 80039e0:	d155      	bne.n	8003a8e <_malloc_r+0xf2>
 80039e2:	f8d8 4000 	ldr.w	r4, [r8]
 80039e6:	4626      	mov	r6, r4
 80039e8:	2e00      	cmp	r6, #0
 80039ea:	d145      	bne.n	8003a78 <_malloc_r+0xdc>
 80039ec:	2c00      	cmp	r4, #0
 80039ee:	d048      	beq.n	8003a82 <_malloc_r+0xe6>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	4631      	mov	r1, r6
 80039f4:	4638      	mov	r0, r7
 80039f6:	eb04 0903 	add.w	r9, r4, r3
 80039fa:	f000 fc73 	bl	80042e4 <_sbrk_r>
 80039fe:	4581      	cmp	r9, r0
 8003a00:	d13f      	bne.n	8003a82 <_malloc_r+0xe6>
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	1a6d      	subs	r5, r5, r1
 8003a06:	4629      	mov	r1, r5
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f7ff ffa7 	bl	800395c <sbrk_aligned>
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d037      	beq.n	8003a82 <_malloc_r+0xe6>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	442b      	add	r3, r5
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d038      	beq.n	8003a92 <_malloc_r+0xf6>
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	42a2      	cmp	r2, r4
 8003a24:	d12b      	bne.n	8003a7e <_malloc_r+0xe2>
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	e00f      	b.n	8003a4c <_malloc_r+0xb0>
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	1b52      	subs	r2, r2, r5
 8003a30:	d41f      	bmi.n	8003a72 <_malloc_r+0xd6>
 8003a32:	2a0b      	cmp	r2, #11
 8003a34:	d917      	bls.n	8003a66 <_malloc_r+0xca>
 8003a36:	1961      	adds	r1, r4, r5
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	6025      	str	r5, [r4, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	6059      	strne	r1, [r3, #4]
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	bf08      	it	eq
 8003a44:	f8c8 1000 	streq.w	r1, [r8]
 8003a48:	5162      	str	r2, [r4, r5]
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f104 060b 	add.w	r6, r4, #11
 8003a52:	f000 f829 	bl	8003aa8 <__malloc_unlock>
 8003a56:	f026 0607 	bic.w	r6, r6, #7
 8003a5a:	1d23      	adds	r3, r4, #4
 8003a5c:	1af2      	subs	r2, r6, r3
 8003a5e:	d0ae      	beq.n	80039be <_malloc_r+0x22>
 8003a60:	1b9b      	subs	r3, r3, r6
 8003a62:	50a3      	str	r3, [r4, r2]
 8003a64:	e7ab      	b.n	80039be <_malloc_r+0x22>
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	6862      	ldr	r2, [r4, #4]
 8003a6a:	d1dd      	bne.n	8003a28 <_malloc_r+0x8c>
 8003a6c:	f8c8 2000 	str.w	r2, [r8]
 8003a70:	e7ec      	b.n	8003a4c <_malloc_r+0xb0>
 8003a72:	4623      	mov	r3, r4
 8003a74:	6864      	ldr	r4, [r4, #4]
 8003a76:	e7ac      	b.n	80039d2 <_malloc_r+0x36>
 8003a78:	4634      	mov	r4, r6
 8003a7a:	6876      	ldr	r6, [r6, #4]
 8003a7c:	e7b4      	b.n	80039e8 <_malloc_r+0x4c>
 8003a7e:	4613      	mov	r3, r2
 8003a80:	e7cc      	b.n	8003a1c <_malloc_r+0x80>
 8003a82:	230c      	movs	r3, #12
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4638      	mov	r0, r7
 8003a88:	f000 f80e 	bl	8003aa8 <__malloc_unlock>
 8003a8c:	e797      	b.n	80039be <_malloc_r+0x22>
 8003a8e:	6025      	str	r5, [r4, #0]
 8003a90:	e7dc      	b.n	8003a4c <_malloc_r+0xb0>
 8003a92:	605b      	str	r3, [r3, #4]
 8003a94:	deff      	udf	#255	; 0xff
 8003a96:	bf00      	nop
 8003a98:	200002d4 	.word	0x200002d4

08003a9c <__malloc_lock>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__malloc_lock+0x8>)
 8003a9e:	f7ff bf0f 	b.w	80038c0 <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	200002d0 	.word	0x200002d0

08003aa8 <__malloc_unlock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_unlock+0x8>)
 8003aaa:	f7ff bf0a 	b.w	80038c2 <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	200002d0 	.word	0x200002d0

08003ab4 <__sfputc_r>:
 8003ab4:	6893      	ldr	r3, [r2, #8]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	b410      	push	{r4}
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	da08      	bge.n	8003ad2 <__sfputc_r+0x1e>
 8003ac0:	6994      	ldr	r4, [r2, #24]
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	db01      	blt.n	8003aca <__sfputc_r+0x16>
 8003ac6:	290a      	cmp	r1, #10
 8003ac8:	d103      	bne.n	8003ad2 <__sfputc_r+0x1e>
 8003aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ace:	f000 bb73 	b.w	80041b8 <__swbuf_r>
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	1c58      	adds	r0, r3, #1
 8003ad6:	6010      	str	r0, [r2, #0]
 8003ad8:	7019      	strb	r1, [r3, #0]
 8003ada:	4608      	mov	r0, r1
 8003adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <__sfputs_r>:
 8003ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	460f      	mov	r7, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	18d5      	adds	r5, r2, r3
 8003aec:	42ac      	cmp	r4, r5
 8003aee:	d101      	bne.n	8003af4 <__sfputs_r+0x12>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e007      	b.n	8003b04 <__sfputs_r+0x22>
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	463a      	mov	r2, r7
 8003afa:	4630      	mov	r0, r6
 8003afc:	f7ff ffda 	bl	8003ab4 <__sfputc_r>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d1f3      	bne.n	8003aec <__sfputs_r+0xa>
 8003b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b08 <_vfiprintf_r>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	b09d      	sub	sp, #116	; 0x74
 8003b10:	4614      	mov	r4, r2
 8003b12:	4698      	mov	r8, r3
 8003b14:	4606      	mov	r6, r0
 8003b16:	b118      	cbz	r0, 8003b20 <_vfiprintf_r+0x18>
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <_vfiprintf_r+0x18>
 8003b1c:	f7ff fdcc 	bl	80036b8 <__sinit>
 8003b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b22:	07d9      	lsls	r1, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	059a      	lsls	r2, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b2e:	f7ff fec7 	bl	80038c0 <__retarget_lock_acquire_recursive>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	d501      	bpl.n	8003b3c <_vfiprintf_r+0x34>
 8003b38:	692b      	ldr	r3, [r5, #16]
 8003b3a:	b99b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x5c>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f000 fb78 	bl	8004234 <__swsetup_r>
 8003b44:	b170      	cbz	r0, 8003b64 <_vfiprintf_r+0x5c>
 8003b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b48:	07dc      	lsls	r4, r3, #31
 8003b4a:	d504      	bpl.n	8003b56 <_vfiprintf_r+0x4e>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	b01d      	add	sp, #116	; 0x74
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	0598      	lsls	r0, r3, #22
 8003b5a:	d4f7      	bmi.n	8003b4c <_vfiprintf_r+0x44>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5e:	f7ff feb0 	bl	80038c2 <__retarget_lock_release_recursive>
 8003b62:	e7f3      	b.n	8003b4c <_vfiprintf_r+0x44>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b72:	2330      	movs	r3, #48	; 0x30
 8003b74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d28 <_vfiprintf_r+0x220>
 8003b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b7c:	f04f 0901 	mov.w	r9, #1
 8003b80:	4623      	mov	r3, r4
 8003b82:	469a      	mov	sl, r3
 8003b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b88:	b10a      	cbz	r2, 8003b8e <_vfiprintf_r+0x86>
 8003b8a:	2a25      	cmp	r2, #37	; 0x25
 8003b8c:	d1f9      	bne.n	8003b82 <_vfiprintf_r+0x7a>
 8003b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b92:	d00b      	beq.n	8003bac <_vfiprintf_r+0xa4>
 8003b94:	465b      	mov	r3, fp
 8003b96:	4622      	mov	r2, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffa1 	bl	8003ae2 <__sfputs_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f000 80a9 	beq.w	8003cf8 <_vfiprintf_r+0x1f0>
 8003ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ba8:	445a      	add	r2, fp
 8003baa:	9209      	str	r2, [sp, #36]	; 0x24
 8003bac:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a1 	beq.w	8003cf8 <_vfiprintf_r+0x1f0>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc0:	f10a 0a01 	add.w	sl, sl, #1
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bce:	4654      	mov	r4, sl
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <_vfiprintf_r+0x220>)
 8003bd8:	f7fc fb32 	bl	8000240 <memchr>
 8003bdc:	9a04      	ldr	r2, [sp, #16]
 8003bde:	b9d8      	cbnz	r0, 8003c18 <_vfiprintf_r+0x110>
 8003be0:	06d1      	lsls	r1, r2, #27
 8003be2:	bf44      	itt	mi
 8003be4:	2320      	movmi	r3, #32
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bea:	0713      	lsls	r3, r2, #28
 8003bec:	bf44      	itt	mi
 8003bee:	232b      	movmi	r3, #43	; 0x2b
 8003bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfa:	d015      	beq.n	8003c28 <_vfiprintf_r+0x120>
 8003bfc:	9a07      	ldr	r2, [sp, #28]
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2000      	movs	r0, #0
 8003c02:	f04f 0c0a 	mov.w	ip, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0c:	3b30      	subs	r3, #48	; 0x30
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d94d      	bls.n	8003cae <_vfiprintf_r+0x1a6>
 8003c12:	b1b0      	cbz	r0, 8003c42 <_vfiprintf_r+0x13a>
 8003c14:	9207      	str	r2, [sp, #28]
 8003c16:	e014      	b.n	8003c42 <_vfiprintf_r+0x13a>
 8003c18:	eba0 0308 	sub.w	r3, r0, r8
 8003c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	46a2      	mov	sl, r4
 8003c26:	e7d2      	b.n	8003bce <_vfiprintf_r+0xc6>
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9103      	str	r1, [sp, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfbb      	ittet	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3a:	9307      	strge	r3, [sp, #28]
 8003c3c:	9307      	strlt	r3, [sp, #28]
 8003c3e:	bfb8      	it	lt
 8003c40:	9204      	strlt	r2, [sp, #16]
 8003c42:	7823      	ldrb	r3, [r4, #0]
 8003c44:	2b2e      	cmp	r3, #46	; 0x2e
 8003c46:	d10c      	bne.n	8003c62 <_vfiprintf_r+0x15a>
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4c:	d134      	bne.n	8003cb8 <_vfiprintf_r+0x1b0>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9203      	str	r2, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c5e:	3402      	adds	r4, #2
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d38 <_vfiprintf_r+0x230>
 8003c66:	7821      	ldrb	r1, [r4, #0]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4650      	mov	r0, sl
 8003c6c:	f7fc fae8 	bl	8000240 <memchr>
 8003c70:	b138      	cbz	r0, 8003c82 <_vfiprintf_r+0x17a>
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	eba0 000a 	sub.w	r0, r0, sl
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4082      	lsls	r2, r0
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	3401      	adds	r4, #1
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c86:	4829      	ldr	r0, [pc, #164]	; (8003d2c <_vfiprintf_r+0x224>)
 8003c88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c8c:	2206      	movs	r2, #6
 8003c8e:	f7fc fad7 	bl	8000240 <memchr>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d03f      	beq.n	8003d16 <_vfiprintf_r+0x20e>
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <_vfiprintf_r+0x228>)
 8003c98:	bb1b      	cbnz	r3, 8003ce2 <_vfiprintf_r+0x1da>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	9303      	str	r3, [sp, #12]
 8003ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca8:	443b      	add	r3, r7
 8003caa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cac:	e768      	b.n	8003b80 <_vfiprintf_r+0x78>
 8003cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e7a6      	b.n	8003c06 <_vfiprintf_r+0xfe>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	3401      	adds	r4, #1
 8003cbc:	9305      	str	r3, [sp, #20]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f04f 0c0a 	mov.w	ip, #10
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cca:	3a30      	subs	r2, #48	; 0x30
 8003ccc:	2a09      	cmp	r2, #9
 8003cce:	d903      	bls.n	8003cd8 <_vfiprintf_r+0x1d0>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0c6      	beq.n	8003c62 <_vfiprintf_r+0x15a>
 8003cd4:	9105      	str	r1, [sp, #20]
 8003cd6:	e7c4      	b.n	8003c62 <_vfiprintf_r+0x15a>
 8003cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cdc:	4604      	mov	r4, r0
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e7f0      	b.n	8003cc4 <_vfiprintf_r+0x1bc>
 8003ce2:	ab03      	add	r3, sp, #12
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <_vfiprintf_r+0x22c>)
 8003cea:	a904      	add	r1, sp, #16
 8003cec:	4630      	mov	r0, r6
 8003cee:	f3af 8000 	nop.w
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	1c78      	adds	r0, r7, #1
 8003cf6:	d1d6      	bne.n	8003ca6 <_vfiprintf_r+0x19e>
 8003cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cfa:	07d9      	lsls	r1, r3, #31
 8003cfc:	d405      	bmi.n	8003d0a <_vfiprintf_r+0x202>
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	059a      	lsls	r2, r3, #22
 8003d02:	d402      	bmi.n	8003d0a <_vfiprintf_r+0x202>
 8003d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d06:	f7ff fddc 	bl	80038c2 <__retarget_lock_release_recursive>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	065b      	lsls	r3, r3, #25
 8003d0e:	f53f af1d 	bmi.w	8003b4c <_vfiprintf_r+0x44>
 8003d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d14:	e71c      	b.n	8003b50 <_vfiprintf_r+0x48>
 8003d16:	ab03      	add	r3, sp, #12
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <_vfiprintf_r+0x22c>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f879 	bl	8003e18 <_printf_i>
 8003d26:	e7e4      	b.n	8003cf2 <_vfiprintf_r+0x1ea>
 8003d28:	08004588 	.word	0x08004588
 8003d2c:	08004592 	.word	0x08004592
 8003d30:	00000000 	.word	0x00000000
 8003d34:	08003ae3 	.word	0x08003ae3
 8003d38:	0800458e 	.word	0x0800458e

08003d3c <_printf_common>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	4616      	mov	r6, r2
 8003d42:	4699      	mov	r9, r3
 8003d44:	688a      	ldr	r2, [r1, #8]
 8003d46:	690b      	ldr	r3, [r1, #16]
 8003d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bfb8      	it	lt
 8003d50:	4613      	movlt	r3, r2
 8003d52:	6033      	str	r3, [r6, #0]
 8003d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d58:	4607      	mov	r7, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b10a      	cbz	r2, 8003d62 <_printf_common+0x26>
 8003d5e:	3301      	adds	r3, #1
 8003d60:	6033      	str	r3, [r6, #0]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	0699      	lsls	r1, r3, #26
 8003d66:	bf42      	ittt	mi
 8003d68:	6833      	ldrmi	r3, [r6, #0]
 8003d6a:	3302      	addmi	r3, #2
 8003d6c:	6033      	strmi	r3, [r6, #0]
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	f015 0506 	ands.w	r5, r5, #6
 8003d74:	d106      	bne.n	8003d84 <_printf_common+0x48>
 8003d76:	f104 0a19 	add.w	sl, r4, #25
 8003d7a:	68e3      	ldr	r3, [r4, #12]
 8003d7c:	6832      	ldr	r2, [r6, #0]
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	42ab      	cmp	r3, r5
 8003d82:	dc26      	bgt.n	8003dd2 <_printf_common+0x96>
 8003d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d88:	1e13      	subs	r3, r2, #0
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	bf18      	it	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	0692      	lsls	r2, r2, #26
 8003d92:	d42b      	bmi.n	8003dec <_printf_common+0xb0>
 8003d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d01e      	beq.n	8003de0 <_printf_common+0xa4>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	6922      	ldr	r2, [r4, #16]
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	bf02      	ittt	eq
 8003dae:	68e5      	ldreq	r5, [r4, #12]
 8003db0:	6833      	ldreq	r3, [r6, #0]
 8003db2:	1aed      	subeq	r5, r5, r3
 8003db4:	68a3      	ldr	r3, [r4, #8]
 8003db6:	bf0c      	ite	eq
 8003db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dbc:	2500      	movne	r5, #0
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	bfc4      	itt	gt
 8003dc2:	1a9b      	subgt	r3, r3, r2
 8003dc4:	18ed      	addgt	r5, r5, r3
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	341a      	adds	r4, #26
 8003dca:	42b5      	cmp	r5, r6
 8003dcc:	d11a      	bne.n	8003e04 <_printf_common+0xc8>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e008      	b.n	8003de4 <_printf_common+0xa8>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4638      	mov	r0, r7
 8003dda:	47c0      	blx	r8
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d103      	bne.n	8003de8 <_printf_common+0xac>
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7c6      	b.n	8003d7a <_printf_common+0x3e>
 8003dec:	18e1      	adds	r1, r4, r3
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	2030      	movs	r0, #48	; 0x30
 8003df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df6:	4422      	add	r2, r4
 8003df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e00:	3302      	adds	r3, #2
 8003e02:	e7c7      	b.n	8003d94 <_printf_common+0x58>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4622      	mov	r2, r4
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d0e6      	beq.n	8003de0 <_printf_common+0xa4>
 8003e12:	3601      	adds	r6, #1
 8003e14:	e7d9      	b.n	8003dca <_printf_common+0x8e>
	...

08003e18 <_printf_i>:
 8003e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	7e0f      	ldrb	r7, [r1, #24]
 8003e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e20:	2f78      	cmp	r7, #120	; 0x78
 8003e22:	4691      	mov	r9, r2
 8003e24:	4680      	mov	r8, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	469a      	mov	sl, r3
 8003e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e2e:	d807      	bhi.n	8003e40 <_printf_i+0x28>
 8003e30:	2f62      	cmp	r7, #98	; 0x62
 8003e32:	d80a      	bhi.n	8003e4a <_printf_i+0x32>
 8003e34:	2f00      	cmp	r7, #0
 8003e36:	f000 80d4 	beq.w	8003fe2 <_printf_i+0x1ca>
 8003e3a:	2f58      	cmp	r7, #88	; 0x58
 8003e3c:	f000 80c0 	beq.w	8003fc0 <_printf_i+0x1a8>
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e48:	e03a      	b.n	8003ec0 <_printf_i+0xa8>
 8003e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4e:	2b15      	cmp	r3, #21
 8003e50:	d8f6      	bhi.n	8003e40 <_printf_i+0x28>
 8003e52:	a101      	add	r1, pc, #4	; (adr r1, 8003e58 <_printf_i+0x40>)
 8003e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003ec5 	.word	0x08003ec5
 8003e60:	08003e41 	.word	0x08003e41
 8003e64:	08003e41 	.word	0x08003e41
 8003e68:	08003e41 	.word	0x08003e41
 8003e6c:	08003e41 	.word	0x08003e41
 8003e70:	08003ec5 	.word	0x08003ec5
 8003e74:	08003e41 	.word	0x08003e41
 8003e78:	08003e41 	.word	0x08003e41
 8003e7c:	08003e41 	.word	0x08003e41
 8003e80:	08003e41 	.word	0x08003e41
 8003e84:	08003fc9 	.word	0x08003fc9
 8003e88:	08003ef1 	.word	0x08003ef1
 8003e8c:	08003f83 	.word	0x08003f83
 8003e90:	08003e41 	.word	0x08003e41
 8003e94:	08003e41 	.word	0x08003e41
 8003e98:	08003feb 	.word	0x08003feb
 8003e9c:	08003e41 	.word	0x08003e41
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08003e41 	.word	0x08003e41
 8003ea8:	08003e41 	.word	0x08003e41
 8003eac:	08003f8b 	.word	0x08003f8b
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	602a      	str	r2, [r5, #0]
 8003eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e09f      	b.n	8004004 <_printf_i+0x1ec>
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	0607      	lsls	r7, r0, #24
 8003eca:	f103 0104 	add.w	r1, r3, #4
 8003ece:	6029      	str	r1, [r5, #0]
 8003ed0:	d501      	bpl.n	8003ed6 <_printf_i+0xbe>
 8003ed2:	681e      	ldr	r6, [r3, #0]
 8003ed4:	e003      	b.n	8003ede <_printf_i+0xc6>
 8003ed6:	0646      	lsls	r6, r0, #25
 8003ed8:	d5fb      	bpl.n	8003ed2 <_printf_i+0xba>
 8003eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	da03      	bge.n	8003eea <_printf_i+0xd2>
 8003ee2:	232d      	movs	r3, #45	; 0x2d
 8003ee4:	4276      	negs	r6, r6
 8003ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eea:	485a      	ldr	r0, [pc, #360]	; (8004054 <_printf_i+0x23c>)
 8003eec:	230a      	movs	r3, #10
 8003eee:	e012      	b.n	8003f16 <_printf_i+0xfe>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	1d19      	adds	r1, r3, #4
 8003ef6:	6029      	str	r1, [r5, #0]
 8003ef8:	0605      	lsls	r5, r0, #24
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0xe8>
 8003efc:	681e      	ldr	r6, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0xee>
 8003f00:	0641      	lsls	r1, r0, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0xe4>
 8003f04:	881e      	ldrh	r6, [r3, #0]
 8003f06:	4853      	ldr	r0, [pc, #332]	; (8004054 <_printf_i+0x23c>)
 8003f08:	2f6f      	cmp	r7, #111	; 0x6f
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2308      	moveq	r3, #8
 8003f0e:	230a      	movne	r3, #10
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f16:	6865      	ldr	r5, [r4, #4]
 8003f18:	60a5      	str	r5, [r4, #8]
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	bfa2      	ittt	ge
 8003f1e:	6821      	ldrge	r1, [r4, #0]
 8003f20:	f021 0104 	bicge.w	r1, r1, #4
 8003f24:	6021      	strge	r1, [r4, #0]
 8003f26:	b90e      	cbnz	r6, 8003f2c <_printf_i+0x114>
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	d04b      	beq.n	8003fc4 <_printf_i+0x1ac>
 8003f2c:	4615      	mov	r5, r2
 8003f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f32:	fb03 6711 	mls	r7, r3, r1, r6
 8003f36:	5dc7      	ldrb	r7, [r0, r7]
 8003f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	42bb      	cmp	r3, r7
 8003f40:	460e      	mov	r6, r1
 8003f42:	d9f4      	bls.n	8003f2e <_printf_i+0x116>
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d10b      	bne.n	8003f60 <_printf_i+0x148>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07de      	lsls	r6, r3, #31
 8003f4c:	d508      	bpl.n	8003f60 <_printf_i+0x148>
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	4299      	cmp	r1, r3
 8003f54:	bfde      	ittt	le
 8003f56:	2330      	movle	r3, #48	; 0x30
 8003f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f60:	1b52      	subs	r2, r2, r5
 8003f62:	6122      	str	r2, [r4, #16]
 8003f64:	f8cd a000 	str.w	sl, [sp]
 8003f68:	464b      	mov	r3, r9
 8003f6a:	aa03      	add	r2, sp, #12
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7ff fee4 	bl	8003d3c <_printf_common>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d14a      	bne.n	800400e <_printf_i+0x1f6>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	b004      	add	sp, #16
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f043 0320 	orr.w	r3, r3, #32
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	4833      	ldr	r0, [pc, #204]	; (8004058 <_printf_i+0x240>)
 8003f8c:	2778      	movs	r7, #120	; 0x78
 8003f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	6829      	ldr	r1, [r5, #0]
 8003f96:	061f      	lsls	r7, r3, #24
 8003f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f9c:	d402      	bmi.n	8003fa4 <_printf_i+0x18c>
 8003f9e:	065f      	lsls	r7, r3, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2b6      	uxthmi	r6, r6
 8003fa4:	07df      	lsls	r7, r3, #31
 8003fa6:	bf48      	it	mi
 8003fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fac:	6029      	str	r1, [r5, #0]
 8003fae:	bf48      	it	mi
 8003fb0:	6023      	strmi	r3, [r4, #0]
 8003fb2:	b91e      	cbnz	r6, 8003fbc <_printf_i+0x1a4>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f023 0320 	bic.w	r3, r3, #32
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	e7a7      	b.n	8003f10 <_printf_i+0xf8>
 8003fc0:	4824      	ldr	r0, [pc, #144]	; (8004054 <_printf_i+0x23c>)
 8003fc2:	e7e4      	b.n	8003f8e <_printf_i+0x176>
 8003fc4:	4615      	mov	r5, r2
 8003fc6:	e7bd      	b.n	8003f44 <_printf_i+0x12c>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	6826      	ldr	r6, [r4, #0]
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	1d18      	adds	r0, r3, #4
 8003fd0:	6028      	str	r0, [r5, #0]
 8003fd2:	0635      	lsls	r5, r6, #24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	d501      	bpl.n	8003fdc <_printf_i+0x1c4>
 8003fd8:	6019      	str	r1, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <_printf_i+0x1ca>
 8003fdc:	0670      	lsls	r0, r6, #25
 8003fde:	d5fb      	bpl.n	8003fd8 <_printf_i+0x1c0>
 8003fe0:	8019      	strh	r1, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	e7bc      	b.n	8003f64 <_printf_i+0x14c>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	681d      	ldr	r5, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f7fc f922 	bl	8000240 <memchr>
 8003ffc:	b108      	cbz	r0, 8004002 <_printf_i+0x1ea>
 8003ffe:	1b40      	subs	r0, r0, r5
 8004000:	6060      	str	r0, [r4, #4]
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	2300      	movs	r3, #0
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400c:	e7aa      	b.n	8003f64 <_printf_i+0x14c>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	462a      	mov	r2, r5
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	47d0      	blx	sl
 8004018:	3001      	adds	r0, #1
 800401a:	d0ad      	beq.n	8003f78 <_printf_i+0x160>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	079b      	lsls	r3, r3, #30
 8004020:	d413      	bmi.n	800404a <_printf_i+0x232>
 8004022:	68e0      	ldr	r0, [r4, #12]
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	4298      	cmp	r0, r3
 8004028:	bfb8      	it	lt
 800402a:	4618      	movlt	r0, r3
 800402c:	e7a6      	b.n	8003f7c <_printf_i+0x164>
 800402e:	2301      	movs	r3, #1
 8004030:	4632      	mov	r2, r6
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	47d0      	blx	sl
 8004038:	3001      	adds	r0, #1
 800403a:	d09d      	beq.n	8003f78 <_printf_i+0x160>
 800403c:	3501      	adds	r5, #1
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	9903      	ldr	r1, [sp, #12]
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	42ab      	cmp	r3, r5
 8004046:	dcf2      	bgt.n	800402e <_printf_i+0x216>
 8004048:	e7eb      	b.n	8004022 <_printf_i+0x20a>
 800404a:	2500      	movs	r5, #0
 800404c:	f104 0619 	add.w	r6, r4, #25
 8004050:	e7f5      	b.n	800403e <_printf_i+0x226>
 8004052:	bf00      	nop
 8004054:	08004599 	.word	0x08004599
 8004058:	080045aa 	.word	0x080045aa

0800405c <__sflush_r>:
 800405c:	898a      	ldrh	r2, [r1, #12]
 800405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004062:	4605      	mov	r5, r0
 8004064:	0710      	lsls	r0, r2, #28
 8004066:	460c      	mov	r4, r1
 8004068:	d458      	bmi.n	800411c <__sflush_r+0xc0>
 800406a:	684b      	ldr	r3, [r1, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dc05      	bgt.n	800407c <__sflush_r+0x20>
 8004070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	dc02      	bgt.n	800407c <__sflush_r+0x20>
 8004076:	2000      	movs	r0, #0
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800407e:	2e00      	cmp	r6, #0
 8004080:	d0f9      	beq.n	8004076 <__sflush_r+0x1a>
 8004082:	2300      	movs	r3, #0
 8004084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004088:	682f      	ldr	r7, [r5, #0]
 800408a:	6a21      	ldr	r1, [r4, #32]
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	d032      	beq.n	80040f6 <__sflush_r+0x9a>
 8004090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	075a      	lsls	r2, r3, #29
 8004096:	d505      	bpl.n	80040a4 <__sflush_r+0x48>
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	1ac0      	subs	r0, r0, r3
 800409c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409e:	b10b      	cbz	r3, 80040a4 <__sflush_r+0x48>
 80040a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a2:	1ac0      	subs	r0, r0, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	4602      	mov	r2, r0
 80040a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040aa:	6a21      	ldr	r1, [r4, #32]
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b0      	blx	r6
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	d106      	bne.n	80040c4 <__sflush_r+0x68>
 80040b6:	6829      	ldr	r1, [r5, #0]
 80040b8:	291d      	cmp	r1, #29
 80040ba:	d82b      	bhi.n	8004114 <__sflush_r+0xb8>
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <__sflush_r+0x108>)
 80040be:	410a      	asrs	r2, r1
 80040c0:	07d6      	lsls	r6, r2, #31
 80040c2:	d427      	bmi.n	8004114 <__sflush_r+0xb8>
 80040c4:	2200      	movs	r2, #0
 80040c6:	6062      	str	r2, [r4, #4]
 80040c8:	04d9      	lsls	r1, r3, #19
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	6022      	str	r2, [r4, #0]
 80040ce:	d504      	bpl.n	80040da <__sflush_r+0x7e>
 80040d0:	1c42      	adds	r2, r0, #1
 80040d2:	d101      	bne.n	80040d8 <__sflush_r+0x7c>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b903      	cbnz	r3, 80040da <__sflush_r+0x7e>
 80040d8:	6560      	str	r0, [r4, #84]	; 0x54
 80040da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040dc:	602f      	str	r7, [r5, #0]
 80040de:	2900      	cmp	r1, #0
 80040e0:	d0c9      	beq.n	8004076 <__sflush_r+0x1a>
 80040e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e6:	4299      	cmp	r1, r3
 80040e8:	d002      	beq.n	80040f0 <__sflush_r+0x94>
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7ff fbea 	bl	80038c4 <_free_r>
 80040f0:	2000      	movs	r0, #0
 80040f2:	6360      	str	r0, [r4, #52]	; 0x34
 80040f4:	e7c0      	b.n	8004078 <__sflush_r+0x1c>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b0      	blx	r6
 80040fc:	1c41      	adds	r1, r0, #1
 80040fe:	d1c8      	bne.n	8004092 <__sflush_r+0x36>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0c5      	beq.n	8004092 <__sflush_r+0x36>
 8004106:	2b1d      	cmp	r3, #29
 8004108:	d001      	beq.n	800410e <__sflush_r+0xb2>
 800410a:	2b16      	cmp	r3, #22
 800410c:	d101      	bne.n	8004112 <__sflush_r+0xb6>
 800410e:	602f      	str	r7, [r5, #0]
 8004110:	e7b1      	b.n	8004076 <__sflush_r+0x1a>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	e7ad      	b.n	8004078 <__sflush_r+0x1c>
 800411c:	690f      	ldr	r7, [r1, #16]
 800411e:	2f00      	cmp	r7, #0
 8004120:	d0a9      	beq.n	8004076 <__sflush_r+0x1a>
 8004122:	0793      	lsls	r3, r2, #30
 8004124:	680e      	ldr	r6, [r1, #0]
 8004126:	bf08      	it	eq
 8004128:	694b      	ldreq	r3, [r1, #20]
 800412a:	600f      	str	r7, [r1, #0]
 800412c:	bf18      	it	ne
 800412e:	2300      	movne	r3, #0
 8004130:	eba6 0807 	sub.w	r8, r6, r7
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	dd9c      	ble.n	8004076 <__sflush_r+0x1a>
 800413c:	6a21      	ldr	r1, [r4, #32]
 800413e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004140:	4643      	mov	r3, r8
 8004142:	463a      	mov	r2, r7
 8004144:	4628      	mov	r0, r5
 8004146:	47b0      	blx	r6
 8004148:	2800      	cmp	r0, #0
 800414a:	dc06      	bgt.n	800415a <__sflush_r+0xfe>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e78e      	b.n	8004078 <__sflush_r+0x1c>
 800415a:	4407      	add	r7, r0
 800415c:	eba8 0800 	sub.w	r8, r8, r0
 8004160:	e7e9      	b.n	8004136 <__sflush_r+0xda>
 8004162:	bf00      	nop
 8004164:	dfbffffe 	.word	0xdfbffffe

08004168 <_fflush_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	b913      	cbnz	r3, 8004178 <_fflush_r+0x10>
 8004172:	2500      	movs	r5, #0
 8004174:	4628      	mov	r0, r5
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	b118      	cbz	r0, 8004182 <_fflush_r+0x1a>
 800417a:	6a03      	ldr	r3, [r0, #32]
 800417c:	b90b      	cbnz	r3, 8004182 <_fflush_r+0x1a>
 800417e:	f7ff fa9b 	bl	80036b8 <__sinit>
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f3      	beq.n	8004172 <_fflush_r+0xa>
 800418a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800418c:	07d0      	lsls	r0, r2, #31
 800418e:	d404      	bmi.n	800419a <_fflush_r+0x32>
 8004190:	0599      	lsls	r1, r3, #22
 8004192:	d402      	bmi.n	800419a <_fflush_r+0x32>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f7ff fb93 	bl	80038c0 <__retarget_lock_acquire_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	4621      	mov	r1, r4
 800419e:	f7ff ff5d 	bl	800405c <__sflush_r>
 80041a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a4:	07da      	lsls	r2, r3, #31
 80041a6:	4605      	mov	r5, r0
 80041a8:	d4e4      	bmi.n	8004174 <_fflush_r+0xc>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	059b      	lsls	r3, r3, #22
 80041ae:	d4e1      	bmi.n	8004174 <_fflush_r+0xc>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f7ff fb86 	bl	80038c2 <__retarget_lock_release_recursive>
 80041b6:	e7dd      	b.n	8004174 <_fflush_r+0xc>

080041b8 <__swbuf_r>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	460e      	mov	r6, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	4605      	mov	r5, r0
 80041c0:	b118      	cbz	r0, 80041ca <__swbuf_r+0x12>
 80041c2:	6a03      	ldr	r3, [r0, #32]
 80041c4:	b90b      	cbnz	r3, 80041ca <__swbuf_r+0x12>
 80041c6:	f7ff fa77 	bl	80036b8 <__sinit>
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	071a      	lsls	r2, r3, #28
 80041d2:	d525      	bpl.n	8004220 <__swbuf_r+0x68>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b31b      	cbz	r3, 8004220 <__swbuf_r+0x68>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6922      	ldr	r2, [r4, #16]
 80041dc:	1a98      	subs	r0, r3, r2
 80041de:	6963      	ldr	r3, [r4, #20]
 80041e0:	b2f6      	uxtb	r6, r6
 80041e2:	4283      	cmp	r3, r0
 80041e4:	4637      	mov	r7, r6
 80041e6:	dc04      	bgt.n	80041f2 <__swbuf_r+0x3a>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7ff ffbc 	bl	8004168 <_fflush_r>
 80041f0:	b9e0      	cbnz	r0, 800422c <__swbuf_r+0x74>
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	6022      	str	r2, [r4, #0]
 80041fe:	701e      	strb	r6, [r3, #0]
 8004200:	6962      	ldr	r2, [r4, #20]
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d004      	beq.n	8004212 <__swbuf_r+0x5a>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	07db      	lsls	r3, r3, #31
 800420c:	d506      	bpl.n	800421c <__swbuf_r+0x64>
 800420e:	2e0a      	cmp	r6, #10
 8004210:	d104      	bne.n	800421c <__swbuf_r+0x64>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f7ff ffa7 	bl	8004168 <_fflush_r>
 800421a:	b938      	cbnz	r0, 800422c <__swbuf_r+0x74>
 800421c:	4638      	mov	r0, r7
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004220:	4621      	mov	r1, r4
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f806 	bl	8004234 <__swsetup_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	d0d5      	beq.n	80041d8 <__swbuf_r+0x20>
 800422c:	f04f 37ff 	mov.w	r7, #4294967295
 8004230:	e7f4      	b.n	800421c <__swbuf_r+0x64>
	...

08004234 <__swsetup_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <__swsetup_r+0xac>)
 8004238:	4605      	mov	r5, r0
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	460c      	mov	r4, r1
 800423e:	b118      	cbz	r0, 8004248 <__swsetup_r+0x14>
 8004240:	6a03      	ldr	r3, [r0, #32]
 8004242:	b90b      	cbnz	r3, 8004248 <__swsetup_r+0x14>
 8004244:	f7ff fa38 	bl	80036b8 <__sinit>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800424e:	0718      	lsls	r0, r3, #28
 8004250:	d422      	bmi.n	8004298 <__swsetup_r+0x64>
 8004252:	06d9      	lsls	r1, r3, #27
 8004254:	d407      	bmi.n	8004266 <__swsetup_r+0x32>
 8004256:	2309      	movs	r3, #9
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e034      	b.n	80042d0 <__swsetup_r+0x9c>
 8004266:	0758      	lsls	r0, r3, #29
 8004268:	d512      	bpl.n	8004290 <__swsetup_r+0x5c>
 800426a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800426c:	b141      	cbz	r1, 8004280 <__swsetup_r+0x4c>
 800426e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004272:	4299      	cmp	r1, r3
 8004274:	d002      	beq.n	800427c <__swsetup_r+0x48>
 8004276:	4628      	mov	r0, r5
 8004278:	f7ff fb24 	bl	80038c4 <_free_r>
 800427c:	2300      	movs	r3, #0
 800427e:	6363      	str	r3, [r4, #52]	; 0x34
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	2300      	movs	r3, #0
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0308 	orr.w	r3, r3, #8
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b94b      	cbnz	r3, 80042b0 <__swsetup_r+0x7c>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a6:	d003      	beq.n	80042b0 <__swsetup_r+0x7c>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f850 	bl	8004350 <__smakebuf_r>
 80042b0:	89a0      	ldrh	r0, [r4, #12]
 80042b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042b6:	f010 0301 	ands.w	r3, r0, #1
 80042ba:	d00a      	beq.n	80042d2 <__swsetup_r+0x9e>
 80042bc:	2300      	movs	r3, #0
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	6963      	ldr	r3, [r4, #20]
 80042c2:	425b      	negs	r3, r3
 80042c4:	61a3      	str	r3, [r4, #24]
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	b943      	cbnz	r3, 80042dc <__swsetup_r+0xa8>
 80042ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ce:	d1c4      	bne.n	800425a <__swsetup_r+0x26>
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	0781      	lsls	r1, r0, #30
 80042d4:	bf58      	it	pl
 80042d6:	6963      	ldrpl	r3, [r4, #20]
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	e7f4      	b.n	80042c6 <__swsetup_r+0x92>
 80042dc:	2000      	movs	r0, #0
 80042de:	e7f7      	b.n	80042d0 <__swsetup_r+0x9c>
 80042e0:	20000064 	.word	0x20000064

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	; (8004300 <_sbrk_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc fd56 	bl	8000da0 <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200002cc 	.word	0x200002cc

08004304 <__swhatbuf_r>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460c      	mov	r4, r1
 8004308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430c:	2900      	cmp	r1, #0
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	4615      	mov	r5, r2
 8004312:	461e      	mov	r6, r3
 8004314:	da0d      	bge.n	8004332 <__swhatbuf_r+0x2e>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	bf0c      	ite	eq
 8004322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004326:	2340      	movne	r3, #64	; 0x40
 8004328:	2000      	movs	r0, #0
 800432a:	6031      	str	r1, [r6, #0]
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	b016      	add	sp, #88	; 0x58
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	466a      	mov	r2, sp
 8004334:	f000 f848 	bl	80043c8 <_fstat_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	dbec      	blt.n	8004316 <__swhatbuf_r+0x12>
 800433c:	9901      	ldr	r1, [sp, #4]
 800433e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004346:	4259      	negs	r1, r3
 8004348:	4159      	adcs	r1, r3
 800434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434e:	e7eb      	b.n	8004328 <__swhatbuf_r+0x24>

08004350 <__smakebuf_r>:
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004354:	079d      	lsls	r5, r3, #30
 8004356:	4606      	mov	r6, r0
 8004358:	460c      	mov	r4, r1
 800435a:	d507      	bpl.n	800436c <__smakebuf_r+0x1c>
 800435c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	2301      	movs	r3, #1
 8004366:	6163      	str	r3, [r4, #20]
 8004368:	b002      	add	sp, #8
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	ab01      	add	r3, sp, #4
 800436e:	466a      	mov	r2, sp
 8004370:	f7ff ffc8 	bl	8004304 <__swhatbuf_r>
 8004374:	9900      	ldr	r1, [sp, #0]
 8004376:	4605      	mov	r5, r0
 8004378:	4630      	mov	r0, r6
 800437a:	f7ff fb0f 	bl	800399c <_malloc_r>
 800437e:	b948      	cbnz	r0, 8004394 <__smakebuf_r+0x44>
 8004380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d4ef      	bmi.n	8004368 <__smakebuf_r+0x18>
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	f043 0302 	orr.w	r3, r3, #2
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	e7e3      	b.n	800435c <__smakebuf_r+0xc>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	6020      	str	r0, [r4, #0]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	9b00      	ldr	r3, [sp, #0]
 80043a0:	6163      	str	r3, [r4, #20]
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	6120      	str	r0, [r4, #16]
 80043a6:	b15b      	cbz	r3, 80043c0 <__smakebuf_r+0x70>
 80043a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ac:	4630      	mov	r0, r6
 80043ae:	f000 f81d 	bl	80043ec <_isatty_r>
 80043b2:	b128      	cbz	r0, 80043c0 <__smakebuf_r+0x70>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	431d      	orrs	r5, r3
 80043c4:	81a5      	strh	r5, [r4, #12]
 80043c6:	e7cf      	b.n	8004368 <__smakebuf_r+0x18>

080043c8 <_fstat_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d07      	ldr	r5, [pc, #28]	; (80043e8 <_fstat_r+0x20>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	f7fc fcba 	bl	8000d4e <_fstat>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d102      	bne.n	80043e4 <_fstat_r+0x1c>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	b103      	cbz	r3, 80043e4 <_fstat_r+0x1c>
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	bf00      	nop
 80043e8:	200002cc 	.word	0x200002cc

080043ec <_isatty_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d06      	ldr	r5, [pc, #24]	; (8004408 <_isatty_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f7fc fcb9 	bl	8000d6e <_isatty>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_isatty_r+0x1a>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_isatty_r+0x1a>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	200002cc 	.word	0x200002cc

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
