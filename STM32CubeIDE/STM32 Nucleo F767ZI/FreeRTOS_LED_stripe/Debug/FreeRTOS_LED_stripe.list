
FreeRTOS_LED_stripe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006518  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b4  080067b4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067bc  080067bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080067c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c68  20000060  08006824  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc8  08006824  00024cc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019716  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6a  00000000  00000000  000397e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001016  00000000  00000000  0003e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0a1  00000000  00000000  0003f84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a76e  00000000  00000000  000698ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010256a  00000000  00000000  0008405d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000590c  00000000  00000000  001865c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0018bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08006700 	.word	0x08006700

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08006700 	.word	0x08006700

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_DMA_Init+0x38>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <MX_DMA_Init+0x38>)
 8000548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_DMA_Init+0x38>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	203b      	movs	r0, #59	; 0x3b
 8000560:	f001 f89a 	bl	8001698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000564:	203b      	movs	r0, #59	; 0x3b
 8000566:	f001 f8b3 	bl	80016d0 <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <MX_FREERTOS_Init+0x28>)
 800057e:	2100      	movs	r1, #0
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <MX_FREERTOS_Init+0x2c>)
 8000582:	f003 fa4b 	bl	8003a1c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <MX_FREERTOS_Init+0x30>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripeTask */
  LEDStripeTaskHandle = osThreadNew(StartLEDStripeTask, NULL, &LEDStripeTask_attributes);
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <MX_FREERTOS_Init+0x34>)
 800058e:	2100      	movs	r1, #0
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <MX_FREERTOS_Init+0x38>)
 8000592:	f003 fa43 	bl	8003a1c <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <MX_FREERTOS_Init+0x3c>)
 800059a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	0800674c 	.word	0x0800674c
 80005a4:	080005b9 	.word	0x080005b9
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	08006770 	.word	0x08006770
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	20000080 	.word	0x20000080

080005b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f003 fad1 	bl	8003b68 <osDelay>
 80005c6:	e7fb      	b.n	80005c0 <StartDefaultTask+0x8>

080005c8 <StartLEDStripeTask>:
*/
// 7 * 3 * 35 = 735 bytes heap usage

/* USER CODE END Header_StartLEDStripeTask */
void StartLEDStripeTask(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripeTask */
	ws281x_init(&pixel, &hspi1, 21, ws281x_order_grb);
 80005d0:	2301      	movs	r3, #1
 80005d2:	2215      	movs	r2, #21
 80005d4:	4905      	ldr	r1, [pc, #20]	; (80005ec <StartLEDStripeTask+0x24>)
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <StartLEDStripeTask+0x28>)
 80005d8:	f000 fb6c 	bl	8000cb4 <ws281x_init>
	ws281x_test_slow(&pixel);
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <StartLEDStripeTask+0x28>)
 80005de:	f000 feae 	bl	800133e <ws281x_test_slow>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f003 fac0 	bl	8003b68 <osDelay>
 80005e8:	e7fb      	b.n	80005e2 <StartLEDStripeTask+0x1a>
 80005ea:	bf00      	nop
 80005ec:	20000094 	.word	0x20000094
 80005f0:	20000084 	.word	0x20000084

080005f4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b7f      	ldr	r3, [pc, #508]	; (8000808 <MX_GPIO_Init+0x214>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a7e      	ldr	r2, [pc, #504]	; (8000808 <MX_GPIO_Init+0x214>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b7c      	ldr	r3, [pc, #496]	; (8000808 <MX_GPIO_Init+0x214>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b79      	ldr	r3, [pc, #484]	; (8000808 <MX_GPIO_Init+0x214>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a78      	ldr	r2, [pc, #480]	; (8000808 <MX_GPIO_Init+0x214>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b76      	ldr	r3, [pc, #472]	; (8000808 <MX_GPIO_Init+0x214>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b73      	ldr	r3, [pc, #460]	; (8000808 <MX_GPIO_Init+0x214>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a72      	ldr	r2, [pc, #456]	; (8000808 <MX_GPIO_Init+0x214>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b70      	ldr	r3, [pc, #448]	; (8000808 <MX_GPIO_Init+0x214>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <MX_GPIO_Init+0x214>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a6c      	ldr	r2, [pc, #432]	; (8000808 <MX_GPIO_Init+0x214>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <MX_GPIO_Init+0x214>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b67      	ldr	r3, [pc, #412]	; (8000808 <MX_GPIO_Init+0x214>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a66      	ldr	r2, [pc, #408]	; (8000808 <MX_GPIO_Init+0x214>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b64      	ldr	r3, [pc, #400]	; (8000808 <MX_GPIO_Init+0x214>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4b61      	ldr	r3, [pc, #388]	; (8000808 <MX_GPIO_Init+0x214>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a60      	ldr	r2, [pc, #384]	; (8000808 <MX_GPIO_Init+0x214>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <MX_GPIO_Init+0x214>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a0:	485a      	ldr	r0, [pc, #360]	; (800080c <MX_GPIO_Init+0x218>)
 80006a2:	f001 fd47 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4859      	ldr	r0, [pc, #356]	; (8000810 <MX_GPIO_Init+0x21c>)
 80006ac:	f001 fd42 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4853      	ldr	r0, [pc, #332]	; (8000814 <MX_GPIO_Init+0x220>)
 80006c8:	f001 fb88 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	230b      	movs	r3, #11
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <MX_GPIO_Init+0x220>)
 80006e8:	f001 fb78 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ec:	2386      	movs	r3, #134	; 0x86
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4844      	ldr	r0, [pc, #272]	; (8000818 <MX_GPIO_Init+0x224>)
 8000708:	f001 fb68 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800070c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4839      	ldr	r0, [pc, #228]	; (800080c <MX_GPIO_Init+0x218>)
 8000726:	f001 fb59 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073c:	230b      	movs	r3, #11
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4831      	ldr	r0, [pc, #196]	; (800080c <MX_GPIO_Init+0x218>)
 8000748:	f001 fb48 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800074c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800075e:	2307      	movs	r3, #7
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	482c      	ldr	r0, [pc, #176]	; (800081c <MX_GPIO_Init+0x228>)
 800076a:	f001 fb37 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4822      	ldr	r0, [pc, #136]	; (8000810 <MX_GPIO_Init+0x21c>)
 8000786:	f001 fb29 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_GPIO_Init+0x21c>)
 800079e:	f001 fb1d 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007b4:	230a      	movs	r3, #10
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_GPIO_Init+0x224>)
 80007c0:	f001 fb0c 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <MX_GPIO_Init+0x224>)
 80007da:	f001 faff 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0x21c>)
 80007fc:	f001 faee 	bl	8001ddc <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800
 8000814:	40020800 	.word	0x40020800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020c00 	.word	0x40020c00

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fe53 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f80e 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f7ff fee2 	bl	80005f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000830:	f7ff fe84 	bl	800053c <MX_DMA_Init>
  MX_SPI1_Init();
 8000834:	f000 f88e 	bl	8000954 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000838:	f003 f886 	bl	8003948 <osKernelInitialize>
  MX_FREERTOS_Init();
 800083c:	f7ff fe9c 	bl	8000578 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000840:	f003 f8b6 	bl	80039b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000844:	e7fe      	b.n	8000844 <main+0x24>
	...

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fe68 	bl	800652c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <SystemClock_Config+0xd4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <SystemClock_Config+0xd4>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SystemClock_Config+0xd4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <SystemClock_Config+0xd8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a25      	ldr	r2, [pc, #148]	; (8000920 <SystemClock_Config+0xd8>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <SystemClock_Config+0xd8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008b4:	23d8      	movs	r3, #216	; 0xd8
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fc9d 	bl	8002208 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008d4:	f000 f838 	bl	8000948 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d8:	f001 fc46 	bl	8002168 <HAL_PWREx_EnableOverDrive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f831 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2107      	movs	r1, #7
 8000904:	4618      	mov	r0, r3
 8000906:	f001 ff2d 	bl	8002764 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000910:	f000 f81a 	bl	8000948 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 fdd7 	bl	80014e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40001000 	.word	0x40001000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_SPI1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_SPI1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x74>)
 800096e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000972:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000986:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x74>)
 800098a:	2220      	movs	r2, #32
 800098c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009b4:	f002 f918 	bl	8002be8 <HAL_SPI_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f7ff ffc3 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000094 	.word	0x20000094
 80009cc:	40013000 	.word	0x40013000

080009d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <HAL_SPI_MspInit+0x110>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d171      	bne.n	8000ad6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f2:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a3b      	ldr	r2, [pc, #236]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 80009f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_SPI_MspInit+0x114>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4824      	ldr	r0, [pc, #144]	; (8000ae8 <HAL_SPI_MspInit+0x118>)
 8000a56:	f001 f9c1 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_SPI_MspInit+0x11c>)
 8000a76:	f001 f9b1 	bl	8001ddc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_SPI_MspInit+0x124>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a82:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000abc:	f000 fe16 	bl	80016ec <HAL_DMA_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8000ac6:	f7ff ff3f 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000ace:	655a      	str	r2, [r3, #84]	; 0x54
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_SPI_MspInit+0x120>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	200000f8 	.word	0x200000f8
 8000af4:	40026458 	.word	0x40026458

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 fdaf 	bl	8001698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <HAL_InitTick+0xe0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <HAL_InitTick+0xe0>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <HAL_InitTick+0xe0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f802 	bl	8002b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8a:	f001 ffe7 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000b8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b90:	e004      	b.n	8000b9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b92:	f001 ffe3 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_InitTick+0xe4>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <HAL_InitTick+0xec>)
 8000bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <HAL_InitTick+0xe8>)
 8000bd2:	f002 fbd1 	bl	8003378 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <HAL_InitTick+0xe8>)
 8000be6:	f002 fc29 	bl	800343c <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	; 0x36
 8000bfa:	f000 fd69 	bl	80016d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d808      	bhi.n	8000c16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 fd45 	bl	8001698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0xf0>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e002      	b.n	8000c1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3738      	adds	r7, #56	; 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	20000158 	.word	0x20000158
 8000c34:	40001000 	.word	0x40001000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM6_DAC_IRQHandler+0x10>)
 8000c6e:	f002 fc5d 	bl	800352c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000158 	.word	0x20000158

08000c7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA2_Stream3_IRQHandler+0x10>)
 8000c82:	f000 fe41 	bl	8001908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000f8 	.word	0x200000f8

08000c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <ws281x_init>:
#else
#define ws281x_delay(x)	HAL_Delay(x)
#endif
//###########################################################################################################
bool ws281x_init(ws281x_t *ws281x, SPI_HandleTypeDef *spi_handle, uint16_t max_pixel, ws281x_order_t ws281x_order)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]
	ws281x->spi_handle = spi_handle;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	605a      	str	r2, [r3, #4]
#if WS281X_FREERTOS == 0
	ws281x->pixels = malloc(max_pixel * 3);
	ws281x->buffer = malloc(max_pixel * 32);	
#else
	ws281x->pixels = pvPortMalloc(max_pixel * 3);	
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fa43 	bl	8006164 <pvPortMalloc>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	60da      	str	r2, [r3, #12]
	ws281x->buffer = pvPortMalloc(max_pixel * 32);	
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f005 fa3b 	bl	8006164 <pvPortMalloc>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	609a      	str	r2, [r3, #8]
#endif		
	if (ws281x->pixels != NULL && ws281x->buffer != NULL)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <ws281x_init+0x8a>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d01c      	beq.n	8000d3e <ws281x_init+0x8a>
	{
		ws281x->max_pixel = max_pixel;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	801a      	strh	r2, [r3, #0]
		ws281x->order = ws281x_order;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	797a      	ldrb	r2, [r7, #5]
 8000d0e:	709a      	strb	r2, [r3, #2]
		memset(ws281x->pixels, 0, max_pixel * 3); 
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	68d8      	ldr	r0, [r3, #12]
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f005 fc04 	bl	800652c <memset>
		memset(ws281x->buffer, 0, max_pixel * 32); 
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6898      	ldr	r0, [r3, #8]
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f005 fbfc 	bl	800652c <memset>
		ws281x_update(ws281x);
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f000 f819 	bl	8000d6c <ws281x_update>
		return true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e012      	b.n	8000d64 <ws281x_init+0xb0>
		if (ws281x->pixels != NULL)
			free(ws281x->pixels);
		if (ws281x->buffer != NULL)
			free(ws281x->buffer);
#else
		if (ws281x->pixels != NULL)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d004      	beq.n	8000d50 <ws281x_init+0x9c>
			vPortFree(ws281x->pixels);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f005 fad4 	bl	80062f8 <vPortFree>
		if (ws281x->buffer != NULL)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <ws281x_init+0xae>
			vPortFree(ws281x->buffer);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 facb 	bl	80062f8 <vPortFree>
#endif		
			
		return false;
 8000d62:	2300      	movs	r3, #0
	}
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <ws281x_update>:
//###########################################################################################################
bool ws281x_update(ws281x_t *ws281x)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	int buff_cnt = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* reset buffer	*/
	memset(ws281x->buffer, 0, ws281x->max_pixel * 32); 
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	461a      	mov	r2, r3
 8000d84:	2100      	movs	r1, #0
 8000d86:	f005 fbd1 	bl	800652c <memset>
	switch (ws281x->order)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <ws281x_update+0x2e>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	f000 8138 	beq.w	8001008 <ws281x_update+0x29c>
 8000d98:	e26d      	b.n	8001276 <ws281x_update+0x50a>
	{
		/* order RGB BEGIN */
		case ws281x_order_rgb:
			for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d9e:	e12b      	b.n	8000ff8 <ws281x_update+0x28c>
			{
				for (int i = 7; i >= 0; i-=2)
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
 8000da4:	e05c      	b.n	8000e60 <ws281x_update+0xf4>
				{		
					if (ws281x->pixels[pixel].r & (1 << i))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68d9      	ldr	r1, [r3, #12]
 8000daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	fa42 f303 	asr.w	r3, r2, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00d      	beq.n	8000de2 <ws281x_update+0x76>
						ws281x->buffer[buff_cnt] |= 0xC0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	4413      	add	r3, r2
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e00c      	b.n	8000dfc <ws281x_update+0x90>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	4413      	add	r3, r2
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6899      	ldr	r1, [r3, #8]
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	440b      	add	r3, r1
 8000df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].r & (1 << (i - 1)))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68d9      	ldr	r1, [r3, #12]
 8000e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3b01      	subs	r3, #1
 8000e12:	fa42 f303 	asr.w	r3, r2, r3
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <ws281x_update+0xce>
						ws281x->buffer[buff_cnt] |= 0x0C;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	4413      	add	r3, r2
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6899      	ldr	r1, [r3, #8]
 8000e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2e:	440b      	add	r3, r1
 8000e30:	f042 020c 	orr.w	r2, r2, #12
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e00c      	b.n	8000e54 <ws281x_update+0xe8>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	4413      	add	r3, r2
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6899      	ldr	r1, [r3, #8]
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f042 0208 	orr.w	r2, r2, #8
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 8000e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e56:	3301      	adds	r3, #1
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da9f      	bge.n	8000da6 <ws281x_update+0x3a>
				}		
				for (int i = 7; i >= 0; i-=2)
 8000e66:	2307      	movs	r3, #7
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	e05c      	b.n	8000f26 <ws281x_update+0x1ba>
				{		
					if (ws281x->pixels[pixel].g & (1 << i))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68d9      	ldr	r1, [r3, #12]
 8000e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00d      	beq.n	8000ea8 <ws281x_update+0x13c>
						ws281x->buffer[buff_cnt] |= 0xC0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	4413      	add	r3, r2
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6899      	ldr	r1, [r3, #8]
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	440b      	add	r3, r1
 8000e9e:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e00c      	b.n	8000ec2 <ws281x_update+0x156>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	4413      	add	r3, r2
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6899      	ldr	r1, [r3, #8]
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	440b      	add	r3, r1
 8000eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].g & (1 << (i - 1)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68d9      	ldr	r1, [r3, #12]
 8000ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	fa42 f303 	asr.w	r3, r2, r3
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00d      	beq.n	8000f00 <ws281x_update+0x194>
						ws281x->buffer[buff_cnt] |= 0x0C;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eea:	4413      	add	r3, r2
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6899      	ldr	r1, [r3, #8]
 8000ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef4:	440b      	add	r3, r1
 8000ef6:	f042 020c 	orr.w	r2, r2, #12
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e00c      	b.n	8000f1a <ws281x_update+0x1ae>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f06:	4413      	add	r3, r2
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6899      	ldr	r1, [r3, #8]
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	440b      	add	r3, r1
 8000f12:	f042 0208 	orr.w	r2, r2, #8
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	3b02      	subs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da9f      	bge.n	8000e6c <ws281x_update+0x100>
				}		
				for (int i = 7; i >= 0; i-=2)
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	e05c      	b.n	8000fec <ws281x_update+0x280>
				{		
					if (ws281x->pixels[pixel].b & (1 << i))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68d9      	ldr	r1, [r3, #12]
 8000f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	789b      	ldrb	r3, [r3, #2]
 8000f42:	461a      	mov	r2, r3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	fa42 f303 	asr.w	r3, r2, r3
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00d      	beq.n	8000f6e <ws281x_update+0x202>
						ws281x->buffer[buff_cnt] |= 0xC0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	4413      	add	r3, r2
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6899      	ldr	r1, [r3, #8]
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	440b      	add	r3, r1
 8000f64:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e00c      	b.n	8000f88 <ws281x_update+0x21c>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f74:	4413      	add	r3, r2
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6899      	ldr	r1, [r3, #8]
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	440b      	add	r3, r1
 8000f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].b & (1 << (i - 1)))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68d9      	ldr	r1, [r3, #12]
 8000f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	fa42 f303 	asr.w	r3, r2, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00d      	beq.n	8000fc6 <ws281x_update+0x25a>
						ws281x->buffer[buff_cnt] |= 0x0C;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6899      	ldr	r1, [r3, #8]
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	440b      	add	r3, r1
 8000fbc:	f042 020c 	orr.w	r2, r2, #12
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e00c      	b.n	8000fe0 <ws281x_update+0x274>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fcc:	4413      	add	r3, r2
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6899      	ldr	r1, [r3, #8]
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f042 0208 	orr.w	r2, r2, #8
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 8000fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da9f      	bge.n	8000f32 <ws281x_update+0x1c6>
			for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	4293      	cmp	r3, r2
 8001002:	f6ff aecd 	blt.w	8000da0 <ws281x_update+0x34>
				}		
			}
		break;
 8001006:	e136      	b.n	8001276 <ws281x_update+0x50a>
		/* order RGB END */
			
		/* order GRB BEGIN */
		case ws281x_order_grb:
			for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	e12b      	b.n	8001266 <ws281x_update+0x4fa>
			{
				for (int i = 7; i >= 0; i-=2)
 800100e:	2307      	movs	r3, #7
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e05c      	b.n	80010ce <ws281x_update+0x362>
				{		
					if (ws281x->pixels[pixel].g & (1 << i))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68d9      	ldr	r1, [r3, #12]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	440b      	add	r3, r1
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	461a      	mov	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa42 f303 	asr.w	r3, r2, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00d      	beq.n	8001050 <ws281x_update+0x2e4>
						ws281x->buffer[buff_cnt] |= 0xC0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	4413      	add	r3, r2
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6899      	ldr	r1, [r3, #8]
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	440b      	add	r3, r1
 8001046:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e00c      	b.n	800106a <ws281x_update+0x2fe>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001056:	4413      	add	r3, r2
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6899      	ldr	r1, [r3, #8]
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	440b      	add	r3, r1
 8001062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].g & (1 << (i - 1)))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68d9      	ldr	r1, [r3, #12]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	440b      	add	r3, r1
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	461a      	mov	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3b01      	subs	r3, #1
 8001080:	fa42 f303 	asr.w	r3, r2, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00d      	beq.n	80010a8 <ws281x_update+0x33c>
						ws281x->buffer[buff_cnt] |= 0x0C;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6899      	ldr	r1, [r3, #8]
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	440b      	add	r3, r1
 800109e:	f042 020c 	orr.w	r2, r2, #12
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e00c      	b.n	80010c2 <ws281x_update+0x356>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	4413      	add	r3, r2
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6899      	ldr	r1, [r3, #8]
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	440b      	add	r3, r1
 80010ba:	f042 0208 	orr.w	r2, r2, #8
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	3301      	adds	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3b02      	subs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da9f      	bge.n	8001014 <ws281x_update+0x2a8>
				}		
				for (int i = 7; i >= 0; i-=2)
 80010d4:	2307      	movs	r3, #7
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	e05c      	b.n	8001194 <ws281x_update+0x428>
				{		
					if (ws281x->pixels[pixel].r & (1 << i))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68d9      	ldr	r1, [r3, #12]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	fa42 f303 	asr.w	r3, r2, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00d      	beq.n	8001116 <ws281x_update+0x3aa>
						ws281x->buffer[buff_cnt] |= 0xC0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	4413      	add	r3, r2
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6899      	ldr	r1, [r3, #8]
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	440b      	add	r3, r1
 800110c:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e00c      	b.n	8001130 <ws281x_update+0x3c4>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	4413      	add	r3, r2
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6899      	ldr	r1, [r3, #8]
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	440b      	add	r3, r1
 8001128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].r & (1 << (i - 1)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68d9      	ldr	r1, [r3, #12]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	440b      	add	r3, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	3b01      	subs	r3, #1
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00d      	beq.n	800116e <ws281x_update+0x402>
						ws281x->buffer[buff_cnt] |= 0x0C;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	4413      	add	r3, r2
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6899      	ldr	r1, [r3, #8]
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	440b      	add	r3, r1
 8001164:	f042 020c 	orr.w	r2, r2, #12
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e00c      	b.n	8001188 <ws281x_update+0x41c>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	4413      	add	r3, r2
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6899      	ldr	r1, [r3, #8]
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	440b      	add	r3, r1
 8001180:	f042 0208 	orr.w	r2, r2, #8
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	3301      	adds	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3b02      	subs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	da9f      	bge.n	80010da <ws281x_update+0x36e>
				}		
				for (int i = 7; i >= 0; i-=2)
 800119a:	2307      	movs	r3, #7
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e05c      	b.n	800125a <ws281x_update+0x4ee>
				{		
					if (ws281x->pixels[pixel].b & (1 << i))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68d9      	ldr	r1, [r3, #12]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	fa42 f303 	asr.w	r3, r2, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00d      	beq.n	80011dc <ws281x_update+0x470>
						ws281x->buffer[buff_cnt] |= 0xC0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6899      	ldr	r1, [r3, #8]
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	440b      	add	r3, r1
 80011d2:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e00c      	b.n	80011f6 <ws281x_update+0x48a>
					else
						ws281x->buffer[buff_cnt] |= 0x80;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	4413      	add	r3, r2
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6899      	ldr	r1, [r3, #8]
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	440b      	add	r3, r1
 80011ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
					if (ws281x->pixels[pixel].b & (1 << (i - 1)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	440b      	add	r3, r1
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3b01      	subs	r3, #1
 800120c:	fa42 f303 	asr.w	r3, r2, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <ws281x_update+0x4c8>
						ws281x->buffer[buff_cnt] |= 0x0C;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	4413      	add	r3, r2
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6899      	ldr	r1, [r3, #8]
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	440b      	add	r3, r1
 800122a:	f042 020c 	orr.w	r2, r2, #12
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e00c      	b.n	800124e <ws281x_update+0x4e2>
					else
						ws281x->buffer[buff_cnt] |= 0x08;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	4413      	add	r3, r2
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6899      	ldr	r1, [r3, #8]
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	440b      	add	r3, r1
 8001246:	f042 0208 	orr.w	r2, r2, #8
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]
					buff_cnt++;
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	3301      	adds	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 7; i >= 0; i-=2)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b02      	subs	r3, #2
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da9f      	bge.n	80011a0 <ws281x_update+0x434>
			for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3301      	adds	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4293      	cmp	r3, r2
 8001270:	f6ff aecd 	blt.w	800100e <ws281x_update+0x2a2>
				}		
			}
		break;			
 8001274:	bf00      	nop
		/* order GRB END */
	}	
	/* send via SPI */
	if (HAL_SPI_Transmit_DMA(ws281x->spi_handle, ws281x->buffer, ws281x->max_pixel * 32) == HAL_OK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6858      	ldr	r0, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6899      	ldr	r1, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	f001 fd5a 	bl	8002d40 <HAL_SPI_Transmit_DMA>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <ws281x_update+0x52a>
		return true;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <ws281x_update+0x52c>
	else
		return false;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ws281x_set_pixel_rgb>:
//###########################################################################################################
void ws281x_set_pixel_rgb(ws281x_t *ws281x, uint8_t select_pixel, uint8_t red, uint8_t green, uint8_t blue)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	70fb      	strb	r3, [r7, #3]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70bb      	strb	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	707b      	strb	r3, [r7, #1]
	if(select_pixel >= ws281x->max_pixel)
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d21b      	bcs.n	80012fe <ws281x_set_pixel_rgb+0x5e>
		return;	
	ws281x->pixels[select_pixel].r = red;	
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	78ba      	ldrb	r2, [r7, #2]
 80012d6:	701a      	strb	r2, [r3, #0]
	ws281x->pixels[select_pixel].g = green;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	787a      	ldrb	r2, [r7, #1]
 80012e8:	705a      	strb	r2, [r3, #1]
	ws281x->pixels[select_pixel].b = blue;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	7c3a      	ldrb	r2, [r7, #16]
 80012fa:	709a      	strb	r2, [r3, #2]
 80012fc:	e000      	b.n	8001300 <ws281x_set_pixel_rgb+0x60>
		return;	
 80012fe:	bf00      	nop
}
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <ws281x_off>:
		break;
	}
}
//#########################################################################################################
void ws281x_off(ws281x_t *ws281x)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	ws281x_delay(20);
 8001312:	2014      	movs	r0, #20
 8001314:	f002 fc28 	bl	8003b68 <osDelay>
	memset(ws281x->pixels, 0, ws281x->max_pixel * 3);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68d8      	ldr	r0, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	461a      	mov	r2, r3
 800132a:	2100      	movs	r1, #0
 800132c:	f005 f8fe 	bl	800652c <memset>
	ws281x_update(ws281x);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fd1b 	bl	8000d6c <ws281x_update>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <ws281x_test_slow>:
//#########################################################################################################
void ws281x_test_slow(ws281x_t *ws281x)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b088      	sub	sp, #32
 8001342:	af02      	add	r7, sp, #8
 8001344:	6078      	str	r0, [r7, #4]
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e01f      	b.n	800138c <ws281x_test_slow+0x4e>
	{
		ws281x_delay(50);		
 800134c:	2032      	movs	r0, #50	; 0x32
 800134e:	f002 fc0b 	bl	8003b68 <osDelay>
		if (pixel > 0)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd0a      	ble.n	800136e <ws281x_test_slow+0x30>
			ws281x_set_pixel_rgb(ws281x, pixel - 1, 0, 0, 0);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	3b01      	subs	r3, #1
 800135e:	b2d9      	uxtb	r1, r3
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	2200      	movs	r2, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff99 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_set_pixel_rgb(ws281x, pixel, 255, 0, 0);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	b2d9      	uxtb	r1, r3
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff90 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_update(ws281x);		
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fcf3 	bl	8000d6c <ws281x_update>
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4293      	cmp	r3, r2
 8001396:	dbd9      	blt.n	800134c <ws281x_test_slow+0xe>
	}
	ws281x_set_pixel_rgb(ws281x, ws281x->max_pixel - 1, 0, 0, 0);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2200      	movs	r2, #0
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff78 	bl	80012a0 <ws281x_set_pixel_rgb>
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e01f      	b.n	80013f6 <ws281x_test_slow+0xb8>
	{
		ws281x_delay(50);
 80013b6:	2032      	movs	r0, #50	; 0x32
 80013b8:	f002 fbd6 	bl	8003b68 <osDelay>
		if (pixel > 0)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd0a      	ble.n	80013d8 <ws281x_test_slow+0x9a>
			ws281x_set_pixel_rgb(ws281x, pixel - 1, 0, 0, 0);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b2d9      	uxtb	r1, r3
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2200      	movs	r2, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff64 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_set_pixel_rgb(ws281x, pixel, 0, 255, 0);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	b2d9      	uxtb	r1, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	2200      	movs	r2, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff5b 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_update(ws281x);		
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fcbe 	bl	8000d6c <ws281x_update>
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4293      	cmp	r3, r2
 8001400:	dbd9      	blt.n	80013b6 <ws281x_test_slow+0x78>
	}
	ws281x_set_pixel_rgb(ws281x, ws281x->max_pixel - 1, 0, 0, 0);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b2d9      	uxtb	r1, r3
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff43 	bl	80012a0 <ws281x_set_pixel_rgb>
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e01f      	b.n	8001460 <ws281x_test_slow+0x122>
	{
		ws281x_delay(50);
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f002 fba1 	bl	8003b68 <osDelay>
		if (pixel > 0)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	dd0a      	ble.n	8001442 <ws281x_test_slow+0x104>
			ws281x_set_pixel_rgb(ws281x, pixel - 1, 0, 0, 0);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	2300      	movs	r3, #0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	2200      	movs	r2, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2f 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_set_pixel_rgb(ws281x, pixel, 0, 0, 255);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	23ff      	movs	r3, #255	; 0xff
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2200      	movs	r2, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff26 	bl	80012a0 <ws281x_set_pixel_rgb>
		ws281x_update(ws281x);		
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fc89 	bl	8000d6c <ws281x_update>
	for (int pixel = 0; pixel < ws281x->max_pixel; pixel++)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4293      	cmp	r3, r2
 800146a:	dbd9      	blt.n	8001420 <ws281x_test_slow+0xe2>
	}
	ws281x_off(ws281x);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff4c 	bl	800130a <ws281x_off>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a6:	f7ff fbf3 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f005 f89d 	bl	80065e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff f9b7 	bl	8000820 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014c0:	080067c4 	.word	0x080067c4
  ldr r2, =_sbss
 80014c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014c8:	20004cc8 	.word	0x20004cc8

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>

080014ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f8d5 	bl	8001682 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	200f      	movs	r0, #15
 80014da:	f7ff fb35 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fb0b 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	200001a4 	.word	0x200001a4

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200001a4 	.word	0x200001a4

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	4313      	orrs	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	05fa0000 	.word	0x05fa0000

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff4c 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016aa:	f7ff ff61 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	6978      	ldr	r0, [r7, #20]
 80016b6:	f7ff ffb1 	bl	800161c <NVIC_EncodePriority>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff80 	bl	80015c8 <__NVIC_SetPriority>
}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff54 	bl	800158c <__NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ff0a 	bl	8001510 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e099      	b.n	800183c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	e00f      	b.n	800174a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172a:	f7ff fef1 	bl	8001510 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b05      	cmp	r3, #5
 8001736:	d908      	bls.n	800174a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e078      	b.n	800183c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e8      	bne.n	800172a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_DMA_Init+0x158>)
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4313      	orrs	r3, r2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f023 0307 	bic.w	r3, r3, #7
 80017ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d117      	bne.n	800180e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa77 	bl	8001ce4 <DMA_CheckFifoParam>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800180a:	2301      	movs	r3, #1
 800180c:	e016      	b.n	800183c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fa2e 	bl	8001c78 <DMA_CalcBaseAndBitshift>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e010803f 	.word	0xe010803f

08001848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_DMA_Start_IT+0x26>
 800186a:	2302      	movs	r3, #2
 800186c:	e048      	b.n	8001900 <HAL_DMA_Start_IT+0xb8>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d137      	bne.n	80018f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f9c0 	bl	8001c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0216 	orr.w	r2, r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e005      	b.n	80018fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001914:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <HAL_DMA_IRQHandler+0x248>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a8e      	ldr	r2, [pc, #568]	; (8001b54 <HAL_DMA_IRQHandler+0x24c>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2208      	movs	r2, #8
 8001934:	409a      	lsls	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01a      	beq.n	8001974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0204 	bic.w	r2, r2, #4
 800195a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	2208      	movs	r2, #8
 8001962:	409a      	lsls	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2201      	movs	r2, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d012      	beq.n	80019aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2204      	movs	r2, #4
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0204 	orr.w	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2210      	movs	r2, #16
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d043      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2210      	movs	r2, #16
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d018      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d024      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
 8001a36:	e01f      	b.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
 8001a48:	e016      	b.n	8001a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0208 	bic.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 808f 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8087 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d136      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0216 	bic.w	r2, r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <HAL_DMA_IRQHandler+0x1da>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0208 	bic.w	r2, r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	223f      	movs	r2, #63	; 0x3f
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d07e      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
        }
        return;
 8001b1e:	e079      	b.n	8001c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01d      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d031      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
 8001b4c:	e02c      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e01e      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10f      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0210 	bic.w	r2, r2, #16
 8001b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d032      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d022      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d307      	bcc.n	8001bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f2      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x2cc>
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e000      	b.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c14:	bf00      	nop
    }
  }
}
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d108      	bne.n	8001c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c5a:	e007      	b.n	8001c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3b10      	subs	r3, #16
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <DMA_CalcBaseAndBitshift+0x60>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <DMA_CalcBaseAndBitshift+0x64>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d908      	bls.n	8001cb8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	1d1a      	adds	r2, r3, #4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb6:	e006      	b.n	8001cc6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	aaaaaaab 	.word	0xaaaaaaab
 8001cdc:	080067ac 	.word	0x080067ac
 8001ce0:	fffffc00 	.word	0xfffffc00

08001ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11f      	bne.n	8001d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d856      	bhi.n	8001db2 <DMA_CheckFifoParam+0xce>
 8001d04:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <DMA_CheckFifoParam+0x28>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d2f 	.word	0x08001d2f
 8001d14:	08001d1d 	.word	0x08001d1d
 8001d18:	08001db3 	.word	0x08001db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d046      	beq.n	8001db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d2c:	e043      	b.n	8001db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d36:	d140      	bne.n	8001dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3c:	e03d      	b.n	8001dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d46:	d121      	bne.n	8001d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d837      	bhi.n	8001dbe <DMA_CheckFifoParam+0xda>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <DMA_CheckFifoParam+0x70>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6b 	.word	0x08001d6b
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001d7d 	.word	0x08001d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      break;
 8001d68:	e030      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d025      	beq.n	8001dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7a:	e022      	b.n	8001dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8a:	e01c      	b.n	8001dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d903      	bls.n	8001d9a <DMA_CheckFifoParam+0xb6>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d003      	beq.n	8001da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d98:	e018      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9e:	e015      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      break;
 8001db0:	e00b      	b.n	8001dca <DMA_CheckFifoParam+0xe6>
      break;
 8001db2:	bf00      	nop
 8001db4:	e00a      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e008      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e006      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e004      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e002      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
    }
  } 
  
  return status; 
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e175      	b.n	80020e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8164 	bne.w	80020e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x56>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80be 	beq.w	80020e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_GPIO_Init+0x324>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f7e:	4a61      	ldr	r2, [pc, #388]	; (8002104 <HAL_GPIO_Init+0x328>)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_GPIO_Init+0x32c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d037      	beq.n	800201a <HAL_GPIO_Init+0x23e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_GPIO_Init+0x330>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_GPIO_Init+0x23a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x334>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d02b      	beq.n	8002012 <HAL_GPIO_Init+0x236>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_GPIO_Init+0x338>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d025      	beq.n	800200e <HAL_GPIO_Init+0x232>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_GPIO_Init+0x33c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_Init+0x22e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a53      	ldr	r2, [pc, #332]	; (800211c <HAL_GPIO_Init+0x340>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x22a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x344>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x226>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_GPIO_Init+0x348>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x222>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a50      	ldr	r2, [pc, #320]	; (8002128 <HAL_GPIO_Init+0x34c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x21e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x350>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x21a>
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	e012      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	e010      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	e00e      	b.n	800201c <HAL_GPIO_Init+0x240>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002002:	2306      	movs	r3, #6
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x240>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x240>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x240>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x240>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x328>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x354>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_GPIO_Init+0x354>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_GPIO_Init+0x354>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_GPIO_Init+0x354>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f ae86 	bls.w	8001dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40021400 	.word	0x40021400
 8002120:	40021800 	.word	0x40021800
 8002124:	40021c00 	.word	0x40021c00
 8002128:	40022000 	.word	0x40022000
 800212c:	40022400 	.word	0x40022400
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002196:	f7ff f9bb 	bl	8001510 <HAL_GetTick>
 800219a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800219c:	e009      	b.n	80021b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800219e:	f7ff f9b7 	bl	8001510 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ac:	d901      	bls.n	80021b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e022      	b.n	80021f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021be:	d1ee      	bne.n	800219e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff f9a0 	bl	8001510 <HAL_GetTick>
 80021d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021d2:	e009      	b.n	80021e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021d4:	f7ff f99c 	bl	8001510 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e2:	d901      	bls.n	80021e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e007      	b.n	80021f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021f4:	d1ee      	bne.n	80021d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e29b      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b96      	ldr	r3, [pc, #600]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002238:	4b93      	ldr	r3, [pc, #588]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x62>
 8002244:	4b90      	ldr	r3, [pc, #576]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x130>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e275      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x7a>
 8002274:	4b84      	ldr	r3, [pc, #528]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a83      	ldr	r2, [pc, #524]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x9c>
 800228a:	4b7f      	ldr	r3, [pc, #508]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7e      	ldr	r2, [pc, #504]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b7c      	ldr	r3, [pc, #496]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7b      	ldr	r2, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a72      	ldr	r2, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6b      	ldr	r2, [pc, #428]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff f912 	bl	8001510 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff f90e 	bl	8001510 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e229      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff f8fe 	bl	8001510 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff f8fa 	bl	8001510 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e215      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x110>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d069      	beq.n	800241a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x190>
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x17a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1e9      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	493d      	ldr	r1, [pc, #244]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e040      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a38      	ldr	r2, [pc, #224]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f8b0 	bl	8001510 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff f8ac 	bl	8001510 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1c7      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4929      	ldr	r1, [pc, #164]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
 80023e6:	e018      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff f88c 	bl	8001510 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff f888 	bl	8001510 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1a3      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d038      	beq.n	8002498 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7ff f869 	bl	8001510 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002442:	f7ff f865 	bl	8001510 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e180      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x23a>
 8002460:	e01a      	b.n	8002498 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_RCC_OscConfig+0x280>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7ff f84f 	bl	8001510 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002476:	f7ff f84b 	bl	8001510 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d903      	bls.n	800248c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e166      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
 8002488:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b92      	ldr	r3, [pc, #584]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a4 	beq.w	80025ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8c      	ldr	r3, [pc, #560]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a88      	ldr	r2, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b86      	ldr	r3, [pc, #536]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ce:	4b83      	ldr	r3, [pc, #524]	; (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024da:	4b80      	ldr	r3, [pc, #512]	; (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7f      	ldr	r2, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7ff f813 	bl	8001510 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7ff f80f 	bl	8001510 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e12a      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x4d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x31a>
 8002514:	4b70      	ldr	r3, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a6f      	ldr	r2, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x33c>
 800252a:	4b6b      	ldr	r3, [pc, #428]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x35e>
 800254c:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a61      	ldr	r2, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe ffc3 	bl	8001510 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe ffbf 	bl	8001510 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d8      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x386>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe ffad 	bl	8001510 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe ffa9 	bl	8001510 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0c2      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a3c      	ldr	r2, [pc, #240]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80ae 	beq.w	8002754 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d06d      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d14b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a31      	ldr	r2, [pc, #196]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe ff7a 	bl	8001510 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe ff76 	bl	8001510 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e091      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	3b01      	subs	r3, #1
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe ff48 	bl	8001510 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe ff44 	bl	8001510 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e05f      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x47c>
 80026a2:	e057      	b.n	8002754 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe ff2e 	bl	8001510 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe ff2a 	bl	8001510 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e045      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4b0>
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x54c>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x558>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d030      	beq.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d129      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d122      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002716:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002718:	4293      	cmp	r3, r2
 800271a:	d119      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d10f      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d0      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	4965      	ldr	r1, [pc, #404]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e073      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4936      	ldr	r1, [pc, #216]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fe5a 	bl	8001510 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fe56 	bl	8001510 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e053      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4922      	ldr	r1, [pc, #136]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f916 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	08006794 	.word	0x08006794
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002940:	b094      	sub	sp, #80	; 0x50
 8002942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	2300      	movs	r3, #0
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800294c:	2300      	movs	r3, #0
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002954:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d00d      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x40>
 8002960:	2b08      	cmp	r3, #8
 8002962:	f200 80e1 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x34>
 800296a:	2b04      	cmp	r3, #4
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x3a>
 800296e:	e0db      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002974:	e0db      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002976:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800297a:	e0d8      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002984:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002986:	4b6d      	ldr	r3, [pc, #436]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
 800299c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c0:	0150      	lsls	r0, r2, #5
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4621      	mov	r1, r4
 80029c8:	1a51      	subs	r1, r2, r1
 80029ca:	6139      	str	r1, [r7, #16]
 80029cc:	4629      	mov	r1, r5
 80029ce:	eb63 0301 	sbc.w	r3, r3, r1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029e0:	4659      	mov	r1, fp
 80029e2:	018b      	lsls	r3, r1, #6
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ea:	4651      	mov	r1, sl
 80029ec:	018a      	lsls	r2, r1, #6
 80029ee:	4651      	mov	r1, sl
 80029f0:	ebb2 0801 	subs.w	r8, r2, r1
 80029f4:	4659      	mov	r1, fp
 80029f6:	eb63 0901 	sbc.w	r9, r3, r1
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0e:	4690      	mov	r8, r2
 8002a10:	4699      	mov	r9, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	eb18 0303 	adds.w	r3, r8, r3
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	eb49 0303 	adc.w	r3, r9, r3
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a4c:	f7fd fbf8 	bl	8000240 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	e058      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	2200      	movs	r2, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	4611      	mov	r1, r2
 8002a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a74:	4642      	mov	r2, r8
 8002a76:	464b      	mov	r3, r9
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0159      	lsls	r1, r3, #5
 8002a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a86:	0150      	lsls	r0, r2, #5
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a92:	4649      	mov	r1, r9
 8002a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aac:	ebb2 040a 	subs.w	r4, r2, sl
 8002ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	00eb      	lsls	r3, r5, #3
 8002abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac2:	00e2      	lsls	r2, r4, #3
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	4643      	mov	r3, r8
 8002aca:	18e3      	adds	r3, r4, r3
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	464b      	mov	r3, r9
 8002ad0:	eb45 0303 	adc.w	r3, r5, r3
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	028b      	lsls	r3, r1, #10
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aec:	4621      	mov	r1, r4
 8002aee:	028a      	lsls	r2, r1, #10
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af6:	2200      	movs	r2, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	61fa      	str	r2, [r7, #28]
 8002afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b00:	f7fd fb9e 	bl	8000240 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3750      	adds	r7, #80	; 0x50
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400

08002b44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080067a4 	.word	0x080067a4

08002b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e09d      	b.n	8002d36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0a:	d009      	beq.n	8002c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fec8 	bl	80009d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c60:	d902      	bls.n	8002c68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e002      	b.n	8002c6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c76:	d007      	beq.n	8002c88 <HAL_SPI_Init+0xa0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	ea42 0103 	orr.w	r1, r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f003 0204 	and.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d04:	ea42 0103 	orr.w	r1, r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_SPI_Transmit_DMA+0x20>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0d8      	b.n	8002f12 <HAL_SPI_Transmit_DMA+0x1d2>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
 8002d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d78:	e0c6      	b.n	8002f08 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_SPI_Transmit_DMA+0x46>
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d8a:	e0bd      	b.n	8002f08 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d10f      	bne.n	8002df8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	4a47      	ldr	r2, [pc, #284]	; (8002f1c <HAL_SPI_Transmit_DMA+0x1dc>)
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	4a46      	ldr	r2, [pc, #280]	; (8002f20 <HAL_SPI_Transmit_DMA+0x1e0>)
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_SPI_Transmit_DMA+0x1e4>)
 8002e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e26:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e30:	d82d      	bhi.n	8002e8e <HAL_SPI_Transmit_DMA+0x14e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3c:	d127      	bne.n	8002e8e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10f      	bne.n	8002e6c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6a:	e010      	b.n	8002e8e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	4619      	mov	r1, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ea6:	f7fe fccf 	bl	8001848 <HAL_DMA_Start_IT>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8002ec8:	e01e      	b.n	8002f08 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d007      	beq.n	8002ee8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0220 	orr.w	r2, r2, #32
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0202 	orr.w	r2, r2, #2
 8002f06:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0800300d 	.word	0x0800300d
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08003029 	.word	0x08003029

08002f28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f72:	f7fe facd 	bl	8001510 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f86:	d03b      	beq.n	8003000 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0220 	bic.w	r2, r2, #32
 8002f96:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0202 	bic.w	r2, r2, #2
 8002fa6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f000 f979 	bl	80032a4 <SPI_EndRxTxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f7ff ffa9 	bl	8002f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ffe:	e002      	b.n	8003006 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f7ff ff91 	bl	8002f28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ff8e 	bl	8002f3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0203 	bic.w	r2, r2, #3
 8003044:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ff78 	bl	8002f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003078:	f7fe fa4a 	bl	8001510 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4413      	add	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003088:	f7fe fa42 	bl	8001510 <HAL_GetTick>
 800308c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	0d1b      	lsrs	r3, r3, #20
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309e:	e054      	b.n	800314a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d050      	beq.n	800314a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030a8:	f7fe fa32 	bl	8001510 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d902      	bls.n	80030be <SPI_WaitFlagStateUntilTimeout+0x56>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13d      	bne.n	800313a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d6:	d111      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d004      	beq.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d107      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d10f      	bne.n	8003126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e017      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3b01      	subs	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d19b      	bne.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800318a:	f7fe f9c1 	bl	8001510 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4413      	add	r3, r2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800319a:	f7fe f9b9 	bl	8001510 <HAL_GetTick>
 800319e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00da      	lsls	r2, r3, #3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	0d1b      	lsrs	r3, r3, #20
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031c0:	e060      	b.n	8003284 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031c8:	d107      	bne.n	80031da <SPI_WaitFifoStateUntilTimeout+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d050      	beq.n	8003284 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e2:	f7fe f995 	bl	8001510 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d902      	bls.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d13d      	bne.n	8003274 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003206:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003210:	d111      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321a:	d004      	beq.n	8003226 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003224:	d107      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d10f      	bne.n	8003260 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e010      	b.n	8003296 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3b01      	subs	r3, #1
 8003282:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d196      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff ff5b 	bl	8003178 <SPI_WaitFifoStateUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e046      	b.n	8003366 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <SPI_EndRxTxTransaction+0xcc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <SPI_EndRxTxTransaction+0xd0>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0d5b      	lsrs	r3, r3, #21
 80032e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f6:	d112      	bne.n	800331e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff feb0 	bl	8003068 <SPI_WaitFlagStateUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e023      	b.n	8003366 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d0f2      	beq.n	800331e <SPI_EndRxTxTransaction+0x7a>
 8003338:	e000      	b.n	800333c <SPI_EndRxTxTransaction+0x98>
        break;
 800333a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff ff15 	bl	8003178 <SPI_WaitFifoStateUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e000      	b.n	8003366 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e049      	b.n	800341e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f841 	bl	8003426 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fa00 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e054      	b.n	80034fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_TIM_Base_Start_IT+0xd0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d022      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d01d      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <HAL_TIM_Base_Start_IT+0xd4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d018      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a21      	ldr	r2, [pc, #132]	; (8003514 <HAL_TIM_Base_Start_IT+0xd8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_TIM_Base_Start_IT+0xdc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00e      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_TIM_Base_Start_IT+0xe0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d009      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_TIM_Base_Start_IT+0xe4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x80>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_TIM_Base_Start_IT+0xe8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d115      	bne.n	80034e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_TIM_Base_Start_IT+0xec>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d015      	beq.n	80034fa <HAL_TIM_Base_Start_IT+0xbe>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d011      	beq.n	80034fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	e008      	b.n	80034fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e000      	b.n	80034fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40010400 	.word	0x40010400
 8003520:	40014000 	.word	0x40014000
 8003524:	40001800 	.word	0x40001800
 8003528:	00010007 	.word	0x00010007

0800352c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b02      	cmp	r3, #2
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0202 	mvn.w	r2, #2
 8003558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f905 	bl	800377e <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8f7 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f908 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0204 	mvn.w	r2, #4
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8db 	bl	800377e <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8cd 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8de 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0208 	mvn.w	r2, #8
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8b1 	bl	800377e <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8a3 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8b4 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b10      	cmp	r3, #16
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b10      	cmp	r3, #16
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0210 	mvn.w	r2, #16
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2208      	movs	r2, #8
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f887 	bl	800377e <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f879 	bl	800376a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f88a 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0201 	mvn.w	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd f93a 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f91a 	bl	8003910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f90d 	bl	8003924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d107      	bne.n	8003736 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f838 	bl	80037a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d10e      	bne.n	8003762 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d107      	bne.n	8003762 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0220 	mvn.w	r2, #32
 800375a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8cd 	bl	80038fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d00f      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <TIM_Base_SetConfig+0x118>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <TIM_Base_SetConfig+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <TIM_Base_SetConfig+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d027      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <TIM_Base_SetConfig+0x118>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d023      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <TIM_Base_SetConfig+0x11c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <TIM_Base_SetConfig+0x120>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d017      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <TIM_Base_SetConfig+0x128>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <TIM_Base_SetConfig+0x12c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <TIM_Base_SetConfig+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <TIM_Base_SetConfig+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a24      	ldr	r2, [pc, #144]	; (80038f4 <TIM_Base_SetConfig+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <TIM_Base_SetConfig+0x13c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800
 80038f0:	40001800 	.word	0x40001800
 80038f4:	40001c00 	.word	0x40001c00
 80038f8:	40002000 	.word	0x40002000

080038fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394e:	f3ef 8305 	mrs	r3, IPSR
 8003952:	60bb      	str	r3, [r7, #8]
  return(result);
 8003954:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	607b      	str	r3, [r7, #4]
  return(result);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003966:	f3ef 8311 	mrs	r3, BASEPRI
 800396a:	603b      	str	r3, [r7, #0]
  return(result);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <osKernelInitialize+0x3a>
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <osKernelInitialize+0x64>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d103      	bne.n	8003982 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800397a:	f06f 0305 	mvn.w	r3, #5
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e00c      	b.n	800399c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <osKernelInitialize+0x64>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <osKernelInitialize+0x64>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e002      	b.n	800399c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	200001a8 	.word	0x200001a8

080039b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b6:	f3ef 8305 	mrs	r3, IPSR
 80039ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8310 	mrs	r3, PRIMASK
 80039c6:	607b      	str	r3, [r7, #4]
  return(result);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039ce:	f3ef 8311 	mrs	r3, BASEPRI
 80039d2:	603b      	str	r3, [r7, #0]
  return(result);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <osKernelStart+0x3a>
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <osKernelStart+0x68>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80039e2:	f06f 0305 	mvn.w	r3, #5
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e010      	b.n	8003a0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <osKernelStart+0x68>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d109      	bne.n	8003a06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039f2:	f7ff ffa1 	bl	8003938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <osKernelStart+0x68>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039fc:	f001 f8ca 	bl	8004b94 <vTaskStartScheduler>
      stat = osOK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e002      	b.n	8003a0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200001a8 	.word	0x200001a8

08003a1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	; 0x40
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a2c:	f3ef 8305 	mrs	r3, IPSR
 8003a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a32:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 808f 	bne.w	8003b58 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a46:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <osThreadNew+0x3e>
 8003a52:	4b44      	ldr	r3, [pc, #272]	; (8003b64 <osThreadNew+0x148>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d07e      	beq.n	8003b58 <osThreadNew+0x13c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d07b      	beq.n	8003b58 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003a64:	2318      	movs	r3, #24
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d045      	beq.n	8003b04 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <osThreadNew+0x6a>
        name = attr->name;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <osThreadNew+0x90>
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	2b38      	cmp	r3, #56	; 0x38
 8003a9e:	d805      	bhi.n	8003aac <osThreadNew+0x90>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <osThreadNew+0x94>
        return (NULL);
 8003aac:	2300      	movs	r3, #0
 8003aae:	e054      	b.n	8003b5a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <osThreadNew+0xca>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2ba7      	cmp	r3, #167	; 0xa7
 8003ace:	d90a      	bls.n	8003ae6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <osThreadNew+0xca>
        mem = 1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	e010      	b.n	8003b08 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <osThreadNew+0xec>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <osThreadNew+0xec>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <osThreadNew+0xec>
          mem = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	e001      	b.n	8003b08 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d110      	bne.n	8003b30 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fe3f 	bl	80047a8 <xTaskCreateStatic>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e013      	b.n	8003b58 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fe90 	bl	800486e <xTaskCreate>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d001      	beq.n	8003b58 <osThreadNew+0x13c>
          hTask = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b58:	693b      	ldr	r3, [r7, #16]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3730      	adds	r7, #48	; 0x30
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200001a8 	.word	0x200001a8

08003b68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b70:	f3ef 8305 	mrs	r3, IPSR
 8003b74:	613b      	str	r3, [r7, #16]
  return(result);
 8003b76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10f      	bne.n	8003b9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b88:	f3ef 8311 	mrs	r3, BASEPRI
 8003b8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <osDelay+0x3c>
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <osDelay+0x58>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d103      	bne.n	8003ba4 <osDelay+0x3c>
    stat = osErrorISR;
 8003b9c:	f06f 0305 	mvn.w	r3, #5
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e007      	b.n	8003bb4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 ffba 	bl	8004b28 <vTaskDelay>
    }
  }

  return (stat);
 8003bb4:	697b      	ldr	r3, [r7, #20]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200001a8 	.word	0x200001a8

08003bc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8003bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	200001ac 	.word	0x200001ac
 8003bf4:	20000254 	.word	0x20000254

08003bf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <vApplicationGetTimerTaskMemory+0x30>)
 8003c0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000454 	.word	0x20000454
 8003c28:	200004fc 	.word	0x200004fc

08003c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f103 0208 	add.w	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f103 0208 	add.w	r2, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f103 0208 	add.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d103      	bne.n	8003cee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e00c      	b.n	8003d08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e002      	b.n	8003cfc <vListInsert+0x2e>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d2f6      	bcs.n	8003cf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6852      	ldr	r2, [r2, #4]
 8003d60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d103      	bne.n	8003d74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10c      	bne.n	8003dc2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	b672      	cpsid	i
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	b662      	cpsie	i
 8003dbc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003dc2:	f002 f8a3 	bl	8005f0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	3b01      	subs	r3, #1
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d114      	bne.n	8003e42 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01a      	beq.n	8003e56 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3310      	adds	r3, #16
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f95d 	bl	80050e4 <xTaskRemoveFromEventList>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <xQueueGenericReset+0xd0>)
 8003e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	e009      	b.n	8003e56 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3310      	adds	r3, #16
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fef0 	bl	8003c2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3324      	adds	r3, #36	; 0x24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff feeb 	bl	8003c2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e56:	f002 f88d 	bl	8005f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e5a:	2301      	movs	r3, #1
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08e      	sub	sp, #56	; 0x38
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10c      	bne.n	8003e96 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	b672      	cpsid	i
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	b662      	cpsie	i
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10c      	bne.n	8003eb6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	b672      	cpsid	i
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	b662      	cpsie	i
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <xQueueGenericCreateStatic+0x5a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <xQueueGenericCreateStatic+0x5e>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <xQueueGenericCreateStatic+0x60>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10c      	bne.n	8003ee6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	b672      	cpsid	i
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	b662      	cpsie	i
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <xQueueGenericCreateStatic+0x8a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <xQueueGenericCreateStatic+0x8e>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <xQueueGenericCreateStatic+0x90>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	b672      	cpsid	i
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	b662      	cpsie	i
 8003f10:	61fb      	str	r3, [r7, #28]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f16:	2350      	movs	r3, #80	; 0x50
 8003f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d00c      	beq.n	8003f3a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	b672      	cpsid	i
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	b662      	cpsie	i
 8003f34:	61bb      	str	r3, [r7, #24]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	4613      	mov	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f805 	bl	8003f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3730      	adds	r7, #48	; 0x30
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e002      	b.n	8003f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	69b8      	ldr	r0, [r7, #24]
 8003f9e:	f7ff fef9 	bl	8003d94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10c      	bne.n	8003fea <xQueueGenericSend+0x36>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	b672      	cpsid	i
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	b662      	cpsie	i
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <xQueueGenericSend+0x44>
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <xQueueGenericSend+0x48>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <xQueueGenericSend+0x4a>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <xQueueGenericSend+0x68>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	b672      	cpsid	i
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	b662      	cpsie	i
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d103      	bne.n	800402a <xQueueGenericSend+0x76>
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <xQueueGenericSend+0x7a>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <xQueueGenericSend+0x7c>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10c      	bne.n	800404e <xQueueGenericSend+0x9a>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	b672      	cpsid	i
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	b662      	cpsie	i
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800404e:	f001 fa13 	bl	8005478 <xTaskGetSchedulerState>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <xQueueGenericSend+0xaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueGenericSend+0xae>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericSend+0xb0>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10c      	bne.n	8004082 <xQueueGenericSend+0xce>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	b672      	cpsid	i
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	b662      	cpsie	i
 800407c:	61fb      	str	r3, [r7, #28]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004082:	f001 ff43 	bl	8005f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <xQueueGenericSend+0xe4>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d129      	bne.n	80040ec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409e:	f000 fa15 	bl	80044cc <prvCopyDataToQueue>
 80040a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	3324      	adds	r3, #36	; 0x24
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 f817 	bl	80050e4 <xTaskRemoveFromEventList>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <xQueueGenericSend+0x208>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	e00a      	b.n	80040e4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <xQueueGenericSend+0x208>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040e4:	f001 ff46 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e063      	b.n	80041b4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040f2:	f001 ff3f 	bl	8005f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e05c      	b.n	80041b4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f853 	bl	80051b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800410e:	f001 ff31 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004112:	f000 fdb3 	bl	8004c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004116:	f001 fef9 	bl	8005f0c <vPortEnterCritical>
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	b25b      	sxtb	r3, r3
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d103      	bne.n	8004130 <xQueueGenericSend+0x17c>
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004136:	b25b      	sxtb	r3, r3
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d103      	bne.n	8004146 <xQueueGenericSend+0x192>
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004146:	f001 ff15 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414a:	1d3a      	adds	r2, r7, #4
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f842 	bl	80051dc <xTaskCheckForTimeOut>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d124      	bne.n	80041a8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800415e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004160:	f000 faac 	bl	80046bc <prvIsQueueFull>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	3310      	adds	r3, #16
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ff62 	bl	800503c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417a:	f000 fa37 	bl	80045ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800417e:	f000 fd8b 	bl	8004c98 <xTaskResumeAll>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f af7c 	bne.w	8004082 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <xQueueGenericSend+0x208>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	e772      	b.n	8004082 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800419c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800419e:	f000 fa25 	bl	80045ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041a2:	f000 fd79 	bl	8004c98 <xTaskResumeAll>
 80041a6:	e76c      	b.n	8004082 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041aa:	f000 fa1f 	bl	80045ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ae:	f000 fd73 	bl	8004c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3738      	adds	r7, #56	; 0x38
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	e000ed04 	.word	0xe000ed04

080041c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10c      	bne.n	80041f2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	b672      	cpsid	i
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	b662      	cpsie	i
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <xQueueGenericSendFromISR+0x40>
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <xQueueGenericSendFromISR+0x44>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericSendFromISR+0x46>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	b672      	cpsid	i
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	b662      	cpsie	i
 800421e:	623b      	str	r3, [r7, #32]
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d103      	bne.n	8004232 <xQueueGenericSendFromISR+0x72>
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <xQueueGenericSendFromISR+0x76>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <xQueueGenericSendFromISR+0x78>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10c      	bne.n	8004256 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	61fb      	str	r3, [r7, #28]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004256:	f001 ff41 	bl	80060dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800425a:	f3ef 8211 	mrs	r2, BASEPRI
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	b672      	cpsid	i
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	b662      	cpsie	i
 8004272:	61ba      	str	r2, [r7, #24]
 8004274:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004276:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <xQueueGenericSendFromISR+0xcc>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d12c      	bne.n	80042e6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429c:	f000 f916 	bl	80044cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d112      	bne.n	80042d0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	3324      	adds	r3, #36	; 0x24
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 ff14 	bl	80050e4 <xTaskRemoveFromEventList>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e007      	b.n	80042e0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d4:	3301      	adds	r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	b25a      	sxtb	r2, r3
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042e0:	2301      	movs	r3, #1
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042e4:	e001      	b.n	80042ea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3738      	adds	r7, #56	; 0x38
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <xQueueReceive+0x34>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	b672      	cpsid	i
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	b662      	cpsie	i
 800432e:	623b      	str	r3, [r7, #32]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <xQueueReceive+0x42>
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <xQueueReceive+0x46>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueReceive+0x48>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <xQueueReceive+0x66>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	b672      	cpsid	i
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	b662      	cpsie	i
 8004360:	61fb      	str	r3, [r7, #28]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004366:	f001 f887 	bl	8005478 <xTaskGetSchedulerState>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <xQueueReceive+0x76>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <xQueueReceive+0x7a>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueReceive+0x7c>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <xQueueReceive+0x9a>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	b672      	cpsid	i
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	b662      	cpsie	i
 8004394:	61bb      	str	r3, [r7, #24]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800439a:	f001 fdb7 	bl	8005f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ae:	f000 f8f7 	bl	80045a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00f      	beq.n	80043e2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	3310      	adds	r3, #16
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe8c 	bl	80050e4 <xTaskRemoveFromEventList>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <xQueueReceive+0x1c8>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043e2:	f001 fdc7 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e069      	b.n	80044be <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f0:	f001 fdc0 	bl	8005f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e062      	b.n	80044be <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fed4 	bl	80051b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440c:	f001 fdb2 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004410:	f000 fc34 	bl	8004c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004414:	f001 fd7a 	bl	8005f0c <vPortEnterCritical>
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800441e:	b25b      	sxtb	r3, r3
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d103      	bne.n	800442e <xQueueReceive+0x12e>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004434:	b25b      	sxtb	r3, r3
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d103      	bne.n	8004444 <xQueueReceive+0x144>
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004444:	f001 fd96 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004448:	1d3a      	adds	r2, r7, #4
 800444a:	f107 0310 	add.w	r3, r7, #16
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fec3 	bl	80051dc <xTaskCheckForTimeOut>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d123      	bne.n	80044a4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800445c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445e:	f000 f917 	bl	8004690 <prvIsQueueEmpty>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	3324      	adds	r3, #36	; 0x24
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fde3 	bl	800503c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004478:	f000 f8b8 	bl	80045ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800447c:	f000 fc0c 	bl	8004c98 <xTaskResumeAll>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d189      	bne.n	800439a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <xQueueReceive+0x1c8>)
 8004488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	e780      	b.n	800439a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449a:	f000 f8a7 	bl	80045ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800449e:	f000 fbfb 	bl	8004c98 <xTaskResumeAll>
 80044a2:	e77a      	b.n	800439a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a6:	f000 f8a1 	bl	80045ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044aa:	f000 fbf5 	bl	8004c98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b0:	f000 f8ee 	bl	8004690 <prvIsQueueEmpty>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f43f af6f 	beq.w	800439a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3730      	adds	r7, #48	; 0x30
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d14d      	bne.n	800458e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ffdc 	bl	80054b4 <xTaskPriorityDisinherit>
 80044fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e043      	b.n	800458e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d119      	bne.n	8004540 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6858      	ldr	r0, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	461a      	mov	r2, r3
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	f002 f88c 	bl	8006634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d32b      	bcc.n	800458e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e026      	b.n	800458e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68d8      	ldr	r0, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	461a      	mov	r2, r3
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	f002 f872 	bl	8006634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	425b      	negs	r3, r3
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d207      	bcs.n	800457c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	425b      	negs	r3, r3
 8004576:	441a      	add	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d105      	bne.n	800458e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3b01      	subs	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004596:	697b      	ldr	r3, [r7, #20]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d303      	bcc.n	80045d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68d9      	ldr	r1, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	461a      	mov	r2, r3
 80045de:	6838      	ldr	r0, [r7, #0]
 80045e0:	f002 f828 	bl	8006634 <memcpy>
	}
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045f4:	f001 fc8a 	bl	8005f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004600:	e011      	b.n	8004626 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd68 	bl	80050e4 <xTaskRemoveFromEventList>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800461a:	f000 fe45 	bl	80052a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	3b01      	subs	r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	dce9      	bgt.n	8004602 <prvUnlockQueue+0x16>
 800462e:	e000      	b.n	8004632 <prvUnlockQueue+0x46>
					break;
 8004630:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	22ff      	movs	r2, #255	; 0xff
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800463a:	f001 fc9b 	bl	8005f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800463e:	f001 fc65 	bl	8005f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004648:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800464a:	e011      	b.n	8004670 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3310      	adds	r3, #16
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fd43 	bl	80050e4 <xTaskRemoveFromEventList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004664:	f000 fe20 	bl	80052a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	3b01      	subs	r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	dce9      	bgt.n	800464c <prvUnlockQueue+0x60>
 8004678:	e000      	b.n	800467c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800467a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004684:	f001 fc76 	bl	8005f74 <vPortExitCritical>
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004698:	f001 fc38 	bl	8005f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e001      	b.n	80046ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ae:	f001 fc61 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c4:	f001 fc22 	bl	8005f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d102      	bne.n	80046da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e001      	b.n	80046de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046de:	f001 fc49 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e014      	b.n	8004726 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <vQueueAddToRegistry+0x50>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004708:	490c      	ldr	r1, [pc, #48]	; (800473c <vQueueAddToRegistry+0x50>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <vQueueAddToRegistry+0x50>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800471e:	e006      	b.n	800472e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b07      	cmp	r3, #7
 800472a:	d9e7      	bls.n	80046fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	200008fc 	.word	0x200008fc

08004740 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004750:	f001 fbdc 	bl	8005f0c <vPortEnterCritical>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475a:	b25b      	sxtb	r3, r3
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d103      	bne.n	800476a <vQueueWaitForMessageRestricted+0x2a>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004770:	b25b      	sxtb	r3, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d103      	bne.n	8004780 <vQueueWaitForMessageRestricted+0x40>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004780:	f001 fbf8 	bl	8005f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3324      	adds	r3, #36	; 0x24
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fc77 	bl	8005088 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7ff ff26 	bl	80045ec <prvUnlockQueue>
	}
 80047a0:	bf00      	nop
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08e      	sub	sp, #56	; 0x38
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10c      	bne.n	80047d6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	b672      	cpsid	i
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	b662      	cpsie	i
 80047d0:	623b      	str	r3, [r7, #32]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	61fb      	str	r3, [r7, #28]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047f6:	23a8      	movs	r3, #168	; 0xa8
 80047f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2ba8      	cmp	r3, #168	; 0xa8
 80047fe:	d00c      	beq.n	800481a <xTaskCreateStatic+0x72>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	b672      	cpsid	i
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	b662      	cpsie	i
 8004814:	61bb      	str	r3, [r7, #24]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800481a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01e      	beq.n	8004860 <xTaskCreateStatic+0xb8>
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01b      	beq.n	8004860 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004830:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2202      	movs	r2, #2
 8004836:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800483a:	2300      	movs	r3, #0
 800483c:	9303      	str	r3, [sp, #12]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	9302      	str	r3, [sp, #8]
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f850 	bl	80048f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800485a:	f000 f8f5 	bl	8004a48 <prvAddNewTaskToReadyList>
 800485e:	e001      	b.n	8004864 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004864:	697b      	ldr	r3, [r7, #20]
	}
 8004866:	4618      	mov	r0, r3
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800486e:	b580      	push	{r7, lr}
 8004870:	b08c      	sub	sp, #48	; 0x30
 8004872:	af04      	add	r7, sp, #16
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fc6e 	bl	8006164 <pvPortMalloc>
 8004888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004890:	20a8      	movs	r0, #168	; 0xa8
 8004892:	f001 fc67 	bl	8006164 <pvPortMalloc>
 8004896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
 80048a4:	e005      	b.n	80048b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048a6:	6978      	ldr	r0, [r7, #20]
 80048a8:	f001 fd26 	bl	80062f8 <vPortFree>
 80048ac:	e001      	b.n	80048b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	2300      	movs	r3, #0
 80048c4:	9303      	str	r3, [sp, #12]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	9302      	str	r3, [sp, #8]
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f80e 	bl	80048f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048dc:	69f8      	ldr	r0, [r7, #28]
 80048de:	f000 f8b3 	bl	8004a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e002      	b.n	80048ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048ee:	69bb      	ldr	r3, [r7, #24]
	}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	461a      	mov	r2, r3
 8004910:	21a5      	movs	r1, #165	; 0xa5
 8004912:	f001 fe0b 	bl	800652c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004920:	440b      	add	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f023 0307 	bic.w	r3, r3, #7
 800492e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	b672      	cpsid	i
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	b662      	cpsie	i
 800494e:	617b      	str	r3, [r7, #20]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01f      	beq.n	800499a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e012      	b.n	8004986 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	7819      	ldrb	r1, [r3, #0]
 8004968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	3334      	adds	r3, #52	; 0x34
 8004970:	460a      	mov	r2, r1
 8004972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d9e9      	bls.n	8004960 <prvInitialiseNewTask+0x68>
 800498c:	e000      	b.n	8004990 <prvInitialiseNewTask+0x98>
			{
				break;
 800498e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004998:	e003      	b.n	80049a2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	2b37      	cmp	r3, #55	; 0x37
 80049a6:	d901      	bls.n	80049ac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049a8:	2337      	movs	r3, #55	; 0x37
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	2200      	movs	r2, #0
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff f952 	bl	8003c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	3318      	adds	r3, #24
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff f94d 	bl	8003c6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	3354      	adds	r3, #84	; 0x54
 80049fc:	224c      	movs	r2, #76	; 0x4c
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fd93 	bl	800652c <memset>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <prvInitialiseNewTask+0x144>)
 8004a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	; (8004a40 <prvInitialiseNewTask+0x148>)
 8004a10:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <prvInitialiseNewTask+0x14c>)
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	69b8      	ldr	r0, [r7, #24]
 8004a1e:	f001 f96b 	bl	8005cf8 <pxPortInitialiseStack>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a34:	bf00      	nop
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20004b88 	.word	0x20004b88
 8004a40:	20004bf0 	.word	0x20004bf0
 8004a44:	20004c58 	.word	0x20004c58

08004a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a50:	f001 fa5c 	bl	8005f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <prvAddNewTaskToReadyList+0xc4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <prvAddNewTaskToReadyList+0xc4>)
 8004a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <prvAddNewTaskToReadyList+0xc8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a66:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <prvAddNewTaskToReadyList+0xc8>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <prvAddNewTaskToReadyList+0xc4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d110      	bne.n	8004a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a74:	f000 fc3c 	bl	80052f0 <prvInitialiseTaskLists>
 8004a78:	e00d      	b.n	8004a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <prvAddNewTaskToReadyList+0xcc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <prvAddNewTaskToReadyList+0xc8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d802      	bhi.n	8004a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvAddNewTaskToReadyList+0xc8>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <prvAddNewTaskToReadyList+0xd0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <prvAddNewTaskToReadyList+0xd0>)
 8004a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <prvAddNewTaskToReadyList+0xd0>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <prvAddNewTaskToReadyList+0xd4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d903      	bls.n	8004abc <prvAddNewTaskToReadyList+0x74>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <prvAddNewTaskToReadyList+0xd4>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <prvAddNewTaskToReadyList+0xd8>)
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7ff f8d7 	bl	8003c86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ad8:	f001 fa4c 	bl	8005f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <prvAddNewTaskToReadyList+0xcc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <prvAddNewTaskToReadyList+0xc8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d207      	bcs.n	8004b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <prvAddNewTaskToReadyList+0xdc>)
 8004af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000e10 	.word	0x20000e10
 8004b10:	2000093c 	.word	0x2000093c
 8004b14:	20000e1c 	.word	0x20000e1c
 8004b18:	20000e2c 	.word	0x20000e2c
 8004b1c:	20000e18 	.word	0x20000e18
 8004b20:	20000940 	.word	0x20000940
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d019      	beq.n	8004b6e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <vTaskDelay+0x64>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <vTaskDelay+0x34>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	b672      	cpsid	i
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	b662      	cpsie	i
 8004b56:	60bb      	str	r3, [r7, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004b5c:	f000 f88e 	bl	8004c7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b60:	2100      	movs	r1, #0
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fd18 	bl	8005598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b68:	f000 f896 	bl	8004c98 <xTaskResumeAll>
 8004b6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <vTaskDelay+0x68>)
 8004b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000e38 	.word	0x20000e38
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ba2:	463a      	mov	r2, r7
 8004ba4:	1d39      	adds	r1, r7, #4
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f80a 	bl	8003bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	9202      	str	r2, [sp, #8]
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	4926      	ldr	r1, [pc, #152]	; (8004c5c <vTaskStartScheduler+0xc8>)
 8004bc4:	4826      	ldr	r0, [pc, #152]	; (8004c60 <vTaskStartScheduler+0xcc>)
 8004bc6:	f7ff fdef 	bl	80047a8 <xTaskCreateStatic>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <vTaskStartScheduler+0xd0>)
 8004bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd0:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <vTaskStartScheduler+0xd0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e001      	b.n	8004be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004be8:	f000 fd2a 	bl	8005640 <xTimerCreateTimerTask>
 8004bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d11d      	bne.n	8004c30 <vTaskStartScheduler+0x9c>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	b672      	cpsid	i
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	b662      	cpsie	i
 8004c08:	613b      	str	r3, [r7, #16]
}
 8004c0a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <vTaskStartScheduler+0xd4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3354      	adds	r3, #84	; 0x54
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <vTaskStartScheduler+0xd8>)
 8004c14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <vTaskStartScheduler+0xdc>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <vTaskStartScheduler+0xe0>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <vTaskStartScheduler+0xe4>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2a:	f001 f8f1 	bl	8005e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2e:	e010      	b.n	8004c52 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d10c      	bne.n	8004c52 <vTaskStartScheduler+0xbe>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	b672      	cpsid	i
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	b662      	cpsie	i
 8004c4c:	60fb      	str	r3, [r7, #12]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vTaskStartScheduler+0xbc>
}
 8004c52:	bf00      	nop
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08006734 	.word	0x08006734
 8004c60:	080052c1 	.word	0x080052c1
 8004c64:	20000e34 	.word	0x20000e34
 8004c68:	2000093c 	.word	0x2000093c
 8004c6c:	2000005c 	.word	0x2000005c
 8004c70:	20000e30 	.word	0x20000e30
 8004c74:	20000e1c 	.word	0x20000e1c
 8004c78:	20000e14 	.word	0x20000e14

08004c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <vTaskSuspendAll+0x18>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3301      	adds	r3, #1
 8004c86:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <vTaskSuspendAll+0x18>)
 8004c88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000e38 	.word	0x20000e38

08004c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ca6:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <xTaskResumeAll+0x11c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <xTaskResumeAll+0x30>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	b672      	cpsid	i
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	b662      	cpsie	i
 8004cc2:	603b      	str	r3, [r7, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cc8:	f001 f920 	bl	8005f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <xTaskResumeAll+0x11c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a38      	ldr	r2, [pc, #224]	; (8004db4 <xTaskResumeAll+0x11c>)
 8004cd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <xTaskResumeAll+0x11c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d162      	bne.n	8004da4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <xTaskResumeAll+0x120>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d05e      	beq.n	8004da4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce6:	e02f      	b.n	8004d48 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce8:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <xTaskResumeAll+0x124>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff f823 	bl	8003d40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f81e 	bl	8003d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d08:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <xTaskResumeAll+0x128>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d903      	bls.n	8004d18 <xTaskResumeAll+0x80>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <xTaskResumeAll+0x128>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <xTaskResumeAll+0x12c>)
 8004d26:	441a      	add	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fe ffa9 	bl	8003c86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <xTaskResumeAll+0x130>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <xTaskResumeAll+0x134>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <xTaskResumeAll+0x124>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1cb      	bne.n	8004ce8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d56:	f000 fb6f 	bl	8005438 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <xTaskResumeAll+0x138>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d66:	f000 f847 	bl	8004df8 <xTaskIncrementTick>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004d70:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <xTaskResumeAll+0x134>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f1      	bne.n	8004d66 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <xTaskResumeAll+0x138>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <xTaskResumeAll+0x134>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <xTaskResumeAll+0x13c>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da4:	f001 f8e6 	bl	8005f74 <vPortExitCritical>

	return xAlreadyYielded;
 8004da8:	68bb      	ldr	r3, [r7, #8]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000e38 	.word	0x20000e38
 8004db8:	20000e10 	.word	0x20000e10
 8004dbc:	20000dd0 	.word	0x20000dd0
 8004dc0:	20000e18 	.word	0x20000e18
 8004dc4:	20000940 	.word	0x20000940
 8004dc8:	2000093c 	.word	0x2000093c
 8004dcc:	20000e24 	.word	0x20000e24
 8004dd0:	20000e20 	.word	0x20000e20
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <xTaskGetTickCount+0x1c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004de4:	687b      	ldr	r3, [r7, #4]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000e14 	.word	0x20000e14

08004df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e02:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <xTaskIncrementTick+0x14c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 808b 	bne.w	8004f22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e0c:	4b4e      	ldr	r3, [pc, #312]	; (8004f48 <xTaskIncrementTick+0x150>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e14:	4a4c      	ldr	r2, [pc, #304]	; (8004f48 <xTaskIncrementTick+0x150>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d122      	bne.n	8004e66 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e20:	4b4a      	ldr	r3, [pc, #296]	; (8004f4c <xTaskIncrementTick+0x154>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	b672      	cpsid	i
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	b662      	cpsie	i
 8004e3e:	603b      	str	r3, [r7, #0]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskIncrementTick+0x4a>
 8004e44:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <xTaskIncrementTick+0x154>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <xTaskIncrementTick+0x158>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3f      	ldr	r2, [pc, #252]	; (8004f4c <xTaskIncrementTick+0x154>)
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <xTaskIncrementTick+0x158>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <xTaskIncrementTick+0x15c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	4a3d      	ldr	r2, [pc, #244]	; (8004f54 <xTaskIncrementTick+0x15c>)
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	f000 fae9 	bl	8005438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e66:	4b3c      	ldr	r3, [pc, #240]	; (8004f58 <xTaskIncrementTick+0x160>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d349      	bcc.n	8004f04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e70:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <xTaskIncrementTick+0x154>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <xTaskIncrementTick+0x160>)
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	601a      	str	r2, [r3, #0]
					break;
 8004e82:	e03f      	b.n	8004f04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <xTaskIncrementTick+0x154>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d203      	bcs.n	8004ea4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <xTaskIncrementTick+0x160>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ea2:	e02f      	b.n	8004f04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe ff49 	bl	8003d40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3318      	adds	r3, #24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe ff40 	bl	8003d40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <xTaskIncrementTick+0x164>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d903      	bls.n	8004ed4 <xTaskIncrementTick+0xdc>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <xTaskIncrementTick+0x164>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <xTaskIncrementTick+0x168>)
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fecb 	bl	8003c86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <xTaskIncrementTick+0x16c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d3b8      	bcc.n	8004e70 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f02:	e7b5      	b.n	8004e70 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <xTaskIncrementTick+0x16c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	4915      	ldr	r1, [pc, #84]	; (8004f60 <xTaskIncrementTick+0x168>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d907      	bls.n	8004f2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e004      	b.n	8004f2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <xTaskIncrementTick+0x170>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <xTaskIncrementTick+0x170>)
 8004f2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <xTaskIncrementTick+0x174>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f38:	697b      	ldr	r3, [r7, #20]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000e38 	.word	0x20000e38
 8004f48:	20000e14 	.word	0x20000e14
 8004f4c:	20000dc8 	.word	0x20000dc8
 8004f50:	20000dcc 	.word	0x20000dcc
 8004f54:	20000e28 	.word	0x20000e28
 8004f58:	20000e30 	.word	0x20000e30
 8004f5c:	20000e18 	.word	0x20000e18
 8004f60:	20000940 	.word	0x20000940
 8004f64:	2000093c 	.word	0x2000093c
 8004f68:	20000e20 	.word	0x20000e20
 8004f6c:	20000e24 	.word	0x20000e24

08004f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f76:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <vTaskSwitchContext+0xb4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <vTaskSwitchContext+0xb8>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f84:	e048      	b.n	8005018 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8004f86:	4b28      	ldr	r3, [pc, #160]	; (8005028 <vTaskSwitchContext+0xb8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f8c:	4b27      	ldr	r3, [pc, #156]	; (800502c <vTaskSwitchContext+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e012      	b.n	8004fba <vTaskSwitchContext+0x4a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <vTaskSwitchContext+0x44>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	b672      	cpsid	i
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	b662      	cpsie	i
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vTaskSwitchContext+0x42>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	491d      	ldr	r1, [pc, #116]	; (8005030 <vTaskSwitchContext+0xc0>)
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0e2      	beq.n	8004f94 <vTaskSwitchContext+0x24>
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <vTaskSwitchContext+0xc0>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d104      	bne.n	8004ffe <vTaskSwitchContext+0x8e>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <vTaskSwitchContext+0xc4>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <vTaskSwitchContext+0xbc>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <vTaskSwitchContext+0xc4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3354      	adds	r3, #84	; 0x54
 8005014:	4a08      	ldr	r2, [pc, #32]	; (8005038 <vTaskSwitchContext+0xc8>)
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20000e38 	.word	0x20000e38
 8005028:	20000e24 	.word	0x20000e24
 800502c:	20000e18 	.word	0x20000e18
 8005030:	20000940 	.word	0x20000940
 8005034:	2000093c 	.word	0x2000093c
 8005038:	2000005c 	.word	0x2000005c

0800503c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10c      	bne.n	8005066 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	b672      	cpsid	i
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	b662      	cpsie	i
 8005060:	60fb      	str	r3, [r7, #12]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <vTaskPlaceOnEventList+0x48>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3318      	adds	r3, #24
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fe fe2d 	bl	8003cce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005074:	2101      	movs	r1, #1
 8005076:	6838      	ldr	r0, [r7, #0]
 8005078:	f000 fa8e 	bl	8005598 <prvAddCurrentTaskToDelayedList>
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000093c 	.word	0x2000093c

08005088 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10c      	bne.n	80050b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	b672      	cpsid	i
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	b662      	cpsie	i
 80050ae:	617b      	str	r3, [r7, #20]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3318      	adds	r3, #24
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7fe fde2 	bl	8003c86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	f000 fa61 	bl	8005598 <prvAddCurrentTaskToDelayedList>
	}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	2000093c 	.word	0x2000093c

080050e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10c      	bne.n	8005114 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	b672      	cpsid	i
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	b662      	cpsie	i
 800510e:	60fb      	str	r3, [r7, #12]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3318      	adds	r3, #24
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fe11 	bl	8003d40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800511e:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <xTaskRemoveFromEventList+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d11d      	bne.n	8005162 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fe08 	bl	8003d40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <xTaskRemoveFromEventList+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d903      	bls.n	8005144 <xTaskRemoveFromEventList+0x60>
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <xTaskRemoveFromEventList+0xb8>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <xTaskRemoveFromEventList+0xbc>)
 8005152:	441a      	add	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7fe fd93 	bl	8003c86 <vListInsertEnd>
 8005160:	e005      	b.n	800516e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3318      	adds	r3, #24
 8005166:	4619      	mov	r1, r3
 8005168:	480e      	ldr	r0, [pc, #56]	; (80051a4 <xTaskRemoveFromEventList+0xc0>)
 800516a:	f7fe fd8c 	bl	8003c86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <xTaskRemoveFromEventList+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	429a      	cmp	r2, r3
 800517a:	d905      	bls.n	8005188 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <xTaskRemoveFromEventList+0xc8>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e001      	b.n	800518c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800518c:	697b      	ldr	r3, [r7, #20]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000e38 	.word	0x20000e38
 800519c:	20000e18 	.word	0x20000e18
 80051a0:	20000940 	.word	0x20000940
 80051a4:	20000dd0 	.word	0x20000dd0
 80051a8:	2000093c 	.word	0x2000093c
 80051ac:	20000e24 	.word	0x20000e24

080051b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <vTaskInternalSetTimeOutState+0x24>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <vTaskInternalSetTimeOutState+0x28>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	605a      	str	r2, [r3, #4]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20000e28 	.word	0x20000e28
 80051d8:	20000e14 	.word	0x20000e14

080051dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	b672      	cpsid	i
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	b662      	cpsie	i
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10c      	bne.n	8005226 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	b672      	cpsid	i
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	b662      	cpsie	i
 8005220:	60fb      	str	r3, [r7, #12]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005226:	f000 fe71 	bl	8005f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <xTaskCheckForTimeOut+0xc4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e023      	b.n	8005292 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <xTaskCheckForTimeOut+0xc8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d007      	beq.n	8005266 <xTaskCheckForTimeOut+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e015      	b.n	8005292 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d20b      	bcs.n	8005288 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff97 	bl	80051b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e004      	b.n	8005292 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800528e:	2301      	movs	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f000 fe6f 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8005296:	69fb      	ldr	r3, [r7, #28]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000e14 	.word	0x20000e14
 80052a4:	20000e28 	.word	0x20000e28

080052a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <vTaskMissedYield+0x14>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	20000e24 	.word	0x20000e24

080052c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052c8:	f000 f852 	bl	8005370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <prvIdleTask+0x28>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d9f9      	bls.n	80052c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <prvIdleTask+0x2c>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052e4:	e7f0      	b.n	80052c8 <prvIdleTask+0x8>
 80052e6:	bf00      	nop
 80052e8:	20000940 	.word	0x20000940
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e00c      	b.n	8005316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4a12      	ldr	r2, [pc, #72]	; (8005350 <prvInitialiseTaskLists+0x60>)
 8005308:	4413      	add	r3, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fc8e 	bl	8003c2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3301      	adds	r3, #1
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b37      	cmp	r3, #55	; 0x37
 800531a:	d9ef      	bls.n	80052fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800531c:	480d      	ldr	r0, [pc, #52]	; (8005354 <prvInitialiseTaskLists+0x64>)
 800531e:	f7fe fc85 	bl	8003c2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005322:	480d      	ldr	r0, [pc, #52]	; (8005358 <prvInitialiseTaskLists+0x68>)
 8005324:	f7fe fc82 	bl	8003c2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005328:	480c      	ldr	r0, [pc, #48]	; (800535c <prvInitialiseTaskLists+0x6c>)
 800532a:	f7fe fc7f 	bl	8003c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800532e:	480c      	ldr	r0, [pc, #48]	; (8005360 <prvInitialiseTaskLists+0x70>)
 8005330:	f7fe fc7c 	bl	8003c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005334:	480b      	ldr	r0, [pc, #44]	; (8005364 <prvInitialiseTaskLists+0x74>)
 8005336:	f7fe fc79 	bl	8003c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvInitialiseTaskLists+0x78>)
 800533c:	4a05      	ldr	r2, [pc, #20]	; (8005354 <prvInitialiseTaskLists+0x64>)
 800533e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <prvInitialiseTaskLists+0x7c>)
 8005342:	4a05      	ldr	r2, [pc, #20]	; (8005358 <prvInitialiseTaskLists+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000940 	.word	0x20000940
 8005354:	20000da0 	.word	0x20000da0
 8005358:	20000db4 	.word	0x20000db4
 800535c:	20000dd0 	.word	0x20000dd0
 8005360:	20000de4 	.word	0x20000de4
 8005364:	20000dfc 	.word	0x20000dfc
 8005368:	20000dc8 	.word	0x20000dc8
 800536c:	20000dcc 	.word	0x20000dcc

08005370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005376:	e019      	b.n	80053ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005378:	f000 fdc8 	bl	8005f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <prvCheckTasksWaitingTermination+0x50>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fcd9 	bl	8003d40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <prvCheckTasksWaitingTermination+0x54>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3b01      	subs	r3, #1
 8005394:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <prvCheckTasksWaitingTermination+0x54>)
 8005396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3b01      	subs	r3, #1
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 80053a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053a2:	f000 fde7 	bl	8005f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f810 	bl	80053cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e1      	bne.n	8005378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000de4 	.word	0x20000de4
 80053c4:	20000e10 	.word	0x20000e10
 80053c8:	20000df8 	.word	0x20000df8

080053cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3354      	adds	r3, #84	; 0x54
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 f8af 	bl	800653c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 ff83 	bl	80062f8 <vPortFree>
				vPortFree( pxTCB );
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 ff80 	bl	80062f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053f8:	e01a      	b.n	8005430 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005400:	2b01      	cmp	r3, #1
 8005402:	d103      	bne.n	800540c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 ff77 	bl	80062f8 <vPortFree>
	}
 800540a:	e011      	b.n	8005430 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005412:	2b02      	cmp	r3, #2
 8005414:	d00c      	beq.n	8005430 <prvDeleteTCB+0x64>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	b672      	cpsid	i
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	b662      	cpsie	i
 800542a:	60fb      	str	r3, [r7, #12]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <prvDeleteTCB+0x62>
	}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <prvResetNextTaskUnblockTime+0x38>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvResetNextTaskUnblockTime+0x3c>)
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005450:	e008      	b.n	8005464 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <prvResetNextTaskUnblockTime+0x38>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <prvResetNextTaskUnblockTime+0x3c>)
 8005462:	6013      	str	r3, [r2, #0]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000dc8 	.word	0x20000dc8
 8005474:	20000e30 	.word	0x20000e30

08005478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <xTaskGetSchedulerState+0x34>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005486:	2301      	movs	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	e008      	b.n	800549e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548c:	4b08      	ldr	r3, [pc, #32]	; (80054b0 <xTaskGetSchedulerState+0x38>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005494:	2302      	movs	r3, #2
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	e001      	b.n	800549e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800549e:	687b      	ldr	r3, [r7, #4]
	}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	20000e1c 	.word	0x20000e1c
 80054b0:	20000e38 	.word	0x20000e38

080054b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d05a      	beq.n	8005580 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ca:	4b30      	ldr	r3, [pc, #192]	; (800558c <xTaskPriorityDisinherit+0xd8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d00c      	beq.n	80054ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	b672      	cpsid	i
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	b662      	cpsie	i
 80054e8:	60fb      	str	r3, [r7, #12]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	b672      	cpsid	i
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	b662      	cpsie	i
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	429a      	cmp	r2, r3
 8005524:	d02c      	beq.n	8005580 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d128      	bne.n	8005580 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3304      	adds	r3, #4
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fc04 	bl	8003d40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <xTaskPriorityDisinherit+0xdc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <xTaskPriorityDisinherit+0xac>
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <xTaskPriorityDisinherit+0xdc>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <xTaskPriorityDisinherit+0xe0>)
 800556e:	441a      	add	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fe fb85 	bl	8003c86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005580:	697b      	ldr	r3, [r7, #20]
	}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000093c 	.word	0x2000093c
 8005590:	20000e18 	.word	0x20000e18
 8005594:	20000940 	.word	0x20000940

08005598 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055a2:	4b21      	ldr	r3, [pc, #132]	; (8005628 <prvAddCurrentTaskToDelayedList+0x90>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <prvAddCurrentTaskToDelayedList+0x94>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fbc6 	bl	8003d40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d10a      	bne.n	80055d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c2:	4b1a      	ldr	r3, [pc, #104]	; (800562c <prvAddCurrentTaskToDelayedList+0x94>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4819      	ldr	r0, [pc, #100]	; (8005630 <prvAddCurrentTaskToDelayedList+0x98>)
 80055cc:	f7fe fb5b 	bl	8003c86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055d0:	e026      	b.n	8005620 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <prvAddCurrentTaskToDelayedList+0x94>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d209      	bcs.n	80055fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <prvAddCurrentTaskToDelayedList+0x94>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7fe fb69 	bl	8003cce <vListInsert>
}
 80055fc:	e010      	b.n	8005620 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <prvAddCurrentTaskToDelayedList+0x94>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3304      	adds	r3, #4
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f7fe fb5f 	bl	8003cce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d202      	bcs.n	8005620 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <prvAddCurrentTaskToDelayedList+0xa4>)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000e14 	.word	0x20000e14
 800562c:	2000093c 	.word	0x2000093c
 8005630:	20000dfc 	.word	0x20000dfc
 8005634:	20000dcc 	.word	0x20000dcc
 8005638:	20000dc8 	.word	0x20000dc8
 800563c:	20000e30 	.word	0x20000e30

08005640 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800564a:	f000 fb15 	bl	8005c78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <xTimerCreateTimerTask+0x84>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d021      	beq.n	800569a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800565e:	1d3a      	adds	r2, r7, #4
 8005660:	f107 0108 	add.w	r1, r7, #8
 8005664:	f107 030c 	add.w	r3, r7, #12
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fac5 	bl	8003bf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	9202      	str	r2, [sp, #8]
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2302      	movs	r3, #2
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2300      	movs	r3, #0
 800567e:	460a      	mov	r2, r1
 8005680:	4911      	ldr	r1, [pc, #68]	; (80056c8 <xTimerCreateTimerTask+0x88>)
 8005682:	4812      	ldr	r0, [pc, #72]	; (80056cc <xTimerCreateTimerTask+0x8c>)
 8005684:	f7ff f890 	bl	80047a8 <xTaskCreateStatic>
 8005688:	4603      	mov	r3, r0
 800568a:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <xTimerCreateTimerTask+0x90>)
 800568c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <xTimerCreateTimerTask+0x90>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005696:	2301      	movs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10c      	bne.n	80056ba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	b672      	cpsid	i
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	b662      	cpsie	i
 80056b4:	613b      	str	r3, [r7, #16]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80056ba:	697b      	ldr	r3, [r7, #20]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000e6c 	.word	0x20000e6c
 80056c8:	0800673c 	.word	0x0800673c
 80056cc:	08005811 	.word	0x08005811
 80056d0:	20000e70 	.word	0x20000e70

080056d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <xTimerGenericCommand+0x32>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	b672      	cpsid	i
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	b662      	cpsie	i
 8005700:	623b      	str	r3, [r7, #32]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <xTimerGenericCommand+0x9c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02a      	beq.n	8005764 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b05      	cmp	r3, #5
 800571e:	dc18      	bgt.n	8005752 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005720:	f7ff feaa 	bl	8005478 <xTaskGetSchedulerState>
 8005724:	4603      	mov	r3, r0
 8005726:	2b02      	cmp	r3, #2
 8005728:	d109      	bne.n	800573e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <xTimerGenericCommand+0x9c>)
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f107 0110 	add.w	r1, r7, #16
 8005732:	2300      	movs	r3, #0
 8005734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005736:	f7fe fc3d 	bl	8003fb4 <xQueueGenericSend>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24
 800573c:	e012      	b.n	8005764 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <xTimerGenericCommand+0x9c>)
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f107 0110 	add.w	r1, r7, #16
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	f7fe fc33 	bl	8003fb4 <xQueueGenericSend>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24
 8005750:	e008      	b.n	8005764 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <xTimerGenericCommand+0x9c>)
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	f107 0110 	add.w	r1, r7, #16
 800575a:	2300      	movs	r3, #0
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	f7fe fd2f 	bl	80041c0 <xQueueGenericSendFromISR>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000e6c 	.word	0x20000e6c

08005774 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577e:	4b23      	ldr	r3, [pc, #140]	; (800580c <prvProcessExpiredTimer+0x98>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fad7 	bl	8003d40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d024      	beq.n	80057ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	18d1      	adds	r1, r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	6978      	ldr	r0, [r7, #20]
 80057ae:	f000 f8d3 	bl	8005958 <prvInsertTimerInActiveList>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d021      	beq.n	80057fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2300      	movs	r3, #0
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	2100      	movs	r1, #0
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7ff ff86 	bl	80056d4 <xTimerGenericCommand>
 80057c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d115      	bne.n	80057fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	6978      	ldr	r0, [r7, #20]
 8005802:	4798      	blx	r3
}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000e64 	.word	0x20000e64

08005810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f857 	bl	80058d0 <prvGetNextExpireTime>
 8005822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f803 	bl	8005834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800582e:	f000 f8d5 	bl	80059dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005832:	e7f1      	b.n	8005818 <prvTimerTask+0x8>

08005834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800583e:	f7ff fa1d 	bl	8004c7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f866 	bl	8005918 <prvSampleTimeNow>
 800584c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d130      	bne.n	80058b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <prvProcessTimerOrBlockTask+0x3c>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	429a      	cmp	r2, r3
 8005860:	d806      	bhi.n	8005870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005862:	f7ff fa19 	bl	8004c98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff83 	bl	8005774 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800586e:	e024      	b.n	80058ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <prvProcessTimerOrBlockTask+0x90>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <prvProcessTimerOrBlockTask+0x50>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <prvProcessTimerOrBlockTask+0x52>
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <prvProcessTimerOrBlockTask+0x94>)
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	4619      	mov	r1, r3
 8005896:	f7fe ff53 	bl	8004740 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800589a:	f7ff f9fd 	bl	8004c98 <xTaskResumeAll>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <prvProcessTimerOrBlockTask+0x98>)
 80058a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	f3bf 8f6f 	isb	sy
}
 80058b4:	e001      	b.n	80058ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058b6:	f7ff f9ef 	bl	8004c98 <xTaskResumeAll>
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000e68 	.word	0x20000e68
 80058c8:	20000e6c 	.word	0x20000e6c
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <prvGetNextExpireTime+0x44>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <prvGetNextExpireTime+0x16>
 80058e2:	2201      	movs	r2, #1
 80058e4:	e000      	b.n	80058e8 <prvGetNextExpireTime+0x18>
 80058e6:	2200      	movs	r2, #0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <prvGetNextExpireTime+0x44>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e001      	b.n	8005904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000e64 	.word	0x20000e64

08005918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005920:	f7ff fa5a 	bl	8004dd8 <xTaskGetTickCount>
 8005924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <prvSampleTimeNow+0x3c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d205      	bcs.n	800593c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005930:	f000 f93c 	bl	8005bac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e002      	b.n	8005942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <prvSampleTimeNow+0x3c>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000e74 	.word	0x20000e74

08005958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d812      	bhi.n	80059a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad2      	subs	r2, r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e01b      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <prvInsertTimerInActiveList+0x7c>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe f996 	bl	8003cce <vListInsert>
 80059a2:	e012      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d206      	bcs.n	80059ba <prvInsertTimerInActiveList+0x62>
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d302      	bcc.n	80059ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e007      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <prvInsertTimerInActiveList+0x80>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7fe f982 	bl	8003cce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ca:	697b      	ldr	r3, [r7, #20]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000e68 	.word	0x20000e68
 80059d8:	20000e64 	.word	0x20000e64

080059dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059e2:	e0d0      	b.n	8005b86 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da1a      	bge.n	8005a20 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	3304      	adds	r3, #4
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	b672      	cpsid	i
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	b662      	cpsie	i
 8005a0a:	61fb      	str	r3, [r7, #28]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a16:	6850      	ldr	r0, [r2, #4]
 8005a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1a:	6892      	ldr	r2, [r2, #8]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f2c0 80af 	blt.w	8005b86 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe f981 	bl	8003d40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a3e:	463b      	mov	r3, r7
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff ff69 	bl	8005918 <prvSampleTimeNow>
 8005a46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b09      	cmp	r3, #9
 8005a4c:	f200 809a 	bhi.w	8005b84 <prvProcessReceivedCommands+0x1a8>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <prvProcessReceivedCommands+0x7c>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a81 	.word	0x08005a81
 8005a64:	08005af9 	.word	0x08005af9
 8005a68:	08005b0d 	.word	0x08005b0d
 8005a6c:	08005b5b 	.word	0x08005b5b
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005a81 	.word	0x08005a81
 8005a78:	08005af9 	.word	0x08005af9
 8005a7c:	08005b0d 	.word	0x08005b0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	18d1      	adds	r1, r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa0:	f7ff ff5a 	bl	8005958 <prvInsertTimerInActiveList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d06d      	beq.n	8005b86 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d062      	beq.n	8005b86 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	441a      	add	r2, r3
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2300      	movs	r3, #0
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f7ff fdff 	bl	80056d4 <xTimerGenericCommand>
 8005ad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d153      	bne.n	8005b86 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	b672      	cpsid	i
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	b662      	cpsie	i
 8005af2:	61bb      	str	r3, [r7, #24]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b0a:	e03c      	b.n	8005b86 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	b672      	cpsid	i
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	b662      	cpsie	i
 8005b40:	617b      	str	r3, [r7, #20]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	18d1      	adds	r1, r2, r3
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b54:	f7ff ff00 	bl	8005958 <prvInsertTimerInActiveList>
					break;
 8005b58:	e015      	b.n	8005b86 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f000 fbc5 	bl	80062f8 <vPortFree>
 8005b6e:	e00a      	b.n	8005b86 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b82:	e000      	b.n	8005b86 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8005b84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <prvProcessReceivedCommands+0x1cc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	1d39      	adds	r1, r7, #4
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fbb6 	bl	8004300 <xQueueReceive>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f47f af24 	bne.w	80059e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000e6c 	.word	0x20000e6c

08005bac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bb2:	e04a      	b.n	8005c4a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbe:	4b2c      	ldr	r3, [pc, #176]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe f8b7 	bl	8003d40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d030      	beq.n	8005c4a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d90e      	bls.n	8005c18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe f85c 	bl	8003cce <vListInsert>
 8005c16:	e018      	b.n	8005c4a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	2100      	movs	r1, #0
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fd56 	bl	80056d4 <xTimerGenericCommand>
 8005c28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10c      	bne.n	8005c4a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	b672      	cpsid	i
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	b662      	cpsie	i
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1af      	bne.n	8005bb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <prvSwitchTimerLists+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <prvSwitchTimerLists+0xc4>)
 8005c60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c62:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <prvSwitchTimerLists+0xc8>)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000e64 	.word	0x20000e64
 8005c74:	20000e68 	.word	0x20000e68

08005c78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c7e:	f000 f945 	bl	8005f0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <prvCheckForValidListAndQueue+0x60>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d120      	bne.n	8005ccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c8a:	4814      	ldr	r0, [pc, #80]	; (8005cdc <prvCheckForValidListAndQueue+0x64>)
 8005c8c:	f7fd ffce 	bl	8003c2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c90:	4813      	ldr	r0, [pc, #76]	; (8005ce0 <prvCheckForValidListAndQueue+0x68>)
 8005c92:	f7fd ffcb 	bl	8003c2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <prvCheckForValidListAndQueue+0x6c>)
 8005c98:	4a10      	ldr	r2, [pc, #64]	; (8005cdc <prvCheckForValidListAndQueue+0x64>)
 8005c9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c9c:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <prvCheckForValidListAndQueue+0x70>)
 8005c9e:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <prvCheckForValidListAndQueue+0x68>)
 8005ca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <prvCheckForValidListAndQueue+0x74>)
 8005ca8:	4a11      	ldr	r2, [pc, #68]	; (8005cf0 <prvCheckForValidListAndQueue+0x78>)
 8005caa:	2110      	movs	r1, #16
 8005cac:	200a      	movs	r0, #10
 8005cae:	f7fe f8db 	bl	8003e68 <xQueueGenericCreateStatic>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <prvCheckForValidListAndQueue+0x60>)
 8005cb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cb8:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <prvCheckForValidListAndQueue+0x60>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <prvCheckForValidListAndQueue+0x60>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	490b      	ldr	r1, [pc, #44]	; (8005cf4 <prvCheckForValidListAndQueue+0x7c>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fd10 	bl	80046ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ccc:	f000 f952 	bl	8005f74 <vPortExitCritical>
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000e6c 	.word	0x20000e6c
 8005cdc:	20000e3c 	.word	0x20000e3c
 8005ce0:	20000e50 	.word	0x20000e50
 8005ce4:	20000e64 	.word	0x20000e64
 8005ce8:	20000e68 	.word	0x20000e68
 8005cec:	20000f18 	.word	0x20000f18
 8005cf0:	20000e78 	.word	0x20000e78
 8005cf4:	08006744 	.word	0x08006744

08005cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3b04      	subs	r3, #4
 8005d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d28:	4a0c      	ldr	r2, [pc, #48]	; (8005d5c <pxPortInitialiseStack+0x64>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b14      	subs	r3, #20
 8005d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f06f 0202 	mvn.w	r2, #2
 8005d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3b20      	subs	r3, #32
 8005d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	08005d61 	.word	0x08005d61

08005d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <prvTaskExitError+0x5c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d00c      	beq.n	8005d8e <prvTaskExitError+0x2e>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	b672      	cpsid	i
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	b662      	cpsie	i
 8005d88:	60fb      	str	r3, [r7, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <prvTaskExitError+0x2c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	b672      	cpsid	i
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	b662      	cpsie	i
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005da6:	bf00      	nop
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0fc      	beq.n	8005da8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	2000000c 	.word	0x2000000c

08005dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <pxCurrentTCBConst2>)
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	6808      	ldr	r0, [r1, #0]
 8005dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dca:	f380 8809 	msr	PSP, r0
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f04f 0000 	mov.w	r0, #0
 8005dd6:	f380 8811 	msr	BASEPRI, r0
 8005dda:	4770      	bx	lr
 8005ddc:	f3af 8000 	nop.w

08005de0 <pxCurrentTCBConst2>:
 8005de0:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop

08005de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005de8:	4808      	ldr	r0, [pc, #32]	; (8005e0c <prvPortStartFirstTask+0x24>)
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	6800      	ldr	r0, [r0, #0]
 8005dee:	f380 8808 	msr	MSP, r0
 8005df2:	f04f 0000 	mov.w	r0, #0
 8005df6:	f380 8814 	msr	CONTROL, r0
 8005dfa:	b662      	cpsie	i
 8005dfc:	b661      	cpsie	f
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	df00      	svc	0
 8005e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e0a:	bf00      	nop
 8005e0c:	e000ed08 	.word	0xe000ed08

08005e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e16:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <xPortStartScheduler+0xe4>)
 8005e18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <xPortStartScheduler+0xe8>)
 8005e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <xPortStartScheduler+0xec>)
 8005e40:	2207      	movs	r2, #7
 8005e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e44:	e009      	b.n	8005e5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e46:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <xPortStartScheduler+0xec>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <xPortStartScheduler+0xec>)
 8005e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	d0ef      	beq.n	8005e46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e66:	4b25      	ldr	r3, [pc, #148]	; (8005efc <xPortStartScheduler+0xec>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1c3 0307 	rsb	r3, r3, #7
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d00c      	beq.n	8005e8c <xPortStartScheduler+0x7c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	b672      	cpsid	i
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	b662      	cpsie	i
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <xPortStartScheduler+0xec>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <xPortStartScheduler+0xec>)
 8005e94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e96:	4b19      	ldr	r3, [pc, #100]	; (8005efc <xPortStartScheduler+0xec>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e9e:	4a17      	ldr	r2, [pc, #92]	; (8005efc <xPortStartScheduler+0xec>)
 8005ea0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <xPortStartScheduler+0xf0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <xPortStartScheduler+0xf0>)
 8005eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <xPortStartScheduler+0xf0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <xPortStartScheduler+0xf0>)
 8005ebc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ec0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ec2:	f000 f8dd 	bl	8006080 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <xPortStartScheduler+0xf4>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ecc:	f000 f8fc 	bl	80060c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <xPortStartScheduler+0xf8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <xPortStartScheduler+0xf8>)
 8005ed6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005edc:	f7ff ff84 	bl	8005de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ee0:	f7ff f846 	bl	8004f70 <vTaskSwitchContext>
	prvTaskExitError();
 8005ee4:	f7ff ff3c 	bl	8005d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	e000e400 	.word	0xe000e400
 8005ef8:	20000f68 	.word	0x20000f68
 8005efc:	20000f6c 	.word	0x20000f6c
 8005f00:	e000ed20 	.word	0xe000ed20
 8005f04:	2000000c 	.word	0x2000000c
 8005f08:	e000ef34 	.word	0xe000ef34

08005f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	607b      	str	r3, [r7, #4]
}
 8005f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <vPortEnterCritical+0x60>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <vPortEnterCritical+0x60>)
 8005f32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <vPortEnterCritical+0x60>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d111      	bne.n	8005f60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <vPortEnterCritical+0x64>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00c      	beq.n	8005f60 <vPortEnterCritical+0x54>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	b672      	cpsid	i
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	b662      	cpsie	i
 8005f5a:	603b      	str	r3, [r7, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <vPortEnterCritical+0x52>
	}
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	2000000c 	.word	0x2000000c
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f7a:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <vPortExitCritical+0x54>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10c      	bne.n	8005f9c <vPortExitCritical+0x28>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	b672      	cpsid	i
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	b662      	cpsie	i
 8005f96:	607b      	str	r3, [r7, #4]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vPortExitCritical+0x54>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <vPortExitCritical+0x54>)
 8005fa4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <vPortExitCritical+0x54>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d105      	bne.n	8005fba <vPortExitCritical+0x46>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	f383 8811 	msr	BASEPRI, r3
}
 8005fb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	2000000c 	.word	0x2000000c
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fd0:	f3ef 8009 	mrs	r0, PSP
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <pxCurrentTCBConst>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f01e 0f10 	tst.w	lr, #16
 8005fe0:	bf08      	it	eq
 8005fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ff4:	b672      	cpsid	i
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	b662      	cpsie	i
 8006004:	f7fe ffb4 	bl	8004f70 <vTaskSwitchContext>
 8006008:	f04f 0000 	mov.w	r0, #0
 800600c:	f380 8811 	msr	BASEPRI, r0
 8006010:	bc09      	pop	{r0, r3}
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f01e 0f10 	tst.w	lr, #16
 800601e:	bf08      	it	eq
 8006020:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006024:	f380 8809 	msr	PSP, r0
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop

08006030 <pxCurrentTCBConst>:
 8006030:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	b672      	cpsid	i
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	b662      	cpsie	i
 8006052:	607b      	str	r3, [r7, #4]
}
 8006054:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006056:	f7fe fecf 	bl	8004df8 <xTaskIncrementTick>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <SysTick_Handler+0x44>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	2300      	movs	r3, #0
 800606a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	f383 8811 	msr	BASEPRI, r3
}
 8006072:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortSetupTimerInterrupt+0x34>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <vPortSetupTimerInterrupt+0x38>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <vPortSetupTimerInterrupt+0x3c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0a      	ldr	r2, [pc, #40]	; (80060c0 <vPortSetupTimerInterrupt+0x40>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	099b      	lsrs	r3, r3, #6
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortSetupTimerInterrupt+0x44>)
 800609e:	3b01      	subs	r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060a2:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <vPortSetupTimerInterrupt+0x34>)
 80060a4:	2207      	movs	r2, #7
 80060a6:	601a      	str	r2, [r3, #0]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	e000e010 	.word	0xe000e010
 80060b8:	e000e018 	.word	0xe000e018
 80060bc:	20000000 	.word	0x20000000
 80060c0:	10624dd3 	.word	0x10624dd3
 80060c4:	e000e014 	.word	0xe000e014

080060c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060d8 <vPortEnableVFP+0x10>
 80060cc:	6801      	ldr	r1, [r0, #0]
 80060ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060d2:	6001      	str	r1, [r0, #0]
 80060d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060d6:	bf00      	nop
 80060d8:	e000ed88 	.word	0xe000ed88

080060dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060e2:	f3ef 8305 	mrs	r3, IPSR
 80060e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d916      	bls.n	800611c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ee:	4a19      	ldr	r2, [pc, #100]	; (8006154 <vPortValidateInterruptPriority+0x78>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <vPortValidateInterruptPriority+0x7c>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	7afa      	ldrb	r2, [r7, #11]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d20c      	bcs.n	800611c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	b672      	cpsid	i
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	b662      	cpsie	i
 8006116:	607b      	str	r3, [r7, #4]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800611c:	4b0f      	ldr	r3, [pc, #60]	; (800615c <vPortValidateInterruptPriority+0x80>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortValidateInterruptPriority+0x84>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d90c      	bls.n	8006146 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	b672      	cpsid	i
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	b662      	cpsie	i
 8006140:	603b      	str	r3, [r7, #0]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <vPortValidateInterruptPriority+0x68>
	}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	e000e3f0 	.word	0xe000e3f0
 8006158:	20000f68 	.word	0x20000f68
 800615c:	e000ed0c 	.word	0xe000ed0c
 8006160:	20000f6c 	.word	0x20000f6c

08006164 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006170:	f7fe fd84 	bl	8004c7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006174:	4b5b      	ldr	r3, [pc, #364]	; (80062e4 <pvPortMalloc+0x180>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800617c:	f000 f91a 	bl	80063b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006180:	4b59      	ldr	r3, [pc, #356]	; (80062e8 <pvPortMalloc+0x184>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 8092 	bne.w	80062b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01f      	beq.n	80061d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006194:	2208      	movs	r2, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4413      	add	r3, r2
 800619a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d016      	beq.n	80061d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f023 0307 	bic.w	r3, r3, #7
 80061ac:	3308      	adds	r3, #8
 80061ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <pvPortMalloc+0x70>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	b672      	cpsid	i
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	b662      	cpsie	i
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06b      	beq.n	80062b2 <pvPortMalloc+0x14e>
 80061da:	4b44      	ldr	r3, [pc, #272]	; (80062ec <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d866      	bhi.n	80062b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e4:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <pvPortMalloc+0x18c>)
 80061e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e8:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <pvPortMalloc+0x18c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ee:	e004      	b.n	80061fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <pvPortMalloc+0xa8>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <pvPortMalloc+0x180>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	d04d      	beq.n	80062b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	4413      	add	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	2308      	movs	r3, #8
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d921      	bls.n	800627c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <pvPortMalloc+0x100>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	b672      	cpsid	i
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	b662      	cpsie	i
 800625e:	613b      	str	r3, [r7, #16]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006276:	69b8      	ldr	r0, [r7, #24]
 8006278:	f000 f8fe 	bl	8006478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800627c:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <pvPortMalloc+0x188>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a19      	ldr	r2, [pc, #100]	; (80062ec <pvPortMalloc+0x188>)
 8006288:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <pvPortMalloc+0x188>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <pvPortMalloc+0x190>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d203      	bcs.n	800629e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006296:	4b15      	ldr	r3, [pc, #84]	; (80062ec <pvPortMalloc+0x188>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <pvPortMalloc+0x190>)
 800629c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <pvPortMalloc+0x184>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b2:	f7fe fcf1 	bl	8004c98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <pvPortMalloc+0x176>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	b672      	cpsid	i
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	b662      	cpsie	i
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <pvPortMalloc+0x174>
	return pvReturn;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	; 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20004b78 	.word	0x20004b78
 80062e8:	20004b84 	.word	0x20004b84
 80062ec:	20004b7c 	.word	0x20004b7c
 80062f0:	20004b70 	.word	0x20004b70
 80062f4:	20004b80 	.word	0x20004b80

080062f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d04c      	beq.n	80063a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800630a:	2308      	movs	r3, #8
 800630c:	425b      	negs	r3, r3
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	4b23      	ldr	r3, [pc, #140]	; (80063ac <vPortFree+0xb4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <vPortFree+0x48>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	b672      	cpsid	i
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	b662      	cpsie	i
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00c      	beq.n	8006362 <vPortFree+0x6a>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	b672      	cpsid	i
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	b662      	cpsie	i
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <vPortFree+0xb4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <vPortFree+0xb4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe fc78 	bl	8004c7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <vPortFree+0xb8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a06      	ldr	r2, [pc, #24]	; (80063b0 <vPortFree+0xb8>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f86c 	bl	8006478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063a0:	f7fe fc7a 	bl	8004c98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20004b84 	.word	0x20004b84
 80063b0:	20004b7c 	.word	0x20004b7c

080063b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063c0:	4b27      	ldr	r3, [pc, #156]	; (8006460 <prvHeapInit+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00c      	beq.n	80063e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3307      	adds	r3, #7
 80063d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <prvHeapInit+0xac>)
 80063e4:	4413      	add	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <prvHeapInit+0xb0>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063f2:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <prvHeapInit+0xb0>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006400:	2208      	movs	r2, #8
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a15      	ldr	r2, [pc, #84]	; (8006468 <prvHeapInit+0xb4>)
 8006414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006416:	4b14      	ldr	r3, [pc, #80]	; (8006468 <prvHeapInit+0xb4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvHeapInit+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvHeapInit+0xb4>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <prvHeapInit+0xb8>)
 8006442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <prvHeapInit+0xbc>)
 800644a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <prvHeapInit+0xc0>)
 800644e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	20000f70 	.word	0x20000f70
 8006464:	20004b70 	.word	0x20004b70
 8006468:	20004b78 	.word	0x20004b78
 800646c:	20004b80 	.word	0x20004b80
 8006470:	20004b7c 	.word	0x20004b7c
 8006474:	20004b84 	.word	0x20004b84

08006478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006480:	4b28      	ldr	r3, [pc, #160]	; (8006524 <prvInsertBlockIntoFreeList+0xac>)
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e002      	b.n	800648c <prvInsertBlockIntoFreeList+0x14>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d8f7      	bhi.n	8006486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d108      	bne.n	80064ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	441a      	add	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d118      	bne.n	8006500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <prvInsertBlockIntoFreeList+0xb0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d00d      	beq.n	80064f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	441a      	add	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e008      	b.n	8006508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <prvInsertBlockIntoFreeList+0xb0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e003      	b.n	8006508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d002      	beq.n	8006516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20004b70 	.word	0x20004b70
 8006528:	20004b78 	.word	0x20004b78

0800652c <memset>:
 800652c:	4402      	add	r2, r0
 800652e:	4603      	mov	r3, r0
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <memset+0xa>
 8006534:	4770      	bx	lr
 8006536:	f803 1b01 	strb.w	r1, [r3], #1
 800653a:	e7f9      	b.n	8006530 <memset+0x4>

0800653c <_reclaim_reent>:
 800653c:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <_reclaim_reent+0xa8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4283      	cmp	r3, r0
 8006542:	b570      	push	{r4, r5, r6, lr}
 8006544:	4604      	mov	r4, r0
 8006546:	d04b      	beq.n	80065e0 <_reclaim_reent+0xa4>
 8006548:	69c3      	ldr	r3, [r0, #28]
 800654a:	b143      	cbz	r3, 800655e <_reclaim_reent+0x22>
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d144      	bne.n	80065dc <_reclaim_reent+0xa0>
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	b111      	cbz	r1, 800655e <_reclaim_reent+0x22>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 f879 	bl	8006650 <_free_r>
 800655e:	6961      	ldr	r1, [r4, #20]
 8006560:	b111      	cbz	r1, 8006568 <_reclaim_reent+0x2c>
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f874 	bl	8006650 <_free_r>
 8006568:	69e1      	ldr	r1, [r4, #28]
 800656a:	b111      	cbz	r1, 8006572 <_reclaim_reent+0x36>
 800656c:	4620      	mov	r0, r4
 800656e:	f000 f86f 	bl	8006650 <_free_r>
 8006572:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006574:	b111      	cbz	r1, 800657c <_reclaim_reent+0x40>
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f86a 	bl	8006650 <_free_r>
 800657c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800657e:	b111      	cbz	r1, 8006586 <_reclaim_reent+0x4a>
 8006580:	4620      	mov	r0, r4
 8006582:	f000 f865 	bl	8006650 <_free_r>
 8006586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006588:	b111      	cbz	r1, 8006590 <_reclaim_reent+0x54>
 800658a:	4620      	mov	r0, r4
 800658c:	f000 f860 	bl	8006650 <_free_r>
 8006590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006592:	b111      	cbz	r1, 800659a <_reclaim_reent+0x5e>
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f85b 	bl	8006650 <_free_r>
 800659a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800659c:	b111      	cbz	r1, 80065a4 <_reclaim_reent+0x68>
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 f856 	bl	8006650 <_free_r>
 80065a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80065a6:	b111      	cbz	r1, 80065ae <_reclaim_reent+0x72>
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 f851 	bl	8006650 <_free_r>
 80065ae:	6a23      	ldr	r3, [r4, #32]
 80065b0:	b1b3      	cbz	r3, 80065e0 <_reclaim_reent+0xa4>
 80065b2:	4620      	mov	r0, r4
 80065b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065b8:	4718      	bx	r3
 80065ba:	5949      	ldr	r1, [r1, r5]
 80065bc:	b941      	cbnz	r1, 80065d0 <_reclaim_reent+0x94>
 80065be:	3504      	adds	r5, #4
 80065c0:	69e3      	ldr	r3, [r4, #28]
 80065c2:	2d80      	cmp	r5, #128	; 0x80
 80065c4:	68d9      	ldr	r1, [r3, #12]
 80065c6:	d1f8      	bne.n	80065ba <_reclaim_reent+0x7e>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 f841 	bl	8006650 <_free_r>
 80065ce:	e7c0      	b.n	8006552 <_reclaim_reent+0x16>
 80065d0:	680e      	ldr	r6, [r1, #0]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f83c 	bl	8006650 <_free_r>
 80065d8:	4631      	mov	r1, r6
 80065da:	e7ef      	b.n	80065bc <_reclaim_reent+0x80>
 80065dc:	2500      	movs	r5, #0
 80065de:	e7ef      	b.n	80065c0 <_reclaim_reent+0x84>
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	bf00      	nop
 80065e4:	2000005c 	.word	0x2000005c

080065e8 <__libc_init_array>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4d0d      	ldr	r5, [pc, #52]	; (8006620 <__libc_init_array+0x38>)
 80065ec:	4c0d      	ldr	r4, [pc, #52]	; (8006624 <__libc_init_array+0x3c>)
 80065ee:	1b64      	subs	r4, r4, r5
 80065f0:	10a4      	asrs	r4, r4, #2
 80065f2:	2600      	movs	r6, #0
 80065f4:	42a6      	cmp	r6, r4
 80065f6:	d109      	bne.n	800660c <__libc_init_array+0x24>
 80065f8:	4d0b      	ldr	r5, [pc, #44]	; (8006628 <__libc_init_array+0x40>)
 80065fa:	4c0c      	ldr	r4, [pc, #48]	; (800662c <__libc_init_array+0x44>)
 80065fc:	f000 f880 	bl	8006700 <_init>
 8006600:	1b64      	subs	r4, r4, r5
 8006602:	10a4      	asrs	r4, r4, #2
 8006604:	2600      	movs	r6, #0
 8006606:	42a6      	cmp	r6, r4
 8006608:	d105      	bne.n	8006616 <__libc_init_array+0x2e>
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006610:	4798      	blx	r3
 8006612:	3601      	adds	r6, #1
 8006614:	e7ee      	b.n	80065f4 <__libc_init_array+0xc>
 8006616:	f855 3b04 	ldr.w	r3, [r5], #4
 800661a:	4798      	blx	r3
 800661c:	3601      	adds	r6, #1
 800661e:	e7f2      	b.n	8006606 <__libc_init_array+0x1e>
 8006620:	080067bc 	.word	0x080067bc
 8006624:	080067bc 	.word	0x080067bc
 8006628:	080067bc 	.word	0x080067bc
 800662c:	080067c0 	.word	0x080067c0

08006630 <__retarget_lock_acquire_recursive>:
 8006630:	4770      	bx	lr

08006632 <__retarget_lock_release_recursive>:
 8006632:	4770      	bx	lr

08006634 <memcpy>:
 8006634:	440a      	add	r2, r1
 8006636:	4291      	cmp	r1, r2
 8006638:	f100 33ff 	add.w	r3, r0, #4294967295
 800663c:	d100      	bne.n	8006640 <memcpy+0xc>
 800663e:	4770      	bx	lr
 8006640:	b510      	push	{r4, lr}
 8006642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800664a:	4291      	cmp	r1, r2
 800664c:	d1f9      	bne.n	8006642 <memcpy+0xe>
 800664e:	bd10      	pop	{r4, pc}

08006650 <_free_r>:
 8006650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006652:	2900      	cmp	r1, #0
 8006654:	d044      	beq.n	80066e0 <_free_r+0x90>
 8006656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665a:	9001      	str	r0, [sp, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f1a1 0404 	sub.w	r4, r1, #4
 8006662:	bfb8      	it	lt
 8006664:	18e4      	addlt	r4, r4, r3
 8006666:	f000 f83f 	bl	80066e8 <__malloc_lock>
 800666a:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <_free_r+0x94>)
 800666c:	9801      	ldr	r0, [sp, #4]
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	b933      	cbnz	r3, 8006680 <_free_r+0x30>
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	b003      	add	sp, #12
 8006678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800667c:	f000 b83a 	b.w	80066f4 <__malloc_unlock>
 8006680:	42a3      	cmp	r3, r4
 8006682:	d908      	bls.n	8006696 <_free_r+0x46>
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	1961      	adds	r1, r4, r5
 8006688:	428b      	cmp	r3, r1
 800668a:	bf01      	itttt	eq
 800668c:	6819      	ldreq	r1, [r3, #0]
 800668e:	685b      	ldreq	r3, [r3, #4]
 8006690:	1949      	addeq	r1, r1, r5
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	e7ed      	b.n	8006672 <_free_r+0x22>
 8006696:	461a      	mov	r2, r3
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b10b      	cbz	r3, 80066a0 <_free_r+0x50>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d9fa      	bls.n	8006696 <_free_r+0x46>
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	1855      	adds	r5, r2, r1
 80066a4:	42a5      	cmp	r5, r4
 80066a6:	d10b      	bne.n	80066c0 <_free_r+0x70>
 80066a8:	6824      	ldr	r4, [r4, #0]
 80066aa:	4421      	add	r1, r4
 80066ac:	1854      	adds	r4, r2, r1
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	d1e0      	bne.n	8006676 <_free_r+0x26>
 80066b4:	681c      	ldr	r4, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	440c      	add	r4, r1
 80066bc:	6014      	str	r4, [r2, #0]
 80066be:	e7da      	b.n	8006676 <_free_r+0x26>
 80066c0:	d902      	bls.n	80066c8 <_free_r+0x78>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	e7d6      	b.n	8006676 <_free_r+0x26>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf04      	itt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	bf04      	itt	eq
 80066d8:	1949      	addeq	r1, r1, r5
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	6054      	str	r4, [r2, #4]
 80066de:	e7ca      	b.n	8006676 <_free_r+0x26>
 80066e0:	b003      	add	sp, #12
 80066e2:	bd30      	pop	{r4, r5, pc}
 80066e4:	20004cc4 	.word	0x20004cc4

080066e8 <__malloc_lock>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__malloc_lock+0x8>)
 80066ea:	f7ff bfa1 	b.w	8006630 <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	20004cc0 	.word	0x20004cc0

080066f4 <__malloc_unlock>:
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <__malloc_unlock+0x8>)
 80066f6:	f7ff bf9c 	b.w	8006632 <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	20004cc0 	.word	0x20004cc0

08006700 <_init>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr

0800670c <_fini>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr
