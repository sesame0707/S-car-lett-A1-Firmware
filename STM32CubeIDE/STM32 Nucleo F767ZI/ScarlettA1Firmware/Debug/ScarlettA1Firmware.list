
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001954  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d704  0800d704  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d70c  0800d70c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d70c  0800d70c  0001d70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005224  20000098  0800d7ac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052bc  0800d7ac  000252bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY
 13 .debug_info   000270ce  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000598c  00000000  00000000  000471d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed8  00000000  00000000  0004cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017a9  00000000  00000000  0004ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dba7  00000000  00000000  000501e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028e9a  00000000  00000000  0007dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e724  00000000  00000000  000a6c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000864c  00000000  00000000  001b5350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bd99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000098 	.word	0x20000098
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bd98 	.word	0x0800bd98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000009c 	.word	0x2000009c
 800023c:	0800bd98 	.word	0x0800bd98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	2b05      	cmp	r3, #5
 80005ee:	d84b      	bhi.n	8000688 <setStripesEffect+0xac>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <setStripesEffect+0x1c>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000611 	.word	0x08000611
 80005fc:	08000625 	.word	0x08000625
 8000600:	08000639 	.word	0x08000639
 8000604:	0800064d 	.word	0x0800064d
 8000608:	08000661 	.word	0x08000661
 800060c:	08000675 	.word	0x08000675
	case 1:
		desiredStripesColor->red = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	709a      	strb	r2, [r3, #2]
		break;
 8000622:	e031      	b.n	8000688 <setStripesEffect+0xac>
	case 2:
		desiredStripesColor->red = 0x40;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2220      	movs	r2, #32
 800062e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	709a      	strb	r2, [r3, #2]
		break;
 8000636:	e027      	b.n	8000688 <setStripesEffect+0xac>
	case 3:
		desiredStripesColor->red = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2240      	movs	r2, #64	; 0x40
 8000648:	709a      	strb	r2, [r3, #2]
		break;
 800064a:	e01d      	b.n	8000688 <setStripesEffect+0xac>
	case 4:
		desiredStripesColor->red = 0x00;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2240      	movs	r2, #64	; 0x40
 800065c:	709a      	strb	r2, [r3, #2]
		break;
 800065e:	e013      	b.n	8000688 <setStripesEffect+0xac>
	case 5:
		desiredStripesColor->red = 0x00;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	709a      	strb	r2, [r3, #2]
		break;
 8000672:	e009      	b.n	8000688 <setStripesEffect+0xac>
	case 6:
		desiredStripesColor->red = 0x40;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	2240      	movs	r2, #64	; 0x40
 8000678:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	709a      	strb	r2, [r3, #2]
		break;
 8000686:	bf00      	nop
	}
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_DAC_Init+0x4c>)
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_DAC_Init+0x50>)
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_DAC_Init+0x4c>)
 80006aa:	f002 f89f 	bl	80027ec <HAL_DAC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006b4:	f000 fe6c 	bl	8001390 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_DAC_Init+0x4c>)
 80006c8:	f002 f916 	bl	80028f8 <HAL_DAC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006d2:	f000 fe5d 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000bc 	.word	0x200000bc
 80006e4:	40007400 	.word	0x40007400

080006e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_DAC_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12b      	bne.n	8000762 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_DAC_MspInit+0x88>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <HAL_DAC_MspInit+0x88>)
 8000710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_DAC_MspInit+0x88>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_DAC_MspInit+0x88>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <HAL_DAC_MspInit+0x88>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_DAC_MspInit+0x88>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 800073a:	2310      	movs	r3, #16
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <HAL_DAC_MspInit+0x8c>)
 800074e:	f002 fd37 	bl	80031c0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	2036      	movs	r0, #54	; 0x36
 8000758:	f002 f81e 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800075c:	2036      	movs	r0, #54	; 0x36
 800075e:	f002 f837 	bl	80027d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40007400 	.word	0x40007400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x38>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x38>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x38>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2105      	movs	r1, #5
 800079a:	203b      	movs	r0, #59	; 0x3b
 800079c:	f001 fffc 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007a0:	203b      	movs	r0, #59	; 0x3b
 80007a2:	f002 f815 	bl	80027d0 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80007b8:	4a38      	ldr	r2, [pc, #224]	; (800089c <MX_FREERTOS_Init+0xe8>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4838      	ldr	r0, [pc, #224]	; (80008a0 <MX_FREERTOS_Init+0xec>)
 80007be:	f007 fc4b 	bl	8008058 <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <MX_FREERTOS_Init+0xf0>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 80007c8:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <MX_FREERTOS_Init+0xf4>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <MX_FREERTOS_Init+0xf8>)
 80007ce:	f007 fc43 	bl	8008058 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <MX_FREERTOS_Init+0xfc>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 80007d8:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <MX_FREERTOS_Init+0x100>)
 80007da:	2100      	movs	r1, #0
 80007dc:	4836      	ldr	r0, [pc, #216]	; (80008b8 <MX_FREERTOS_Init+0x104>)
 80007de:	f007 fc3b 	bl	8008058 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a35      	ldr	r2, [pc, #212]	; (80008bc <MX_FREERTOS_Init+0x108>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 80007e8:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <MX_FREERTOS_Init+0x10c>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <MX_FREERTOS_Init+0x110>)
 80007ee:	f007 fc33 	bl	8008058 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a34      	ldr	r2, [pc, #208]	; (80008c8 <MX_FREERTOS_Init+0x114>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 80007f8:	4a34      	ldr	r2, [pc, #208]	; (80008cc <MX_FREERTOS_Init+0x118>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <MX_FREERTOS_Init+0x11c>)
 80007fe:	f007 fc2b 	bl	8008058 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a33      	ldr	r2, [pc, #204]	; (80008d4 <MX_FREERTOS_Init+0x120>)
 8000806:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000808:	4a33      	ldr	r2, [pc, #204]	; (80008d8 <MX_FREERTOS_Init+0x124>)
 800080a:	2100      	movs	r1, #0
 800080c:	4833      	ldr	r0, [pc, #204]	; (80008dc <MX_FREERTOS_Init+0x128>)
 800080e:	f007 fc23 	bl	8008058 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <MX_FREERTOS_Init+0x12c>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <MX_FREERTOS_Init+0x130>)
 800081a:	2100      	movs	r1, #0
 800081c:	4832      	ldr	r0, [pc, #200]	; (80008e8 <MX_FREERTOS_Init+0x134>)
 800081e:	f007 fc1b 	bl	8008058 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a31      	ldr	r2, [pc, #196]	; (80008ec <MX_FREERTOS_Init+0x138>)
 8000826:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000828:	4a31      	ldr	r2, [pc, #196]	; (80008f0 <MX_FREERTOS_Init+0x13c>)
 800082a:	2100      	movs	r1, #0
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <MX_FREERTOS_Init+0x140>)
 800082e:	f007 fc13 	bl	8008058 <osThreadNew>
 8000832:	4603      	mov	r3, r0
 8000834:	4a30      	ldr	r2, [pc, #192]	; (80008f8 <MX_FREERTOS_Init+0x144>)
 8000836:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000838:	4a30      	ldr	r2, [pc, #192]	; (80008fc <MX_FREERTOS_Init+0x148>)
 800083a:	2100      	movs	r1, #0
 800083c:	4830      	ldr	r0, [pc, #192]	; (8000900 <MX_FREERTOS_Init+0x14c>)
 800083e:	f007 fc0b 	bl	8008058 <osThreadNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <MX_FREERTOS_Init+0x150>)
 8000846:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000848:	4a2f      	ldr	r2, [pc, #188]	; (8000908 <MX_FREERTOS_Init+0x154>)
 800084a:	2100      	movs	r1, #0
 800084c:	482f      	ldr	r0, [pc, #188]	; (800090c <MX_FREERTOS_Init+0x158>)
 800084e:	f007 fc03 	bl	8008058 <osThreadNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_FREERTOS_Init+0x15c>)
 8000856:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <MX_FREERTOS_Init+0x160>)
 800085a:	2100      	movs	r1, #0
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_FREERTOS_Init+0x164>)
 800085e:	f007 fbfb 	bl	8008058 <osThreadNew>
 8000862:	4603      	mov	r3, r0
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <MX_FREERTOS_Init+0x168>)
 8000866:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000868:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <MX_FREERTOS_Init+0x16c>)
 800086a:	2100      	movs	r1, #0
 800086c:	482d      	ldr	r0, [pc, #180]	; (8000924 <MX_FREERTOS_Init+0x170>)
 800086e:	f007 fbf3 	bl	8008058 <osThreadNew>
 8000872:	4603      	mov	r3, r0
 8000874:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <MX_FREERTOS_Init+0x174>)
 8000876:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_FREERTOS_Init+0x178>)
 800087a:	2100      	movs	r1, #0
 800087c:	482c      	ldr	r0, [pc, #176]	; (8000930 <MX_FREERTOS_Init+0x17c>)
 800087e:	f007 fbeb 	bl	8008058 <osThreadNew>
 8000882:	4603      	mov	r3, r0
 8000884:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <MX_FREERTOS_Init+0x180>)
 8000886:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <MX_FREERTOS_Init+0x184>)
 800088a:	2100      	movs	r1, #0
 800088c:	482b      	ldr	r0, [pc, #172]	; (800093c <MX_FREERTOS_Init+0x188>)
 800088e:	f007 fbe3 	bl	8008058 <osThreadNew>
 8000892:	4603      	mov	r3, r0
 8000894:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <MX_FREERTOS_Init+0x18c>)
 8000896:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	0800bff0 	.word	0x0800bff0
 80008a0:	08000945 	.word	0x08000945
 80008a4:	200000d0 	.word	0x200000d0
 80008a8:	0800c014 	.word	0x0800c014
 80008ac:	080009c1 	.word	0x080009c1
 80008b0:	200000d4 	.word	0x200000d4
 80008b4:	0800c038 	.word	0x0800c038
 80008b8:	08000add 	.word	0x08000add
 80008bc:	200000d8 	.word	0x200000d8
 80008c0:	0800c05c 	.word	0x0800c05c
 80008c4:	08000aed 	.word	0x08000aed
 80008c8:	200000dc 	.word	0x200000dc
 80008cc:	0800c080 	.word	0x0800c080
 80008d0:	08000b0d 	.word	0x08000b0d
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	0800c0a4 	.word	0x0800c0a4
 80008dc:	08000d3d 	.word	0x08000d3d
 80008e0:	200000e4 	.word	0x200000e4
 80008e4:	0800c0c8 	.word	0x0800c0c8
 80008e8:	08000d75 	.word	0x08000d75
 80008ec:	200000e8 	.word	0x200000e8
 80008f0:	0800c0ec 	.word	0x0800c0ec
 80008f4:	08000dad 	.word	0x08000dad
 80008f8:	200000ec 	.word	0x200000ec
 80008fc:	0800c110 	.word	0x0800c110
 8000900:	08000dbd 	.word	0x08000dbd
 8000904:	200000f0 	.word	0x200000f0
 8000908:	0800c134 	.word	0x0800c134
 800090c:	08000dcd 	.word	0x08000dcd
 8000910:	200000f4 	.word	0x200000f4
 8000914:	0800c158 	.word	0x0800c158
 8000918:	08000ddd 	.word	0x08000ddd
 800091c:	200000f8 	.word	0x200000f8
 8000920:	0800c17c 	.word	0x0800c17c
 8000924:	08000e0d 	.word	0x08000e0d
 8000928:	200000fc 	.word	0x200000fc
 800092c:	0800c1a0 	.word	0x0800c1a0
 8000930:	08000e1d 	.word	0x08000e1d
 8000934:	20000100 	.word	0x20000100
 8000938:	0800c1c4 	.word	0x0800c1c4
 800093c:	08000e2d 	.word	0x08000e2d
 8000940:	20000104 	.word	0x20000104

08000944 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 800094c:	4917      	ldr	r1, [pc, #92]	; (80009ac <StartOLEDTask+0x68>)
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <StartOLEDTask+0x6c>)
 8000950:	f00a fb99 	bl	800b086 <strcat>

	// Initiate display
	ssd1306_Init();
 8000954:	f000 fe2e 	bl	80015b4 <ssd1306_Init>
	uint8_t y = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fe93 	bl	8001688 <ssd1306_Fill>

  /* Infinite loop */
  for(;;)
  {
	  // Set header
	  ssd1306_SetCursor(2, y);
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4619      	mov	r1, r3
 8000966:	2002      	movs	r0, #2
 8000968:	f000 ffd0 	bl	800190c <ssd1306_SetCursor>
	  ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <StartOLEDTask+0x70>)
 800096e:	2301      	movs	r3, #1
 8000970:	ca06      	ldmia	r2, {r1, r2}
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <StartOLEDTask+0x74>)
 8000974:	f000 ffa4 	bl	80018c0 <ssd1306_WriteString>
	  y += 30;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	331e      	adds	r3, #30
 800097c:	73fb      	strb	r3, [r7, #15]

	  // Set body
	  ssd1306_SetCursor(2, y);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4619      	mov	r1, r3
 8000982:	2002      	movs	r0, #2
 8000984:	f000 ffc2 	bl	800190c <ssd1306_SetCursor>
	  ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <StartOLEDTask+0x78>)
 800098a:	2301      	movs	r3, #1
 800098c:	ca06      	ldmia	r2, {r1, r2}
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <StartOLEDTask+0x6c>)
 8000990:	f000 ff96 	bl	80018c0 <ssd1306_WriteString>
	  y += 36;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	3324      	adds	r3, #36	; 0x24
 8000998:	73fb      	strb	r3, [r7, #15]

	  ssd1306_UpdateScreen();
 800099a:	f000 fe8d 	bl	80016b8 <ssd1306_UpdateScreen>
	  y = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f008 fc14 	bl	80091d0 <vTaskSuspend>
	  ssd1306_SetCursor(2, y);
 80009a8:	e7db      	b.n	8000962 <StartOLEDTask+0x1e>
 80009aa:	bf00      	nop
 80009ac:	0800bfec 	.word	0x0800bfec
 80009b0:	20000010 	.word	0x20000010
 80009b4:	2000001c 	.word	0x2000001c
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000024 	.word	0x20000024

080009c0 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f008 fc01 	bl	80091d0 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <StartDispatcherTask+0xe8>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	2b0d      	cmp	r3, #13
 80009d6:	d861      	bhi.n	8000a9c <StartDispatcherTask+0xdc>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <StartDispatcherTask+0x20>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a19 	.word	0x08000a19
 80009e4:	08000a25 	.word	0x08000a25
 80009e8:	08000a31 	.word	0x08000a31
 80009ec:	08000a3d 	.word	0x08000a3d
 80009f0:	08000a49 	.word	0x08000a49
 80009f4:	08000a55 	.word	0x08000a55
 80009f8:	08000a61 	.word	0x08000a61
 80009fc:	08000a9d 	.word	0x08000a9d
 8000a00:	08000a9d 	.word	0x08000a9d
 8000a04:	08000a9d 	.word	0x08000a9d
 8000a08:	08000a6d 	.word	0x08000a6d
 8000a0c:	08000a79 	.word	0x08000a79
 8000a10:	08000a85 	.word	0x08000a85
 8000a14:	08000a91 	.word	0x08000a91
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <StartDispatcherTask+0xec>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fc83 	bl	8009328 <vTaskResume>
			break;
 8000a22:	e040      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <StartDispatcherTask+0xf0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f008 fc7d 	bl	8009328 <vTaskResume>
			break;
 8000a2e:	e03a      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <StartDispatcherTask+0xf4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f008 fc77 	bl	8009328 <vTaskResume>
			break;
 8000a3a:	e034      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <StartDispatcherTask+0xf8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fc71 	bl	8009328 <vTaskResume>
			break;
 8000a46:	e02e      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <StartDispatcherTask+0xfc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f008 fc6b 	bl	8009328 <vTaskResume>
			break;
 8000a52:	e028      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <StartDispatcherTask+0x100>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 fc65 	bl	8009328 <vTaskResume>
			break;
 8000a5e:	e022      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <StartDispatcherTask+0x104>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 fc5f 	bl	8009328 <vTaskResume>
			break;
 8000a6a:	e01c      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <StartDispatcherTask+0x108>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 fc59 	bl	8009328 <vTaskResume>
			break;
 8000a76:	e016      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <StartDispatcherTask+0x10c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fc53 	bl	8009328 <vTaskResume>
			break;
 8000a82:	e010      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <StartDispatcherTask+0x110>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f008 fc4d 	bl	8009328 <vTaskResume>
			break;
 8000a8e:	e00a      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <StartDispatcherTask+0x114>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 fc47 	bl	8009328 <vTaskResume>
			break;
 8000a9a:	e004      	b.n	8000aa6 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <StartDispatcherTask+0x118>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f008 fc41 	bl	8009328 <vTaskResume>
	  vTaskSuspend(NULL);
 8000aa6:	e78f      	b.n	80009c8 <StartDispatcherTask+0x8>
 8000aa8:	200000b4 	.word	0x200000b4
 8000aac:	200000d8 	.word	0x200000d8
 8000ab0:	200000dc 	.word	0x200000dc
 8000ab4:	200000e0 	.word	0x200000e0
 8000ab8:	200000e4 	.word	0x200000e4
 8000abc:	200000e8 	.word	0x200000e8
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	200000f0 	.word	0x200000f0
 8000ac8:	200000f4 	.word	0x200000f4
 8000acc:	200000f8 	.word	0x200000f8
 8000ad0:	200000fc 	.word	0x200000fc
 8000ad4:	20000100 	.word	0x20000100
 8000ad8:	20000104 	.word	0x20000104

08000adc <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f008 fb73 	bl	80091d0 <vTaskSuspend>
 8000aea:	e7fb      	b.n	8000ae4 <StartStopTask+0x8>

08000aec <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f008 fb6b 	bl	80091d0 <vTaskSuspend>
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8000afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afe:	4802      	ldr	r0, [pc, #8]	; (8000b08 <StartDrivingLightsTask+0x1c>)
 8000b00:	f002 fd23 	bl	800354a <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000b04:	e7f6      	b.n	8000af4 <StartDrivingLightsTask+0x8>
 8000b06:	bf00      	nop
 8000b08:	40020800 	.word	0x40020800

08000b0c <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8000b0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b10:	b098      	sub	sp, #96	; 0x60
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	bool isOn = false;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// Set StripesEffect enum
	stripesEffect = NONE;
 8000b1c:	4b83      	ldr	r3, [pc, #524]	; (8000d2c <StartLEDStripesTask+0x220>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8000b22:	2300      	movs	r3, #0
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000b26:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4880      	ldr	r0, [pc, #512]	; (8000d30 <StartLEDStripesTask+0x224>)
 8000b30:	f004 fbd1 	bl	80052d6 <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8000b34:	2301      	movs	r3, #1
 8000b36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000b3a:	233f      	movs	r3, #63	; 0x3f
 8000b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000b50:	2304      	movs	r3, #4
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setStripesEffect(stripesEffect, &desiredStripesColor);
 8000b5a:	4b74      	ldr	r3, [pc, #464]	; (8000d2c <StartLEDStripesTask+0x220>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f107 020c 	add.w	r2, r7, #12
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd39 	bl	80005dc <setStripesEffect>
	for(int i=0; i<LED_COUNT; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b6e:	e020      	b.n	8000bb2 <StartLEDStripesTask+0xa6>
	  leds[i].red = desiredStripesColor.red;
 8000b70:	7b39      	ldrb	r1, [r7, #12]
 8000b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	3360      	adds	r3, #96	; 0x60
 8000b7c:	443b      	add	r3, r7
 8000b7e:	3b50      	subs	r3, #80	; 0x50
 8000b80:	460a      	mov	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 8000b84:	7b79      	ldrb	r1, [r7, #13]
 8000b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3360      	adds	r3, #96	; 0x60
 8000b90:	443b      	add	r3, r7
 8000b92:	3b4f      	subs	r3, #79	; 0x4f
 8000b94:	460a      	mov	r2, r1
 8000b96:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 8000b98:	7bb9      	ldrb	r1, [r7, #14]
 8000b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3360      	adds	r3, #96	; 0x60
 8000ba4:	443b      	add	r3, r7
 8000ba6:	3b4e      	subs	r3, #78	; 0x4e
 8000ba8:	460a      	mov	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_COUNT; i++) {
 8000bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bae:	3301      	adds	r3, #1
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	dddb      	ble.n	8000b70 <StartLEDStripesTask+0x64>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
	hws2812b.leds = leds;
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Initialize the driver
	if(ws2812b_init(&hws2812b)){
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f9ca 	bl	8001f60 <ws2812b_init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <StartLEDStripesTask+0xd4>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <StartLEDStripesTask+0x228>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4857      	ldr	r0, [pc, #348]	; (8000d38 <StartLEDStripesTask+0x22c>)
 8000bda:	f00a f9f7 	bl	800afcc <iprintf>
	  while(1) {;}
 8000bde:	e7fe      	b.n	8000bde <StartLEDStripesTask+0xd2>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fb57 	bl	8002298 <ws2812b_required_buffer_len>
 8000bea:	4601      	mov	r1, r0
 8000bec:	460b      	mov	r3, r1
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	460c      	mov	r4, r1
 8000c10:	461d      	mov	r5, r3
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	00eb      	lsls	r3, r5, #3
 8000c1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c20:	00e2      	lsls	r2, r4, #3
 8000c22:	1dcb      	adds	r3, r1, #7
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	ebad 0d03 	sub.w	sp, sp, r3
 8000c2c:	466b      	mov	r3, sp
 8000c2e:	3300      	adds	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f008 facc 	bl	80091d0 <vTaskSuspend>

	  // Toggle effect
	  if (isOn == false) {
 8000c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d015      	beq.n	8000c72 <StartLEDStripesTask+0x166>
		  isOn = !isOn;
 8000c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f083 0301 	eor.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  stripesEffect = DEFAULT;
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <StartLEDStripesTask+0x220>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e014      	b.n	8000c9c <StartLEDStripesTask+0x190>
	  } else {
		  isOn = !isOn;
 8000c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf14      	ite	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	2300      	moveq	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  stripesEffect = NONE;
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <StartLEDStripesTask+0x220>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
	  }

	  // Update LED color
	  setStripesEffect(stripesEffect, &desiredStripesColor);
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <StartLEDStripesTask+0x220>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc98 	bl	80005dc <setStripesEffect>
	  for(int i=0; i<LED_COUNT; i++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	657b      	str	r3, [r7, #84]	; 0x54
 8000cb0:	e020      	b.n	8000cf4 <StartLEDStripesTask+0x1e8>
		  leds[i].red = desiredStripesColor.red;
 8000cb2:	7b39      	ldrb	r1, [r7, #12]
 8000cb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	3360      	adds	r3, #96	; 0x60
 8000cbe:	443b      	add	r3, r7
 8000cc0:	3b50      	subs	r3, #80	; 0x50
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
		  leds[i].green = desiredStripesColor.green;
 8000cc6:	7b79      	ldrb	r1, [r7, #13]
 8000cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	3360      	adds	r3, #96	; 0x60
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3b4f      	subs	r3, #79	; 0x4f
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
		  leds[i].blue = desiredStripesColor.blue;
 8000cda:	7bb9      	ldrb	r1, [r7, #14]
 8000cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3360      	adds	r3, #96	; 0x60
 8000ce6:	443b      	add	r3, r7
 8000ce8:	3b4e      	subs	r3, #78	; 0x4e
 8000cea:	460a      	mov	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<LED_COUNT; i++) {
 8000cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8000cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	dddb      	ble.n	8000cb2 <StartLEDStripesTask+0x1a6>
	  }

	  // Add LEDs to handle
	  hws2812b.leds = leds;
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c

	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fae1 	bl	80022ce <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8000d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fac1 	bl	8002298 <ws2812b_required_buffer_len>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <StartLEDStripesTask+0x224>)
 8000d20:	f004 fc48 	bl	80055b4 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 fc5b 	bl	80025e0 <HAL_Delay>
	  vTaskSuspend(NULL);
 8000d2a:	e782      	b.n	8000c32 <StartLEDStripesTask+0x126>
 8000d2c:	20000019 	.word	0x20000019
 8000d30:	2000015c 	.word	0x2000015c
 8000d34:	2000074c 	.word	0x2000074c
 8000d38:	0800be88 	.word	0x0800be88

08000d3c <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f008 fa43 	bl	80091d0 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	e00b      	b.n	8000d68 <StartLeftBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <StartLeftBlinkersTask+0x34>)
 8000d56:	f002 fbf8 	bl	800354a <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000d5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d5e:	f007 fa21 	bl	80081a4 <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	ddf0      	ble.n	8000d50 <StartLeftBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000d6e:	e7e9      	b.n	8000d44 <StartLeftBlinkersTask+0x8>
 8000d70:	40020800 	.word	0x40020800

08000d74 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f008 fa27 	bl	80091d0 <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e00b      	b.n	8000da0 <StartRightBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8000d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <StartRightBlinkersTask+0x34>)
 8000d8e:	f002 fbdc 	bl	800354a <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000d92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d96:	f007 fa05 	bl	80081a4 <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	ddf0      	ble.n	8000d88 <StartRightBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000da6:	e7e9      	b.n	8000d7c <StartRightBlinkersTask+0x8>
 8000da8:	40020800 	.word	0x40020800

08000dac <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f008 fa0b 	bl	80091d0 <vTaskSuspend>
 8000dba:	e7fb      	b.n	8000db4 <StartParkLeftTask+0x8>

08000dbc <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f008 fa03 	bl	80091d0 <vTaskSuspend>
 8000dca:	e7fb      	b.n	8000dc4 <StartParkRightTask+0x8>

08000dcc <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f008 f9fb 	bl	80091d0 <vTaskSuspend>
 8000dda:	e7fb      	b.n	8000dd4 <StartAccelerateTask+0x8>

08000ddc <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f008 f9f3 	bl	80091d0 <vTaskSuspend>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <StartDecelerateTask+0x2c>)
 8000df0:	f002 fbab 	bl	800354a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df8:	f007 f9d4 	bl	80081a4 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <StartDecelerateTask+0x2c>)
 8000e02:	f002 fba2 	bl	800354a <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000e06:	e7ed      	b.n	8000de4 <StartDecelerateTask+0x8>
 8000e08:	40020800 	.word	0x40020800

08000e0c <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f008 f9db 	bl	80091d0 <vTaskSuspend>
 8000e1a:	e7fb      	b.n	8000e14 <StartTurnLeftTask+0x8>

08000e1c <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f008 f9d3 	bl	80091d0 <vTaskSuspend>
 8000e2a:	e7fb      	b.n	8000e24 <StartTurnRightTask+0x8>

08000e2c <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f008 f9cb 	bl	80091d0 <vTaskSuspend>
 8000e3a:	e7fb      	b.n	8000e34 <StartConnectionTask+0x8>

08000e3c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a93      	ldr	r2, [pc, #588]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b91      	ldr	r3, [pc, #580]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a8d      	ldr	r2, [pc, #564]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b88      	ldr	r3, [pc, #544]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a87      	ldr	r2, [pc, #540]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a81      	ldr	r2, [pc, #516]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a7b      	ldr	r2, [pc, #492]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b79      	ldr	r3, [pc, #484]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eca:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a75      	ldr	r2, [pc, #468]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b73      	ldr	r3, [pc, #460]	; (80010a4 <MX_GPIO_Init+0x268>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f244 0191 	movw	r1, #16529	; 0x4091
 8000ee8:	486f      	ldr	r0, [pc, #444]	; (80010a8 <MX_GPIO_Init+0x26c>)
 8000eea:	f002 fb15 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef4:	486d      	ldr	r0, [pc, #436]	; (80010ac <MX_GPIO_Init+0x270>)
 8000ef6:	f002 fb0f 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2140      	movs	r1, #64	; 0x40
 8000efe:	486c      	ldr	r0, [pc, #432]	; (80010b0 <MX_GPIO_Init+0x274>)
 8000f00:	f002 fb0a 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000f0a:	486a      	ldr	r0, [pc, #424]	; (80010b4 <MX_GPIO_Init+0x278>)
 8000f0c:	f002 fb04 	bl	8003518 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4863      	ldr	r0, [pc, #396]	; (80010b4 <MX_GPIO_Init+0x278>)
 8000f28:	f002 f94a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f2c:	2332      	movs	r3, #50	; 0x32
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	485b      	ldr	r0, [pc, #364]	; (80010b4 <MX_GPIO_Init+0x278>)
 8000f48:	f002 f93a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f4c:	2386      	movs	r3, #134	; 0x86
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4854      	ldr	r0, [pc, #336]	; (80010b8 <MX_GPIO_Init+0x27c>)
 8000f68:	f002 f92a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8000f6c:	f244 0391 	movw	r3, #16529	; 0x4091
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4848      	ldr	r0, [pc, #288]	; (80010a8 <MX_GPIO_Init+0x26c>)
 8000f86:	f002 f91b 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4840      	ldr	r0, [pc, #256]	; (80010a8 <MX_GPIO_Init+0x26c>)
 8000fa8:	f002 f90a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4838      	ldr	r0, [pc, #224]	; (80010ac <MX_GPIO_Init+0x270>)
 8000fca:	f002 f8f9 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8000fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4831      	ldr	r0, [pc, #196]	; (80010ac <MX_GPIO_Init+0x270>)
 8000fe8:	f002 f8ea 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <MX_GPIO_Init+0x274>)
 8001004:	f002 f8dc 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4825      	ldr	r0, [pc, #148]	; (80010b0 <MX_GPIO_Init+0x274>)
 800101c:	f002 f8d0 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001020:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001024:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <MX_GPIO_Init+0x278>)
 800103a:	f002 f8c1 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800103e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001050:	230a      	movs	r3, #10
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4817      	ldr	r0, [pc, #92]	; (80010b8 <MX_GPIO_Init+0x27c>)
 800105c:	f002 f8b0 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <MX_GPIO_Init+0x27c>)
 8001076:	f002 f8a3 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800107a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_GPIO_Init+0x274>)
 8001098:	f002 f892 	bl	80031c0 <HAL_GPIO_Init>

}
 800109c:	bf00      	nop
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020000 	.word	0x40020000

080010bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f8:	f002 fa42 	bl	8003580 <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001102:	f000 f945 	bl	8001390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_Init+0x74>)
 800110a:	f002 fe23 	bl	8003d54 <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 f93c 	bl	8001390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C1_Init+0x74>)
 800111c:	f002 fe65 	bl	8003dea <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 f933 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000108 	.word	0x20000108
 8001134:	40005400 	.word	0x40005400
 8001138:	20404768 	.word	0x20404768

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ae      	sub	sp, #184	; 0xb8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2290      	movs	r2, #144	; 0x90
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f009 ff8a 	bl	800b076 <memset>
  if(i2cHandle->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d13c      	bne.n	80011e6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001170:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001172:	2300      	movs	r3, #0
 8001174:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fbd8 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001186:	f000 f903 	bl	8001390 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80011a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011bc:	2304      	movs	r3, #4
 80011be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c6:	4619      	mov	r1, r3
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <HAL_I2C_MspInit+0xbc>)
 80011ca:	f001 fff9 	bl	80031c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	37b8      	adds	r7, #184	; 0xb8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40005400 	.word	0x40005400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001200:	f001 f9c1 	bl	8002586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f81e 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f7ff fe18 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 800120c:	f7ff fab4 	bl	8000778 <MX_DMA_Init>
  MX_SPI1_Init();
 8001210:	f000 f8c4 	bl	800139c <MX_SPI1_Init>
  MX_DAC_Init();
 8001214:	f7ff fa3e 	bl	8000694 <MX_DAC_Init>
  MX_I2C1_Init();
 8001218:	f7ff ff50 	bl	80010bc <MX_I2C1_Init>
  MX_TIM4_Init();
 800121c:	f000 fd56 	bl	8001ccc <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001220:	f000 fe06 	bl	8001e30 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	4905      	ldr	r1, [pc, #20]	; (800123c <main+0x40>)
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <main+0x44>)
 800122a:	f005 fc63 	bl	8006af4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800122e:	f006 fea9 	bl	8007f84 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001232:	f7ff fabf 	bl	80007b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001236:	f006 fed9 	bl	8007fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123a:	e7fe      	b.n	800123a <main+0x3e>
 800123c:	200000b4 	.word	0x200000b4
 8001240:	200006c4 	.word	0x200006c4

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2234      	movs	r2, #52	; 0x34
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f009 ff0f 	bl	800b076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <SystemClock_Config+0xd4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <SystemClock_Config+0xd4>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <SystemClock_Config+0xd4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <SystemClock_Config+0xd8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <SystemClock_Config+0xd8>)
 8001286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <SystemClock_Config+0xd8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800129c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012b0:	23d8      	movs	r3, #216	; 0xd8
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fe2d 	bl	8003f24 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012d0:	f000 f85e 	bl	8001390 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d4:	f002 fdd6 	bl	8003e84 <HAL_PWREx_EnableOverDrive>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012de:	f000 f857 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	2302      	movs	r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2107      	movs	r1, #7
 8001300:	4618      	mov	r0, r3
 8001302:	f003 f8bd 	bl	8004480 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800130c:	f000 f840 	bl	8001390 <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3750      	adds	r7, #80	; 0x50
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_UART_RxCpltCallback+0x3c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f008 f85b 	bl	80093e8 <xTaskResumeFromISR>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_UART_RxCpltCallback+0x28>
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_UART_RxCpltCallback+0x40>)
 800133a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	f3bf 8f4f 	dsb	sy
 8001344:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001348:	2201      	movs	r2, #1
 800134a:	4906      	ldr	r1, [pc, #24]	; (8001364 <HAL_UART_RxCpltCallback+0x44>)
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <HAL_UART_RxCpltCallback+0x48>)
 800134e:	f005 fbd1 	bl	8006af4 <HAL_UART_Receive_IT>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000d4 	.word	0x200000d4
 8001360:	e000ed04 	.word	0xe000ed04
 8001364:	200000b4 	.word	0x200000b4
 8001368:	200006c4 	.word	0x200006c4

0800136c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800137e:	f001 f90f 	bl	80025a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40001000 	.word	0x40001000

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_SPI1_Init+0x74>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <MX_SPI1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_SPI1_Init+0x74>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_SPI1_Init+0x74>)
 80013b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI1_Init+0x74>)
 80013b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI1_Init+0x74>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI1_Init+0x74>)
 80013d4:	2218      	movs	r2, #24
 80013d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_SPI1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI1_Init+0x74>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI1_Init+0x74>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI1_Init+0x74>)
 80013fe:	f003 febf 	bl	8005180 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001408:	f7ff ffc2 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000015c 	.word	0x2000015c
 8001414:	40013000 	.word	0x40013000

08001418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <HAL_SPI_MspInit+0x110>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d171      	bne.n	800151e <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_SPI_MspInit+0x114>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a3b      	ldr	r2, [pc, #236]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a35      	ldr	r2, [pc, #212]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_SPI_MspInit+0x114>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_SPI_MspInit+0x114>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001482:	2320      	movs	r3, #32
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <HAL_SPI_MspInit+0x118>)
 800149e:	f001 fe8f 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	481d      	ldr	r0, [pc, #116]	; (8001534 <HAL_SPI_MspInit+0x11c>)
 80014be:	f001 fe7f 	bl	80031c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_SPI_MspInit+0x124>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_SPI_MspInit+0x120>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_SPI_MspInit+0x120>)
 8001504:	f001 fa52 	bl	80029ac <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800150e:	f7ff ff3f 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_SPI_MspInit+0x120>)
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_SPI_MspInit+0x120>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40013000 	.word	0x40013000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020c00 	.word	0x40020c00
 8001538:	200001c0 	.word	0x200001c0
 800153c:	40026458 	.word	0x40026458

08001540 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af04      	add	r7, sp, #16
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2301      	movs	r3, #1
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	2200      	movs	r2, #0
 800156c:	2178      	movs	r1, #120	; 0x78
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <ssd1306_WriteCommand+0x2c>)
 8001570:	f002 f896 	bl	80036a0 <HAL_I2C_Mem_Write>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000108 	.word	0x20000108

08001580 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af04      	add	r7, sp, #16
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f04f 32ff 	mov.w	r2, #4294967295
 8001592:	9202      	str	r2, [sp, #8]
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	2178      	movs	r1, #120	; 0x78
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <ssd1306_WriteData+0x30>)
 80015a2:	f002 f87d 	bl	80036a0 <HAL_I2C_Mem_Write>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000108 	.word	0x20000108

080015b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015b8:	f7ff ffc2 	bl	8001540 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015bc:	2064      	movs	r0, #100	; 0x64
 80015be:	f001 f80f 	bl	80025e0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 f9ce 	bl	8001964 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015c8:	2020      	movs	r0, #32
 80015ca:	f7ff ffc1 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ffbe 	bl	8001550 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015d4:	20b0      	movs	r0, #176	; 0xb0
 80015d6:	f7ff ffbb 	bl	8001550 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015da:	20c8      	movs	r0, #200	; 0xc8
 80015dc:	f7ff ffb8 	bl	8001550 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff ffb5 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015e6:	2010      	movs	r0, #16
 80015e8:	f7ff ffb2 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015ec:	2040      	movs	r0, #64	; 0x40
 80015ee:	f7ff ffaf 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015f2:	20ff      	movs	r0, #255	; 0xff
 80015f4:	f000 f9a2 	bl	800193c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015f8:	20a1      	movs	r0, #161	; 0xa1
 80015fa:	f7ff ffa9 	bl	8001550 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015fe:	20a6      	movs	r0, #166	; 0xa6
 8001600:	f7ff ffa6 	bl	8001550 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001604:	20a8      	movs	r0, #168	; 0xa8
 8001606:	f7ff ffa3 	bl	8001550 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800160a:	203f      	movs	r0, #63	; 0x3f
 800160c:	f7ff ffa0 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001610:	20a4      	movs	r0, #164	; 0xa4
 8001612:	f7ff ff9d 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001616:	20d3      	movs	r0, #211	; 0xd3
 8001618:	f7ff ff9a 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff97 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001622:	20d5      	movs	r0, #213	; 0xd5
 8001624:	f7ff ff94 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001628:	20f0      	movs	r0, #240	; 0xf0
 800162a:	f7ff ff91 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800162e:	20d9      	movs	r0, #217	; 0xd9
 8001630:	f7ff ff8e 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001634:	2022      	movs	r0, #34	; 0x22
 8001636:	f7ff ff8b 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800163a:	20da      	movs	r0, #218	; 0xda
 800163c:	f7ff ff88 	bl	8001550 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001640:	2012      	movs	r0, #18
 8001642:	f7ff ff85 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001646:	20db      	movs	r0, #219	; 0xdb
 8001648:	f7ff ff82 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800164c:	2020      	movs	r0, #32
 800164e:	f7ff ff7f 	bl	8001550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001652:	208d      	movs	r0, #141	; 0x8d
 8001654:	f7ff ff7c 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001658:	2014      	movs	r0, #20
 800165a:	f7ff ff79 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800165e:	2001      	movs	r0, #1
 8001660:	f000 f980 	bl	8001964 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800166a:	f000 f825 	bl	80016b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <ssd1306_Init+0xd0>)
 8001670:	2200      	movs	r2, #0
 8001672:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <ssd1306_Init+0xd0>)
 8001676:	2200      	movs	r2, #0
 8001678:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800167a:	4b02      	ldr	r3, [pc, #8]	; (8001684 <ssd1306_Init+0xd0>)
 800167c:	2201      	movs	r2, #1
 800167e:	711a      	strb	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000620 	.word	0x20000620

08001688 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <ssd1306_Fill+0x14>
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <ssd1306_Fill+0x16>
 800169c:	23ff      	movs	r3, #255	; 0xff
 800169e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a2:	4619      	mov	r1, r3
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <ssd1306_Fill+0x2c>)
 80016a6:	f009 fce6 	bl	800b076 <memset>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000220 	.word	0x20000220

080016b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e016      	b.n	80016f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	3b50      	subs	r3, #80	; 0x50
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff40 	bl	8001550 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff3d 	bl	8001550 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016d6:	2010      	movs	r0, #16
 80016d8:	f7ff ff3a 	bl	8001550 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	01db      	lsls	r3, r3, #7
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <ssd1306_UpdateScreen+0x4c>)
 80016e2:	4413      	add	r3, r2
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff4a 	bl	8001580 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3301      	adds	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d9e5      	bls.n	80016c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000220 	.word	0x20000220

08001708 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	460b      	mov	r3, r1
 8001714:	71bb      	strb	r3, [r7, #6]
 8001716:	4613      	mov	r3, r2
 8001718:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db3d      	blt.n	800179e <ssd1306_DrawPixel+0x96>
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	2b3f      	cmp	r3, #63	; 0x3f
 8001726:	d83a      	bhi.n	800179e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001728:	797b      	ldrb	r3, [r7, #5]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11a      	bne.n	8001764 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	4603      	mov	r3, r0
 8001738:	01db      	lsls	r3, r3, #7
 800173a:	4413      	add	r3, r2
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <ssd1306_DrawPixel+0xa4>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b259      	sxtb	r1, r3
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	4603      	mov	r3, r0
 8001758:	01db      	lsls	r3, r3, #7
 800175a:	4413      	add	r3, r2
 800175c:	b2c9      	uxtb	r1, r1
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <ssd1306_DrawPixel+0xa4>)
 8001760:	54d1      	strb	r1, [r2, r3]
 8001762:	e01d      	b.n	80017a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	4603      	mov	r3, r0
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	4413      	add	r3, r2
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <ssd1306_DrawPixel+0xa4>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	b25a      	sxtb	r2, r3
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4013      	ands	r3, r2
 800178c:	b259      	sxtb	r1, r3
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	4603      	mov	r3, r0
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	4413      	add	r3, r2
 8001796:	b2c9      	uxtb	r1, r1
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <ssd1306_DrawPixel+0xa4>)
 800179a:	54d1      	strb	r1, [r2, r3]
 800179c:	e000      	b.n	80017a0 <ssd1306_DrawPixel+0x98>
        return;
 800179e:	bf00      	nop
    }
}
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000220 	.word	0x20000220

080017b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	1d38      	adds	r0, r7, #4
 80017ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80017be:	461a      	mov	r2, r3
 80017c0:	4623      	mov	r3, r4
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	4613      	mov	r3, r2
 80017c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b1f      	cmp	r3, #31
 80017cc:	d902      	bls.n	80017d4 <ssd1306_WriteChar+0x24>
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b7e      	cmp	r3, #126	; 0x7e
 80017d2:	d901      	bls.n	80017d8 <ssd1306_WriteChar+0x28>
        return 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e06d      	b.n	80018b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <ssd1306_WriteChar+0x10c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	793b      	ldrb	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	dc06      	bgt.n	80017f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <ssd1306_WriteChar+0x10c>)
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	461a      	mov	r2, r3
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	dd01      	ble.n	80017f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e05d      	b.n	80018b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e04c      	b.n	8001898 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3b20      	subs	r3, #32
 8001804:	7979      	ldrb	r1, [r7, #5]
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4619      	mov	r1, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	440b      	add	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	e034      	b.n	8001888 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d012      	beq.n	8001854 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <ssd1306_WriteChar+0x10c>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b2d8      	uxtb	r0, r3
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <ssd1306_WriteChar+0x10c>)
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	7bba      	ldrb	r2, [r7, #14]
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff ff5b 	bl	8001708 <ssd1306_DrawPixel>
 8001852:	e016      	b.n	8001882 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <ssd1306_WriteChar+0x10c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <ssd1306_WriteChar+0x10c>)
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b2d9      	uxtb	r1, r3
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf0c      	ite	eq
 8001876:	2301      	moveq	r3, #1
 8001878:	2300      	movne	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	f7ff ff43 	bl	8001708 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	3301      	adds	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	793b      	ldrb	r3, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	4293      	cmp	r3, r2
 8001890:	d3c5      	bcc.n	800181e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	797b      	ldrb	r3, [r7, #5]
 800189a:	461a      	mov	r2, r3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4293      	cmp	r3, r2
 80018a0:	d3ad      	bcc.n	80017fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <ssd1306_WriteChar+0x10c>)
 80018a4:	881a      	ldrh	r2, [r3, #0]
 80018a6:	793b      	ldrb	r3, [r7, #4]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <ssd1306_WriteChar+0x10c>)
 80018b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3724      	adds	r7, #36	; 0x24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}
 80018bc:	20000620 	.word	0x20000620

080018c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	1d38      	adds	r0, r7, #4
 80018ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80018d0:	e012      	b.n	80018f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	7818      	ldrb	r0, [r3, #0]
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	1d3a      	adds	r2, r7, #4
 80018da:	ca06      	ldmia	r2, {r1, r2}
 80018dc:	f7ff ff68 	bl	80017b0 <ssd1306_WriteChar>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d002      	beq.n	80018f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	e008      	b.n	8001904 <ssd1306_WriteString+0x44>
        }
        str++;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1e8      	bne.n	80018d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <ssd1306_SetCursor+0x2c>)
 8001922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <ssd1306_SetCursor+0x2c>)
 800192a:	805a      	strh	r2, [r3, #2]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000620 	.word	0x20000620

0800193c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001946:	2381      	movs	r3, #129	; 0x81
 8001948:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fdff 	bl	8001550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fdfb 	bl	8001550 <ssd1306_WriteCommand>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001974:	23af      	movs	r3, #175	; 0xaf
 8001976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <ssd1306_SetDisplayOn+0x38>)
 800197a:	2201      	movs	r2, #1
 800197c:	715a      	strb	r2, [r3, #5]
 800197e:	e004      	b.n	800198a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001980:	23ae      	movs	r3, #174	; 0xae
 8001982:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <ssd1306_SetDisplayOn+0x38>)
 8001986:	2200      	movs	r2, #0
 8001988:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fddf 	bl	8001550 <ssd1306_WriteCommand>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000620 	.word	0x20000620

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_MspInit+0x4c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_MspInit+0x4c>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	210f      	movs	r1, #15
 80019da:	f06f 0001 	mvn.w	r0, #1
 80019de:	f000 fedb 	bl	8002798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_InitTick+0xe0>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_InitTick+0xe0>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_InitTick+0xe0>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a18:	f107 0210 	add.w	r2, r7, #16
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 ff52 	bl	80048cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a32:	f002 ff23 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8001a36:	6378      	str	r0, [r7, #52]	; 0x34
 8001a38:	e004      	b.n	8001a44 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a3a:	f002 ff1f 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_InitTick+0xe4>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_InitTick+0xec>)
 8001a56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a78:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a7a:	f004 f8b7 	bl	8005bec <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <HAL_InitTick+0xe8>)
 8001a8e:	f004 f90f 	bl	8005cb0 <HAL_TIM_Base_Start_IT>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa0:	2036      	movs	r0, #54	; 0x36
 8001aa2:	f000 fe95 	bl	80027d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d808      	bhi.n	8001abe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	2036      	movs	r0, #54	; 0x36
 8001ab2:	f000 fe71 	bl	8002798 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_InitTick+0xf0>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e002      	b.n	8001ac4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3738      	adds	r7, #56	; 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	20000628 	.word	0x20000628
 8001adc:	40001000 	.word	0x40001000
 8001ae0:	20000030 	.word	0x20000030

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <TIM6_DAC_IRQHandler+0x20>)
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <TIM6_DAC_IRQHandler+0x20>)
 8001b20:	f000 fe86 	bl	8002830 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <TIM6_DAC_IRQHandler+0x24>)
 8001b26:	f004 f992 	bl	8005e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200000bc 	.word	0x200000bc
 8001b34:	20000628 	.word	0x20000628

08001b38 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA2_Stream3_IRQHandler+0x10>)
 8001b3e:	f001 f8d5 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200001c0 	.word	0x200001c0

08001b4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <USART6_IRQHandler+0x10>)
 8001b52:	f005 f813 	bl	8006b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200006c4 	.word	0x200006c4

08001b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e00a      	b.n	8001b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b72:	f3af 8000 	nop.w
 8001b76:	4601      	mov	r1, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	b2ca      	uxtb	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf0      	blt.n	8001b72 <_read+0x12>
  }

  return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e009      	b.n	8001bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf1      	blt.n	8001bac <_write+0x12>
  }
  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_close>:

int _close(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_isatty>:

int _isatty(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f009 fab6 	bl	800b1dc <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20080000 	.word	0x20080000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	20000674 	.word	0x20000674
 8001ca4:	200052c0 	.word	0x200052c0

08001ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001cf2:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <MX_TIM4_Init+0xb0>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001cf8:	223f      	movs	r2, #63	; 0x3f
 8001cfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d18:	f004 f842 	bl	8005da0 <HAL_TIM_PWM_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d22:	f7ff fb35 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4810      	ldr	r0, [pc, #64]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d36:	f004 fde3 	bl	8006900 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d40:	f7ff fb26 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d44:	2360      	movs	r3, #96	; 0x60
 8001d46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	2208      	movs	r2, #8
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d5c:	f004 f996 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d66:	f7ff fb13 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MX_TIM4_Init+0xac>)
 8001d6c:	f000 f828 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000678 	.word	0x20000678
 8001d7c:	40000800 	.word	0x40000800

08001d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_TIM_PWM_MspInit+0x38>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10b      	bne.n	8001daa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_TIM_MspPostInit+0x64>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d11c      	bne.n	8001e1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 8001dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	f001 f9d2 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020c00 	.word	0x40020c00

08001e30 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e36:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <MX_USART6_UART_Init+0x5c>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART6_UART_Init+0x58>)
 8001e74:	f004 fdf0 	bl	8006a58 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001e7e:	f7ff fa87 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200006c4 	.word	0x200006c4
 8001e8c:	40011400 	.word	0x40011400

08001e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0ae      	sub	sp, #184	; 0xb8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2290      	movs	r2, #144	; 0x90
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f009 f8e0 	bl	800b076 <memset>
  if(uartHandle->Instance==USART6)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_UART_MspInit+0xc4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d144      	bne.n	8001f4a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fd2e 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff fa59 	bl	8001390 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0xc8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 8001f0e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_UART_MspInit+0xcc>)
 8001f36:	f001 f943 	bl	80031c0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	2047      	movs	r0, #71	; 0x47
 8001f40:	f000 fc2a 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f44:	2047      	movs	r0, #71	; 0x47
 8001f46:	f000 fc43 	bl	80027d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	37b8      	adds	r7, #184	; 0xb8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40021800 	.word	0x40021800

08001f60 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8001f68:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <ws2812b_init+0x1f4>)
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <ws2812b_init+0x1f8>)
 8001f6c:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <ws2812b_init+0x1f8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d009      	beq.n	8001f90 <ws2812b_init+0x30>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <ws2812b_init+0x30>
 8001f84:	4875      	ldr	r0, [pc, #468]	; (800215c <ws2812b_init+0x1fc>)
 8001f86:	f000 f9f5 	bl	8002374 <set_init_error_msg>
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e17f      	b.n	8002290 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	789b      	ldrb	r3, [r3, #2]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d01d      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d019      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	d015      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	789b      	ldrb	r3, [r3, #2]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d011      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	789b      	ldrb	r3, [r3, #2]
 8001fb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001fb6:	d00d      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	2b1f      	cmp	r3, #31
 8001fbe:	d009      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc6:	d005      	beq.n	8001fd4 <ws2812b_init+0x74>
 8001fc8:	4865      	ldr	r0, [pc, #404]	; (8002160 <ws2812b_init+0x200>)
 8001fca:	f000 f9d3 	bl	8002374 <set_init_error_msg>
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e15d      	b.n	8002290 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d01d      	beq.n	8002018 <ws2812b_init+0xb8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d019      	beq.n	8002018 <ws2812b_init+0xb8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d015      	beq.n	8002018 <ws2812b_init+0xb8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d011      	beq.n	8002018 <ws2812b_init+0xb8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	785b      	ldrb	r3, [r3, #1]
 8001ff8:	2b3f      	cmp	r3, #63	; 0x3f
 8001ffa:	d00d      	beq.n	8002018 <ws2812b_init+0xb8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	2b1f      	cmp	r3, #31
 8002002:	d009      	beq.n	8002018 <ws2812b_init+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	2b7f      	cmp	r3, #127	; 0x7f
 800200a:	d005      	beq.n	8002018 <ws2812b_init+0xb8>
 800200c:	4855      	ldr	r0, [pc, #340]	; (8002164 <ws2812b_init+0x204>)
 800200e:	f000 f9b1 	bl	8002374 <set_init_error_msg>
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e13b      	b.n	8002290 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <ws2812b_init+0xd4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d005      	beq.n	8002034 <ws2812b_init+0xd4>
 8002028:	484f      	ldr	r0, [pc, #316]	; (8002168 <ws2812b_init+0x208>)
 800202a:	f000 f9a3 	bl	8002374 <set_init_error_msg>
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e12d      	b.n	8002290 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d009      	beq.n	8002050 <ws2812b_init+0xf0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <ws2812b_init+0xf0>
 8002044:	4849      	ldr	r0, [pc, #292]	; (800216c <ws2812b_init+0x20c>)
 8002046:	f000 f995 	bl	8002374 <set_init_error_msg>
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e11f      	b.n	8002290 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	789a      	ldrb	r2, [r3, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	429a      	cmp	r2, r3
 800205a:	d805      	bhi.n	8002068 <ws2812b_init+0x108>
 800205c:	4844      	ldr	r0, [pc, #272]	; (8002170 <ws2812b_init+0x210>)
 800205e:	f000 f989 	bl	8002374 <set_init_error_msg>
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e113      	b.n	8002290 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d109      	bne.n	8002084 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	789b      	ldrb	r3, [r3, #2]
 8002074:	2b0e      	cmp	r3, #14
 8002076:	d905      	bls.n	8002084 <ws2812b_init+0x124>
 8002078:	483e      	ldr	r0, [pc, #248]	; (8002174 <ws2812b_init+0x214>)
 800207a:	f000 f97b 	bl	8002374 <set_init_error_msg>
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e105      	b.n	8002290 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	461a      	mov	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	78db      	ldrb	r3, [r3, #3]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f040 80e9 	bne.w	8002288 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d15c      	bne.n	8002178 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7e5b      	ldrb	r3, [r3, #25]
 80020c2:	10db      	asrs	r3, r3, #3
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7e5b      	ldrb	r3, [r3, #25]
 80020d0:	105b      	asrs	r3, r3, #1
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7e5b      	ldrb	r3, [r3, #25]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	b25b      	sxtb	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b25a      	sxtb	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e5b      	ldrb	r3, [r3, #25]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b25b      	sxtb	r3, r3
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e1b      	ldrb	r3, [r3, #24]
 800210c:	10db      	asrs	r3, r3, #3
 800210e:	b25b      	sxtb	r3, r3
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	b25a      	sxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7e1b      	ldrb	r3, [r3, #24]
 800211a:	105b      	asrs	r3, r3, #1
 800211c:	b25b      	sxtb	r3, r3
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	b25b      	sxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b25a      	sxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e1b      	ldrb	r3, [r3, #24]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	b25b      	sxtb	r3, r3
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	b25b      	sxtb	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b25a      	sxtb	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7e1b      	ldrb	r3, [r3, #24]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	b25b      	sxtb	r3, r3
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	761a      	strb	r2, [r3, #24]
 8002152:	e099      	b.n	8002288 <ws2812b_init+0x328>
 8002154:	2000074c 	.word	0x2000074c
 8002158:	20000750 	.word	0x20000750
 800215c:	0800bea8 	.word	0x0800bea8
 8002160:	0800becc 	.word	0x0800becc
 8002164:	0800bef4 	.word	0x0800bef4
 8002168:	0800bf1c 	.word	0x0800bf1c
 800216c:	0800bf44 	.word	0x0800bf44
 8002170:	0800bf70 	.word	0x0800bf70
 8002174:	0800bfa4 	.word	0x0800bfa4
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e5b      	ldrb	r3, [r3, #25]
 800217c:	09db      	lsrs	r3, r3, #7
 800217e:	b2db      	uxtb	r3, r3
 8002180:	b25a      	sxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	115b      	asrs	r3, r3, #5
 8002188:	b25b      	sxtb	r3, r3
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b25a      	sxtb	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e5b      	ldrb	r3, [r3, #25]
 8002198:	10db      	asrs	r3, r3, #3
 800219a:	b25b      	sxtb	r3, r3
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b25a      	sxtb	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7e5b      	ldrb	r3, [r3, #25]
 80021aa:	105b      	asrs	r3, r3, #1
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b25a      	sxtb	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e5b      	ldrb	r3, [r3, #25]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b25a      	sxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7e5b      	ldrb	r3, [r3, #25]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	b25b      	sxtb	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e5b      	ldrb	r3, [r3, #25]
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b25a      	sxtb	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7e5b      	ldrb	r3, [r3, #25]
 80021f2:	01db      	lsls	r3, r3, #7
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
 8002204:	09db      	lsrs	r3, r3, #7
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b25a      	sxtb	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e1b      	ldrb	r3, [r3, #24]
 800220e:	115b      	asrs	r3, r3, #5
 8002210:	b25b      	sxtb	r3, r3
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	b25b      	sxtb	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b25a      	sxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	10db      	asrs	r3, r3, #3
 8002222:	b25b      	sxtb	r3, r3
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	b25b      	sxtb	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b25a      	sxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7e1b      	ldrb	r3, [r3, #24]
 8002232:	105b      	asrs	r3, r3, #1
 8002234:	b25b      	sxtb	r3, r3
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	b25b      	sxtb	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b25a      	sxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25a      	sxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e1b      	ldrb	r3, [r3, #24]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	b25b      	sxtb	r3, r3
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	b25b      	sxtb	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b25a      	sxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	015b      	lsls	r3, r3, #5
 800226a:	b25b      	sxtb	r3, r3
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	b25b      	sxtb	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b25a      	sxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e1b      	ldrb	r3, [r3, #24]
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]

  return 0;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <ws2812b_required_buffer_len+0x18>
 80022ac:	2318      	movs	r3, #24
 80022ae:	e000      	b.n	80022b2 <ws2812b_required_buffer_len+0x1a>
 80022b0:	230c      	movs	r3, #12
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	441a      	add	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e008      	b.n	80022f6 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
    buffer++;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3f1      	bcc.n	80022e4 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e01a      	b.n	800233c <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	463a      	mov	r2, r7
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f85a 	bl	80023c8 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	463a      	mov	r2, r7
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f853 	bl	80023c8 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	789b      	ldrb	r3, [r3, #2]
 8002326:	463a      	mov	r2, r7
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f84c 	bl	80023c8 <add_byte>
    led++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3303      	adds	r3, #3
 8002334:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3df      	bcc.n	8002306 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	e008      	b.n	800235e <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d3f1      	bcc.n	800234c <ws2812b_fill_buffer+0x7e>
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002380:	e00b      	b.n	800239a <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <set_init_error_msg+0x50>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	460a      	mov	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
    i++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b3a      	cmp	r3, #58	; 0x3a
 800239e:	dc05      	bgt.n	80023ac <set_init_error_msg+0x38>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ea      	bne.n	8002382 <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <set_init_error_msg+0x50>)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000750 	.word	0x20000750

080023c8 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	460b      	mov	r3, r1
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d118      	bne.n	8002410 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e011      	b.n	8002408 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681c      	ldr	r4, [r3, #0]
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	461a      	mov	r2, r3
 80023ec:	6979      	ldr	r1, [r7, #20]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f844 	bl	800247c <construct_double_pulse>
 80023f4:	4603      	mov	r3, r0
 80023f6:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3302      	adds	r3, #2
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b07      	cmp	r3, #7
 800240c:	d9ea      	bls.n	80023e4 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 800240e:	e017      	b.n	8002440 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e011      	b.n	800243a <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681c      	ldr	r4, [r3, #0]
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	461a      	mov	r2, r3
 800241e:	6939      	ldr	r1, [r7, #16]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f811 	bl	8002448 <construct_single_pulse>
 8002426:	4603      	mov	r3, r0
 8002428:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3301      	adds	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d9ea      	bls.n	8002416 <add_byte+0x4e>
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <construct_single_pulse+0x24>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	7e1b      	ldrb	r3, [r3, #24]
 800246a:	e001      	b.n	8002470 <construct_single_pulse+0x28>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	7e5b      	ldrb	r3, [r3, #25]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	7e1b      	ldrb	r3, [r3, #24]
 800248e:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	7e5b      	ldrb	r3, [r3, #25]
 8002494:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	791b      	ldrb	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d121      	bne.n	80024e2 <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	fa21 f303 	lsr.w	r3, r1, r3
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <construct_double_pulse+0x38>
 80024b0:	7dbb      	ldrb	r3, [r7, #22]
 80024b2:	e000      	b.n	80024b6 <construct_double_pulse+0x3a>
 80024b4:	7d7b      	ldrb	r3, [r7, #21]
 80024b6:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	fa21 f303 	lsr.w	r3, r1, r3
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <construct_double_pulse+0x54>
 80024c8:	7dbb      	ldrb	r3, [r7, #22]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	e002      	b.n	80024d6 <construct_double_pulse+0x5a>
 80024d0:	7d7b      	ldrb	r3, [r7, #21]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80024da:	4313      	orrs	r3, r2
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	75fb      	strb	r3, [r7, #23]
 80024e0:	e020      	b.n	8002524 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	fa21 f303 	lsr.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <construct_double_pulse+0x7a>
 80024f2:	7dbb      	ldrb	r3, [r7, #22]
 80024f4:	e000      	b.n	80024f8 <construct_double_pulse+0x7c>
 80024f6:	7d7b      	ldrb	r3, [r7, #21]
 80024f8:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 80024fa:	79fa      	ldrb	r2, [r7, #7]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3301      	adds	r3, #1
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	fa21 f303 	lsr.w	r3, r1, r3
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <construct_double_pulse+0x98>
 800250c:	7dbb      	ldrb	r3, [r7, #22]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	b25b      	sxtb	r3, r3
 8002512:	e002      	b.n	800251a <construct_double_pulse+0x9e>
 8002514:	7d7b      	ldrb	r3, [r7, #21]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	b25b      	sxtb	r3, r3
 800251a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800251e:	4313      	orrs	r3, r2
 8002520:	b25b      	sxtb	r3, r3
 8002522:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480d      	ldr	r0, [pc, #52]	; (8002570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800253a:	490e      	ldr	r1, [pc, #56]	; (8002574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800253c:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002550:	4c0b      	ldr	r4, [pc, #44]	; (8002580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255e:	f7ff fba3 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002562:	f008 fe41 	bl	800b1e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7fe fe49 	bl	80011fc <main>
  bx  lr    
 800256a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002578:	0800d714 	.word	0x0800d714
  ldr r2, =_sbss
 800257c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002580:	200052bc 	.word	0x200052bc

08002584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>

08002586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258a:	2003      	movs	r0, #3
 800258c:	f000 f8f9 	bl	8002782 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002590:	2005      	movs	r0, #5
 8002592:	f7ff fa2d 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002596:	f7ff fa03 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000034 	.word	0x20000034
 80025c4:	2000078c 	.word	0x2000078c

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000078c 	.word	0x2000078c

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_Delay+0x44>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000034 	.word	0x20000034

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <__NVIC_SetPriorityGrouping+0x40>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x40>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	05fa0000 	.word	0x05fa0000

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <__NVIC_EnableIRQ+0x38>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	; (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ff4c 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027aa:	f7ff ff61 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f7ff ffb1 	bl	800271c <NVIC_EncodePriority>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff80 	bl	80026c8 <__NVIC_SetPriority>
}
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff54 	bl	800268c <__NVIC_EnableIRQ>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e014      	b.n	8002828 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	791b      	ldrb	r3, [r3, #4]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fd ff6a 	bl	80006e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	d120      	bne.n	800288a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d118      	bne.n	800288a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2204      	movs	r2, #4
 800285c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002882:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f82d 	bl	80028e4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002898:	d120      	bne.n	80028dc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d118      	bne.n	80028dc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f043 0202 	orr.w	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f85d 	bl	8002996 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	795b      	ldrb	r3, [r3, #5]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_DAC_ConfigChannel+0x18>
 800290c:	2302      	movs	r3, #2
 800290e:	e03c      	b.n	800298a <HAL_DAC_ConfigChannel+0x92>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4013      	ands	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	22c0      	movs	r2, #192	; 0xc0
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff fe06 	bl	80025c8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e099      	b.n	8002afc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e8:	e00f      	b.n	8002a0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ea:	f7ff fded 	bl	80025c8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d908      	bls.n	8002a0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e078      	b.n	8002afc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e8      	bne.n	80029ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_DMA_Init+0x158>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d107      	bne.n	8002a74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d117      	bne.n	8002ace <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00e      	beq.n	8002ace <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fb09 	bl	80030c8 <DMA_CheckFifoParam>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aca:	2301      	movs	r3, #1
 8002acc:	e016      	b.n	8002afc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fac0 	bl	800305c <DMA_CalcBaseAndBitshift>
 8002adc:	4603      	mov	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	223f      	movs	r2, #63	; 0x3f
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	e010803f 	.word	0xe010803f

08002b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Start_IT+0x26>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e048      	b.n	8002bc0 <HAL_DMA_Start_IT+0xb8>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d137      	bne.n	8002bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2202      	movs	r2, #2
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa52 	bl	8003000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	223f      	movs	r2, #63	; 0x3f
 8002b62:	409a      	lsls	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0216 	orr.w	r2, r2, #22
 8002b76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b86:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bd6:	f7ff fcf7 	bl	80025c8 <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e052      	b.n	8002ca0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0216 	bic.w	r2, r2, #22
 8002c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_DMA_Abort+0x62>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4a:	e013      	b.n	8002c74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c4c:	f7ff fcbc 	bl	80025c8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d90c      	bls.n	8002c74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e015      	b.n	8002ca0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e4      	bne.n	8002c4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	223f      	movs	r2, #63	; 0x3f
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00c      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_DMA_IRQHandler+0x248>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	; (8002f38 <HAL_DMA_IRQHandler+0x24c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e079      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02c      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	bf00      	nop
 8002f34:	2000002c 	.word	0x2000002c
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d307      	bcc.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x2cc>
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800301c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d108      	bne.n	8003040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800303e:	e007      	b.n	8003050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3b10      	subs	r3, #16
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <DMA_CalcBaseAndBitshift+0x60>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d908      	bls.n	800309c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003092:	4013      	ands	r3, r2
 8003094:	1d1a      	adds	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58
 800309a:	e006      	b.n	80030aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <DMA_CalcBaseAndBitshift+0x68>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	aaaaaaab 	.word	0xaaaaaaab
 80030c0:	0800d6c8 	.word	0x0800d6c8
 80030c4:	fffffc00 	.word	0xfffffc00

080030c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d856      	bhi.n	8003196 <DMA_CheckFifoParam+0xce>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <DMA_CheckFifoParam+0x28>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003101 	.word	0x08003101
 80030fc:	08003197 	.word	0x08003197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d046      	beq.n	800319a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e043      	b.n	800319a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311a:	d140      	bne.n	800319e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e03d      	b.n	800319e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d121      	bne.n	8003170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d837      	bhi.n	80031a2 <DMA_CheckFifoParam+0xda>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <DMA_CheckFifoParam+0x70>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003149 	.word	0x08003149
 800313c:	0800314f 	.word	0x0800314f
 8003140:	08003149 	.word	0x08003149
 8003144:	08003161 	.word	0x08003161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e030      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d025      	beq.n	80031a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e022      	b.n	80031a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800316e:	e01c      	b.n	80031aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d903      	bls.n	800317e <DMA_CheckFifoParam+0xb6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800317c:	e018      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      break;
 8003182:	e015      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e00b      	b.n	80031ae <DMA_CheckFifoParam+0xe6>
      break;
 8003196:	bf00      	nop
 8003198:	e00a      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e008      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
 80031a0:	e006      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
    }
  } 
  
  return status; 
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e175      	b.n	80034cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	f040 8164 	bne.w	80034c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d005      	beq.n	8003216 <HAL_GPIO_Init+0x56>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d130      	bne.n	8003278 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800324c:	2201      	movs	r2, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 0201 	and.w	r2, r3, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b03      	cmp	r3, #3
 8003282:	d017      	beq.n	80032b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d123      	bne.n	8003308 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	08da      	lsrs	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3208      	adds	r2, #8
 80032c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	220f      	movs	r2, #15
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	08da      	lsrs	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3208      	adds	r2, #8
 8003302:	69b9      	ldr	r1, [r7, #24]
 8003304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0203 	and.w	r2, r3, #3
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80be 	beq.w	80034c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <HAL_GPIO_Init+0x324>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a65      	ldr	r2, [pc, #404]	; (80034e4 <HAL_GPIO_Init+0x324>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_GPIO_Init+0x324>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003362:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <HAL_GPIO_Init+0x328>)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_GPIO_Init+0x32c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d037      	beq.n	80033fe <HAL_GPIO_Init+0x23e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_GPIO_Init+0x330>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_GPIO_Init+0x23a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a56      	ldr	r2, [pc, #344]	; (80034f4 <HAL_GPIO_Init+0x334>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d02b      	beq.n	80033f6 <HAL_GPIO_Init+0x236>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a55      	ldr	r2, [pc, #340]	; (80034f8 <HAL_GPIO_Init+0x338>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d025      	beq.n	80033f2 <HAL_GPIO_Init+0x232>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a54      	ldr	r2, [pc, #336]	; (80034fc <HAL_GPIO_Init+0x33c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01f      	beq.n	80033ee <HAL_GPIO_Init+0x22e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a53      	ldr	r2, [pc, #332]	; (8003500 <HAL_GPIO_Init+0x340>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_GPIO_Init+0x22a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_GPIO_Init+0x344>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0x226>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x348>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_GPIO_Init+0x222>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_GPIO_Init+0x34c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_GPIO_Init+0x21e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_GPIO_Init+0x350>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_GPIO_Init+0x21a>
 80033d6:	2309      	movs	r3, #9
 80033d8:	e012      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033da:	230a      	movs	r3, #10
 80033dc:	e010      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033de:	2308      	movs	r3, #8
 80033e0:	e00e      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033e2:	2307      	movs	r3, #7
 80033e4:	e00c      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033e6:	2306      	movs	r3, #6
 80033e8:	e00a      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033ea:	2305      	movs	r3, #5
 80033ec:	e008      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033ee:	2304      	movs	r3, #4
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033f2:	2303      	movs	r3, #3
 80033f4:	e004      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033fe:	2300      	movs	r3, #0
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f002 0203 	and.w	r2, r2, #3
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	4093      	lsls	r3, r2
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003410:	4935      	ldr	r1, [pc, #212]	; (80034e8 <HAL_GPIO_Init+0x328>)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_GPIO_Init+0x354>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003442:	4a34      	ldr	r2, [pc, #208]	; (8003514 <HAL_GPIO_Init+0x354>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_GPIO_Init+0x354>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_GPIO_Init+0x354>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_GPIO_Init+0x354>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_GPIO_Init+0x354>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_GPIO_Init+0x354>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <HAL_GPIO_Init+0x354>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	f67f ae86 	bls.w	80031e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020c00 	.word	0x40020c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	40021400 	.word	0x40021400
 8003504:	40021800 	.word	0x40021800
 8003508:	40021c00 	.word	0x40021c00
 800350c:	40022000 	.word	0x40022000
 8003510:	40022400 	.word	0x40022400
 8003514:	40013c00 	.word	0x40013c00

08003518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	619a      	str	r2, [r3, #24]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43d9      	mvns	r1, r3
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	400b      	ands	r3, r1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fdc8 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	e006      	b.n	8003608 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003606:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d104      	bne.n	800361a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003618:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_I2C_Init+0x11c>)
 8003626:	430b      	orrs	r3, r1
 8003628:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003638:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69d9      	ldr	r1, [r3, #28]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	02008000 	.word	0x02008000

080036a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	f040 80f9 	bne.w	80038ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x34>
 80036ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0ed      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Write+0x4e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0e6      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f6:	f7fe ff67 	bl	80025c8 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2319      	movs	r3, #25
 8003702:	2201      	movs	r2, #1
 8003704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f955 	bl	80039b8 <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d1      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2221      	movs	r2, #33	; 0x21
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003740:	88f8      	ldrh	r0, [r7, #6]
 8003742:	893a      	ldrh	r2, [r7, #8]
 8003744:	8979      	ldrh	r1, [r7, #10]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8b9 	bl	80038c8 <I2C_RequestMemoryWrite>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0a9      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d90e      	bls.n	8003790 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	b2da      	uxtb	r2, r3
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	2300      	movs	r3, #0
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fab1 	bl	8003cf0 <I2C_TransferConfig>
 800378e:	e00f      	b.n	80037b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8979      	ldrh	r1, [r7, #10]
 80037a2:	2300      	movs	r3, #0
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 faa0 	bl	8003cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f93f 	bl	8003a38 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e07b      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d034      	beq.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d130      	bne.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2200      	movs	r2, #0
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f8d1 	bl	80039b8 <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e04d      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d90e      	bls.n	8003848 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	22ff      	movs	r2, #255	; 0xff
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	b2da      	uxtb	r2, r3
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fa55 	bl	8003cf0 <I2C_TransferConfig>
 8003846:	e00f      	b.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa44 	bl	8003cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19e      	bne.n	80037b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f91e 	bl	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e01a      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_I2C_Mem_Write+0x224>)
 800389a:	400b      	ands	r3, r1
 800389c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e000      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fe00e800 	.word	0xfe00e800

080038c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	817b      	strh	r3, [r7, #10]
 80038da:	460b      	mov	r3, r1
 80038dc:	813b      	strh	r3, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <I2C_RequestMemoryWrite+0xa4>)
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f9fd 	bl	8003cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f89c 	bl	8003a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02c      	b.n	8003964 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
 800391a:	e015      	b.n	8003948 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f882 	bl	8003a38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e012      	b.n	8003964 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f830 	bl	80039b8 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	80002000 	.word	0x80002000

08003970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d103      	bne.n	800398e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d007      	beq.n	80039ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	619a      	str	r2, [r3, #24]
  }
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c8:	e022      	b.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d01e      	beq.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe fdf9 	bl	80025c8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d113      	bne.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e00f      	b.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d0cd      	beq.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a44:	e02c      	b.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f870 	bl	8003b30 <I2C_IsErrorOccurred>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e02a      	b.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d01e      	beq.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fe fdb1 	bl	80025c8 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d113      	bne.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e007      	b.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d1cb      	bne.n	8003a46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac4:	e028      	b.n	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f830 	bl	8003b30 <I2C_IsErrorOccurred>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e026      	b.n	8003b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe fd75 	bl	80025c8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d113      	bne.n	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d1cf      	bne.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d068      	beq.n	8003c2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2210      	movs	r2, #16
 8003b62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b64:	e049      	b.n	8003bfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d045      	beq.n	8003bfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe fd2b 	bl	80025c8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_IsErrorOccurred+0x54>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13a      	bne.n	8003bfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	d121      	bne.n	8003bec <I2C_IsErrorOccurred+0xbc>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bae:	d01d      	beq.n	8003bec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d01a      	beq.n	8003bec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bc6:	f7fe fcff 	bl	80025c8 <HAL_GetTick>
 8003bca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	e00e      	b.n	8003bec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bce:	f7fe fcfb 	bl	80025c8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b19      	cmp	r3, #25
 8003bda:	d907      	bls.n	8003bec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bea:	e006      	b.n	8003bfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d1e9      	bne.n	8003bce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d003      	beq.n	8003c10 <I2C_IsErrorOccurred+0xe0>
 8003c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0aa      	beq.n	8003b66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f043 0308 	orr.w	r3, r3, #8
 8003c68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01c      	beq.n	8003cde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fe63 	bl	8003970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <I2C_IsErrorOccurred+0x1bc>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	fe00e800 	.word	0xfe00e800

08003cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d08:	7a7b      	ldrb	r3, [r7, #9]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	0d5b      	lsrs	r3, r3, #21
 8003d2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <I2C_TransferConfig+0x60>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	43db      	mvns	r3, r3
 8003d34:	ea02 0103 	and.w	r1, r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	03ff63ff 	.word	0x03ff63ff

08003d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d138      	bne.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e032      	b.n	8003dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d139      	bne.n	8003e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e033      	b.n	8003e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2224      	movs	r2, #36	; 0x24
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb2:	f7fe fb89 	bl	80025c8 <HAL_GetTick>
 8003eb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eb8:	e009      	b.n	8003ece <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eba:	f7fe fb85 	bl	80025c8 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec8:	d901      	bls.n	8003ece <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e022      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eda:	d1ee      	bne.n	8003eba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7fe fb6e 	bl	80025c8 <HAL_GetTick>
 8003eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eee:	e009      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef0:	f7fe fb6a 	bl	80025c8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efe:	d901      	bls.n	8003f04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e007      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e29b      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f48:	4b96      	ldr	r3, [pc, #600]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f54:	4b93      	ldr	r3, [pc, #588]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d112      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62>
 8003f60:	4b90      	ldr	r3, [pc, #576]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b8d      	ldr	r3, [pc, #564]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d06c      	beq.n	8004054 <HAL_RCC_OscConfig+0x130>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d168      	bne.n	8004054 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e275      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x7a>
 8003f90:	4b84      	ldr	r3, [pc, #528]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a83      	ldr	r2, [pc, #524]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x9c>
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7e      	ldr	r2, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b7c      	ldr	r3, [pc, #496]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7b      	ldr	r2, [pc, #492]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xc0>
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b73      	ldr	r3, [pc, #460]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a72      	ldr	r2, [pc, #456]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe fae0 	bl	80025c8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fadc 	bl	80025c8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e229      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xe8>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe facc 	bl	80025c8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fac8 	bl	80025c8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e215      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b57      	ldr	r3, [pc, #348]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x110>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d069      	beq.n	8004136 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004062:	4b50      	ldr	r3, [pc, #320]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x190>
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x17a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1e9      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	493d      	ldr	r1, [pc, #244]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e040      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d023      	beq.n	8004104 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe fa7e 	bl	80025c8 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fe fa7a 	bl	80025c8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1c7      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4929      	ldr	r1, [pc, #164]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
 8004102:	e018      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe fa5a 	bl	80025c8 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004118:	f7fe fa56 	bl	80025c8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1a3      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d038      	beq.n	80041b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d019      	beq.n	800417e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fe fa37 	bl	80025c8 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fe fa33 	bl	80025c8 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e180      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x23a>
 800417c:	e01a      	b.n	80041b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fe fa1d 	bl	80025c8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe fa19 	bl	80025c8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d903      	bls.n	80041a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e166      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
 80041a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ee      	bne.n	8004192 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a4 	beq.w	800430a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b8c      	ldr	r3, [pc, #560]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b89      	ldr	r3, [pc, #548]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a88      	ldr	r2, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b86      	ldr	r3, [pc, #536]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ea:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041f6:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	; (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe f9e1 	bl	80025c8 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fe f9dd 	bl	80025c8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	; 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e12a      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x31a>
 8004230:	4b70      	ldr	r3, [pc, #448]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a6f      	ldr	r2, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	e02d      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x33c>
 8004246:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a6a      	ldr	r2, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b68      	ldr	r3, [pc, #416]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a67      	ldr	r2, [pc, #412]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	e01c      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d10c      	bne.n	8004282 <HAL_RCC_OscConfig+0x35e>
 8004268:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a61      	ldr	r2, [pc, #388]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a5e      	ldr	r2, [pc, #376]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	e00b      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a5b      	ldr	r2, [pc, #364]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fe f991 	bl	80025c8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fe f98d 	bl	80025c8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0d8      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ee      	beq.n	80042aa <HAL_RCC_OscConfig+0x386>
 80042cc:	e014      	b.n	80042f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fe f97b 	bl	80025c8 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fe f977 	bl	80025c8 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0c2      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d105      	bne.n	800430a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80ae 	beq.w	8004470 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d06d      	beq.n	80043fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d14b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe f948 	bl	80025c8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fe f944 	bl	80025c8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e091      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	491b      	ldr	r1, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe f916 	bl	80025c8 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f912 	bl	80025c8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e05f      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x47c>
 80043be:	e057      	b.n	8004470 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe f8fc 	bl	80025c8 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe f8f8 	bl	80025c8 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e045      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4b0>
 80043f2:	e03d      	b.n	8004470 <HAL_RCC_OscConfig+0x54c>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043fc:	4b1f      	ldr	r3, [pc, #124]	; (800447c <HAL_RCC_OscConfig+0x558>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d030      	beq.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d129      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d122      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004432:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004434:	4293      	cmp	r3, r2
 8004436:	d119      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d10f      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d0      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d910      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b67      	ldr	r3, [pc, #412]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	4965      	ldr	r1, [pc, #404]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b63      	ldr	r3, [pc, #396]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0b8      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f8:	4b53      	ldr	r3, [pc, #332]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	494d      	ldr	r1, [pc, #308]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d040      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07f      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e073      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e06b      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4936      	ldr	r1, [pc, #216]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fe f828 	bl	80025c8 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fe f824 	bl	80025c8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e053      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d210      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b24      	ldr	r3, [pc, #144]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 020f 	bic.w	r2, r3, #15
 80045ba:	4922      	ldr	r1, [pc, #136]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e032      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4916      	ldr	r1, [pc, #88]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	490e      	ldr	r1, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004612:	f000 f821 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490a      	ldr	r1, [pc, #40]	; (800464c <HAL_RCC_ClockConfig+0x1cc>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x1d0>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_ClockConfig+0x1d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd f9dc 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023c00 	.word	0x40023c00
 8004648:	40023800 	.word	0x40023800
 800464c:	0800d6b0 	.word	0x0800d6b0
 8004650:	2000002c 	.word	0x2000002c
 8004654:	20000030 	.word	0x20000030

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b094      	sub	sp, #80	; 0x50
 800465e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
 8004664:	2300      	movs	r3, #0
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004668:	2300      	movs	r3, #0
 800466a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004670:	4b79      	ldr	r3, [pc, #484]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d00d      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x40>
 800467c:	2b08      	cmp	r3, #8
 800467e:	f200 80e1 	bhi.w	8004844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x34>
 8004686:	2b04      	cmp	r3, #4
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x3a>
 800468a:	e0db      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b73      	ldr	r3, [pc, #460]	; (800485c <HAL_RCC_GetSysClockFreq+0x204>)
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004690:	e0db      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004692:	4b73      	ldr	r3, [pc, #460]	; (8004860 <HAL_RCC_GetSysClockFreq+0x208>)
 8004694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004696:	e0d8      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004698:	4b6f      	ldr	r3, [pc, #444]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046a2:	4b6d      	ldr	r3, [pc, #436]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2200      	movs	r2, #0
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80046b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ca:	4622      	mov	r2, r4
 80046cc:	462b      	mov	r3, r5
 80046ce:	f04f 0000 	mov.w	r0, #0
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	0159      	lsls	r1, r3, #5
 80046d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046dc:	0150      	lsls	r0, r2, #5
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4621      	mov	r1, r4
 80046e4:	1a51      	subs	r1, r2, r1
 80046e6:	6139      	str	r1, [r7, #16]
 80046e8:	4629      	mov	r1, r5
 80046ea:	eb63 0301 	sbc.w	r3, r3, r1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046fc:	4659      	mov	r1, fp
 80046fe:	018b      	lsls	r3, r1, #6
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004706:	4651      	mov	r1, sl
 8004708:	018a      	lsls	r2, r1, #6
 800470a:	4651      	mov	r1, sl
 800470c:	ebb2 0801 	subs.w	r8, r2, r1
 8004710:	4659      	mov	r1, fp
 8004712:	eb63 0901 	sbc.w	r9, r3, r1
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800472a:	4690      	mov	r8, r2
 800472c:	4699      	mov	r9, r3
 800472e:	4623      	mov	r3, r4
 8004730:	eb18 0303 	adds.w	r3, r8, r3
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	462b      	mov	r3, r5
 8004738:	eb49 0303 	adc.w	r3, r9, r3
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800474a:	4629      	mov	r1, r5
 800474c:	024b      	lsls	r3, r1, #9
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004754:	4621      	mov	r1, r4
 8004756:	024a      	lsls	r2, r1, #9
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
 8004762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004768:	f7fb fdba 	bl	80002e0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	e058      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	2200      	movs	r2, #0
 800477e:	4618      	mov	r0, r3
 8004780:	4611      	mov	r1, r2
 8004782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	0159      	lsls	r1, r3, #5
 800479e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a2:	0150      	lsls	r0, r2, #5
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4641      	mov	r1, r8
 80047aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ae:	4649      	mov	r1, r9
 80047b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047c8:	ebb2 040a 	subs.w	r4, r2, sl
 80047cc:	eb63 050b 	sbc.w	r5, r3, fp
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	00eb      	lsls	r3, r5, #3
 80047da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047de:	00e2      	lsls	r2, r4, #3
 80047e0:	4614      	mov	r4, r2
 80047e2:	461d      	mov	r5, r3
 80047e4:	4643      	mov	r3, r8
 80047e6:	18e3      	adds	r3, r4, r3
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	464b      	mov	r3, r9
 80047ec:	eb45 0303 	adc.w	r3, r5, r3
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047fe:	4629      	mov	r1, r5
 8004800:	028b      	lsls	r3, r1, #10
 8004802:	4621      	mov	r1, r4
 8004804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004808:	4621      	mov	r1, r4
 800480a:	028a      	lsls	r2, r1, #10
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004812:	2200      	movs	r2, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	61fa      	str	r2, [r7, #28]
 8004818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800481c:	f7fb fd60 	bl	80002e0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4613      	mov	r3, r2
 8004826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800483a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004842:	e002      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetSysClockFreq+0x204>)
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800484c:	4618      	mov	r0, r3
 800484e:	3750      	adds	r7, #80	; 0x50
 8004850:	46bd      	mov	sp, r7
 8004852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200

08004864 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <HAL_RCC_GetHCLKFreq+0x14>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	2000002c 	.word	0x2000002c

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004880:	f7ff fff0 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4903      	ldr	r1, [pc, #12]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	0800d6c0 	.word	0x0800d6c0

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048a8:	f7ff ffdc 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0b5b      	lsrs	r3, r3, #13
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4903      	ldr	r1, [pc, #12]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	0800d6c0 	.word	0x0800d6c0

080048cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	220f      	movs	r2, #15
 80048da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048dc:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0203 	and.w	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <HAL_RCC_GetClockConfig+0x60>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40023c00 	.word	0x40023c00

08004930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004958:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a68      	ldr	r2, [pc, #416]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004962:	6093      	str	r3, [r2, #8]
 8004964:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	4964      	ldr	r1, [pc, #400]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800498a:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	4959      	ldr	r1, [pc, #356]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a8:	d101      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	494a      	ldr	r1, [pc, #296]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e4:	d101      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 808b 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	4a39      	ldr	r2, [pc, #228]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a2c:	4b35      	ldr	r3, [pc, #212]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd fdc6 	bl	80025c8 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fd fdc2 	bl	80025c8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e38f      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d035      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d02e      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d114      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fd8a 	bl	80025c8 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fd86 	bl	80025c8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e351      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004af6:	400b      	ands	r3, r1
 8004af8:	4901      	ldr	r1, [pc, #4]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
 8004b08:	0ffffcff 	.word	0x0ffffcff
 8004b0c:	4bac      	ldr	r3, [pc, #688]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4aab      	ldr	r2, [pc, #684]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b16:	6093      	str	r3, [r2, #8]
 8004b18:	4ba9      	ldr	r3, [pc, #676]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	49a6      	ldr	r1, [pc, #664]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b36:	4ba2      	ldr	r3, [pc, #648]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	4aa0      	ldr	r2, [pc, #640]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b46:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	499b      	ldr	r1, [pc, #620]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b64:	4b96      	ldr	r3, [pc, #600]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b72:	4993      	ldr	r1, [pc, #588]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b86:	4b8e      	ldr	r3, [pc, #568]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b94:	498a      	ldr	r1, [pc, #552]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb6:	4982      	ldr	r1, [pc, #520]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bca:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4979      	ldr	r1, [pc, #484]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bec:	4b74      	ldr	r3, [pc, #464]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	4971      	ldr	r1, [pc, #452]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f023 020c 	bic.w	r2, r3, #12
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	4968      	ldr	r1, [pc, #416]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c30:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4960      	ldr	r1, [pc, #384]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c52:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	4957      	ldr	r1, [pc, #348]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c74:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	494f      	ldr	r1, [pc, #316]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4946      	ldr	r1, [pc, #280]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	493e      	ldr	r1, [pc, #248]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	4935      	ldr	r1, [pc, #212]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cfc:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	492d      	ldr	r1, [pc, #180]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d1e:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2c:	4924      	ldr	r1, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	4914      	ldr	r1, [pc, #80]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d90:	490b      	ldr	r1, [pc, #44]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db4:	4902      	ldr	r1, [pc, #8]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	4986      	ldr	r1, [pc, #536]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004df4:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e04:	497d      	ldr	r1, [pc, #500]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d006      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80d6 	beq.w	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e20:	4b76      	ldr	r3, [pc, #472]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a75      	ldr	r2, [pc, #468]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fbcc 	bl	80025c8 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e34:	f7fd fbc8 	bl	80025c8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e195      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e46:	4b6d      	ldr	r3, [pc, #436]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d021      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11d      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e66:	4b65      	ldr	r3, [pc, #404]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e74:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	0e1b      	lsrs	r3, r3, #24
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	019a      	lsls	r2, r3, #6
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	4958      	ldr	r1, [pc, #352]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02e      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ecc:	d129      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004edc:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	0f1b      	lsrs	r3, r3, #28
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	019a      	lsls	r2, r3, #6
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	493e      	ldr	r1, [pc, #248]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f10:	f023 021f 	bic.w	r2, r3, #31
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	4938      	ldr	r1, [pc, #224]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01d      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f2e:	4b33      	ldr	r3, [pc, #204]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f42:	0f1b      	lsrs	r3, r3, #28
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	431a      	orrs	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	4926      	ldr	r1, [pc, #152]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	019a      	lsls	r2, r3, #6
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491a      	ldr	r1, [pc, #104]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fd fb0f 	bl	80025c8 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fd fb0b 	bl	80025c8 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b64      	cmp	r3, #100	; 0x64
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0d8      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f040 80ce 	bne.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe0:	f7fd faf2 	bl	80025c8 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe6:	e00b      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fe8:	f7fd faee 	bl	80025c8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d904      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0bb      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005000:	4b5e      	ldr	r3, [pc, #376]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500c:	d0ec      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d12a      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005036:	4b51      	ldr	r3, [pc, #324]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005044:	4b4d      	ldr	r3, [pc, #308]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	0f1b      	lsrs	r3, r3, #28
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	4944      	ldr	r1, [pc, #272]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005072:	4b42      	ldr	r3, [pc, #264]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	493d      	ldr	r1, [pc, #244]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d022      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a0:	d11d      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	0f1b      	lsrs	r3, r3, #28
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	019a      	lsls	r2, r3, #6
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	071b      	lsls	r3, r3, #28
 80050d6:	4929      	ldr	r1, [pc, #164]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d028      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	019a      	lsls	r2, r3, #6
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	4917      	ldr	r1, [pc, #92]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4911      	ldr	r1, [pc, #68]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0e      	ldr	r2, [pc, #56]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fd fa3e 	bl	80025c8 <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005150:	f7fd fa3a 	bl	80025c8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e007      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516e:	d1ef      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e09d      	b.n	80052ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d108      	bne.n	80051ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d009      	beq.n	80051b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	61da      	str	r2, [r3, #28]
 80051aa:	e005      	b.n	80051b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc f920 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f8:	d902      	bls.n	8005200 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e002      	b.n	8005206 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005204:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800520e:	d007      	beq.n	8005220 <HAL_SPI_Init+0xa0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005218:	d002      	beq.n	8005220 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	ea42 0103 	orr.w	r1, r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 0204 	and.w	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800529c:	ea42 0103 	orr.w	r1, r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_SPI_Transmit+0x22>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e158      	b.n	80055aa <HAL_SPI_Transmit+0x2d4>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005300:	f7fd f962 	bl	80025c8 <HAL_GetTick>
 8005304:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d002      	beq.n	800531c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005316:	2302      	movs	r3, #2
 8005318:	77fb      	strb	r3, [r7, #31]
    goto error;
 800531a:	e13d      	b.n	8005598 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Transmit+0x52>
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800532c:	e134      	b.n	8005598 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2203      	movs	r2, #3
 8005332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005378:	d10f      	bne.n	800539a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005398:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d007      	beq.n	80053b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c0:	d94b      	bls.n	800545a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_SPI_Transmit+0xfa>
 80053ca:	8afb      	ldrh	r3, [r7, #22]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d13e      	bne.n	800544e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	881a      	ldrh	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	1c9a      	adds	r2, r3, #2
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053f4:	e02b      	b.n	800544e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d112      	bne.n	800542a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	881a      	ldrh	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	1c9a      	adds	r2, r3, #2
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005428:	e011      	b.n	800544e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542a:	f7fd f8cd 	bl	80025c8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d803      	bhi.n	8005442 <HAL_SPI_Transmit+0x16c>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d102      	bne.n	8005448 <HAL_SPI_Transmit+0x172>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800544c:	e0a4      	b.n	8005598 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ce      	bne.n	80053f6 <HAL_SPI_Transmit+0x120>
 8005458:	e07c      	b.n	8005554 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x192>
 8005462:	8afb      	ldrh	r3, [r7, #22]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d170      	bne.n	800554a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d912      	bls.n	8005498 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	881a      	ldrh	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b02      	subs	r3, #2
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005496:	e058      	b.n	800554a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	7812      	ldrb	r2, [r2, #0]
 80054a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80054be:	e044      	b.n	800554a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d12b      	bne.n	8005526 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d912      	bls.n	80054fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b02      	subs	r3, #2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054fc:	e025      	b.n	800554a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005524:	e011      	b.n	800554a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005526:	f7fd f84f 	bl	80025c8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d803      	bhi.n	800553e <HAL_SPI_Transmit+0x268>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d102      	bne.n	8005544 <HAL_SPI_Transmit+0x26e>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005548:	e026      	b.n	8005598 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1b5      	bne.n	80054c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fadd 	bl	8005b18 <SPI_EndRxTxTransaction>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e000      	b.n	8005598 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_SPI_Transmit_DMA+0x20>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e0d8      	b.n	8005786 <HAL_SPI_Transmit_DMA+0x1d2>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d002      	beq.n	80055ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80055e8:	2302      	movs	r3, #2
 80055ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ec:	e0c6      	b.n	800577c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Transmit_DMA+0x46>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055fe:	e0bd      	b.n	800577c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2203      	movs	r2, #3
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564a:	d10f      	bne.n	800566c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	4a47      	ldr	r2, [pc, #284]	; (8005790 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	4a46      	ldr	r2, [pc, #280]	; (8005794 <HAL_SPI_Transmit_DMA+0x1e0>)
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	4a45      	ldr	r2, [pc, #276]	; (8005798 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	2200      	movs	r2, #0
 800568a:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800569a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a4:	d82d      	bhi.n	8005702 <HAL_SPI_Transmit_DMA+0x14e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d127      	bne.n	8005702 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10f      	bne.n	80056e0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056de:	e010      	b.n	8005702 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	4619      	mov	r1, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800571a:	f7fd f9f5 	bl	8002b08 <HAL_DMA_Start_IT>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005728:	f043 0210 	orr.w	r2, r3, #16
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800573c:	e01e      	b.n	800577c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d007      	beq.n	800575c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0220 	orr.w	r2, r2, #32
 800576a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0202 	orr.w	r2, r2, #2
 800577a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	08005881 	.word	0x08005881
 8005794:	080057d9 	.word	0x080057d9
 8005798:	0800589d 	.word	0x0800589d

0800579c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e6:	f7fc feef 	bl	80025c8 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	d03b      	beq.n	8005874 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0220 	bic.w	r2, r2, #32
 800580a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0202 	bic.w	r2, r2, #2
 800581a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	2164      	movs	r1, #100	; 0x64
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f000 f979 	bl	8005b18 <SPI_EndRxTxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800586c:	6978      	ldr	r0, [r7, #20]
 800586e:	f7ff ffa9 	bl	80057c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005872:	e002      	b.n	800587a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005874:	6978      	ldr	r0, [r7, #20]
 8005876:	f7ff ff91 	bl	800579c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff ff8e 	bl	80057b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0203 	bic.w	r2, r2, #3
 80058b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058be:	f043 0210 	orr.w	r2, r3, #16
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ff78 	bl	80057c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058ec:	f7fc fe6c 	bl	80025c8 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058fc:	f7fc fe64 	bl	80025c8 <HAL_GetTick>
 8005900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	015b      	lsls	r3, r3, #5
 8005908:	0d1b      	lsrs	r3, r3, #20
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	e054      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d050      	beq.n	80059be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800591c:	f7fc fe54 	bl	80025c8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	429a      	cmp	r2, r3
 800592a:	d902      	bls.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d13d      	bne.n	80059ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594a:	d111      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005954:	d004      	beq.n	8005960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595e:	d107      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005978:	d10f      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e017      	b.n	80059de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d19b      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000002c 	.word	0x2000002c

080059ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059fe:	f7fc fde3 	bl	80025c8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a0e:	f7fc fddb 	bl	80025c8 <HAL_GetTick>
 8005a12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	0d1b      	lsrs	r3, r3, #20
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a34:	e060      	b.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a3c:	d107      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d050      	beq.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a56:	f7fc fdb7 	bl	80025c8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d13d      	bne.n	8005ae8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a84:	d111      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8e:	d004      	beq.n	8005a9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d107      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d10f      	bne.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e010      	b.n	8005b0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d196      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000002c 	.word	0x2000002c

08005b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff ff5b 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e046      	b.n	8005bda <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <SPI_EndRxTxTransaction+0xcc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <SPI_EndRxTxTransaction+0xd0>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	0d5b      	lsrs	r3, r3, #21
 8005b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	d112      	bne.n	8005b92 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff feb0 	bl	80058dc <SPI_WaitFlagStateUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e023      	b.n	8005bda <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	d0f2      	beq.n	8005b92 <SPI_EndRxTxTransaction+0x7a>
 8005bac:	e000      	b.n	8005bb0 <SPI_EndRxTxTransaction+0x98>
        break;
 8005bae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff15 	bl	80059ec <SPI_WaitFifoStateUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e000      	b.n	8005bda <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2000002c 	.word	0x2000002c
 8005be8:	165e9f81 	.word	0x165e9f81

08005bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e049      	b.n	8005c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f841 	bl	8005c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f000 fb6a 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d001      	beq.n	8005cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e054      	b.n	8005d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d022      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf2:	d01d      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d018      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d115      	bne.n	8005d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <HAL_TIM_Base_Start_IT+0xec>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d015      	beq.n	8005d6e <HAL_TIM_Base_Start_IT+0xbe>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d48:	d011      	beq.n	8005d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	e008      	b.n	8005d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e000      	b.n	8005d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40001800 	.word	0x40001800
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e049      	b.n	8005e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb ffda 	bl	8001d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 fa90 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d122      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d11b      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0202 	mvn.w	r2, #2
 8005e7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa19 	bl	80062c8 <HAL_TIM_IC_CaptureCallback>
 8005e96:	e005      	b.n	8005ea4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fa0b 	bl	80062b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa1c 	bl	80062dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d122      	bne.n	8005efe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d11b      	bne.n	8005efe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0204 	mvn.w	r2, #4
 8005ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9ef 	bl	80062c8 <HAL_TIM_IC_CaptureCallback>
 8005eea:	e005      	b.n	8005ef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f9e1 	bl	80062b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9f2 	bl	80062dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d122      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d11b      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f06f 0208 	mvn.w	r2, #8
 8005f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2204      	movs	r2, #4
 8005f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9c5 	bl	80062c8 <HAL_TIM_IC_CaptureCallback>
 8005f3e:	e005      	b.n	8005f4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9b7 	bl	80062b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c8 	bl	80062dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d122      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d11b      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f06f 0210 	mvn.w	r2, #16
 8005f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f99b 	bl	80062c8 <HAL_TIM_IC_CaptureCallback>
 8005f92:	e005      	b.n	8005fa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f98d 	bl	80062b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f99e 	bl	80062dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d10e      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f06f 0201 	mvn.w	r2, #1
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fb f9cd 	bl	800136c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d10e      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d107      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fd19 	bl	8006a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fd0c 	bl	8006a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d107      	bne.n	8006058 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f94c 	bl	80062f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b20      	cmp	r3, #32
 8006064:	d10e      	bne.n	8006084 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b20      	cmp	r3, #32
 8006072:	d107      	bne.n	8006084 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0220 	mvn.w	r2, #32
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fccc 	bl	8006a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e0ff      	b.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b14      	cmp	r3, #20
 80060b6:	f200 80f0 	bhi.w	800629a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	08006115 	.word	0x08006115
 80060c4:	0800629b 	.word	0x0800629b
 80060c8:	0800629b 	.word	0x0800629b
 80060cc:	0800629b 	.word	0x0800629b
 80060d0:	08006155 	.word	0x08006155
 80060d4:	0800629b 	.word	0x0800629b
 80060d8:	0800629b 	.word	0x0800629b
 80060dc:	0800629b 	.word	0x0800629b
 80060e0:	08006197 	.word	0x08006197
 80060e4:	0800629b 	.word	0x0800629b
 80060e8:	0800629b 	.word	0x0800629b
 80060ec:	0800629b 	.word	0x0800629b
 80060f0:	080061d7 	.word	0x080061d7
 80060f4:	0800629b 	.word	0x0800629b
 80060f8:	0800629b 	.word	0x0800629b
 80060fc:	0800629b 	.word	0x0800629b
 8006100:	08006219 	.word	0x08006219
 8006104:	0800629b 	.word	0x0800629b
 8006108:	0800629b 	.word	0x0800629b
 800610c:	0800629b 	.word	0x0800629b
 8006110:	08006259 	.word	0x08006259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f992 	bl	8006444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0208 	orr.w	r2, r2, #8
 800612e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	619a      	str	r2, [r3, #24]
      break;
 8006152:	e0a5      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f9e4 	bl	8006528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	619a      	str	r2, [r3, #24]
      break;
 8006194:	e084      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fa3b 	bl	8006618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0204 	bic.w	r2, r2, #4
 80061c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	61da      	str	r2, [r3, #28]
      break;
 80061d4:	e064      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fa91 	bl	8006704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	61da      	str	r2, [r3, #28]
      break;
 8006216:	e043      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fac8 	bl	80067b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006256:	e023      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fafa 	bl	8006858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006298:	e002      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop

080062b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a40      	ldr	r2, [pc, #256]	; (8006418 <TIM_Base_SetConfig+0x114>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d013      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d00f      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a3d      	ldr	r2, [pc, #244]	; (800641c <TIM_Base_SetConfig+0x118>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00b      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a3c      	ldr	r2, [pc, #240]	; (8006420 <TIM_Base_SetConfig+0x11c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3b      	ldr	r2, [pc, #236]	; (8006424 <TIM_Base_SetConfig+0x120>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3a      	ldr	r2, [pc, #232]	; (8006428 <TIM_Base_SetConfig+0x124>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d108      	bne.n	8006356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <TIM_Base_SetConfig+0x114>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d02b      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d027      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2c      	ldr	r2, [pc, #176]	; (800641c <TIM_Base_SetConfig+0x118>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d023      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2b      	ldr	r2, [pc, #172]	; (8006420 <TIM_Base_SetConfig+0x11c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01f      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <TIM_Base_SetConfig+0x120>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01b      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a29      	ldr	r2, [pc, #164]	; (8006428 <TIM_Base_SetConfig+0x124>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d017      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a28      	ldr	r2, [pc, #160]	; (800642c <TIM_Base_SetConfig+0x128>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a27      	ldr	r2, [pc, #156]	; (8006430 <TIM_Base_SetConfig+0x12c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00f      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <TIM_Base_SetConfig+0x130>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00b      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a25      	ldr	r2, [pc, #148]	; (8006438 <TIM_Base_SetConfig+0x134>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d007      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a24      	ldr	r2, [pc, #144]	; (800643c <TIM_Base_SetConfig+0x138>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a23      	ldr	r2, [pc, #140]	; (8006440 <TIM_Base_SetConfig+0x13c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d108      	bne.n	80063c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <TIM_Base_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0xf8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <TIM_Base_SetConfig+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d103      	bne.n	8006404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	615a      	str	r2, [r3, #20]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40010400 	.word	0x40010400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800
 8006438:	40001800 	.word	0x40001800
 800643c:	40001c00 	.word	0x40001c00
 8006440:	40002000 	.word	0x40002000

08006444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0201 	bic.w	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4b2b      	ldr	r3, [pc, #172]	; (800651c <TIM_OC1_SetConfig+0xd8>)
 8006470:	4013      	ands	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0302 	bic.w	r3, r3, #2
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <TIM_OC1_SetConfig+0xdc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC1_SetConfig+0x64>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a20      	ldr	r2, [pc, #128]	; (8006524 <TIM_OC1_SetConfig+0xe0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10c      	bne.n	80064c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0308 	bic.w	r3, r3, #8
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a16      	ldr	r2, [pc, #88]	; (8006520 <TIM_OC1_SetConfig+0xdc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC1_SetConfig+0x8e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a15      	ldr	r2, [pc, #84]	; (8006524 <TIM_OC1_SetConfig+0xe0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d111      	bne.n	80064f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	621a      	str	r2, [r3, #32]
}
 8006510:	bf00      	nop
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	fffeff8f 	.word	0xfffeff8f
 8006520:	40010000 	.word	0x40010000
 8006524:	40010400 	.word	0x40010400

08006528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0210 	bic.w	r2, r3, #16
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4b2e      	ldr	r3, [pc, #184]	; (800660c <TIM_OC2_SetConfig+0xe4>)
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a23      	ldr	r2, [pc, #140]	; (8006610 <TIM_OC2_SetConfig+0xe8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC2_SetConfig+0x68>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a22      	ldr	r2, [pc, #136]	; (8006614 <TIM_OC2_SetConfig+0xec>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10d      	bne.n	80065ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <TIM_OC2_SetConfig+0xe8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC2_SetConfig+0x94>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a17      	ldr	r2, [pc, #92]	; (8006614 <TIM_OC2_SetConfig+0xec>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d113      	bne.n	80065e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	feff8fff 	.word	0xfeff8fff
 8006610:	40010000 	.word	0x40010000
 8006614:	40010400 	.word	0x40010400

08006618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <TIM_OC3_SetConfig+0xe0>)
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a22      	ldr	r2, [pc, #136]	; (80066fc <TIM_OC3_SetConfig+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_OC3_SetConfig+0x66>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a21      	ldr	r2, [pc, #132]	; (8006700 <TIM_OC3_SetConfig+0xe8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d10d      	bne.n	800669a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <TIM_OC3_SetConfig+0xe4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC3_SetConfig+0x92>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <TIM_OC3_SetConfig+0xe8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d113      	bne.n	80066d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	fffeff8f 	.word	0xfffeff8f
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <TIM_OC4_SetConfig+0xa4>)
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	031b      	lsls	r3, r3, #12
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a13      	ldr	r2, [pc, #76]	; (80067ac <TIM_OC4_SetConfig+0xa8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC4_SetConfig+0x68>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a12      	ldr	r2, [pc, #72]	; (80067b0 <TIM_OC4_SetConfig+0xac>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d109      	bne.n	8006780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	feff8fff 	.word	0xfeff8fff
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40010400 	.word	0x40010400

080067b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4b1b      	ldr	r3, [pc, #108]	; (800684c <TIM_OC5_SetConfig+0x98>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a12      	ldr	r2, [pc, #72]	; (8006850 <TIM_OC5_SetConfig+0x9c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_OC5_SetConfig+0x5e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a11      	ldr	r2, [pc, #68]	; (8006854 <TIM_OC5_SetConfig+0xa0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d109      	bne.n	8006826 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	fffeff8f 	.word	0xfffeff8f
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <TIM_OC6_SetConfig+0x9c>)
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800689a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	051b      	lsls	r3, r3, #20
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a13      	ldr	r2, [pc, #76]	; (80068f8 <TIM_OC6_SetConfig+0xa0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC6_SetConfig+0x60>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a12      	ldr	r2, [pc, #72]	; (80068fc <TIM_OC6_SetConfig+0xa4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d109      	bne.n	80068cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	feff8fff 	.word	0xfeff8fff
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40010400 	.word	0x40010400

08006900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006914:	2302      	movs	r3, #2
 8006916:	e06d      	b.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a30      	ldr	r2, [pc, #192]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2f      	ldr	r2, [pc, #188]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d108      	bne.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d01d      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10c      	bne.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40010400 	.word	0x40010400
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40001800 	.word	0x40001800

08006a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e040      	b.n	8006aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fb fa08 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0201 	bic.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb82 	bl	80071a0 <UART_SetConfig>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e022      	b.n	8006aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fdda 	bl	8007668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fe61 	bl	80077ac <UART_CheckIdleState>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d132      	bne.n	8006b72 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_UART_Receive_IT+0x24>
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e02b      	b.n	8006b74 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d018      	beq.n	8006b62 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e6      	bne.n	8006b30 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 ff33 	bl	80079d4 <UART_Start_Receive_IT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	e000      	b.n	8006b74 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b0ba      	sub	sp, #232	; 0xe8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ba2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ba6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006baa:	4013      	ands	r3, r2
 8006bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d115      	bne.n	8006be4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00f      	beq.n	8006be4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d009      	beq.n	8006be4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 82ac 	beq.w	8007132 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
      }
      return;
 8006be2:	e2a6      	b.n	8007132 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8117 	beq.w	8006e1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bfe:	4b85      	ldr	r3, [pc, #532]	; (8006e14 <HAL_UART_IRQHandler+0x298>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 810a 	beq.w	8006e1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d011      	beq.n	8006c38 <HAL_UART_IRQHandler+0xbc>
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2e:	f043 0201 	orr.w	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d011      	beq.n	8006c68 <HAL_UART_IRQHandler+0xec>
 8006c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2202      	movs	r2, #2
 8006c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5e:	f043 0204 	orr.w	r2, r3, #4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d011      	beq.n	8006c98 <HAL_UART_IRQHandler+0x11c>
 8006c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2204      	movs	r2, #4
 8006c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8e:	f043 0202 	orr.w	r2, r3, #2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cca:	f043 0208 	orr.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d012      	beq.n	8006d06 <HAL_UART_IRQHandler+0x18a>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00c      	beq.n	8006d06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8212 	beq.w	8007136 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d005      	beq.n	8006d5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d04f      	beq.n	8006dfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fefe 	bl	8007b60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d141      	bne.n	8006df6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1d9      	bne.n	8006d72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d013      	beq.n	8006dee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <HAL_UART_IRQHandler+0x29c>)
 8006dcc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fb ff68 	bl	8002ca8 <HAL_DMA_Abort_IT>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d017      	beq.n	8006e0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dec:	e00f      	b.n	8006e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f9b6 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	e00b      	b.n	8006e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9b2 	bl	8007160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfc:	e007      	b.n	8006e0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9ae 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e0c:	e193      	b.n	8007136 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0e:	bf00      	nop
    return;
 8006e10:	e191      	b.n	8007136 <HAL_UART_IRQHandler+0x5ba>
 8006e12:	bf00      	nop
 8006e14:	04000120 	.word	0x04000120
 8006e18:	08007c29 	.word	0x08007c29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 814c 	bne.w	80070be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8145 	beq.w	80070be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 813e 	beq.w	80070be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2210      	movs	r2, #16
 8006e48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b40      	cmp	r3, #64	; 0x40
 8006e56:	f040 80b6 	bne.w	8006fc6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8165 	beq.w	800713a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	f080 815d 	bcs.w	800713a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e94:	f000 8086 	beq.w	8006fa4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ec6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1da      	bne.n	8006e98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e1      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e3      	bne.n	8006f1e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f74:	f023 0310 	bic.w	r3, r3, #16
 8006f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e4      	bne.n	8006f64 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fb fe12 	bl	8002bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8d8 	bl	8007174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fc4:	e0b9      	b.n	800713a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80ab 	beq.w	800713e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80a6 	beq.w	800713e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
 8007016:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800701a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e4      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	623b      	str	r3, [r7, #32]
   return(result);
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800704c:	633a      	str	r2, [r7, #48]	; 0x30
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e3      	bne.n	8007028 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	60fb      	str	r3, [r7, #12]
   return(result);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f023 0310 	bic.w	r3, r3, #16
 8007088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	69b9      	ldr	r1, [r7, #24]
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	617b      	str	r3, [r7, #20]
   return(result);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e4      	bne.n	8007074 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f85c 	bl	8007174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070bc:	e03f      	b.n	800713e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <HAL_UART_IRQHandler+0x56c>
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f853 	bl	800718c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070e6:	e02d      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01c      	beq.n	8007142 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
    }
    return;
 8007110:	e017      	b.n	8007142 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d012      	beq.n	8007144 <HAL_UART_IRQHandler+0x5c8>
 800711e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00c      	beq.n	8007144 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fd92 	bl	8007c54 <UART_EndTransmit_IT>
    return;
 8007130:	e008      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007132:	bf00      	nop
 8007134:	e006      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007136:	bf00      	nop
 8007138:	e004      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
      return;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
      return;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007142:	bf00      	nop
  }

}
 8007144:	37e8      	adds	r7, #232	; 0xe8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop

0800714c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4ba6      	ldr	r3, [pc, #664]	; (8007464 <UART_SetConfig+0x2c4>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a94      	ldr	r2, [pc, #592]	; (8007468 <UART_SetConfig+0x2c8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d120      	bne.n	800725e <UART_SetConfig+0xbe>
 800721c:	4b93      	ldr	r3, [pc, #588]	; (800746c <UART_SetConfig+0x2cc>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d816      	bhi.n	8007258 <UART_SetConfig+0xb8>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x90>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007241 	.word	0x08007241
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007247 	.word	0x08007247
 800723c:	08007253 	.word	0x08007253
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e150      	b.n	80074e8 <UART_SetConfig+0x348>
 8007246:	2302      	movs	r3, #2
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e14d      	b.n	80074e8 <UART_SetConfig+0x348>
 800724c:	2304      	movs	r3, #4
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e14a      	b.n	80074e8 <UART_SetConfig+0x348>
 8007252:	2308      	movs	r3, #8
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e147      	b.n	80074e8 <UART_SetConfig+0x348>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e144      	b.n	80074e8 <UART_SetConfig+0x348>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a83      	ldr	r2, [pc, #524]	; (8007470 <UART_SetConfig+0x2d0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d132      	bne.n	80072ce <UART_SetConfig+0x12e>
 8007268:	4b80      	ldr	r3, [pc, #512]	; (800746c <UART_SetConfig+0x2cc>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f003 030c 	and.w	r3, r3, #12
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d828      	bhi.n	80072c8 <UART_SetConfig+0x128>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0xdc>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072b7 	.word	0x080072b7
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	2300      	movs	r3, #0
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e118      	b.n	80074e8 <UART_SetConfig+0x348>
 80072b6:	2302      	movs	r3, #2
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e115      	b.n	80074e8 <UART_SetConfig+0x348>
 80072bc:	2304      	movs	r3, #4
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e112      	b.n	80074e8 <UART_SetConfig+0x348>
 80072c2:	2308      	movs	r3, #8
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e10f      	b.n	80074e8 <UART_SetConfig+0x348>
 80072c8:	2310      	movs	r3, #16
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e10c      	b.n	80074e8 <UART_SetConfig+0x348>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a68      	ldr	r2, [pc, #416]	; (8007474 <UART_SetConfig+0x2d4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d120      	bne.n	800731a <UART_SetConfig+0x17a>
 80072d8:	4b64      	ldr	r3, [pc, #400]	; (800746c <UART_SetConfig+0x2cc>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072e2:	2b30      	cmp	r3, #48	; 0x30
 80072e4:	d013      	beq.n	800730e <UART_SetConfig+0x16e>
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d814      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d009      	beq.n	8007302 <UART_SetConfig+0x162>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d810      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <UART_SetConfig+0x15c>
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d006      	beq.n	8007308 <UART_SetConfig+0x168>
 80072fa:	e00b      	b.n	8007314 <UART_SetConfig+0x174>
 80072fc:	2300      	movs	r3, #0
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e0f2      	b.n	80074e8 <UART_SetConfig+0x348>
 8007302:	2302      	movs	r3, #2
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0ef      	b.n	80074e8 <UART_SetConfig+0x348>
 8007308:	2304      	movs	r3, #4
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e0ec      	b.n	80074e8 <UART_SetConfig+0x348>
 800730e:	2308      	movs	r3, #8
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e0e9      	b.n	80074e8 <UART_SetConfig+0x348>
 8007314:	2310      	movs	r3, #16
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e0e6      	b.n	80074e8 <UART_SetConfig+0x348>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a56      	ldr	r2, [pc, #344]	; (8007478 <UART_SetConfig+0x2d8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d120      	bne.n	8007366 <UART_SetConfig+0x1c6>
 8007324:	4b51      	ldr	r3, [pc, #324]	; (800746c <UART_SetConfig+0x2cc>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800732e:	2bc0      	cmp	r3, #192	; 0xc0
 8007330:	d013      	beq.n	800735a <UART_SetConfig+0x1ba>
 8007332:	2bc0      	cmp	r3, #192	; 0xc0
 8007334:	d814      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d009      	beq.n	800734e <UART_SetConfig+0x1ae>
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d810      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <UART_SetConfig+0x1a8>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d006      	beq.n	8007354 <UART_SetConfig+0x1b4>
 8007346:	e00b      	b.n	8007360 <UART_SetConfig+0x1c0>
 8007348:	2300      	movs	r3, #0
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e0cc      	b.n	80074e8 <UART_SetConfig+0x348>
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e0c9      	b.n	80074e8 <UART_SetConfig+0x348>
 8007354:	2304      	movs	r3, #4
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e0c6      	b.n	80074e8 <UART_SetConfig+0x348>
 800735a:	2308      	movs	r3, #8
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e0c3      	b.n	80074e8 <UART_SetConfig+0x348>
 8007360:	2310      	movs	r3, #16
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e0c0      	b.n	80074e8 <UART_SetConfig+0x348>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a44      	ldr	r2, [pc, #272]	; (800747c <UART_SetConfig+0x2dc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d125      	bne.n	80073bc <UART_SetConfig+0x21c>
 8007370:	4b3e      	ldr	r3, [pc, #248]	; (800746c <UART_SetConfig+0x2cc>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737e:	d017      	beq.n	80073b0 <UART_SetConfig+0x210>
 8007380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007384:	d817      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800738a:	d00b      	beq.n	80073a4 <UART_SetConfig+0x204>
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d811      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <UART_SetConfig+0x1fe>
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	d006      	beq.n	80073aa <UART_SetConfig+0x20a>
 800739c:	e00b      	b.n	80073b6 <UART_SetConfig+0x216>
 800739e:	2300      	movs	r3, #0
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e0a1      	b.n	80074e8 <UART_SetConfig+0x348>
 80073a4:	2302      	movs	r3, #2
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e09e      	b.n	80074e8 <UART_SetConfig+0x348>
 80073aa:	2304      	movs	r3, #4
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e09b      	b.n	80074e8 <UART_SetConfig+0x348>
 80073b0:	2308      	movs	r3, #8
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e098      	b.n	80074e8 <UART_SetConfig+0x348>
 80073b6:	2310      	movs	r3, #16
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e095      	b.n	80074e8 <UART_SetConfig+0x348>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <UART_SetConfig+0x2e0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d125      	bne.n	8007412 <UART_SetConfig+0x272>
 80073c6:	4b29      	ldr	r3, [pc, #164]	; (800746c <UART_SetConfig+0x2cc>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d4:	d017      	beq.n	8007406 <UART_SetConfig+0x266>
 80073d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073da:	d817      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e0:	d00b      	beq.n	80073fa <UART_SetConfig+0x25a>
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e6:	d811      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <UART_SetConfig+0x254>
 80073ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f0:	d006      	beq.n	8007400 <UART_SetConfig+0x260>
 80073f2:	e00b      	b.n	800740c <UART_SetConfig+0x26c>
 80073f4:	2301      	movs	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e076      	b.n	80074e8 <UART_SetConfig+0x348>
 80073fa:	2302      	movs	r3, #2
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e073      	b.n	80074e8 <UART_SetConfig+0x348>
 8007400:	2304      	movs	r3, #4
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e070      	b.n	80074e8 <UART_SetConfig+0x348>
 8007406:	2308      	movs	r3, #8
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e06d      	b.n	80074e8 <UART_SetConfig+0x348>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e06a      	b.n	80074e8 <UART_SetConfig+0x348>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <UART_SetConfig+0x2e4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d138      	bne.n	800748e <UART_SetConfig+0x2ee>
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <UART_SetConfig+0x2cc>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800742a:	d017      	beq.n	800745c <UART_SetConfig+0x2bc>
 800742c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007430:	d82a      	bhi.n	8007488 <UART_SetConfig+0x2e8>
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d00b      	beq.n	8007450 <UART_SetConfig+0x2b0>
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d824      	bhi.n	8007488 <UART_SetConfig+0x2e8>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <UART_SetConfig+0x2aa>
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d006      	beq.n	8007456 <UART_SetConfig+0x2b6>
 8007448:	e01e      	b.n	8007488 <UART_SetConfig+0x2e8>
 800744a:	2300      	movs	r3, #0
 800744c:	77fb      	strb	r3, [r7, #31]
 800744e:	e04b      	b.n	80074e8 <UART_SetConfig+0x348>
 8007450:	2302      	movs	r3, #2
 8007452:	77fb      	strb	r3, [r7, #31]
 8007454:	e048      	b.n	80074e8 <UART_SetConfig+0x348>
 8007456:	2304      	movs	r3, #4
 8007458:	77fb      	strb	r3, [r7, #31]
 800745a:	e045      	b.n	80074e8 <UART_SetConfig+0x348>
 800745c:	2308      	movs	r3, #8
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e042      	b.n	80074e8 <UART_SetConfig+0x348>
 8007462:	bf00      	nop
 8007464:	efff69f3 	.word	0xefff69f3
 8007468:	40011000 	.word	0x40011000
 800746c:	40023800 	.word	0x40023800
 8007470:	40004400 	.word	0x40004400
 8007474:	40004800 	.word	0x40004800
 8007478:	40004c00 	.word	0x40004c00
 800747c:	40005000 	.word	0x40005000
 8007480:	40011400 	.word	0x40011400
 8007484:	40007800 	.word	0x40007800
 8007488:	2310      	movs	r3, #16
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e02c      	b.n	80074e8 <UART_SetConfig+0x348>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a72      	ldr	r2, [pc, #456]	; (800765c <UART_SetConfig+0x4bc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d125      	bne.n	80074e4 <UART_SetConfig+0x344>
 8007498:	4b71      	ldr	r3, [pc, #452]	; (8007660 <UART_SetConfig+0x4c0>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074a6:	d017      	beq.n	80074d8 <UART_SetConfig+0x338>
 80074a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074ac:	d817      	bhi.n	80074de <UART_SetConfig+0x33e>
 80074ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b2:	d00b      	beq.n	80074cc <UART_SetConfig+0x32c>
 80074b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b8:	d811      	bhi.n	80074de <UART_SetConfig+0x33e>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <UART_SetConfig+0x326>
 80074be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c2:	d006      	beq.n	80074d2 <UART_SetConfig+0x332>
 80074c4:	e00b      	b.n	80074de <UART_SetConfig+0x33e>
 80074c6:	2300      	movs	r3, #0
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e00d      	b.n	80074e8 <UART_SetConfig+0x348>
 80074cc:	2302      	movs	r3, #2
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e00a      	b.n	80074e8 <UART_SetConfig+0x348>
 80074d2:	2304      	movs	r3, #4
 80074d4:	77fb      	strb	r3, [r7, #31]
 80074d6:	e007      	b.n	80074e8 <UART_SetConfig+0x348>
 80074d8:	2308      	movs	r3, #8
 80074da:	77fb      	strb	r3, [r7, #31]
 80074dc:	e004      	b.n	80074e8 <UART_SetConfig+0x348>
 80074de:	2310      	movs	r3, #16
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	e001      	b.n	80074e8 <UART_SetConfig+0x348>
 80074e4:	2310      	movs	r3, #16
 80074e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f0:	d15b      	bne.n	80075aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d828      	bhi.n	800754a <UART_SetConfig+0x3aa>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x360>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007525 	.word	0x08007525
 8007504:	0800752d 	.word	0x0800752d
 8007508:	08007535 	.word	0x08007535
 800750c:	0800754b 	.word	0x0800754b
 8007510:	0800753b 	.word	0x0800753b
 8007514:	0800754b 	.word	0x0800754b
 8007518:	0800754b 	.word	0x0800754b
 800751c:	0800754b 	.word	0x0800754b
 8007520:	08007543 	.word	0x08007543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007524:	f7fd f9aa 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8007528:	61b8      	str	r0, [r7, #24]
        break;
 800752a:	e013      	b.n	8007554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800752c:	f7fd f9ba 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8007530:	61b8      	str	r0, [r7, #24]
        break;
 8007532:	e00f      	b.n	8007554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007534:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <UART_SetConfig+0x4c4>)
 8007536:	61bb      	str	r3, [r7, #24]
        break;
 8007538:	e00c      	b.n	8007554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753a:	f7fd f88d 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 800753e:	61b8      	str	r0, [r7, #24]
        break;
 8007540:	e008      	b.n	8007554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	61bb      	str	r3, [r7, #24]
        break;
 8007548:	e004      	b.n	8007554 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	77bb      	strb	r3, [r7, #30]
        break;
 8007552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d074      	beq.n	8007644 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	005a      	lsls	r2, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	fbb2 f3f3 	udiv	r3, r2, r3
 800756e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	d916      	bls.n	80075a4 <UART_SetConfig+0x404>
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d212      	bcs.n	80075a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f023 030f 	bic.w	r3, r3, #15
 8007586:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	b29a      	uxth	r2, r3
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	4313      	orrs	r3, r2
 8007598:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	89fa      	ldrh	r2, [r7, #14]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	e04f      	b.n	8007644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	77bb      	strb	r3, [r7, #30]
 80075a8:	e04c      	b.n	8007644 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075aa:	7ffb      	ldrb	r3, [r7, #31]
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d828      	bhi.n	8007602 <UART_SetConfig+0x462>
 80075b0:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <UART_SetConfig+0x418>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	08007603 	.word	0x08007603
 80075c8:	080075f3 	.word	0x080075f3
 80075cc:	08007603 	.word	0x08007603
 80075d0:	08007603 	.word	0x08007603
 80075d4:	08007603 	.word	0x08007603
 80075d8:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fd f94e 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80075e0:	61b8      	str	r0, [r7, #24]
        break;
 80075e2:	e013      	b.n	800760c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fd f95e 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61b8      	str	r0, [r7, #24]
        break;
 80075ea:	e00f      	b.n	800760c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <UART_SetConfig+0x4c4>)
 80075ee:	61bb      	str	r3, [r7, #24]
        break;
 80075f0:	e00c      	b.n	800760c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd f831 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 80075f6:	61b8      	str	r0, [r7, #24]
        break;
 80075f8:	e008      	b.n	800760c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	61bb      	str	r3, [r7, #24]
        break;
 8007600:	e004      	b.n	800760c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	77bb      	strb	r3, [r7, #30]
        break;
 800760a:	bf00      	nop
    }

    if (pclk != 0U)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d018      	beq.n	8007644 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	085a      	lsrs	r2, r3, #1
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	441a      	add	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b0f      	cmp	r3, #15
 800762a:	d909      	bls.n	8007640 <UART_SetConfig+0x4a0>
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007632:	d205      	bcs.n	8007640 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	b29a      	uxth	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e001      	b.n	8007644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007650:	7fbb      	ldrb	r3, [r7, #30]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40007c00 	.word	0x40007c00
 8007660:	40023800 	.word	0x40023800
 8007664:	00f42400 	.word	0x00f42400

08007668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01a      	beq.n	800777e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007766:	d10a      	bne.n	800777e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	605a      	str	r2, [r3, #4]
  }
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077bc:	f7fa ff04 	bl	80025c8 <HAL_GetTick>
 80077c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d10e      	bne.n	80077ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f831 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e027      	b.n	800783e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d10e      	bne.n	800781a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f81b 	bl	8007846 <UART_WaitOnFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e011      	b.n	800783e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b09c      	sub	sp, #112	; 0x70
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007856:	e0a7      	b.n	80079a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	f000 80a3 	beq.w	80079a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007862:	f7fa feb1 	bl	80025c8 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800786e:	429a      	cmp	r2, r3
 8007870:	d302      	bcc.n	8007878 <UART_WaitOnFlagUntilTimeout+0x32>
 8007872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007874:	2b00      	cmp	r3, #0
 8007876:	d13f      	bne.n	80078f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800788c:	667b      	str	r3, [r7, #100]	; 0x64
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007898:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800789c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e6      	bne.n	8007878 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	663b      	str	r3, [r7, #96]	; 0x60
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80078cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e068      	b.n	80079ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d050      	beq.n	80079a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007914:	d148      	bne.n	80079a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	613b      	str	r3, [r7, #16]
   return(result);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	66bb      	str	r3, [r7, #104]	; 0x68
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007972:	623a      	str	r2, [r7, #32]
 8007974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	69f9      	ldr	r1, [r7, #28]
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e010      	b.n	80079ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69da      	ldr	r2, [r3, #28]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4013      	ands	r3, r2
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	f43f af48 	beq.w	8007858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3770      	adds	r7, #112	; 0x70
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b097      	sub	sp, #92	; 0x5c
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a06:	d10e      	bne.n	8007a26 <UART_Start_Receive_IT+0x52>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <UART_Start_Receive_IT+0x48>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a1a:	e02d      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	22ff      	movs	r2, #255	; 0xff
 8007a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a24:	e028      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10d      	bne.n	8007a4a <UART_Start_Receive_IT+0x76>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <UART_Start_Receive_IT+0x6c>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	22ff      	movs	r2, #255	; 0xff
 8007a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a3e:	e01b      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	227f      	movs	r2, #127	; 0x7f
 8007a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a48:	e016      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a52:	d10d      	bne.n	8007a70 <UART_Start_Receive_IT+0x9c>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <UART_Start_Receive_IT+0x92>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	227f      	movs	r2, #127	; 0x7f
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a64:	e008      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	223f      	movs	r2, #63	; 0x3f
 8007a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6e:	e003      	b.n	8007a78 <UART_Start_Receive_IT+0xa4>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2222      	movs	r2, #34	; 0x22
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aa8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e5      	bne.n	8007a88 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac4:	d107      	bne.n	8007ad6 <UART_Start_Receive_IT+0x102>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d103      	bne.n	8007ad6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <UART_Start_Receive_IT+0x184>)
 8007ad2:	669a      	str	r2, [r3, #104]	; 0x68
 8007ad4:	e002      	b.n	8007adc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a20      	ldr	r2, [pc, #128]	; (8007b5c <UART_Start_Receive_IT+0x188>)
 8007ada:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d019      	beq.n	8007b18 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
 8007b04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e6      	bne.n	8007ae4 <UART_Start_Receive_IT+0x110>
 8007b16:	e018      	b.n	8007b4a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f043 0320 	orr.w	r3, r3, #32
 8007b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b36:	623b      	str	r3, [r7, #32]
 8007b38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	6a3a      	ldr	r2, [r7, #32]
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e6      	bne.n	8007b18 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	375c      	adds	r7, #92	; 0x5c
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	08007e0f 	.word	0x08007e0f
 8007b5c:	08007ca9 	.word	0x08007ca9

08007b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b095      	sub	sp, #84	; 0x54
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40
 8007b88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d118      	bne.n	8007c08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0310 	bic.w	r3, r3, #16
 8007bea:	647b      	str	r3, [r7, #68]	; 0x44
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	613b      	str	r3, [r7, #16]
   return(result);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c1c:	bf00      	nop
 8007c1e:	3754      	adds	r7, #84	; 0x54
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fa8a 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c70:	61fb      	str	r3, [r7, #28]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6979      	ldr	r1, [r7, #20]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	613b      	str	r3, [r7, #16]
   return(result);
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e6      	bne.n	8007c5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fa56 	bl	800714c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ca0:	bf00      	nop
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b096      	sub	sp, #88	; 0x58
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cc0:	2b22      	cmp	r3, #34	; 0x22
 8007cc2:	f040 8098 	bne.w	8007df6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cd0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007cd4:	b2d9      	uxtb	r1, r3
 8007cd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce0:	400a      	ands	r2, r1
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d17b      	bne.n	8007e06 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d22:	653b      	str	r3, [r7, #80]	; 0x50
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e6      	bne.n	8007d0e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	f023 0301 	bic.w	r3, r3, #1
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d60:	633a      	str	r2, [r7, #48]	; 0x30
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d12e      	bne.n	8007dee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0310 	bic.w	r3, r3, #16
 8007daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db4:	61fb      	str	r3, [r7, #28]
 8007db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d103      	bne.n	8007dde <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2210      	movs	r2, #16
 8007ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff f9c4 	bl	8007174 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dec:	e00b      	b.n	8007e06 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7f9 fa96 	bl	8001320 <HAL_UART_RxCpltCallback>
}
 8007df4:	e007      	b.n	8007e06 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0208 	orr.w	r2, r2, #8
 8007e04:	619a      	str	r2, [r3, #24]
}
 8007e06:	bf00      	nop
 8007e08:	3758      	adds	r7, #88	; 0x58
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b096      	sub	sp, #88	; 0x58
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e26:	2b22      	cmp	r3, #34	; 0x22
 8007e28:	f040 8098 	bne.w	8007f5c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007e40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e44:	4013      	ands	r3, r2
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	1c9a      	adds	r2, r3, #2
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d17b      	bne.n	8007f6c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e92:	643b      	str	r3, [r7, #64]	; 0x40
 8007e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d12e      	bne.n	8007f54 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 0310 	bic.w	r3, r3, #16
 8007f10:	647b      	str	r3, [r7, #68]	; 0x44
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6979      	ldr	r1, [r7, #20]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	613b      	str	r3, [r7, #16]
   return(result);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d103      	bne.n	8007f44 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2210      	movs	r2, #16
 8007f42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff f911 	bl	8007174 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f52:	e00b      	b.n	8007f6c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7f9 f9e3 	bl	8001320 <HAL_UART_RxCpltCallback>
}
 8007f5a:	e007      	b.n	8007f6c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	619a      	str	r2, [r3, #24]
}
 8007f6c:	bf00      	nop
 8007f6e:	3758      	adds	r7, #88	; 0x58
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007f78:	bf00      	nop
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8a:	f3ef 8305 	mrs	r3, IPSR
 8007f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10f      	bne.n	8007fb6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f96:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8007fa6:	603b      	str	r3, [r7, #0]
  return(result);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <osKernelInitialize+0x3a>
 8007fae:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <osKernelInitialize+0x64>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d103      	bne.n	8007fbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007fb6:	f06f 0305 	mvn.w	r3, #5
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e00c      	b.n	8007fd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <osKernelInitialize+0x64>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <osKernelInitialize+0x64>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e002      	b.n	8007fd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000790 	.word	0x20000790

08007fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff2:	f3ef 8305 	mrs	r3, IPSR
 8007ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10f      	bne.n	800801e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8008002:	607b      	str	r3, [r7, #4]
  return(result);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800800a:	f3ef 8311 	mrs	r3, BASEPRI
 800800e:	603b      	str	r3, [r7, #0]
  return(result);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <osKernelStart+0x3a>
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <osKernelStart+0x68>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d103      	bne.n	8008026 <osKernelStart+0x3a>
    stat = osErrorISR;
 800801e:	f06f 0305 	mvn.w	r3, #5
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e010      	b.n	8008048 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <osKernelStart+0x68>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d109      	bne.n	8008042 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800802e:	f7ff ffa1 	bl	8007f74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <osKernelStart+0x68>)
 8008034:	2202      	movs	r2, #2
 8008036:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008038:	f001 fa4c 	bl	80094d4 <vTaskStartScheduler>
      stat = osOK;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e002      	b.n	8008048 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
 8008046:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000790 	.word	0x20000790

08008058 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b090      	sub	sp, #64	; 0x40
 800805c:	af04      	add	r7, sp, #16
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008068:	f3ef 8305 	mrs	r3, IPSR
 800806c:	61fb      	str	r3, [r7, #28]
  return(result);
 800806e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 808f 	bne.w	8008194 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008076:	f3ef 8310 	mrs	r3, PRIMASK
 800807a:	61bb      	str	r3, [r7, #24]
  return(result);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d105      	bne.n	800808e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008082:	f3ef 8311 	mrs	r3, BASEPRI
 8008086:	617b      	str	r3, [r7, #20]
  return(result);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <osThreadNew+0x3e>
 800808e:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <osThreadNew+0x148>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d07e      	beq.n	8008194 <osThreadNew+0x13c>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d07b      	beq.n	8008194 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80080a0:	2318      	movs	r3, #24
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80080a8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d045      	beq.n	8008140 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <osThreadNew+0x6a>
        name = attr->name;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <osThreadNew+0x90>
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	2b38      	cmp	r3, #56	; 0x38
 80080da:	d805      	bhi.n	80080e8 <osThreadNew+0x90>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <osThreadNew+0x94>
        return (NULL);
 80080e8:	2300      	movs	r3, #0
 80080ea:	e054      	b.n	8008196 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	089b      	lsrs	r3, r3, #2
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00e      	beq.n	8008122 <osThreadNew+0xca>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2ba7      	cmp	r3, #167	; 0xa7
 800810a:	d90a      	bls.n	8008122 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008110:	2b00      	cmp	r3, #0
 8008112:	d006      	beq.n	8008122 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <osThreadNew+0xca>
        mem = 1;
 800811c:	2301      	movs	r3, #1
 800811e:	623b      	str	r3, [r7, #32]
 8008120:	e010      	b.n	8008144 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10c      	bne.n	8008144 <osThreadNew+0xec>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d108      	bne.n	8008144 <osThreadNew+0xec>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <osThreadNew+0xec>
          mem = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	623b      	str	r3, [r7, #32]
 800813e:	e001      	b.n	8008144 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d110      	bne.n	800816c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008152:	9202      	str	r2, [sp, #8]
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800815e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fe3f 	bl	8008de4 <xTaskCreateStatic>
 8008166:	4603      	mov	r3, r0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e013      	b.n	8008194 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d110      	bne.n	8008194 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	b29a      	uxth	r2, r3
 8008176:	f107 0310 	add.w	r3, r7, #16
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fe90 	bl	8008eaa <xTaskCreate>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d001      	beq.n	8008194 <osThreadNew+0x13c>
          hTask = NULL;
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008194:	693b      	ldr	r3, [r7, #16]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3730      	adds	r7, #48	; 0x30
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000790 	.word	0x20000790

080081a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ac:	f3ef 8305 	mrs	r3, IPSR
 80081b0:	613b      	str	r3, [r7, #16]
  return(result);
 80081b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10f      	bne.n	80081d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b8:	f3ef 8310 	mrs	r3, PRIMASK
 80081bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081c4:	f3ef 8311 	mrs	r3, BASEPRI
 80081c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <osDelay+0x3c>
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <osDelay+0x58>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d103      	bne.n	80081e0 <osDelay+0x3c>
    stat = osErrorISR;
 80081d8:	f06f 0305 	mvn.w	r3, #5
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	e007      	b.n	80081f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 ffba 	bl	8009164 <vTaskDelay>
    }
  }

  return (stat);
 80081f0:	697b      	ldr	r3, [r7, #20]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000790 	.word	0x20000790

08008200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a07      	ldr	r2, [pc, #28]	; (800822c <vApplicationGetIdleTaskMemory+0x2c>)
 8008210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4a06      	ldr	r2, [pc, #24]	; (8008230 <vApplicationGetIdleTaskMemory+0x30>)
 8008216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2280      	movs	r2, #128	; 0x80
 800821c:	601a      	str	r2, [r3, #0]
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20000794 	.word	0x20000794
 8008230:	2000083c 	.word	0x2000083c

08008234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a07      	ldr	r2, [pc, #28]	; (8008260 <vApplicationGetTimerTaskMemory+0x2c>)
 8008244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4a06      	ldr	r2, [pc, #24]	; (8008264 <vApplicationGetTimerTaskMemory+0x30>)
 800824a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	20000a3c 	.word	0x20000a3c
 8008264:	20000ae4 	.word	0x20000ae4

08008268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f103 0208 	add.w	r2, r3, #8
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f04f 32ff 	mov.w	r2, #4294967295
 8008280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f103 0208 	add.w	r2, r3, #8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f103 0208 	add.w	r2, r3, #8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d103      	bne.n	800832a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e00c      	b.n	8008344 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3308      	adds	r3, #8
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e002      	b.n	8008338 <vListInsert+0x2e>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	d2f6      	bcs.n	8008332 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
}
 8008370:	bf00      	nop
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6892      	ldr	r2, [r2, #8]
 8008392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6852      	ldr	r2, [r2, #4]
 800839c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d103      	bne.n	80083b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10c      	bne.n	80083fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	b672      	cpsid	i
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	b662      	cpsie	i
 80083f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80083fe:	f002 fa25 	bl	800a84c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	68f9      	ldr	r1, [r7, #12]
 800840c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	441a      	add	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	3b01      	subs	r3, #1
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	441a      	add	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	22ff      	movs	r2, #255	; 0xff
 8008442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	22ff      	movs	r2, #255	; 0xff
 800844a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d114      	bne.n	800847e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01a      	beq.n	8008492 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3310      	adds	r3, #16
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fadf 	bl	8009a24 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d012      	beq.n	8008492 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <xQueueGenericReset+0xd0>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e009      	b.n	8008492 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3310      	adds	r3, #16
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fef0 	bl	8008268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff feeb 	bl	8008268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008492:	f002 fa0f 	bl	800a8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008496:	2301      	movs	r3, #1
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	e000ed04 	.word	0xe000ed04

080084a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10c      	bne.n	80084d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10c      	bne.n	80084f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	b672      	cpsid	i
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	b662      	cpsie	i
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <xQueueGenericCreateStatic+0x5a>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <xQueueGenericCreateStatic+0x5e>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <xQueueGenericCreateStatic+0x60>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10c      	bne.n	8008522 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	623b      	str	r3, [r7, #32]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xQueueGenericCreateStatic+0x8a>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <xQueueGenericCreateStatic+0x8e>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueGenericCreateStatic+0x90>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10c      	bne.n	8008552 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	b672      	cpsid	i
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	b662      	cpsie	i
 800854c:	61fb      	str	r3, [r7, #28]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008552:	2350      	movs	r3, #80	; 0x50
 8008554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b50      	cmp	r3, #80	; 0x50
 800855a:	d00c      	beq.n	8008576 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	61bb      	str	r3, [r7, #24]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008576:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00d      	beq.n	800859e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800858a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4613      	mov	r3, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f805 	bl	80085a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3730      	adds	r7, #48	; 0x30
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d103      	bne.n	80085c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	e002      	b.n	80085ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085d6:	2101      	movs	r1, #1
 80085d8:	69b8      	ldr	r0, [r7, #24]
 80085da:	f7ff fef9 	bl	80083d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08e      	sub	sp, #56	; 0x38
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085fe:	2300      	movs	r3, #0
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10c      	bne.n	8008626 <xQueueGenericSend+0x36>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <xQueueGenericSend+0x44>
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <xQueueGenericSend+0x48>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <xQueueGenericSend+0x4a>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10c      	bne.n	8008658 <xQueueGenericSend+0x68>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	b672      	cpsid	i
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	b662      	cpsie	i
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d103      	bne.n	8008666 <xQueueGenericSend+0x76>
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <xQueueGenericSend+0x7a>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <xQueueGenericSend+0x7c>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10c      	bne.n	800868a <xQueueGenericSend+0x9a>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	b672      	cpsid	i
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	b662      	cpsie	i
 8008684:	623b      	str	r3, [r7, #32]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800868a:	f001 fb95 	bl	8009db8 <xTaskGetSchedulerState>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <xQueueGenericSend+0xaa>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <xQueueGenericSend+0xae>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSend+0xb0>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <xQueueGenericSend+0xce>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	b672      	cpsid	i
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	b662      	cpsie	i
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086be:	f002 f8c5 	bl	800a84c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d302      	bcc.n	80086d4 <xQueueGenericSend+0xe4>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d129      	bne.n	8008728 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086da:	f000 fa15 	bl	8008b08 <prvCopyDataToQueue>
 80086de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d010      	beq.n	800870a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 f999 	bl	8009a24 <xTaskRemoveFromEventList>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d013      	beq.n	8008720 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086f8:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <xQueueGenericSend+0x208>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	e00a      	b.n	8008720 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008710:	4b39      	ldr	r3, [pc, #228]	; (80087f8 <xQueueGenericSend+0x208>)
 8008712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008720:	f002 f8c8 	bl	800a8b4 <vPortExitCritical>
				return pdPASS;
 8008724:	2301      	movs	r3, #1
 8008726:	e063      	b.n	80087f0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800872e:	f002 f8c1 	bl	800a8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008732:	2300      	movs	r3, #0
 8008734:	e05c      	b.n	80087f0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800873c:	f107 0314 	add.w	r3, r7, #20
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f9d5 	bl	8009af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008746:	2301      	movs	r3, #1
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800874a:	f002 f8b3 	bl	800a8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800874e:	f000 ff35 	bl	80095bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008752:	f002 f87b 	bl	800a84c <vPortEnterCritical>
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875c:	b25b      	sxtb	r3, r3
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d103      	bne.n	800876c <xQueueGenericSend+0x17c>
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008772:	b25b      	sxtb	r3, r3
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <xQueueGenericSend+0x192>
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008782:	f002 f897 	bl	800a8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008786:	1d3a      	adds	r2, r7, #4
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f001 f9c4 	bl	8009b1c <xTaskCheckForTimeOut>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d124      	bne.n	80087e4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800879a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800879c:	f000 faac 	bl	8008cf8 <prvIsQueueFull>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d018      	beq.n	80087d8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	3310      	adds	r3, #16
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 f8e4 	bl	800997c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b6:	f000 fa37 	bl	8008c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ba:	f000 ff0d 	bl	80095d8 <xTaskResumeAll>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f47f af7c 	bne.w	80086be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80087c6:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <xQueueGenericSend+0x208>)
 80087c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	e772      	b.n	80086be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087da:	f000 fa25 	bl	8008c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087de:	f000 fefb 	bl	80095d8 <xTaskResumeAll>
 80087e2:	e76c      	b.n	80086be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e6:	f000 fa1f 	bl	8008c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ea:	f000 fef5 	bl	80095d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3738      	adds	r7, #56	; 0x38
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10c      	bne.n	800882e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	b672      	cpsid	i
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	b662      	cpsie	i
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <xQueueGenericSendFromISR+0x40>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <xQueueGenericSendFromISR+0x44>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <xQueueGenericSendFromISR+0x46>
 8008840:	2300      	movs	r3, #0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10c      	bne.n	8008860 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	b672      	cpsid	i
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	b662      	cpsie	i
 800885a:	623b      	str	r3, [r7, #32]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d103      	bne.n	800886e <xQueueGenericSendFromISR+0x72>
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <xQueueGenericSendFromISR+0x76>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <xQueueGenericSendFromISR+0x78>
 8008872:	2300      	movs	r3, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10c      	bne.n	8008892 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	b672      	cpsid	i
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	b662      	cpsie	i
 800888c:	61fb      	str	r3, [r7, #28]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008892:	f002 f8c3 	bl	800aa1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008896:	f3ef 8211 	mrs	r2, BASEPRI
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	61ba      	str	r2, [r7, #24]
 80088b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <xQueueGenericSendFromISR+0xcc>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d12c      	bne.n	8008922 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d8:	f000 f916 	bl	8008b08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d112      	bne.n	800890c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d016      	beq.n	800891c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	3324      	adds	r3, #36	; 0x24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f896 	bl	8009a24 <xTaskRemoveFromEventList>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00e      	beq.n	800891c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e007      	b.n	800891c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800890c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008910:	3301      	adds	r3, #1
 8008912:	b2db      	uxtb	r3, r3
 8008914:	b25a      	sxtb	r2, r3
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800891c:	2301      	movs	r3, #1
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008920:	e001      	b.n	8008926 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008922:	2300      	movs	r3, #0
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008934:	4618      	mov	r0, r3
 8008936:	3738      	adds	r7, #56	; 0x38
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08c      	sub	sp, #48	; 0x30
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10c      	bne.n	8008970 <xQueueReceive+0x34>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	b672      	cpsid	i
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	b662      	cpsie	i
 800896a:	623b      	str	r3, [r7, #32]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <xQueueReceive+0x42>
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <xQueueReceive+0x46>
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <xQueueReceive+0x48>
 8008982:	2300      	movs	r3, #0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10c      	bne.n	80089a2 <xQueueReceive+0x66>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	61fb      	str	r3, [r7, #28]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a2:	f001 fa09 	bl	8009db8 <xTaskGetSchedulerState>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <xQueueReceive+0x76>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <xQueueReceive+0x7a>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <xQueueReceive+0x7c>
 80089b6:	2300      	movs	r3, #0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10c      	bne.n	80089d6 <xQueueReceive+0x9a>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	b672      	cpsid	i
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	b662      	cpsie	i
 80089d0:	61bb      	str	r3, [r7, #24]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089d6:	f001 ff39 	bl	800a84c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01f      	beq.n	8008a26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ea:	f000 f8f7 	bl	8008bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	1e5a      	subs	r2, r3, #1
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00f      	beq.n	8008a1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	3310      	adds	r3, #16
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 f80e 	bl	8009a24 <xTaskRemoveFromEventList>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d007      	beq.n	8008a1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a0e:	4b3d      	ldr	r3, [pc, #244]	; (8008b04 <xQueueReceive+0x1c8>)
 8008a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a1e:	f001 ff49 	bl	800a8b4 <vPortExitCritical>
				return pdPASS;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e069      	b.n	8008afa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a2c:	f001 ff42 	bl	800a8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a30:	2300      	movs	r3, #0
 8008a32:	e062      	b.n	8008afa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a3a:	f107 0310 	add.w	r3, r7, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 f856 	bl	8009af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a48:	f001 ff34 	bl	800a8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a4c:	f000 fdb6 	bl	80095bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a50:	f001 fefc 	bl	800a84c <vPortEnterCritical>
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d103      	bne.n	8008a6a <xQueueReceive+0x12e>
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a70:	b25b      	sxtb	r3, r3
 8008a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a76:	d103      	bne.n	8008a80 <xQueueReceive+0x144>
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a80:	f001 ff18 	bl	800a8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a84:	1d3a      	adds	r2, r7, #4
 8008a86:	f107 0310 	add.w	r3, r7, #16
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f845 	bl	8009b1c <xTaskCheckForTimeOut>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d123      	bne.n	8008ae0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9a:	f000 f917 	bl	8008ccc <prvIsQueueEmpty>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d017      	beq.n	8008ad4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	3324      	adds	r3, #36	; 0x24
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 ff65 	bl	800997c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab4:	f000 f8b8 	bl	8008c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ab8:	f000 fd8e 	bl	80095d8 <xTaskResumeAll>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d189      	bne.n	80089d6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <xQueueReceive+0x1c8>)
 8008ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	e780      	b.n	80089d6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad6:	f000 f8a7 	bl	8008c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ada:	f000 fd7d 	bl	80095d8 <xTaskResumeAll>
 8008ade:	e77a      	b.n	80089d6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae2:	f000 f8a1 	bl	8008c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ae6:	f000 fd77 	bl	80095d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aec:	f000 f8ee 	bl	8008ccc <prvIsQueueEmpty>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f43f af6f 	beq.w	80089d6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3730      	adds	r7, #48	; 0x30
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10d      	bne.n	8008b42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d14d      	bne.n	8008bca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 f95e 	bl	8009df4 <xTaskPriorityDisinherit>
 8008b38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	e043      	b.n	8008bca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d119      	bne.n	8008b7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6858      	ldr	r0, [r3, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	461a      	mov	r2, r3
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	f002 fb6e 	bl	800b234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	441a      	add	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d32b      	bcc.n	8008bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
 8008b7a:	e026      	b.n	8008bca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	68d8      	ldr	r0, [r3, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	461a      	mov	r2, r3
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	f002 fb54 	bl	800b234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	425b      	negs	r3, r3
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d207      	bcs.n	8008bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	441a      	add	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d105      	bne.n	8008bca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bd2:	697b      	ldr	r3, [r7, #20]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d018      	beq.n	8008c20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	441a      	add	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d303      	bcc.n	8008c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68d9      	ldr	r1, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6838      	ldr	r0, [r7, #0]
 8008c1c:	f002 fb0a 	bl	800b234 <memcpy>
	}
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c30:	f001 fe0c 	bl	800a84c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c3c:	e011      	b.n	8008c62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3324      	adds	r3, #36	; 0x24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 feea 	bl	8009a24 <xTaskRemoveFromEventList>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c56:	f000 ffc7 	bl	8009be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dce9      	bgt.n	8008c3e <prvUnlockQueue+0x16>
 8008c6a:	e000      	b.n	8008c6e <prvUnlockQueue+0x46>
					break;
 8008c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	22ff      	movs	r2, #255	; 0xff
 8008c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c76:	f001 fe1d 	bl	800a8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c7a:	f001 fde7 	bl	800a84c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c86:	e011      	b.n	8008cac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d012      	beq.n	8008cb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3310      	adds	r3, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fec5 	bl	8009a24 <xTaskRemoveFromEventList>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ca0:	f000 ffa2 	bl	8009be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dce9      	bgt.n	8008c88 <prvUnlockQueue+0x60>
 8008cb4:	e000      	b.n	8008cb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	22ff      	movs	r2, #255	; 0xff
 8008cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cc0:	f001 fdf8 	bl	800a8b4 <vPortExitCritical>
}
 8008cc4:	bf00      	nop
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cd4:	f001 fdba 	bl	800a84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e001      	b.n	8008cea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cea:	f001 fde3 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8008cee:	68fb      	ldr	r3, [r7, #12]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d00:	f001 fda4 	bl	800a84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d102      	bne.n	8008d16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e001      	b.n	8008d1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d1a:	f001 fdcb 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e014      	b.n	8008d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d38:	4a0f      	ldr	r2, [pc, #60]	; (8008d78 <vQueueAddToRegistry+0x50>)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d44:	490c      	ldr	r1, [pc, #48]	; (8008d78 <vQueueAddToRegistry+0x50>)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d4e:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <vQueueAddToRegistry+0x50>)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d5a:	e006      	b.n	8008d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b07      	cmp	r3, #7
 8008d66:	d9e7      	bls.n	8008d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000ee4 	.word	0x20000ee4

08008d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d8c:	f001 fd5e 	bl	800a84c <vPortEnterCritical>
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d96:	b25b      	sxtb	r3, r3
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d103      	bne.n	8008da6 <vQueueWaitForMessageRestricted+0x2a>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dac:	b25b      	sxtb	r3, r3
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d103      	bne.n	8008dbc <vQueueWaitForMessageRestricted+0x40>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dbc:	f001 fd7a 	bl	800a8b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	3324      	adds	r3, #36	; 0x24
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fdf9 	bl	80099c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f7ff ff26 	bl	8008c28 <prvUnlockQueue>
	}
 8008ddc:	bf00      	nop
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08e      	sub	sp, #56	; 0x38
 8008de8:	af04      	add	r7, sp, #16
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10c      	bne.n	8008e12 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	b672      	cpsid	i
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	b662      	cpsie	i
 8008e0c:	623b      	str	r3, [r7, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10c      	bne.n	8008e32 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	b672      	cpsid	i
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	b662      	cpsie	i
 8008e2c:	61fb      	str	r3, [r7, #28]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e32:	23a8      	movs	r3, #168	; 0xa8
 8008e34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2ba8      	cmp	r3, #168	; 0xa8
 8008e3a:	d00c      	beq.n	8008e56 <xTaskCreateStatic+0x72>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	61bb      	str	r3, [r7, #24]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01e      	beq.n	8008e9c <xTaskCreateStatic+0xb8>
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01b      	beq.n	8008e9c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2202      	movs	r2, #2
 8008e72:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e76:	2300      	movs	r3, #0
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	9302      	str	r3, [sp, #8]
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f850 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e96:	f000 f8f5 	bl	8009084 <prvAddNewTaskToReadyList>
 8008e9a:	e001      	b.n	8008ea0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ea0:	697b      	ldr	r3, [r7, #20]
	}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b08c      	sub	sp, #48	; 0x30
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fdf0 	bl	800aaa4 <pvPortMalloc>
 8008ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ecc:	20a8      	movs	r0, #168	; 0xa8
 8008ece:	f001 fde9 	bl	800aaa4 <pvPortMalloc>
 8008ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
 8008ee0:	e005      	b.n	8008eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f001 fea8 	bl	800ac38 <vPortFree>
 8008ee8:	e001      	b.n	8008eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d017      	beq.n	8008f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f80e 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f18:	69f8      	ldr	r0, [r7, #28]
 8008f1a:	f000 f8b3 	bl	8009084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	e002      	b.n	8008f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	21a5      	movs	r1, #165	; 0xa5
 8008f4e:	f002 f892 	bl	800b076 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f5c:	440b      	add	r3, r1
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	617b      	str	r3, [r7, #20]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01f      	beq.n	8008fd6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
 8008f9a:	e012      	b.n	8008fc2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	7819      	ldrb	r1, [r3, #0]
 8008fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3334      	adds	r3, #52	; 0x34
 8008fac:	460a      	mov	r2, r1
 8008fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	2b0f      	cmp	r3, #15
 8008fc6:	d9e9      	bls.n	8008f9c <prvInitialiseNewTask+0x68>
 8008fc8:	e000      	b.n	8008fcc <prvInitialiseNewTask+0x98>
			{
				break;
 8008fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fd4:	e003      	b.n	8008fde <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	2b37      	cmp	r3, #55	; 0x37
 8008fe2:	d901      	bls.n	8008fe8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fe4:	2337      	movs	r3, #55	; 0x37
 8008fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff f952 	bl	80082a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	3318      	adds	r3, #24
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff f94d 	bl	80082a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	2200      	movs	r2, #0
 8009030:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	3354      	adds	r3, #84	; 0x54
 8009038:	224c      	movs	r2, #76	; 0x4c
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f002 f81a 	bl	800b076 <memset>
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <prvInitialiseNewTask+0x144>)
 8009046:	659a      	str	r2, [r3, #88]	; 0x58
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	4a0c      	ldr	r2, [pc, #48]	; (800907c <prvInitialiseNewTask+0x148>)
 800904c:	65da      	str	r2, [r3, #92]	; 0x5c
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	4a0b      	ldr	r2, [pc, #44]	; (8009080 <prvInitialiseNewTask+0x14c>)
 8009052:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	69b8      	ldr	r0, [r7, #24]
 800905a:	f001 faed 	bl	800a638 <pxPortInitialiseStack>
 800905e:	4602      	mov	r2, r0
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009070:	bf00      	nop
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20005170 	.word	0x20005170
 800907c:	200051d8 	.word	0x200051d8
 8009080:	20005240 	.word	0x20005240

08009084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800908c:	f001 fbde 	bl	800a84c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009090:	4b2d      	ldr	r3, [pc, #180]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a2c      	ldr	r2, [pc, #176]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 8009098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800909a:	4b2c      	ldr	r3, [pc, #176]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090a2:	4a2a      	ldr	r2, [pc, #168]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a8:	4b27      	ldr	r3, [pc, #156]	; (8009148 <prvAddNewTaskToReadyList+0xc4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d110      	bne.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090b0:	f000 fdbe 	bl	8009c30 <prvInitialiseTaskLists>
 80090b4:	e00d      	b.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090b6:	4b26      	ldr	r3, [pc, #152]	; (8009150 <prvAddNewTaskToReadyList+0xcc>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090be:	4b23      	ldr	r3, [pc, #140]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d802      	bhi.n	80090d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090cc:	4a1f      	ldr	r2, [pc, #124]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090d2:	4b20      	ldr	r3, [pc, #128]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <prvAddNewTaskToReadyList+0xd0>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <prvAddNewTaskToReadyList+0xd4>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d903      	bls.n	80090f8 <prvAddNewTaskToReadyList+0x74>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a18      	ldr	r2, [pc, #96]	; (8009158 <prvAddNewTaskToReadyList+0xd4>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a15      	ldr	r2, [pc, #84]	; (800915c <prvAddNewTaskToReadyList+0xd8>)
 8009106:	441a      	add	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7ff f8d7 	bl	80082c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009114:	f001 fbce 	bl	800a8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <prvAddNewTaskToReadyList+0xcc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <prvAddNewTaskToReadyList+0xc8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	429a      	cmp	r2, r3
 800912c:	d207      	bcs.n	800913e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <prvAddNewTaskToReadyList+0xdc>)
 8009130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200013f8 	.word	0x200013f8
 800914c:	20000f24 	.word	0x20000f24
 8009150:	20001404 	.word	0x20001404
 8009154:	20001414 	.word	0x20001414
 8009158:	20001400 	.word	0x20001400
 800915c:	20000f28 	.word	0x20000f28
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d019      	beq.n	80091aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <vTaskDelay+0x64>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00c      	beq.n	8009198 <vTaskDelay+0x34>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	b672      	cpsid	i
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	b662      	cpsie	i
 8009192:	60bb      	str	r3, [r7, #8]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009198:	f000 fa10 	bl	80095bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800919c:	2100      	movs	r1, #0
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fe9a 	bl	8009ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091a4:	f000 fa18 	bl	80095d8 <xTaskResumeAll>
 80091a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d107      	bne.n	80091c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <vTaskDelay+0x68>)
 80091b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20001420 	.word	0x20001420
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80091d8:	f001 fb38 	bl	800a84c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d102      	bne.n	80091e8 <vTaskSuspend+0x18>
 80091e2:	4b31      	ldr	r3, [pc, #196]	; (80092a8 <vTaskSuspend+0xd8>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	e000      	b.n	80091ea <vTaskSuspend+0x1a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f8c3 	bl	800837c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3318      	adds	r3, #24
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f8ba 	bl	800837c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4827      	ldr	r0, [pc, #156]	; (80092ac <vTaskSuspend+0xdc>)
 8009210:	f7ff f857 	bl	80082c2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d103      	bne.n	8009228 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009228:	f001 fb44 	bl	800a8b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800922c:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <vTaskSuspend+0xe0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009234:	f001 fb0a 	bl	800a84c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009238:	f000 fd9e 	bl	8009d78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800923c:	f001 fb3a 	bl	800a8b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009240:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <vTaskSuspend+0xd8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	429a      	cmp	r2, r3
 8009248:	d129      	bne.n	800929e <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800924a:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <vTaskSuspend+0xe0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d019      	beq.n	8009286 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009252:	4b18      	ldr	r3, [pc, #96]	; (80092b4 <vTaskSuspend+0xe4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <vTaskSuspend+0xa4>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	b672      	cpsid	i
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	b662      	cpsie	i
 800926e:	60bb      	str	r3, [r7, #8]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8009274:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <vTaskSuspend+0xe8>)
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009284:	e00b      	b.n	800929e <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <vTaskSuspend+0xdc>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <vTaskSuspend+0xec>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d103      	bne.n	800929a <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <vTaskSuspend+0xd8>)
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
	}
 8009298:	e001      	b.n	800929e <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800929a:	f000 fb09 	bl	80098b0 <vTaskSwitchContext>
	}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000f24 	.word	0x20000f24
 80092ac:	200013e4 	.word	0x200013e4
 80092b0:	20001404 	.word	0x20001404
 80092b4:	20001420 	.word	0x20001420
 80092b8:	e000ed04 	.word	0xe000ed04
 80092bc:	200013f8 	.word	0x200013f8

080092c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10c      	bne.n	80092f0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	b672      	cpsid	i
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	b662      	cpsie	i
 80092ea:	60fb      	str	r3, [r7, #12]
}
 80092ec:	bf00      	nop
 80092ee:	e7fe      	b.n	80092ee <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	4a0a      	ldr	r2, [pc, #40]	; (8009320 <prvTaskIsTaskSuspended+0x60>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d10a      	bne.n	8009310 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fe:	4a09      	ldr	r2, [pc, #36]	; (8009324 <prvTaskIsTaskSuspended+0x64>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d005      	beq.n	8009310 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009310:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009312:	4618      	mov	r0, r3
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	200013e4 	.word	0x200013e4
 8009324:	200013b8 	.word	0x200013b8

08009328 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10c      	bne.n	8009354 <vTaskResume+0x2c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	b672      	cpsid	i
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	b662      	cpsie	i
 800934e:	60bb      	str	r3, [r7, #8]
}
 8009350:	bf00      	nop
 8009352:	e7fe      	b.n	8009352 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009354:	4b20      	ldr	r3, [pc, #128]	; (80093d8 <vTaskResume+0xb0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	429a      	cmp	r2, r3
 800935c:	d038      	beq.n	80093d0 <vTaskResume+0xa8>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d035      	beq.n	80093d0 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8009364:	f001 fa72 	bl	800a84c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff ffa9 	bl	80092c0 <prvTaskIsTaskSuspended>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d02b      	beq.n	80093cc <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe ffff 	bl	800837c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4b16      	ldr	r3, [pc, #88]	; (80093dc <vTaskResume+0xb4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d903      	bls.n	8009392 <vTaskResume+0x6a>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	4a13      	ldr	r2, [pc, #76]	; (80093dc <vTaskResume+0xb4>)
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <vTaskResume+0xb8>)
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe ff8a 	bl	80082c2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <vTaskResume+0xb0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d307      	bcc.n	80093cc <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <vTaskResume+0xbc>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80093cc:	f001 fa72 	bl	800a8b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20000f24 	.word	0x20000f24
 80093dc:	20001400 	.word	0x20001400
 80093e0:	20000f28 	.word	0x20000f28
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10c      	bne.n	8009418 <xTaskResumeFromISR+0x30>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	b672      	cpsid	i
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	b662      	cpsie	i
 8009412:	61bb      	str	r3, [r7, #24]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009418:	f001 fb00 	bl	800aa1c <vPortValidateInterruptPriority>
	__asm volatile
 800941c:	f3ef 8211 	mrs	r2, BASEPRI
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	b672      	cpsid	i
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	b662      	cpsie	i
 8009434:	617a      	str	r2, [r7, #20]
 8009436:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009438:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800943a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800943c:	6a38      	ldr	r0, [r7, #32]
 800943e:	f7ff ff3f 	bl	80092c0 <prvTaskIsTaskSuspended>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d030      	beq.n	80094aa <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009448:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <xTaskResumeFromISR+0xd8>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d126      	bne.n	800949e <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009454:	4b1b      	ldr	r3, [pc, #108]	; (80094c4 <xTaskResumeFromISR+0xdc>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	429a      	cmp	r2, r3
 800945c:	d301      	bcc.n	8009462 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	3304      	adds	r3, #4
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe ff88 	bl	800837c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <xTaskResumeFromISR+0xe0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d903      	bls.n	8009480 <xTaskResumeFromISR+0x98>
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <xTaskResumeFromISR+0xe0>)
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4a0f      	ldr	r2, [pc, #60]	; (80094cc <xTaskResumeFromISR+0xe4>)
 800948e:	441a      	add	r2, r3
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe ff13 	bl	80082c2 <vListInsertEnd>
 800949c:	e005      	b.n	80094aa <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	3318      	adds	r3, #24
 80094a2:	4619      	mov	r1, r3
 80094a4:	480a      	ldr	r0, [pc, #40]	; (80094d0 <xTaskResumeFromISR+0xe8>)
 80094a6:	f7fe ff0c 	bl	80082c2 <vListInsertEnd>
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f383 8811 	msr	BASEPRI, r3
}
 80094b4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3728      	adds	r7, #40	; 0x28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20001420 	.word	0x20001420
 80094c4:	20000f24 	.word	0x20000f24
 80094c8:	20001400 	.word	0x20001400
 80094cc:	20000f28 	.word	0x20000f28
 80094d0:	200013b8 	.word	0x200013b8

080094d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	; 0x28
 80094d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094e2:	463a      	mov	r2, r7
 80094e4:	1d39      	adds	r1, r7, #4
 80094e6:	f107 0308 	add.w	r3, r7, #8
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fe88 	bl	8008200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	9202      	str	r2, [sp, #8]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	2300      	movs	r3, #0
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	2300      	movs	r3, #0
 8009500:	460a      	mov	r2, r1
 8009502:	4926      	ldr	r1, [pc, #152]	; (800959c <vTaskStartScheduler+0xc8>)
 8009504:	4826      	ldr	r0, [pc, #152]	; (80095a0 <vTaskStartScheduler+0xcc>)
 8009506:	f7ff fc6d 	bl	8008de4 <xTaskCreateStatic>
 800950a:	4603      	mov	r3, r0
 800950c:	4a25      	ldr	r2, [pc, #148]	; (80095a4 <vTaskStartScheduler+0xd0>)
 800950e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009510:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <vTaskStartScheduler+0xd0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e001      	b.n	8009522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d102      	bne.n	800952e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009528:	f000 fd2a 	bl	8009f80 <xTimerCreateTimerTask>
 800952c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d11d      	bne.n	8009570 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	b672      	cpsid	i
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	b662      	cpsie	i
 8009548:	613b      	str	r3, [r7, #16]
}
 800954a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800954c:	4b16      	ldr	r3, [pc, #88]	; (80095a8 <vTaskStartScheduler+0xd4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3354      	adds	r3, #84	; 0x54
 8009552:	4a16      	ldr	r2, [pc, #88]	; (80095ac <vTaskStartScheduler+0xd8>)
 8009554:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <vTaskStartScheduler+0xdc>)
 8009558:	f04f 32ff 	mov.w	r2, #4294967295
 800955c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800955e:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <vTaskStartScheduler+0xe0>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009564:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <vTaskStartScheduler+0xe4>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800956a:	f001 f8f1 	bl	800a750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800956e:	e010      	b.n	8009592 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009576:	d10c      	bne.n	8009592 <vTaskStartScheduler+0xbe>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
 800958c:	60fb      	str	r3, [r7, #12]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <vTaskStartScheduler+0xbc>
}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	0800bfd4 	.word	0x0800bfd4
 80095a0:	08009c01 	.word	0x08009c01
 80095a4:	2000141c 	.word	0x2000141c
 80095a8:	20000f24 	.word	0x20000f24
 80095ac:	20000094 	.word	0x20000094
 80095b0:	20001418 	.word	0x20001418
 80095b4:	20001404 	.word	0x20001404
 80095b8:	200013fc 	.word	0x200013fc

080095bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095c0:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <vTaskSuspendAll+0x18>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a03      	ldr	r2, [pc, #12]	; (80095d4 <vTaskSuspendAll+0x18>)
 80095c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095ca:	bf00      	nop
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	20001420 	.word	0x20001420

080095d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095e6:	4b43      	ldr	r3, [pc, #268]	; (80096f4 <xTaskResumeAll+0x11c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <xTaskResumeAll+0x30>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	603b      	str	r3, [r7, #0]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009608:	f001 f920 	bl	800a84c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800960c:	4b39      	ldr	r3, [pc, #228]	; (80096f4 <xTaskResumeAll+0x11c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	4a38      	ldr	r2, [pc, #224]	; (80096f4 <xTaskResumeAll+0x11c>)
 8009614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009616:	4b37      	ldr	r3, [pc, #220]	; (80096f4 <xTaskResumeAll+0x11c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d162      	bne.n	80096e4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800961e:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <xTaskResumeAll+0x120>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d05e      	beq.n	80096e4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009626:	e02f      	b.n	8009688 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009628:	4b34      	ldr	r3, [pc, #208]	; (80096fc <xTaskResumeAll+0x124>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fea1 	bl	800837c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3304      	adds	r3, #4
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fe9c 	bl	800837c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	4b2d      	ldr	r3, [pc, #180]	; (8009700 <xTaskResumeAll+0x128>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d903      	bls.n	8009658 <xTaskResumeAll+0x80>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	4a2a      	ldr	r2, [pc, #168]	; (8009700 <xTaskResumeAll+0x128>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <xTaskResumeAll+0x12c>)
 8009666:	441a      	add	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fe27 	bl	80082c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4b23      	ldr	r3, [pc, #140]	; (8009708 <xTaskResumeAll+0x130>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	429a      	cmp	r2, r3
 8009680:	d302      	bcc.n	8009688 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009682:	4b22      	ldr	r3, [pc, #136]	; (800970c <xTaskResumeAll+0x134>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009688:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <xTaskResumeAll+0x124>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1cb      	bne.n	8009628 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009696:	f000 fb6f 	bl	8009d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800969a:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <xTaskResumeAll+0x138>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d010      	beq.n	80096c8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096a6:	f000 f847 	bl	8009738 <xTaskIncrementTick>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80096b0:	4b16      	ldr	r3, [pc, #88]	; (800970c <xTaskResumeAll+0x134>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f1      	bne.n	80096a6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <xTaskResumeAll+0x138>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096c8:	4b10      	ldr	r3, [pc, #64]	; (800970c <xTaskResumeAll+0x134>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096d0:	2301      	movs	r3, #1
 80096d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <xTaskResumeAll+0x13c>)
 80096d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096e4:	f001 f8e6 	bl	800a8b4 <vPortExitCritical>

	return xAlreadyYielded;
 80096e8:	68bb      	ldr	r3, [r7, #8]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20001420 	.word	0x20001420
 80096f8:	200013f8 	.word	0x200013f8
 80096fc:	200013b8 	.word	0x200013b8
 8009700:	20001400 	.word	0x20001400
 8009704:	20000f28 	.word	0x20000f28
 8009708:	20000f24 	.word	0x20000f24
 800970c:	2000140c 	.word	0x2000140c
 8009710:	20001408 	.word	0x20001408
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <xTaskGetTickCount+0x1c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009724:	687b      	ldr	r3, [r7, #4]
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200013fc 	.word	0x200013fc

08009738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800973e:	2300      	movs	r3, #0
 8009740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009742:	4b50      	ldr	r3, [pc, #320]	; (8009884 <xTaskIncrementTick+0x14c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 808b 	bne.w	8009862 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800974c:	4b4e      	ldr	r3, [pc, #312]	; (8009888 <xTaskIncrementTick+0x150>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009754:	4a4c      	ldr	r2, [pc, #304]	; (8009888 <xTaskIncrementTick+0x150>)
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d122      	bne.n	80097a6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009760:	4b4a      	ldr	r3, [pc, #296]	; (800988c <xTaskIncrementTick+0x154>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <xTaskIncrementTick+0x4c>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	603b      	str	r3, [r7, #0]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xTaskIncrementTick+0x4a>
 8009784:	4b41      	ldr	r3, [pc, #260]	; (800988c <xTaskIncrementTick+0x154>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	4b41      	ldr	r3, [pc, #260]	; (8009890 <xTaskIncrementTick+0x158>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a3f      	ldr	r2, [pc, #252]	; (800988c <xTaskIncrementTick+0x154>)
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	4a3f      	ldr	r2, [pc, #252]	; (8009890 <xTaskIncrementTick+0x158>)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	4b3e      	ldr	r3, [pc, #248]	; (8009894 <xTaskIncrementTick+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	4a3d      	ldr	r2, [pc, #244]	; (8009894 <xTaskIncrementTick+0x15c>)
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	f000 fae9 	bl	8009d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097a6:	4b3c      	ldr	r3, [pc, #240]	; (8009898 <xTaskIncrementTick+0x160>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d349      	bcc.n	8009844 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b0:	4b36      	ldr	r3, [pc, #216]	; (800988c <xTaskIncrementTick+0x154>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ba:	4b37      	ldr	r3, [pc, #220]	; (8009898 <xTaskIncrementTick+0x160>)
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	601a      	str	r2, [r3, #0]
					break;
 80097c2:	e03f      	b.n	8009844 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b31      	ldr	r3, [pc, #196]	; (800988c <xTaskIncrementTick+0x154>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d203      	bcs.n	80097e4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097dc:	4a2e      	ldr	r2, [pc, #184]	; (8009898 <xTaskIncrementTick+0x160>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097e2:	e02f      	b.n	8009844 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe fdc7 	bl	800837c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3318      	adds	r3, #24
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fdbe 	bl	800837c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	4b25      	ldr	r3, [pc, #148]	; (800989c <xTaskIncrementTick+0x164>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d903      	bls.n	8009814 <xTaskIncrementTick+0xdc>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	4a22      	ldr	r2, [pc, #136]	; (800989c <xTaskIncrementTick+0x164>)
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <xTaskIncrementTick+0x168>)
 8009822:	441a      	add	r2, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f7fe fd49 	bl	80082c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4b1b      	ldr	r3, [pc, #108]	; (80098a4 <xTaskIncrementTick+0x16c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	429a      	cmp	r2, r3
 800983c:	d3b8      	bcc.n	80097b0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800983e:	2301      	movs	r3, #1
 8009840:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009842:	e7b5      	b.n	80097b0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009844:	4b17      	ldr	r3, [pc, #92]	; (80098a4 <xTaskIncrementTick+0x16c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4915      	ldr	r1, [pc, #84]	; (80098a0 <xTaskIncrementTick+0x168>)
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d907      	bls.n	800986c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e004      	b.n	800986c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009862:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <xTaskIncrementTick+0x170>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	4a0f      	ldr	r2, [pc, #60]	; (80098a8 <xTaskIncrementTick+0x170>)
 800986a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <xTaskIncrementTick+0x174>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009878:	697b      	ldr	r3, [r7, #20]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20001420 	.word	0x20001420
 8009888:	200013fc 	.word	0x200013fc
 800988c:	200013b0 	.word	0x200013b0
 8009890:	200013b4 	.word	0x200013b4
 8009894:	20001410 	.word	0x20001410
 8009898:	20001418 	.word	0x20001418
 800989c:	20001400 	.word	0x20001400
 80098a0:	20000f28 	.word	0x20000f28
 80098a4:	20000f24 	.word	0x20000f24
 80098a8:	20001408 	.word	0x20001408
 80098ac:	2000140c 	.word	0x2000140c

080098b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098b6:	4b2b      	ldr	r3, [pc, #172]	; (8009964 <vTaskSwitchContext+0xb4>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098be:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <vTaskSwitchContext+0xb8>)
 80098c0:	2201      	movs	r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098c4:	e048      	b.n	8009958 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80098c6:	4b28      	ldr	r3, [pc, #160]	; (8009968 <vTaskSwitchContext+0xb8>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098cc:	4b27      	ldr	r3, [pc, #156]	; (800996c <vTaskSwitchContext+0xbc>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	e012      	b.n	80098fa <vTaskSwitchContext+0x4a>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10c      	bne.n	80098f4 <vTaskSwitchContext+0x44>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	b672      	cpsid	i
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	b662      	cpsie	i
 80098ee:	607b      	str	r3, [r7, #4]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vTaskSwitchContext+0x42>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	491d      	ldr	r1, [pc, #116]	; (8009970 <vTaskSwitchContext+0xc0>)
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0e2      	beq.n	80098d4 <vTaskSwitchContext+0x24>
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a15      	ldr	r2, [pc, #84]	; (8009970 <vTaskSwitchContext+0xc0>)
 800991a:	4413      	add	r3, r2
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	605a      	str	r2, [r3, #4]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3308      	adds	r3, #8
 8009930:	429a      	cmp	r2, r3
 8009932:	d104      	bne.n	800993e <vTaskSwitchContext+0x8e>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4a0b      	ldr	r2, [pc, #44]	; (8009974 <vTaskSwitchContext+0xc4>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4a08      	ldr	r2, [pc, #32]	; (800996c <vTaskSwitchContext+0xbc>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <vTaskSwitchContext+0xc4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3354      	adds	r3, #84	; 0x54
 8009954:	4a08      	ldr	r2, [pc, #32]	; (8009978 <vTaskSwitchContext+0xc8>)
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20001420 	.word	0x20001420
 8009968:	2000140c 	.word	0x2000140c
 800996c:	20001400 	.word	0x20001400
 8009970:	20000f28 	.word	0x20000f28
 8009974:	20000f24 	.word	0x20000f24
 8009978:	20000094 	.word	0x20000094

0800997c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10c      	bne.n	80099a6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a6:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <vTaskPlaceOnEventList+0x48>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3318      	adds	r3, #24
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fe fcab 	bl	800830a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099b4:	2101      	movs	r1, #1
 80099b6:	6838      	ldr	r0, [r7, #0]
 80099b8:	f000 fa8e 	bl	8009ed8 <prvAddCurrentTaskToDelayedList>
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000f24 	.word	0x20000f24

080099c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	b672      	cpsid	i
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	b662      	cpsie	i
 80099ee:	617b      	str	r3, [r7, #20]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f4:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <vTaskPlaceOnEventListRestricted+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3318      	adds	r3, #24
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7fe fc60 	bl	80082c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	68b8      	ldr	r0, [r7, #8]
 8009a12:	f000 fa61 	bl	8009ed8 <prvAddCurrentTaskToDelayedList>
	}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000f24 	.word	0x20000f24

08009a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10c      	bne.n	8009a54 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	b672      	cpsid	i
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	b662      	cpsie	i
 8009a4e:	60fb      	str	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	3318      	adds	r3, #24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fc8f 	bl	800837c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a5e:	4b1e      	ldr	r3, [pc, #120]	; (8009ad8 <xTaskRemoveFromEventList+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11d      	bne.n	8009aa2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fc86 	bl	800837c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4b19      	ldr	r3, [pc, #100]	; (8009adc <xTaskRemoveFromEventList+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d903      	bls.n	8009a84 <xTaskRemoveFromEventList+0x60>
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a16      	ldr	r2, [pc, #88]	; (8009adc <xTaskRemoveFromEventList+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4a13      	ldr	r2, [pc, #76]	; (8009ae0 <xTaskRemoveFromEventList+0xbc>)
 8009a92:	441a      	add	r2, r3
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7fe fc11 	bl	80082c2 <vListInsertEnd>
 8009aa0:	e005      	b.n	8009aae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	480e      	ldr	r0, [pc, #56]	; (8009ae4 <xTaskRemoveFromEventList+0xc0>)
 8009aaa:	f7fe fc0a 	bl	80082c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <xTaskRemoveFromEventList+0xc4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d905      	bls.n	8009ac8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009abc:	2301      	movs	r3, #1
 8009abe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <xTaskRemoveFromEventList+0xc8>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e001      	b.n	8009acc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009acc:	697b      	ldr	r3, [r7, #20]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20001420 	.word	0x20001420
 8009adc:	20001400 	.word	0x20001400
 8009ae0:	20000f28 	.word	0x20000f28
 8009ae4:	200013b8 	.word	0x200013b8
 8009ae8:	20000f24 	.word	0x20000f24
 8009aec:	2000140c 	.word	0x2000140c

08009af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <vTaskInternalSetTimeOutState+0x24>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b00:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <vTaskInternalSetTimeOutState+0x28>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	20001410 	.word	0x20001410
 8009b18:	200013fc 	.word	0x200013fc

08009b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10c      	bne.n	8009b46 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	b672      	cpsid	i
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	b662      	cpsie	i
 8009b40:	613b      	str	r3, [r7, #16]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10c      	bne.n	8009b66 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	b672      	cpsid	i
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	b662      	cpsie	i
 8009b60:	60fb      	str	r3, [r7, #12]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009b66:	f000 fe71 	bl	800a84c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <xTaskCheckForTimeOut+0xc4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d102      	bne.n	8009b8a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e023      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <xTaskCheckForTimeOut+0xc8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d007      	beq.n	8009ba6 <xTaskCheckForTimeOut+0x8a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e015      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d20b      	bcs.n	8009bc8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff97 	bl	8009af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	e004      	b.n	8009bd2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bd2:	f000 fe6f 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200013fc 	.word	0x200013fc
 8009be4:	20001410 	.word	0x20001410

08009be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bec:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <vTaskMissedYield+0x14>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
}
 8009bf2:	bf00      	nop
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	2000140c 	.word	0x2000140c

08009c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c08:	f000 f852 	bl	8009cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <prvIdleTask+0x28>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d9f9      	bls.n	8009c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c14:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <prvIdleTask+0x2c>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c24:	e7f0      	b.n	8009c08 <prvIdleTask+0x8>
 8009c26:	bf00      	nop
 8009c28:	20000f28 	.word	0x20000f28
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c36:	2300      	movs	r3, #0
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	e00c      	b.n	8009c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4a12      	ldr	r2, [pc, #72]	; (8009c90 <prvInitialiseTaskLists+0x60>)
 8009c48:	4413      	add	r3, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fb0c 	bl	8008268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3301      	adds	r3, #1
 8009c54:	607b      	str	r3, [r7, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b37      	cmp	r3, #55	; 0x37
 8009c5a:	d9ef      	bls.n	8009c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c5c:	480d      	ldr	r0, [pc, #52]	; (8009c94 <prvInitialiseTaskLists+0x64>)
 8009c5e:	f7fe fb03 	bl	8008268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c62:	480d      	ldr	r0, [pc, #52]	; (8009c98 <prvInitialiseTaskLists+0x68>)
 8009c64:	f7fe fb00 	bl	8008268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c68:	480c      	ldr	r0, [pc, #48]	; (8009c9c <prvInitialiseTaskLists+0x6c>)
 8009c6a:	f7fe fafd 	bl	8008268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c6e:	480c      	ldr	r0, [pc, #48]	; (8009ca0 <prvInitialiseTaskLists+0x70>)
 8009c70:	f7fe fafa 	bl	8008268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c74:	480b      	ldr	r0, [pc, #44]	; (8009ca4 <prvInitialiseTaskLists+0x74>)
 8009c76:	f7fe faf7 	bl	8008268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <prvInitialiseTaskLists+0x78>)
 8009c7c:	4a05      	ldr	r2, [pc, #20]	; (8009c94 <prvInitialiseTaskLists+0x64>)
 8009c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c80:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <prvInitialiseTaskLists+0x7c>)
 8009c82:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <prvInitialiseTaskLists+0x68>)
 8009c84:	601a      	str	r2, [r3, #0]
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000f28 	.word	0x20000f28
 8009c94:	20001388 	.word	0x20001388
 8009c98:	2000139c 	.word	0x2000139c
 8009c9c:	200013b8 	.word	0x200013b8
 8009ca0:	200013cc 	.word	0x200013cc
 8009ca4:	200013e4 	.word	0x200013e4
 8009ca8:	200013b0 	.word	0x200013b0
 8009cac:	200013b4 	.word	0x200013b4

08009cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb6:	e019      	b.n	8009cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cb8:	f000 fdc8 	bl	800a84c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cbc:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <prvCheckTasksWaitingTermination+0x50>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fb57 	bl	800837c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cce:	4b0d      	ldr	r3, [pc, #52]	; (8009d04 <prvCheckTasksWaitingTermination+0x54>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	4a0b      	ldr	r2, [pc, #44]	; (8009d04 <prvCheckTasksWaitingTermination+0x54>)
 8009cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4a0a      	ldr	r2, [pc, #40]	; (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ce2:	f000 fde7 	bl	800a8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f810 	bl	8009d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cec:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <prvCheckTasksWaitingTermination+0x58>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e1      	bne.n	8009cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	200013cc 	.word	0x200013cc
 8009d04:	200013f8 	.word	0x200013f8
 8009d08:	200013e0 	.word	0x200013e0

08009d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3354      	adds	r3, #84	; 0x54
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 f9d3 	bl	800b0c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d108      	bne.n	8009d3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 ff83 	bl	800ac38 <vPortFree>
				vPortFree( pxTCB );
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 ff80 	bl	800ac38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d38:	e01a      	b.n	8009d70 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d103      	bne.n	8009d4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 ff77 	bl	800ac38 <vPortFree>
	}
 8009d4a:	e011      	b.n	8009d70 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d00c      	beq.n	8009d70 <prvDeleteTCB+0x64>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	b672      	cpsid	i
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	b662      	cpsie	i
 8009d6a:	60fb      	str	r3, [r7, #12]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <prvDeleteTCB+0x62>
	}
 8009d70:	bf00      	nop
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <prvResetNextTaskUnblockTime+0x38>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <prvResetNextTaskUnblockTime+0x3c>)
 8009d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d90:	e008      	b.n	8009da4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <prvResetNextTaskUnblockTime+0x38>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a04      	ldr	r2, [pc, #16]	; (8009db4 <prvResetNextTaskUnblockTime+0x3c>)
 8009da2:	6013      	str	r3, [r2, #0]
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	200013b0 	.word	0x200013b0
 8009db4:	20001418 	.word	0x20001418

08009db8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <xTaskGetSchedulerState+0x34>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	607b      	str	r3, [r7, #4]
 8009dca:	e008      	b.n	8009dde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dcc:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <xTaskGetSchedulerState+0x38>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	e001      	b.n	8009dde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dde:	687b      	ldr	r3, [r7, #4]
	}
 8009de0:	4618      	mov	r0, r3
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20001404 	.word	0x20001404
 8009df0:	20001420 	.word	0x20001420

08009df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d05a      	beq.n	8009ec0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e0a:	4b30      	ldr	r3, [pc, #192]	; (8009ecc <xTaskPriorityDisinherit+0xd8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d00c      	beq.n	8009e2e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	b672      	cpsid	i
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	b662      	cpsie	i
 8009e28:	60fb      	str	r3, [r7, #12]
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10c      	bne.n	8009e50 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	b672      	cpsid	i
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	b662      	cpsie	i
 8009e4a:	60bb      	str	r3, [r7, #8]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	1e5a      	subs	r2, r3, #1
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d02c      	beq.n	8009ec0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d128      	bne.n	8009ec0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	3304      	adds	r3, #4
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fa82 	bl	800837c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <xTaskPriorityDisinherit+0xdc>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <xTaskPriorityDisinherit+0xac>
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <xTaskPriorityDisinherit+0xdc>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <xTaskPriorityDisinherit+0xe0>)
 8009eae:	441a      	add	r2, r3
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fa03 	bl	80082c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ec0:	697b      	ldr	r3, [r7, #20]
	}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000f24 	.word	0x20000f24
 8009ed0:	20001400 	.word	0x20001400
 8009ed4:	20000f28 	.word	0x20000f28

08009ed8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ee2:	4b21      	ldr	r3, [pc, #132]	; (8009f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ee8:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fa44 	bl	800837c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efa:	d10a      	bne.n	8009f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d007      	beq.n	8009f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f02:	4b1a      	ldr	r3, [pc, #104]	; (8009f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4819      	ldr	r0, [pc, #100]	; (8009f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f0c:	f7fe f9d9 	bl	80082c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f10:	e026      	b.n	8009f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f1a:	4b14      	ldr	r3, [pc, #80]	; (8009f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d209      	bcs.n	8009f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fe f9e7 	bl	800830a <vListInsert>
}
 8009f3c:	e010      	b.n	8009f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f3e:	4b0e      	ldr	r3, [pc, #56]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f7fe f9dd 	bl	800830a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f50:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d202      	bcs.n	8009f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f5a:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6013      	str	r3, [r2, #0]
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	200013fc 	.word	0x200013fc
 8009f6c:	20000f24 	.word	0x20000f24
 8009f70:	200013e4 	.word	0x200013e4
 8009f74:	200013b4 	.word	0x200013b4
 8009f78:	200013b0 	.word	0x200013b0
 8009f7c:	20001418 	.word	0x20001418

08009f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08a      	sub	sp, #40	; 0x28
 8009f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f8a:	f000 fb15 	bl	800a5b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f8e:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <xTimerCreateTimerTask+0x84>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d021      	beq.n	8009fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f9e:	1d3a      	adds	r2, r7, #4
 8009fa0:	f107 0108 	add.w	r1, r7, #8
 8009fa4:	f107 030c 	add.w	r3, r7, #12
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fe f943 	bl	8008234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	9202      	str	r2, [sp, #8]
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	2302      	movs	r3, #2
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	4911      	ldr	r1, [pc, #68]	; (800a008 <xTimerCreateTimerTask+0x88>)
 8009fc2:	4812      	ldr	r0, [pc, #72]	; (800a00c <xTimerCreateTimerTask+0x8c>)
 8009fc4:	f7fe ff0e 	bl	8008de4 <xTaskCreateStatic>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4a11      	ldr	r2, [pc, #68]	; (800a010 <xTimerCreateTimerTask+0x90>)
 8009fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fce:	4b10      	ldr	r3, [pc, #64]	; (800a010 <xTimerCreateTimerTask+0x90>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10c      	bne.n	8009ffa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	613b      	str	r3, [r7, #16]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009ffa:	697b      	ldr	r3, [r7, #20]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20001454 	.word	0x20001454
 800a008:	0800bfdc 	.word	0x0800bfdc
 800a00c:	0800a151 	.word	0x0800a151
 800a010:	20001458 	.word	0x20001458

0800a014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08a      	sub	sp, #40	; 0x28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10c      	bne.n	800a046 <xTimerGenericCommand+0x32>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	b672      	cpsid	i
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	b662      	cpsie	i
 800a040:	623b      	str	r3, [r7, #32]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a046:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <xTimerGenericCommand+0x9c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d02a      	beq.n	800a0a4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b05      	cmp	r3, #5
 800a05e:	dc18      	bgt.n	800a092 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a060:	f7ff feaa 	bl	8009db8 <xTaskGetSchedulerState>
 800a064:	4603      	mov	r3, r0
 800a066:	2b02      	cmp	r3, #2
 800a068:	d109      	bne.n	800a07e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a06a:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <xTimerGenericCommand+0x9c>)
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f107 0110 	add.w	r1, r7, #16
 800a072:	2300      	movs	r3, #0
 800a074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a076:	f7fe fabb 	bl	80085f0 <xQueueGenericSend>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24
 800a07c:	e012      	b.n	800a0a4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <xTimerGenericCommand+0x9c>)
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	f107 0110 	add.w	r1, r7, #16
 800a086:	2300      	movs	r3, #0
 800a088:	2200      	movs	r2, #0
 800a08a:	f7fe fab1 	bl	80085f0 <xQueueGenericSend>
 800a08e:	6278      	str	r0, [r7, #36]	; 0x24
 800a090:	e008      	b.n	800a0a4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <xTimerGenericCommand+0x9c>)
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	f107 0110 	add.w	r1, r7, #16
 800a09a:	2300      	movs	r3, #0
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	f7fe fbad 	bl	80087fc <xQueueGenericSendFromISR>
 800a0a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3728      	adds	r7, #40	; 0x28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20001454 	.word	0x20001454

0800a0b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0be:	4b23      	ldr	r3, [pc, #140]	; (800a14c <prvProcessExpiredTimer+0x98>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe f955 	bl	800837c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d024      	beq.n	800a12a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	18d1      	adds	r1, r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	6978      	ldr	r0, [r7, #20]
 800a0ee:	f000 f8d3 	bl	800a298 <prvInsertTimerInActiveList>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d021      	beq.n	800a13c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	2100      	movs	r1, #0
 800a102:	6978      	ldr	r0, [r7, #20]
 800a104:	f7ff ff86 	bl	800a014 <xTimerGenericCommand>
 800a108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d115      	bne.n	800a13c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	b672      	cpsid	i
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	b662      	cpsie	i
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a130:	f023 0301 	bic.w	r3, r3, #1
 800a134:	b2da      	uxtb	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	6978      	ldr	r0, [r7, #20]
 800a142:	4798      	blx	r3
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	2000144c 	.word	0x2000144c

0800a150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f857 	bl	800a210 <prvGetNextExpireTime>
 800a162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f803 	bl	800a174 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a16e:	f000 f8d5 	bl	800a31c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a172:	e7f1      	b.n	800a158 <prvTimerTask+0x8>

0800a174 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a17e:	f7ff fa1d 	bl	80095bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a182:	f107 0308 	add.w	r3, r7, #8
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f866 	bl	800a258 <prvSampleTimeNow>
 800a18c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d130      	bne.n	800a1f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10a      	bne.n	800a1b0 <prvProcessTimerOrBlockTask+0x3c>
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d806      	bhi.n	800a1b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1a2:	f7ff fa19 	bl	80095d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1a6:	68f9      	ldr	r1, [r7, #12]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff ff83 	bl	800a0b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ae:	e024      	b.n	800a1fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d008      	beq.n	800a1c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <prvProcessTimerOrBlockTask+0x90>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <prvProcessTimerOrBlockTask+0x50>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e000      	b.n	800a1c6 <prvProcessTimerOrBlockTask+0x52>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <prvProcessTimerOrBlockTask+0x94>)
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f7fe fdd1 	bl	8008d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1da:	f7ff f9fd 	bl	80095d8 <xTaskResumeAll>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10a      	bne.n	800a1fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1e4:	4b09      	ldr	r3, [pc, #36]	; (800a20c <prvProcessTimerOrBlockTask+0x98>)
 800a1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	f3bf 8f6f 	isb	sy
}
 800a1f4:	e001      	b.n	800a1fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1f6:	f7ff f9ef 	bl	80095d8 <xTaskResumeAll>
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20001450 	.word	0x20001450
 800a208:	20001454 	.word	0x20001454
 800a20c:	e000ed04 	.word	0xe000ed04

0800a210 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <prvGetNextExpireTime+0x44>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <prvGetNextExpireTime+0x16>
 800a222:	2201      	movs	r2, #1
 800a224:	e000      	b.n	800a228 <prvGetNextExpireTime+0x18>
 800a226:	2200      	movs	r2, #0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d105      	bne.n	800a240 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <prvGetNextExpireTime+0x44>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	e001      	b.n	800a244 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	2000144c 	.word	0x2000144c

0800a258 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a260:	f7ff fa5a 	bl	8009718 <xTaskGetTickCount>
 800a264:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a266:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <prvSampleTimeNow+0x3c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d205      	bcs.n	800a27c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a270:	f000 f93c 	bl	800a4ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	e002      	b.n	800a282 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a282:	4a04      	ldr	r2, [pc, #16]	; (800a294 <prvSampleTimeNow+0x3c>)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a288:	68fb      	ldr	r3, [r7, #12]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	2000145c 	.word	0x2000145c

0800a298 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d812      	bhi.n	800a2e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	1ad2      	subs	r2, r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d302      	bcc.n	800a2d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	e01b      	b.n	800a30a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2d2:	4b10      	ldr	r3, [pc, #64]	; (800a314 <prvInsertTimerInActiveList+0x7c>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7fe f814 	bl	800830a <vListInsert>
 800a2e2:	e012      	b.n	800a30a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d206      	bcs.n	800a2fa <prvInsertTimerInActiveList+0x62>
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d302      	bcc.n	800a2fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e007      	b.n	800a30a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2fa:	4b07      	ldr	r3, [pc, #28]	; (800a318 <prvInsertTimerInActiveList+0x80>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3304      	adds	r3, #4
 800a302:	4619      	mov	r1, r3
 800a304:	4610      	mov	r0, r2
 800a306:	f7fe f800 	bl	800830a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a30a:	697b      	ldr	r3, [r7, #20]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20001450 	.word	0x20001450
 800a318:	2000144c 	.word	0x2000144c

0800a31c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a322:	e0d0      	b.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	da1a      	bge.n	800a360 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a32a:	1d3b      	adds	r3, r7, #4
 800a32c:	3304      	adds	r3, #4
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	b672      	cpsid	i
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	b662      	cpsie	i
 800a34a:	61fb      	str	r3, [r7, #28]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a356:	6850      	ldr	r0, [r2, #4]
 800a358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35a:	6892      	ldr	r2, [r2, #8]
 800a35c:	4611      	mov	r1, r2
 800a35e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f2c0 80af 	blt.w	800a4c6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d004      	beq.n	800a37e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fd ffff 	bl	800837c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a37e:	463b      	mov	r3, r7
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff ff69 	bl	800a258 <prvSampleTimeNow>
 800a386:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	f200 809a 	bhi.w	800a4c4 <prvProcessReceivedCommands+0x1a8>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <prvProcessReceivedCommands+0x7c>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3c1 	.word	0x0800a3c1
 800a39c:	0800a3c1 	.word	0x0800a3c1
 800a3a0:	0800a3c1 	.word	0x0800a3c1
 800a3a4:	0800a439 	.word	0x0800a439
 800a3a8:	0800a44d 	.word	0x0800a44d
 800a3ac:	0800a49b 	.word	0x0800a49b
 800a3b0:	0800a3c1 	.word	0x0800a3c1
 800a3b4:	0800a3c1 	.word	0x0800a3c1
 800a3b8:	0800a439 	.word	0x0800a439
 800a3bc:	0800a44d 	.word	0x0800a44d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	18d1      	adds	r1, r2, r3
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e0:	f7ff ff5a 	bl	800a298 <prvInsertTimerInActiveList>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d06d      	beq.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d062      	beq.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	441a      	add	r2, r3
 800a408:	2300      	movs	r3, #0
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2300      	movs	r3, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a412:	f7ff fdff 	bl	800a014 <xTimerGenericCommand>
 800a416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d153      	bne.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	b672      	cpsid	i
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	b662      	cpsie	i
 800a432:	61bb      	str	r3, [r7, #24]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a43e:	f023 0301 	bic.w	r3, r3, #1
 800a442:	b2da      	uxtb	r2, r3
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a44a:	e03c      	b.n	800a4c6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10c      	bne.n	800a486 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	b672      	cpsid	i
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	b662      	cpsie	i
 800a480:	617b      	str	r3, [r7, #20]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	18d1      	adds	r1, r2, r3
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	f7ff ff00 	bl	800a298 <prvInsertTimerInActiveList>
					break;
 800a498:	e015      	b.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4aa:	f000 fbc5 	bl	800ac38 <vPortFree>
 800a4ae:	e00a      	b.n	800a4c6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4b6:	f023 0301 	bic.w	r3, r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4c2:	e000      	b.n	800a4c6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a4c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <prvProcessReceivedCommands+0x1cc>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	1d39      	adds	r1, r7, #4
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fa34 	bl	800893c <xQueueReceive>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f47f af24 	bne.w	800a324 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	3730      	adds	r7, #48	; 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20001454 	.word	0x20001454

0800a4ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4f2:	e04a      	b.n	800a58a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4f4:	4b2e      	ldr	r3, [pc, #184]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fe:	4b2c      	ldr	r3, [pc, #176]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd ff35 	bl	800837c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d030      	beq.n	800a58a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	429a      	cmp	r2, r3
 800a538:	d90e      	bls.n	800a558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a546:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4619      	mov	r1, r3
 800a550:	4610      	mov	r0, r2
 800a552:	f7fd feda 	bl	800830a <vListInsert>
 800a556:	e018      	b.n	800a58a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a558:	2300      	movs	r3, #0
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	2300      	movs	r3, #0
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff fd56 	bl	800a014 <xTimerGenericCommand>
 800a568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10c      	bne.n	800a58a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	b672      	cpsid	i
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	b662      	cpsie	i
 800a584:	603b      	str	r3, [r7, #0]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1af      	bne.n	800a4f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <prvSwitchTimerLists+0xc8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a04      	ldr	r2, [pc, #16]	; (800a5b0 <prvSwitchTimerLists+0xc4>)
 800a5a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5a2:	4a04      	ldr	r2, [pc, #16]	; (800a5b4 <prvSwitchTimerLists+0xc8>)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	6013      	str	r3, [r2, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	2000144c 	.word	0x2000144c
 800a5b4:	20001450 	.word	0x20001450

0800a5b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5be:	f000 f945 	bl	800a84c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5c2:	4b15      	ldr	r3, [pc, #84]	; (800a618 <prvCheckForValidListAndQueue+0x60>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d120      	bne.n	800a60c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5ca:	4814      	ldr	r0, [pc, #80]	; (800a61c <prvCheckForValidListAndQueue+0x64>)
 800a5cc:	f7fd fe4c 	bl	8008268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5d0:	4813      	ldr	r0, [pc, #76]	; (800a620 <prvCheckForValidListAndQueue+0x68>)
 800a5d2:	f7fd fe49 	bl	8008268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5d6:	4b13      	ldr	r3, [pc, #76]	; (800a624 <prvCheckForValidListAndQueue+0x6c>)
 800a5d8:	4a10      	ldr	r2, [pc, #64]	; (800a61c <prvCheckForValidListAndQueue+0x64>)
 800a5da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5dc:	4b12      	ldr	r3, [pc, #72]	; (800a628 <prvCheckForValidListAndQueue+0x70>)
 800a5de:	4a10      	ldr	r2, [pc, #64]	; (800a620 <prvCheckForValidListAndQueue+0x68>)
 800a5e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	4b11      	ldr	r3, [pc, #68]	; (800a62c <prvCheckForValidListAndQueue+0x74>)
 800a5e8:	4a11      	ldr	r2, [pc, #68]	; (800a630 <prvCheckForValidListAndQueue+0x78>)
 800a5ea:	2110      	movs	r1, #16
 800a5ec:	200a      	movs	r0, #10
 800a5ee:	f7fd ff59 	bl	80084a4 <xQueueGenericCreateStatic>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4a08      	ldr	r2, [pc, #32]	; (800a618 <prvCheckForValidListAndQueue+0x60>)
 800a5f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5f8:	4b07      	ldr	r3, [pc, #28]	; (800a618 <prvCheckForValidListAndQueue+0x60>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a600:	4b05      	ldr	r3, [pc, #20]	; (800a618 <prvCheckForValidListAndQueue+0x60>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	490b      	ldr	r1, [pc, #44]	; (800a634 <prvCheckForValidListAndQueue+0x7c>)
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fb8e 	bl	8008d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a60c:	f000 f952 	bl	800a8b4 <vPortExitCritical>
}
 800a610:	bf00      	nop
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20001454 	.word	0x20001454
 800a61c:	20001424 	.word	0x20001424
 800a620:	20001438 	.word	0x20001438
 800a624:	2000144c 	.word	0x2000144c
 800a628:	20001450 	.word	0x20001450
 800a62c:	20001500 	.word	0x20001500
 800a630:	20001460 	.word	0x20001460
 800a634:	0800bfe4 	.word	0x0800bfe4

0800a638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3b04      	subs	r3, #4
 800a648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3b04      	subs	r3, #4
 800a656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f023 0201 	bic.w	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3b04      	subs	r3, #4
 800a666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a668:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <pxPortInitialiseStack+0x64>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b14      	subs	r3, #20
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3b04      	subs	r3, #4
 800a67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f06f 0202 	mvn.w	r2, #2
 800a686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3b20      	subs	r3, #32
 800a68c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a68e:	68fb      	ldr	r3, [r7, #12]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	0800a6a1 	.word	0x0800a6a1

0800a6a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6aa:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <prvTaskExitError+0x5c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d00c      	beq.n	800a6ce <prvTaskExitError+0x2e>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	b672      	cpsid	i
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	b662      	cpsie	i
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <prvTaskExitError+0x2c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	b672      	cpsid	i
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	b662      	cpsie	i
 800a6e2:	60bb      	str	r3, [r7, #8]
}
 800a6e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6e6:	bf00      	nop
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0fc      	beq.n	800a6e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	20000038 	.word	0x20000038

0800a700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <pxCurrentTCBConst2>)
 800a702:	6819      	ldr	r1, [r3, #0]
 800a704:	6808      	ldr	r0, [r1, #0]
 800a706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	f380 8809 	msr	PSP, r0
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f04f 0000 	mov.w	r0, #0
 800a716:	f380 8811 	msr	BASEPRI, r0
 800a71a:	4770      	bx	lr
 800a71c:	f3af 8000 	nop.w

0800a720 <pxCurrentTCBConst2>:
 800a720:	20000f24 	.word	0x20000f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop

0800a728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a728:	4808      	ldr	r0, [pc, #32]	; (800a74c <prvPortStartFirstTask+0x24>)
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	6800      	ldr	r0, [r0, #0]
 800a72e:	f380 8808 	msr	MSP, r0
 800a732:	f04f 0000 	mov.w	r0, #0
 800a736:	f380 8814 	msr	CONTROL, r0
 800a73a:	b662      	cpsie	i
 800a73c:	b661      	cpsie	f
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	df00      	svc	0
 800a748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a74a:	bf00      	nop
 800a74c:	e000ed08 	.word	0xe000ed08

0800a750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a756:	4b37      	ldr	r3, [pc, #220]	; (800a834 <xPortStartScheduler+0xe4>)
 800a758:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	22ff      	movs	r2, #255	; 0xff
 800a766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	4b2f      	ldr	r3, [pc, #188]	; (800a838 <xPortStartScheduler+0xe8>)
 800a77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a77e:	4b2f      	ldr	r3, [pc, #188]	; (800a83c <xPortStartScheduler+0xec>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a784:	e009      	b.n	800a79a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a786:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <xPortStartScheduler+0xec>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	4a2b      	ldr	r2, [pc, #172]	; (800a83c <xPortStartScheduler+0xec>)
 800a78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	b2db      	uxtb	r3, r3
 800a798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d0ef      	beq.n	800a786 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7a6:	4b25      	ldr	r3, [pc, #148]	; (800a83c <xPortStartScheduler+0xec>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1c3 0307 	rsb	r3, r3, #7
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d00c      	beq.n	800a7cc <xPortStartScheduler+0x7c>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	b672      	cpsid	i
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	b662      	cpsie	i
 800a7c6:	60bb      	str	r3, [r7, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7cc:	4b1b      	ldr	r3, [pc, #108]	; (800a83c <xPortStartScheduler+0xec>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	4a1a      	ldr	r2, [pc, #104]	; (800a83c <xPortStartScheduler+0xec>)
 800a7d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7d6:	4b19      	ldr	r3, [pc, #100]	; (800a83c <xPortStartScheduler+0xec>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7de:	4a17      	ldr	r2, [pc, #92]	; (800a83c <xPortStartScheduler+0xec>)
 800a7e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <xPortStartScheduler+0xf0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a14      	ldr	r2, [pc, #80]	; (800a840 <xPortStartScheduler+0xf0>)
 800a7f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7f6:	4b12      	ldr	r3, [pc, #72]	; (800a840 <xPortStartScheduler+0xf0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <xPortStartScheduler+0xf0>)
 800a7fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a800:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a802:	f000 f8dd 	bl	800a9c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <xPortStartScheduler+0xf4>)
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a80c:	f000 f8fc 	bl	800aa08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <xPortStartScheduler+0xf8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <xPortStartScheduler+0xf8>)
 800a816:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a81a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a81c:	f7ff ff84 	bl	800a728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a820:	f7ff f846 	bl	80098b0 <vTaskSwitchContext>
	prvTaskExitError();
 800a824:	f7ff ff3c 	bl	800a6a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	e000e400 	.word	0xe000e400
 800a838:	20001550 	.word	0x20001550
 800a83c:	20001554 	.word	0x20001554
 800a840:	e000ed20 	.word	0xe000ed20
 800a844:	20000038 	.word	0x20000038
 800a848:	e000ef34 	.word	0xe000ef34

0800a84c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	b672      	cpsid	i
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	b662      	cpsie	i
 800a866:	607b      	str	r3, [r7, #4]
}
 800a868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a86a:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <vPortEnterCritical+0x60>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3301      	adds	r3, #1
 800a870:	4a0e      	ldr	r2, [pc, #56]	; (800a8ac <vPortEnterCritical+0x60>)
 800a872:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a874:	4b0d      	ldr	r3, [pc, #52]	; (800a8ac <vPortEnterCritical+0x60>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d111      	bne.n	800a8a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a87c:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <vPortEnterCritical+0x64>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00c      	beq.n	800a8a0 <vPortEnterCritical+0x54>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	603b      	str	r3, [r7, #0]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <vPortEnterCritical+0x52>
	}
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	20000038 	.word	0x20000038
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8ba:	4b13      	ldr	r3, [pc, #76]	; (800a908 <vPortExitCritical+0x54>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10c      	bne.n	800a8dc <vPortExitCritical+0x28>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	b672      	cpsid	i
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	b662      	cpsie	i
 800a8d6:	607b      	str	r3, [r7, #4]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <vPortExitCritical+0x54>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	4a09      	ldr	r2, [pc, #36]	; (800a908 <vPortExitCritical+0x54>)
 800a8e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8e6:	4b08      	ldr	r3, [pc, #32]	; (800a908 <vPortExitCritical+0x54>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d105      	bne.n	800a8fa <vPortExitCritical+0x46>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f383 8811 	msr	BASEPRI, r3
}
 800a8f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	20000038 	.word	0x20000038
 800a90c:	00000000 	.word	0x00000000

0800a910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a910:	f3ef 8009 	mrs	r0, PSP
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4b15      	ldr	r3, [pc, #84]	; (800a970 <pxCurrentTCBConst>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	f01e 0f10 	tst.w	lr, #16
 800a920:	bf08      	it	eq
 800a922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	6010      	str	r0, [r2, #0]
 800a92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a934:	b672      	cpsid	i
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	b662      	cpsie	i
 800a944:	f7fe ffb4 	bl	80098b0 <vTaskSwitchContext>
 800a948:	f04f 0000 	mov.w	r0, #0
 800a94c:	f380 8811 	msr	BASEPRI, r0
 800a950:	bc09      	pop	{r0, r3}
 800a952:	6819      	ldr	r1, [r3, #0]
 800a954:	6808      	ldr	r0, [r1, #0]
 800a956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	f01e 0f10 	tst.w	lr, #16
 800a95e:	bf08      	it	eq
 800a960:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a964:	f380 8809 	msr	PSP, r0
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop

0800a970 <pxCurrentTCBConst>:
 800a970:	20000f24 	.word	0x20000f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop

0800a978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	b672      	cpsid	i
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	b662      	cpsie	i
 800a992:	607b      	str	r3, [r7, #4]
}
 800a994:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a996:	f7fe fecf 	bl	8009738 <xTaskIncrementTick>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9a0:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <SysTick_Handler+0x44>)
 800a9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	f383 8811 	msr	BASEPRI, r3
}
 800a9b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9c4:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <vPortSetupTimerInterrupt+0x34>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <vPortSetupTimerInterrupt+0x38>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <vPortSetupTimerInterrupt+0x3c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	; (800aa00 <vPortSetupTimerInterrupt+0x40>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	099b      	lsrs	r3, r3, #6
 800a9dc:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <vPortSetupTimerInterrupt+0x44>)
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9e2:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <vPortSetupTimerInterrupt+0x34>)
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	601a      	str	r2, [r3, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	e000e010 	.word	0xe000e010
 800a9f8:	e000e018 	.word	0xe000e018
 800a9fc:	2000002c 	.word	0x2000002c
 800aa00:	10624dd3 	.word	0x10624dd3
 800aa04:	e000e014 	.word	0xe000e014

0800aa08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa18 <vPortEnableVFP+0x10>
 800aa0c:	6801      	ldr	r1, [r0, #0]
 800aa0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa12:	6001      	str	r1, [r0, #0]
 800aa14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa16:	bf00      	nop
 800aa18:	e000ed88 	.word	0xe000ed88

0800aa1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa22:	f3ef 8305 	mrs	r3, IPSR
 800aa26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	d916      	bls.n	800aa5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa2e:	4a19      	ldr	r2, [pc, #100]	; (800aa94 <vPortValidateInterruptPriority+0x78>)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <vPortValidateInterruptPriority+0x7c>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	7afa      	ldrb	r2, [r7, #11]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d20c      	bcs.n	800aa5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	b672      	cpsid	i
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	b662      	cpsie	i
 800aa56:	607b      	str	r3, [r7, #4]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <vPortValidateInterruptPriority+0x80>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <vPortValidateInterruptPriority+0x84>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d90c      	bls.n	800aa86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	b672      	cpsid	i
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	b662      	cpsie	i
 800aa80:	603b      	str	r3, [r7, #0]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <vPortValidateInterruptPriority+0x68>
	}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	e000e3f0 	.word	0xe000e3f0
 800aa98:	20001550 	.word	0x20001550
 800aa9c:	e000ed0c 	.word	0xe000ed0c
 800aaa0:	20001554 	.word	0x20001554

0800aaa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aab0:	f7fe fd84 	bl	80095bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aab4:	4b5b      	ldr	r3, [pc, #364]	; (800ac24 <pvPortMalloc+0x180>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aabc:	f000 f91a 	bl	800acf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aac0:	4b59      	ldr	r3, [pc, #356]	; (800ac28 <pvPortMalloc+0x184>)
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4013      	ands	r3, r2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f040 8092 	bne.w	800abf2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d01f      	beq.n	800ab14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aad4:	2208      	movs	r2, #8
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4413      	add	r3, r2
 800aada:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d016      	beq.n	800ab14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f023 0307 	bic.w	r3, r3, #7
 800aaec:	3308      	adds	r3, #8
 800aaee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <pvPortMalloc+0x70>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	b672      	cpsid	i
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	b662      	cpsie	i
 800ab0e:	617b      	str	r3, [r7, #20]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d06b      	beq.n	800abf2 <pvPortMalloc+0x14e>
 800ab1a:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <pvPortMalloc+0x188>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d866      	bhi.n	800abf2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab24:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <pvPortMalloc+0x18c>)
 800ab26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab28:	4b41      	ldr	r3, [pc, #260]	; (800ac30 <pvPortMalloc+0x18c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab2e:	e004      	b.n	800ab3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d903      	bls.n	800ab4c <pvPortMalloc+0xa8>
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1f1      	bne.n	800ab30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab4c:	4b35      	ldr	r3, [pc, #212]	; (800ac24 <pvPortMalloc+0x180>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d04d      	beq.n	800abf2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	4413      	add	r3, r2
 800ab5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	2308      	movs	r3, #8
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d921      	bls.n	800abbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <pvPortMalloc+0x100>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	b672      	cpsid	i
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	b662      	cpsie	i
 800ab9e:	613b      	str	r3, [r7, #16]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	1ad2      	subs	r2, r2, r3
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abb6:	69b8      	ldr	r0, [r7, #24]
 800abb8:	f000 f8fe 	bl	800adb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abbc:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <pvPortMalloc+0x188>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	4a19      	ldr	r2, [pc, #100]	; (800ac2c <pvPortMalloc+0x188>)
 800abc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abca:	4b18      	ldr	r3, [pc, #96]	; (800ac2c <pvPortMalloc+0x188>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	4b19      	ldr	r3, [pc, #100]	; (800ac34 <pvPortMalloc+0x190>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d203      	bcs.n	800abde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abd6:	4b15      	ldr	r3, [pc, #84]	; (800ac2c <pvPortMalloc+0x188>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a16      	ldr	r2, [pc, #88]	; (800ac34 <pvPortMalloc+0x190>)
 800abdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <pvPortMalloc+0x184>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	431a      	orrs	r2, r3
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abf2:	f7fe fcf1 	bl	80095d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00c      	beq.n	800ac1a <pvPortMalloc+0x176>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	b672      	cpsid	i
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	b662      	cpsie	i
 800ac14:	60fb      	str	r3, [r7, #12]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <pvPortMalloc+0x174>
	return pvReturn;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3728      	adds	r7, #40	; 0x28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20005160 	.word	0x20005160
 800ac28:	2000516c 	.word	0x2000516c
 800ac2c:	20005164 	.word	0x20005164
 800ac30:	20005158 	.word	0x20005158
 800ac34:	20005168 	.word	0x20005168

0800ac38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d04c      	beq.n	800ace4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	425b      	negs	r3, r3
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4b23      	ldr	r3, [pc, #140]	; (800acec <vPortFree+0xb4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4013      	ands	r3, r2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10c      	bne.n	800ac80 <vPortFree+0x48>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	b672      	cpsid	i
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	b662      	cpsie	i
 800ac7a:	60fb      	str	r3, [r7, #12]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <vPortFree+0x6a>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	60bb      	str	r3, [r7, #8]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <vPortFree+0xb4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4013      	ands	r3, r2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d019      	beq.n	800ace4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d115      	bne.n	800ace4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	4b0b      	ldr	r3, [pc, #44]	; (800acec <vPortFree+0xb4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	43db      	mvns	r3, r3
 800acc2:	401a      	ands	r2, r3
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acc8:	f7fe fc78 	bl	80095bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <vPortFree+0xb8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4413      	add	r3, r2
 800acd6:	4a06      	ldr	r2, [pc, #24]	; (800acf0 <vPortFree+0xb8>)
 800acd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acda:	6938      	ldr	r0, [r7, #16]
 800acdc:	f000 f86c 	bl	800adb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ace0:	f7fe fc7a 	bl	80095d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ace4:	bf00      	nop
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	2000516c 	.word	0x2000516c
 800acf0:	20005164 	.word	0x20005164

0800acf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800acfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad00:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <prvHeapInit+0xac>)
 800ad02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00c      	beq.n	800ad28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3307      	adds	r3, #7
 800ad12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0307 	bic.w	r3, r3, #7
 800ad1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	4a1f      	ldr	r2, [pc, #124]	; (800ada0 <prvHeapInit+0xac>)
 800ad24:	4413      	add	r3, r2
 800ad26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad2c:	4a1d      	ldr	r2, [pc, #116]	; (800ada4 <prvHeapInit+0xb0>)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad32:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <prvHeapInit+0xb0>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad40:	2208      	movs	r2, #8
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0307 	bic.w	r3, r3, #7
 800ad4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4a15      	ldr	r2, [pc, #84]	; (800ada8 <prvHeapInit+0xb4>)
 800ad54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <prvHeapInit+0xb4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad5e:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <prvHeapInit+0xb4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad74:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <prvHeapInit+0xb4>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4a0a      	ldr	r2, [pc, #40]	; (800adac <prvHeapInit+0xb8>)
 800ad82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <prvHeapInit+0xbc>)
 800ad8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad8c:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <prvHeapInit+0xc0>)
 800ad8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad92:	601a      	str	r2, [r3, #0]
}
 800ad94:	bf00      	nop
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	20001558 	.word	0x20001558
 800ada4:	20005158 	.word	0x20005158
 800ada8:	20005160 	.word	0x20005160
 800adac:	20005168 	.word	0x20005168
 800adb0:	20005164 	.word	0x20005164
 800adb4:	2000516c 	.word	0x2000516c

0800adb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adc0:	4b28      	ldr	r3, [pc, #160]	; (800ae64 <prvInsertBlockIntoFreeList+0xac>)
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	e002      	b.n	800adcc <prvInsertBlockIntoFreeList+0x14>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d8f7      	bhi.n	800adc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	4413      	add	r3, r2
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d108      	bne.n	800adfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	441a      	add	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	441a      	add	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d118      	bne.n	800ae40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <prvInsertBlockIntoFreeList+0xb0>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d00d      	beq.n	800ae36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	441a      	add	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e008      	b.n	800ae48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae36:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <prvInsertBlockIntoFreeList+0xb0>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	e003      	b.n	800ae48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d002      	beq.n	800ae56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae56:	bf00      	nop
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20005158 	.word	0x20005158
 800ae68:	20005160 	.word	0x20005160

0800ae6c <std>:
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	4604      	mov	r4, r0
 800ae72:	e9c0 3300 	strd	r3, r3, [r0]
 800ae76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae7a:	6083      	str	r3, [r0, #8]
 800ae7c:	8181      	strh	r1, [r0, #12]
 800ae7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae80:	81c2      	strh	r2, [r0, #14]
 800ae82:	6183      	str	r3, [r0, #24]
 800ae84:	4619      	mov	r1, r3
 800ae86:	2208      	movs	r2, #8
 800ae88:	305c      	adds	r0, #92	; 0x5c
 800ae8a:	f000 f8f4 	bl	800b076 <memset>
 800ae8e:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <std+0x38>)
 800ae90:	6263      	str	r3, [r4, #36]	; 0x24
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <std+0x3c>)
 800ae94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae96:	4b05      	ldr	r3, [pc, #20]	; (800aeac <std+0x40>)
 800ae98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <std+0x44>)
 800ae9c:	6224      	str	r4, [r4, #32]
 800ae9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aea0:	bd10      	pop	{r4, pc}
 800aea2:	bf00      	nop
 800aea4:	0800aff1 	.word	0x0800aff1
 800aea8:	0800b013 	.word	0x0800b013
 800aeac:	0800b04b 	.word	0x0800b04b
 800aeb0:	0800b06f 	.word	0x0800b06f

0800aeb4 <stdio_exit_handler>:
 800aeb4:	4a02      	ldr	r2, [pc, #8]	; (800aec0 <stdio_exit_handler+0xc>)
 800aeb6:	4903      	ldr	r1, [pc, #12]	; (800aec4 <stdio_exit_handler+0x10>)
 800aeb8:	4803      	ldr	r0, [pc, #12]	; (800aec8 <stdio_exit_handler+0x14>)
 800aeba:	f000 b869 	b.w	800af90 <_fwalk_sglue>
 800aebe:	bf00      	nop
 800aec0:	2000003c 	.word	0x2000003c
 800aec4:	0800baf5 	.word	0x0800baf5
 800aec8:	20000048 	.word	0x20000048

0800aecc <cleanup_stdio>:
 800aecc:	6841      	ldr	r1, [r0, #4]
 800aece:	4b0c      	ldr	r3, [pc, #48]	; (800af00 <cleanup_stdio+0x34>)
 800aed0:	4299      	cmp	r1, r3
 800aed2:	b510      	push	{r4, lr}
 800aed4:	4604      	mov	r4, r0
 800aed6:	d001      	beq.n	800aedc <cleanup_stdio+0x10>
 800aed8:	f000 fe0c 	bl	800baf4 <_fflush_r>
 800aedc:	68a1      	ldr	r1, [r4, #8]
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <cleanup_stdio+0x38>)
 800aee0:	4299      	cmp	r1, r3
 800aee2:	d002      	beq.n	800aeea <cleanup_stdio+0x1e>
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fe05 	bl	800baf4 <_fflush_r>
 800aeea:	68e1      	ldr	r1, [r4, #12]
 800aeec:	4b06      	ldr	r3, [pc, #24]	; (800af08 <cleanup_stdio+0x3c>)
 800aeee:	4299      	cmp	r1, r3
 800aef0:	d004      	beq.n	800aefc <cleanup_stdio+0x30>
 800aef2:	4620      	mov	r0, r4
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f000 bdfc 	b.w	800baf4 <_fflush_r>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	bf00      	nop
 800af00:	20005170 	.word	0x20005170
 800af04:	200051d8 	.word	0x200051d8
 800af08:	20005240 	.word	0x20005240

0800af0c <global_stdio_init.part.0>:
 800af0c:	b510      	push	{r4, lr}
 800af0e:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <global_stdio_init.part.0+0x30>)
 800af10:	4c0b      	ldr	r4, [pc, #44]	; (800af40 <global_stdio_init.part.0+0x34>)
 800af12:	4a0c      	ldr	r2, [pc, #48]	; (800af44 <global_stdio_init.part.0+0x38>)
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	4620      	mov	r0, r4
 800af18:	2200      	movs	r2, #0
 800af1a:	2104      	movs	r1, #4
 800af1c:	f7ff ffa6 	bl	800ae6c <std>
 800af20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af24:	2201      	movs	r2, #1
 800af26:	2109      	movs	r1, #9
 800af28:	f7ff ffa0 	bl	800ae6c <std>
 800af2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af30:	2202      	movs	r2, #2
 800af32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af36:	2112      	movs	r1, #18
 800af38:	f7ff bf98 	b.w	800ae6c <std>
 800af3c:	200052a8 	.word	0x200052a8
 800af40:	20005170 	.word	0x20005170
 800af44:	0800aeb5 	.word	0x0800aeb5

0800af48 <__sfp_lock_acquire>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__sfp_lock_acquire+0x8>)
 800af4a:	f000 b971 	b.w	800b230 <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	200052b1 	.word	0x200052b1

0800af54 <__sfp_lock_release>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sfp_lock_release+0x8>)
 800af56:	f000 b96c 	b.w	800b232 <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	200052b1 	.word	0x200052b1

0800af60 <__sinit>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	f7ff fff0 	bl	800af48 <__sfp_lock_acquire>
 800af68:	6a23      	ldr	r3, [r4, #32]
 800af6a:	b11b      	cbz	r3, 800af74 <__sinit+0x14>
 800af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af70:	f7ff bff0 	b.w	800af54 <__sfp_lock_release>
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <__sinit+0x28>)
 800af76:	6223      	str	r3, [r4, #32]
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <__sinit+0x2c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1f5      	bne.n	800af6c <__sinit+0xc>
 800af80:	f7ff ffc4 	bl	800af0c <global_stdio_init.part.0>
 800af84:	e7f2      	b.n	800af6c <__sinit+0xc>
 800af86:	bf00      	nop
 800af88:	0800aecd 	.word	0x0800aecd
 800af8c:	200052a8 	.word	0x200052a8

0800af90 <_fwalk_sglue>:
 800af90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af94:	4607      	mov	r7, r0
 800af96:	4688      	mov	r8, r1
 800af98:	4614      	mov	r4, r2
 800af9a:	2600      	movs	r6, #0
 800af9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afa0:	f1b9 0901 	subs.w	r9, r9, #1
 800afa4:	d505      	bpl.n	800afb2 <_fwalk_sglue+0x22>
 800afa6:	6824      	ldr	r4, [r4, #0]
 800afa8:	2c00      	cmp	r4, #0
 800afaa:	d1f7      	bne.n	800af9c <_fwalk_sglue+0xc>
 800afac:	4630      	mov	r0, r6
 800afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d907      	bls.n	800afc8 <_fwalk_sglue+0x38>
 800afb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afbc:	3301      	adds	r3, #1
 800afbe:	d003      	beq.n	800afc8 <_fwalk_sglue+0x38>
 800afc0:	4629      	mov	r1, r5
 800afc2:	4638      	mov	r0, r7
 800afc4:	47c0      	blx	r8
 800afc6:	4306      	orrs	r6, r0
 800afc8:	3568      	adds	r5, #104	; 0x68
 800afca:	e7e9      	b.n	800afa0 <_fwalk_sglue+0x10>

0800afcc <iprintf>:
 800afcc:	b40f      	push	{r0, r1, r2, r3}
 800afce:	b507      	push	{r0, r1, r2, lr}
 800afd0:	4906      	ldr	r1, [pc, #24]	; (800afec <iprintf+0x20>)
 800afd2:	ab04      	add	r3, sp, #16
 800afd4:	6808      	ldr	r0, [r1, #0]
 800afd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afda:	6881      	ldr	r1, [r0, #8]
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	f000 fa59 	bl	800b494 <_vfiprintf_r>
 800afe2:	b003      	add	sp, #12
 800afe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe8:	b004      	add	sp, #16
 800afea:	4770      	bx	lr
 800afec:	20000094 	.word	0x20000094

0800aff0 <__sread>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	460c      	mov	r4, r1
 800aff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff8:	f000 f8cc 	bl	800b194 <_read_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	bfab      	itete	ge
 800b000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b002:	89a3      	ldrhlt	r3, [r4, #12]
 800b004:	181b      	addge	r3, r3, r0
 800b006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b00a:	bfac      	ite	ge
 800b00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b00e:	81a3      	strhlt	r3, [r4, #12]
 800b010:	bd10      	pop	{r4, pc}

0800b012 <__swrite>:
 800b012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b016:	461f      	mov	r7, r3
 800b018:	898b      	ldrh	r3, [r1, #12]
 800b01a:	05db      	lsls	r3, r3, #23
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	4616      	mov	r6, r2
 800b022:	d505      	bpl.n	800b030 <__swrite+0x1e>
 800b024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b028:	2302      	movs	r3, #2
 800b02a:	2200      	movs	r2, #0
 800b02c:	f000 f8a0 	bl	800b170 <_lseek_r>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	4632      	mov	r2, r6
 800b03e:	463b      	mov	r3, r7
 800b040:	4628      	mov	r0, r5
 800b042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	f000 b8b7 	b.w	800b1b8 <_write_r>

0800b04a <__sseek>:
 800b04a:	b510      	push	{r4, lr}
 800b04c:	460c      	mov	r4, r1
 800b04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b052:	f000 f88d 	bl	800b170 <_lseek_r>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	bf15      	itete	ne
 800b05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b066:	81a3      	strheq	r3, [r4, #12]
 800b068:	bf18      	it	ne
 800b06a:	81a3      	strhne	r3, [r4, #12]
 800b06c:	bd10      	pop	{r4, pc}

0800b06e <__sclose>:
 800b06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b072:	f000 b817 	b.w	800b0a4 <_close_r>

0800b076 <memset>:
 800b076:	4402      	add	r2, r0
 800b078:	4603      	mov	r3, r0
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d100      	bne.n	800b080 <memset+0xa>
 800b07e:	4770      	bx	lr
 800b080:	f803 1b01 	strb.w	r1, [r3], #1
 800b084:	e7f9      	b.n	800b07a <memset+0x4>

0800b086 <strcat>:
 800b086:	b510      	push	{r4, lr}
 800b088:	4602      	mov	r2, r0
 800b08a:	7814      	ldrb	r4, [r2, #0]
 800b08c:	4613      	mov	r3, r2
 800b08e:	3201      	adds	r2, #1
 800b090:	2c00      	cmp	r4, #0
 800b092:	d1fa      	bne.n	800b08a <strcat+0x4>
 800b094:	3b01      	subs	r3, #1
 800b096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b09a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d1f9      	bne.n	800b096 <strcat+0x10>
 800b0a2:	bd10      	pop	{r4, pc}

0800b0a4 <_close_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d06      	ldr	r5, [pc, #24]	; (800b0c0 <_close_r+0x1c>)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	602b      	str	r3, [r5, #0]
 800b0b0:	f7f6 fd8f 	bl	8001bd2 <_close>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_close_r+0x1a>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_close_r+0x1a>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	200052ac 	.word	0x200052ac

0800b0c4 <_reclaim_reent>:
 800b0c4:	4b29      	ldr	r3, [pc, #164]	; (800b16c <_reclaim_reent+0xa8>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4283      	cmp	r3, r0
 800b0ca:	b570      	push	{r4, r5, r6, lr}
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	d04b      	beq.n	800b168 <_reclaim_reent+0xa4>
 800b0d0:	69c3      	ldr	r3, [r0, #28]
 800b0d2:	b143      	cbz	r3, 800b0e6 <_reclaim_reent+0x22>
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d144      	bne.n	800b164 <_reclaim_reent+0xa0>
 800b0da:	69e3      	ldr	r3, [r4, #28]
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	b111      	cbz	r1, 800b0e6 <_reclaim_reent+0x22>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 f8b5 	bl	800b250 <_free_r>
 800b0e6:	6961      	ldr	r1, [r4, #20]
 800b0e8:	b111      	cbz	r1, 800b0f0 <_reclaim_reent+0x2c>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 f8b0 	bl	800b250 <_free_r>
 800b0f0:	69e1      	ldr	r1, [r4, #28]
 800b0f2:	b111      	cbz	r1, 800b0fa <_reclaim_reent+0x36>
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f000 f8ab 	bl	800b250 <_free_r>
 800b0fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0fc:	b111      	cbz	r1, 800b104 <_reclaim_reent+0x40>
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f8a6 	bl	800b250 <_free_r>
 800b104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b106:	b111      	cbz	r1, 800b10e <_reclaim_reent+0x4a>
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 f8a1 	bl	800b250 <_free_r>
 800b10e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b110:	b111      	cbz	r1, 800b118 <_reclaim_reent+0x54>
 800b112:	4620      	mov	r0, r4
 800b114:	f000 f89c 	bl	800b250 <_free_r>
 800b118:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b11a:	b111      	cbz	r1, 800b122 <_reclaim_reent+0x5e>
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 f897 	bl	800b250 <_free_r>
 800b122:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b124:	b111      	cbz	r1, 800b12c <_reclaim_reent+0x68>
 800b126:	4620      	mov	r0, r4
 800b128:	f000 f892 	bl	800b250 <_free_r>
 800b12c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b12e:	b111      	cbz	r1, 800b136 <_reclaim_reent+0x72>
 800b130:	4620      	mov	r0, r4
 800b132:	f000 f88d 	bl	800b250 <_free_r>
 800b136:	6a23      	ldr	r3, [r4, #32]
 800b138:	b1b3      	cbz	r3, 800b168 <_reclaim_reent+0xa4>
 800b13a:	4620      	mov	r0, r4
 800b13c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b140:	4718      	bx	r3
 800b142:	5949      	ldr	r1, [r1, r5]
 800b144:	b941      	cbnz	r1, 800b158 <_reclaim_reent+0x94>
 800b146:	3504      	adds	r5, #4
 800b148:	69e3      	ldr	r3, [r4, #28]
 800b14a:	2d80      	cmp	r5, #128	; 0x80
 800b14c:	68d9      	ldr	r1, [r3, #12]
 800b14e:	d1f8      	bne.n	800b142 <_reclaim_reent+0x7e>
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f87d 	bl	800b250 <_free_r>
 800b156:	e7c0      	b.n	800b0da <_reclaim_reent+0x16>
 800b158:	680e      	ldr	r6, [r1, #0]
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 f878 	bl	800b250 <_free_r>
 800b160:	4631      	mov	r1, r6
 800b162:	e7ef      	b.n	800b144 <_reclaim_reent+0x80>
 800b164:	2500      	movs	r5, #0
 800b166:	e7ef      	b.n	800b148 <_reclaim_reent+0x84>
 800b168:	bd70      	pop	{r4, r5, r6, pc}
 800b16a:	bf00      	nop
 800b16c:	20000094 	.word	0x20000094

0800b170 <_lseek_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d07      	ldr	r5, [pc, #28]	; (800b190 <_lseek_r+0x20>)
 800b174:	4604      	mov	r4, r0
 800b176:	4608      	mov	r0, r1
 800b178:	4611      	mov	r1, r2
 800b17a:	2200      	movs	r2, #0
 800b17c:	602a      	str	r2, [r5, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	f7f6 fd4e 	bl	8001c20 <_lseek>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_lseek_r+0x1e>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_lseek_r+0x1e>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	200052ac 	.word	0x200052ac

0800b194 <_read_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_read_r+0x20>)
 800b198:	4604      	mov	r4, r0
 800b19a:	4608      	mov	r0, r1
 800b19c:	4611      	mov	r1, r2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	602a      	str	r2, [r5, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f7f6 fcdc 	bl	8001b60 <_read>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_read_r+0x1e>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_read_r+0x1e>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	200052ac 	.word	0x200052ac

0800b1b8 <_write_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d07      	ldr	r5, [pc, #28]	; (800b1d8 <_write_r+0x20>)
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4608      	mov	r0, r1
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	602a      	str	r2, [r5, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f7f6 fce7 	bl	8001b9a <_write>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_write_r+0x1e>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_write_r+0x1e>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	200052ac 	.word	0x200052ac

0800b1dc <__errno>:
 800b1dc:	4b01      	ldr	r3, [pc, #4]	; (800b1e4 <__errno+0x8>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000094 	.word	0x20000094

0800b1e8 <__libc_init_array>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	4d0d      	ldr	r5, [pc, #52]	; (800b220 <__libc_init_array+0x38>)
 800b1ec:	4c0d      	ldr	r4, [pc, #52]	; (800b224 <__libc_init_array+0x3c>)
 800b1ee:	1b64      	subs	r4, r4, r5
 800b1f0:	10a4      	asrs	r4, r4, #2
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	42a6      	cmp	r6, r4
 800b1f6:	d109      	bne.n	800b20c <__libc_init_array+0x24>
 800b1f8:	4d0b      	ldr	r5, [pc, #44]	; (800b228 <__libc_init_array+0x40>)
 800b1fa:	4c0c      	ldr	r4, [pc, #48]	; (800b22c <__libc_init_array+0x44>)
 800b1fc:	f000 fdcc 	bl	800bd98 <_init>
 800b200:	1b64      	subs	r4, r4, r5
 800b202:	10a4      	asrs	r4, r4, #2
 800b204:	2600      	movs	r6, #0
 800b206:	42a6      	cmp	r6, r4
 800b208:	d105      	bne.n	800b216 <__libc_init_array+0x2e>
 800b20a:	bd70      	pop	{r4, r5, r6, pc}
 800b20c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b210:	4798      	blx	r3
 800b212:	3601      	adds	r6, #1
 800b214:	e7ee      	b.n	800b1f4 <__libc_init_array+0xc>
 800b216:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21a:	4798      	blx	r3
 800b21c:	3601      	adds	r6, #1
 800b21e:	e7f2      	b.n	800b206 <__libc_init_array+0x1e>
 800b220:	0800d70c 	.word	0x0800d70c
 800b224:	0800d70c 	.word	0x0800d70c
 800b228:	0800d70c 	.word	0x0800d70c
 800b22c:	0800d710 	.word	0x0800d710

0800b230 <__retarget_lock_acquire_recursive>:
 800b230:	4770      	bx	lr

0800b232 <__retarget_lock_release_recursive>:
 800b232:	4770      	bx	lr

0800b234 <memcpy>:
 800b234:	440a      	add	r2, r1
 800b236:	4291      	cmp	r1, r2
 800b238:	f100 33ff 	add.w	r3, r0, #4294967295
 800b23c:	d100      	bne.n	800b240 <memcpy+0xc>
 800b23e:	4770      	bx	lr
 800b240:	b510      	push	{r4, lr}
 800b242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b24a:	4291      	cmp	r1, r2
 800b24c:	d1f9      	bne.n	800b242 <memcpy+0xe>
 800b24e:	bd10      	pop	{r4, pc}

0800b250 <_free_r>:
 800b250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b252:	2900      	cmp	r1, #0
 800b254:	d044      	beq.n	800b2e0 <_free_r+0x90>
 800b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25a:	9001      	str	r0, [sp, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f1a1 0404 	sub.w	r4, r1, #4
 800b262:	bfb8      	it	lt
 800b264:	18e4      	addlt	r4, r4, r3
 800b266:	f000 f8df 	bl	800b428 <__malloc_lock>
 800b26a:	4a1e      	ldr	r2, [pc, #120]	; (800b2e4 <_free_r+0x94>)
 800b26c:	9801      	ldr	r0, [sp, #4]
 800b26e:	6813      	ldr	r3, [r2, #0]
 800b270:	b933      	cbnz	r3, 800b280 <_free_r+0x30>
 800b272:	6063      	str	r3, [r4, #4]
 800b274:	6014      	str	r4, [r2, #0]
 800b276:	b003      	add	sp, #12
 800b278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b27c:	f000 b8da 	b.w	800b434 <__malloc_unlock>
 800b280:	42a3      	cmp	r3, r4
 800b282:	d908      	bls.n	800b296 <_free_r+0x46>
 800b284:	6825      	ldr	r5, [r4, #0]
 800b286:	1961      	adds	r1, r4, r5
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf01      	itttt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	1949      	addeq	r1, r1, r5
 800b292:	6021      	streq	r1, [r4, #0]
 800b294:	e7ed      	b.n	800b272 <_free_r+0x22>
 800b296:	461a      	mov	r2, r3
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	b10b      	cbz	r3, 800b2a0 <_free_r+0x50>
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	d9fa      	bls.n	800b296 <_free_r+0x46>
 800b2a0:	6811      	ldr	r1, [r2, #0]
 800b2a2:	1855      	adds	r5, r2, r1
 800b2a4:	42a5      	cmp	r5, r4
 800b2a6:	d10b      	bne.n	800b2c0 <_free_r+0x70>
 800b2a8:	6824      	ldr	r4, [r4, #0]
 800b2aa:	4421      	add	r1, r4
 800b2ac:	1854      	adds	r4, r2, r1
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	d1e0      	bne.n	800b276 <_free_r+0x26>
 800b2b4:	681c      	ldr	r4, [r3, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	6053      	str	r3, [r2, #4]
 800b2ba:	440c      	add	r4, r1
 800b2bc:	6014      	str	r4, [r2, #0]
 800b2be:	e7da      	b.n	800b276 <_free_r+0x26>
 800b2c0:	d902      	bls.n	800b2c8 <_free_r+0x78>
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	e7d6      	b.n	800b276 <_free_r+0x26>
 800b2c8:	6825      	ldr	r5, [r4, #0]
 800b2ca:	1961      	adds	r1, r4, r5
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf04      	itt	eq
 800b2d0:	6819      	ldreq	r1, [r3, #0]
 800b2d2:	685b      	ldreq	r3, [r3, #4]
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	bf04      	itt	eq
 800b2d8:	1949      	addeq	r1, r1, r5
 800b2da:	6021      	streq	r1, [r4, #0]
 800b2dc:	6054      	str	r4, [r2, #4]
 800b2de:	e7ca      	b.n	800b276 <_free_r+0x26>
 800b2e0:	b003      	add	sp, #12
 800b2e2:	bd30      	pop	{r4, r5, pc}
 800b2e4:	200052b4 	.word	0x200052b4

0800b2e8 <sbrk_aligned>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	4e0e      	ldr	r6, [pc, #56]	; (800b324 <sbrk_aligned+0x3c>)
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	6831      	ldr	r1, [r6, #0]
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	b911      	cbnz	r1, 800b2fa <sbrk_aligned+0x12>
 800b2f4:	f000 fcbc 	bl	800bc70 <_sbrk_r>
 800b2f8:	6030      	str	r0, [r6, #0]
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f000 fcb7 	bl	800bc70 <_sbrk_r>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d00a      	beq.n	800b31c <sbrk_aligned+0x34>
 800b306:	1cc4      	adds	r4, r0, #3
 800b308:	f024 0403 	bic.w	r4, r4, #3
 800b30c:	42a0      	cmp	r0, r4
 800b30e:	d007      	beq.n	800b320 <sbrk_aligned+0x38>
 800b310:	1a21      	subs	r1, r4, r0
 800b312:	4628      	mov	r0, r5
 800b314:	f000 fcac 	bl	800bc70 <_sbrk_r>
 800b318:	3001      	adds	r0, #1
 800b31a:	d101      	bne.n	800b320 <sbrk_aligned+0x38>
 800b31c:	f04f 34ff 	mov.w	r4, #4294967295
 800b320:	4620      	mov	r0, r4
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	200052b8 	.word	0x200052b8

0800b328 <_malloc_r>:
 800b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	1ccd      	adds	r5, r1, #3
 800b32e:	f025 0503 	bic.w	r5, r5, #3
 800b332:	3508      	adds	r5, #8
 800b334:	2d0c      	cmp	r5, #12
 800b336:	bf38      	it	cc
 800b338:	250c      	movcc	r5, #12
 800b33a:	2d00      	cmp	r5, #0
 800b33c:	4607      	mov	r7, r0
 800b33e:	db01      	blt.n	800b344 <_malloc_r+0x1c>
 800b340:	42a9      	cmp	r1, r5
 800b342:	d905      	bls.n	800b350 <_malloc_r+0x28>
 800b344:	230c      	movs	r3, #12
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	2600      	movs	r6, #0
 800b34a:	4630      	mov	r0, r6
 800b34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b350:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b424 <_malloc_r+0xfc>
 800b354:	f000 f868 	bl	800b428 <__malloc_lock>
 800b358:	f8d8 3000 	ldr.w	r3, [r8]
 800b35c:	461c      	mov	r4, r3
 800b35e:	bb5c      	cbnz	r4, 800b3b8 <_malloc_r+0x90>
 800b360:	4629      	mov	r1, r5
 800b362:	4638      	mov	r0, r7
 800b364:	f7ff ffc0 	bl	800b2e8 <sbrk_aligned>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	4604      	mov	r4, r0
 800b36c:	d155      	bne.n	800b41a <_malloc_r+0xf2>
 800b36e:	f8d8 4000 	ldr.w	r4, [r8]
 800b372:	4626      	mov	r6, r4
 800b374:	2e00      	cmp	r6, #0
 800b376:	d145      	bne.n	800b404 <_malloc_r+0xdc>
 800b378:	2c00      	cmp	r4, #0
 800b37a:	d048      	beq.n	800b40e <_malloc_r+0xe6>
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	4631      	mov	r1, r6
 800b380:	4638      	mov	r0, r7
 800b382:	eb04 0903 	add.w	r9, r4, r3
 800b386:	f000 fc73 	bl	800bc70 <_sbrk_r>
 800b38a:	4581      	cmp	r9, r0
 800b38c:	d13f      	bne.n	800b40e <_malloc_r+0xe6>
 800b38e:	6821      	ldr	r1, [r4, #0]
 800b390:	1a6d      	subs	r5, r5, r1
 800b392:	4629      	mov	r1, r5
 800b394:	4638      	mov	r0, r7
 800b396:	f7ff ffa7 	bl	800b2e8 <sbrk_aligned>
 800b39a:	3001      	adds	r0, #1
 800b39c:	d037      	beq.n	800b40e <_malloc_r+0xe6>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	442b      	add	r3, r5
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d038      	beq.n	800b41e <_malloc_r+0xf6>
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	42a2      	cmp	r2, r4
 800b3b0:	d12b      	bne.n	800b40a <_malloc_r+0xe2>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	e00f      	b.n	800b3d8 <_malloc_r+0xb0>
 800b3b8:	6822      	ldr	r2, [r4, #0]
 800b3ba:	1b52      	subs	r2, r2, r5
 800b3bc:	d41f      	bmi.n	800b3fe <_malloc_r+0xd6>
 800b3be:	2a0b      	cmp	r2, #11
 800b3c0:	d917      	bls.n	800b3f2 <_malloc_r+0xca>
 800b3c2:	1961      	adds	r1, r4, r5
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	6025      	str	r5, [r4, #0]
 800b3c8:	bf18      	it	ne
 800b3ca:	6059      	strne	r1, [r3, #4]
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	bf08      	it	eq
 800b3d0:	f8c8 1000 	streq.w	r1, [r8]
 800b3d4:	5162      	str	r2, [r4, r5]
 800b3d6:	604b      	str	r3, [r1, #4]
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f104 060b 	add.w	r6, r4, #11
 800b3de:	f000 f829 	bl	800b434 <__malloc_unlock>
 800b3e2:	f026 0607 	bic.w	r6, r6, #7
 800b3e6:	1d23      	adds	r3, r4, #4
 800b3e8:	1af2      	subs	r2, r6, r3
 800b3ea:	d0ae      	beq.n	800b34a <_malloc_r+0x22>
 800b3ec:	1b9b      	subs	r3, r3, r6
 800b3ee:	50a3      	str	r3, [r4, r2]
 800b3f0:	e7ab      	b.n	800b34a <_malloc_r+0x22>
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	6862      	ldr	r2, [r4, #4]
 800b3f6:	d1dd      	bne.n	800b3b4 <_malloc_r+0x8c>
 800b3f8:	f8c8 2000 	str.w	r2, [r8]
 800b3fc:	e7ec      	b.n	800b3d8 <_malloc_r+0xb0>
 800b3fe:	4623      	mov	r3, r4
 800b400:	6864      	ldr	r4, [r4, #4]
 800b402:	e7ac      	b.n	800b35e <_malloc_r+0x36>
 800b404:	4634      	mov	r4, r6
 800b406:	6876      	ldr	r6, [r6, #4]
 800b408:	e7b4      	b.n	800b374 <_malloc_r+0x4c>
 800b40a:	4613      	mov	r3, r2
 800b40c:	e7cc      	b.n	800b3a8 <_malloc_r+0x80>
 800b40e:	230c      	movs	r3, #12
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	4638      	mov	r0, r7
 800b414:	f000 f80e 	bl	800b434 <__malloc_unlock>
 800b418:	e797      	b.n	800b34a <_malloc_r+0x22>
 800b41a:	6025      	str	r5, [r4, #0]
 800b41c:	e7dc      	b.n	800b3d8 <_malloc_r+0xb0>
 800b41e:	605b      	str	r3, [r3, #4]
 800b420:	deff      	udf	#255	; 0xff
 800b422:	bf00      	nop
 800b424:	200052b4 	.word	0x200052b4

0800b428 <__malloc_lock>:
 800b428:	4801      	ldr	r0, [pc, #4]	; (800b430 <__malloc_lock+0x8>)
 800b42a:	f7ff bf01 	b.w	800b230 <__retarget_lock_acquire_recursive>
 800b42e:	bf00      	nop
 800b430:	200052b0 	.word	0x200052b0

0800b434 <__malloc_unlock>:
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <__malloc_unlock+0x8>)
 800b436:	f7ff befc 	b.w	800b232 <__retarget_lock_release_recursive>
 800b43a:	bf00      	nop
 800b43c:	200052b0 	.word	0x200052b0

0800b440 <__sfputc_r>:
 800b440:	6893      	ldr	r3, [r2, #8]
 800b442:	3b01      	subs	r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	b410      	push	{r4}
 800b448:	6093      	str	r3, [r2, #8]
 800b44a:	da08      	bge.n	800b45e <__sfputc_r+0x1e>
 800b44c:	6994      	ldr	r4, [r2, #24]
 800b44e:	42a3      	cmp	r3, r4
 800b450:	db01      	blt.n	800b456 <__sfputc_r+0x16>
 800b452:	290a      	cmp	r1, #10
 800b454:	d103      	bne.n	800b45e <__sfputc_r+0x1e>
 800b456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45a:	f000 bb73 	b.w	800bb44 <__swbuf_r>
 800b45e:	6813      	ldr	r3, [r2, #0]
 800b460:	1c58      	adds	r0, r3, #1
 800b462:	6010      	str	r0, [r2, #0]
 800b464:	7019      	strb	r1, [r3, #0]
 800b466:	4608      	mov	r0, r1
 800b468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <__sfputs_r>:
 800b46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b470:	4606      	mov	r6, r0
 800b472:	460f      	mov	r7, r1
 800b474:	4614      	mov	r4, r2
 800b476:	18d5      	adds	r5, r2, r3
 800b478:	42ac      	cmp	r4, r5
 800b47a:	d101      	bne.n	800b480 <__sfputs_r+0x12>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e007      	b.n	800b490 <__sfputs_r+0x22>
 800b480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b484:	463a      	mov	r2, r7
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ffda 	bl	800b440 <__sfputc_r>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d1f3      	bne.n	800b478 <__sfputs_r+0xa>
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b494 <_vfiprintf_r>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460d      	mov	r5, r1
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	4614      	mov	r4, r2
 800b49e:	4698      	mov	r8, r3
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	b118      	cbz	r0, 800b4ac <_vfiprintf_r+0x18>
 800b4a4:	6a03      	ldr	r3, [r0, #32]
 800b4a6:	b90b      	cbnz	r3, 800b4ac <_vfiprintf_r+0x18>
 800b4a8:	f7ff fd5a 	bl	800af60 <__sinit>
 800b4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	d405      	bmi.n	800b4be <_vfiprintf_r+0x2a>
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	059a      	lsls	r2, r3, #22
 800b4b6:	d402      	bmi.n	800b4be <_vfiprintf_r+0x2a>
 800b4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ba:	f7ff feb9 	bl	800b230 <__retarget_lock_acquire_recursive>
 800b4be:	89ab      	ldrh	r3, [r5, #12]
 800b4c0:	071b      	lsls	r3, r3, #28
 800b4c2:	d501      	bpl.n	800b4c8 <_vfiprintf_r+0x34>
 800b4c4:	692b      	ldr	r3, [r5, #16]
 800b4c6:	b99b      	cbnz	r3, 800b4f0 <_vfiprintf_r+0x5c>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f000 fb78 	bl	800bbc0 <__swsetup_r>
 800b4d0:	b170      	cbz	r0, 800b4f0 <_vfiprintf_r+0x5c>
 800b4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d4:	07dc      	lsls	r4, r3, #31
 800b4d6:	d504      	bpl.n	800b4e2 <_vfiprintf_r+0x4e>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b01d      	add	sp, #116	; 0x74
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	0598      	lsls	r0, r3, #22
 800b4e6:	d4f7      	bmi.n	800b4d8 <_vfiprintf_r+0x44>
 800b4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ea:	f7ff fea2 	bl	800b232 <__retarget_lock_release_recursive>
 800b4ee:	e7f3      	b.n	800b4d8 <_vfiprintf_r+0x44>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4fe:	2330      	movs	r3, #48	; 0x30
 800b500:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6b4 <_vfiprintf_r+0x220>
 800b504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b508:	f04f 0901 	mov.w	r9, #1
 800b50c:	4623      	mov	r3, r4
 800b50e:	469a      	mov	sl, r3
 800b510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b514:	b10a      	cbz	r2, 800b51a <_vfiprintf_r+0x86>
 800b516:	2a25      	cmp	r2, #37	; 0x25
 800b518:	d1f9      	bne.n	800b50e <_vfiprintf_r+0x7a>
 800b51a:	ebba 0b04 	subs.w	fp, sl, r4
 800b51e:	d00b      	beq.n	800b538 <_vfiprintf_r+0xa4>
 800b520:	465b      	mov	r3, fp
 800b522:	4622      	mov	r2, r4
 800b524:	4629      	mov	r1, r5
 800b526:	4630      	mov	r0, r6
 800b528:	f7ff ffa1 	bl	800b46e <__sfputs_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	f000 80a9 	beq.w	800b684 <_vfiprintf_r+0x1f0>
 800b532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b534:	445a      	add	r2, fp
 800b536:	9209      	str	r2, [sp, #36]	; 0x24
 800b538:	f89a 3000 	ldrb.w	r3, [sl]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 80a1 	beq.w	800b684 <_vfiprintf_r+0x1f0>
 800b542:	2300      	movs	r3, #0
 800b544:	f04f 32ff 	mov.w	r2, #4294967295
 800b548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b54c:	f10a 0a01 	add.w	sl, sl, #1
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b558:	931a      	str	r3, [sp, #104]	; 0x68
 800b55a:	4654      	mov	r4, sl
 800b55c:	2205      	movs	r2, #5
 800b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b562:	4854      	ldr	r0, [pc, #336]	; (800b6b4 <_vfiprintf_r+0x220>)
 800b564:	f7f4 fe6c 	bl	8000240 <memchr>
 800b568:	9a04      	ldr	r2, [sp, #16]
 800b56a:	b9d8      	cbnz	r0, 800b5a4 <_vfiprintf_r+0x110>
 800b56c:	06d1      	lsls	r1, r2, #27
 800b56e:	bf44      	itt	mi
 800b570:	2320      	movmi	r3, #32
 800b572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b576:	0713      	lsls	r3, r2, #28
 800b578:	bf44      	itt	mi
 800b57a:	232b      	movmi	r3, #43	; 0x2b
 800b57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b580:	f89a 3000 	ldrb.w	r3, [sl]
 800b584:	2b2a      	cmp	r3, #42	; 0x2a
 800b586:	d015      	beq.n	800b5b4 <_vfiprintf_r+0x120>
 800b588:	9a07      	ldr	r2, [sp, #28]
 800b58a:	4654      	mov	r4, sl
 800b58c:	2000      	movs	r0, #0
 800b58e:	f04f 0c0a 	mov.w	ip, #10
 800b592:	4621      	mov	r1, r4
 800b594:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b598:	3b30      	subs	r3, #48	; 0x30
 800b59a:	2b09      	cmp	r3, #9
 800b59c:	d94d      	bls.n	800b63a <_vfiprintf_r+0x1a6>
 800b59e:	b1b0      	cbz	r0, 800b5ce <_vfiprintf_r+0x13a>
 800b5a0:	9207      	str	r2, [sp, #28]
 800b5a2:	e014      	b.n	800b5ce <_vfiprintf_r+0x13a>
 800b5a4:	eba0 0308 	sub.w	r3, r0, r8
 800b5a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	46a2      	mov	sl, r4
 800b5b2:	e7d2      	b.n	800b55a <_vfiprintf_r+0xc6>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	1d19      	adds	r1, r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	9103      	str	r1, [sp, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bfbb      	ittet	lt
 800b5c0:	425b      	neglt	r3, r3
 800b5c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c6:	9307      	strge	r3, [sp, #28]
 800b5c8:	9307      	strlt	r3, [sp, #28]
 800b5ca:	bfb8      	it	lt
 800b5cc:	9204      	strlt	r2, [sp, #16]
 800b5ce:	7823      	ldrb	r3, [r4, #0]
 800b5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b5d2:	d10c      	bne.n	800b5ee <_vfiprintf_r+0x15a>
 800b5d4:	7863      	ldrb	r3, [r4, #1]
 800b5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d8:	d134      	bne.n	800b644 <_vfiprintf_r+0x1b0>
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	1d1a      	adds	r2, r3, #4
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	9203      	str	r2, [sp, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	bfb8      	it	lt
 800b5e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ea:	3402      	adds	r4, #2
 800b5ec:	9305      	str	r3, [sp, #20]
 800b5ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6c4 <_vfiprintf_r+0x230>
 800b5f2:	7821      	ldrb	r1, [r4, #0]
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	f7f4 fe22 	bl	8000240 <memchr>
 800b5fc:	b138      	cbz	r0, 800b60e <_vfiprintf_r+0x17a>
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	eba0 000a 	sub.w	r0, r0, sl
 800b604:	2240      	movs	r2, #64	; 0x40
 800b606:	4082      	lsls	r2, r0
 800b608:	4313      	orrs	r3, r2
 800b60a:	3401      	adds	r4, #1
 800b60c:	9304      	str	r3, [sp, #16]
 800b60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b612:	4829      	ldr	r0, [pc, #164]	; (800b6b8 <_vfiprintf_r+0x224>)
 800b614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b618:	2206      	movs	r2, #6
 800b61a:	f7f4 fe11 	bl	8000240 <memchr>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d03f      	beq.n	800b6a2 <_vfiprintf_r+0x20e>
 800b622:	4b26      	ldr	r3, [pc, #152]	; (800b6bc <_vfiprintf_r+0x228>)
 800b624:	bb1b      	cbnz	r3, 800b66e <_vfiprintf_r+0x1da>
 800b626:	9b03      	ldr	r3, [sp, #12]
 800b628:	3307      	adds	r3, #7
 800b62a:	f023 0307 	bic.w	r3, r3, #7
 800b62e:	3308      	adds	r3, #8
 800b630:	9303      	str	r3, [sp, #12]
 800b632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b634:	443b      	add	r3, r7
 800b636:	9309      	str	r3, [sp, #36]	; 0x24
 800b638:	e768      	b.n	800b50c <_vfiprintf_r+0x78>
 800b63a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b63e:	460c      	mov	r4, r1
 800b640:	2001      	movs	r0, #1
 800b642:	e7a6      	b.n	800b592 <_vfiprintf_r+0xfe>
 800b644:	2300      	movs	r3, #0
 800b646:	3401      	adds	r4, #1
 800b648:	9305      	str	r3, [sp, #20]
 800b64a:	4619      	mov	r1, r3
 800b64c:	f04f 0c0a 	mov.w	ip, #10
 800b650:	4620      	mov	r0, r4
 800b652:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b656:	3a30      	subs	r2, #48	; 0x30
 800b658:	2a09      	cmp	r2, #9
 800b65a:	d903      	bls.n	800b664 <_vfiprintf_r+0x1d0>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0c6      	beq.n	800b5ee <_vfiprintf_r+0x15a>
 800b660:	9105      	str	r1, [sp, #20]
 800b662:	e7c4      	b.n	800b5ee <_vfiprintf_r+0x15a>
 800b664:	fb0c 2101 	mla	r1, ip, r1, r2
 800b668:	4604      	mov	r4, r0
 800b66a:	2301      	movs	r3, #1
 800b66c:	e7f0      	b.n	800b650 <_vfiprintf_r+0x1bc>
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	462a      	mov	r2, r5
 800b674:	4b12      	ldr	r3, [pc, #72]	; (800b6c0 <_vfiprintf_r+0x22c>)
 800b676:	a904      	add	r1, sp, #16
 800b678:	4630      	mov	r0, r6
 800b67a:	f3af 8000 	nop.w
 800b67e:	4607      	mov	r7, r0
 800b680:	1c78      	adds	r0, r7, #1
 800b682:	d1d6      	bne.n	800b632 <_vfiprintf_r+0x19e>
 800b684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b686:	07d9      	lsls	r1, r3, #31
 800b688:	d405      	bmi.n	800b696 <_vfiprintf_r+0x202>
 800b68a:	89ab      	ldrh	r3, [r5, #12]
 800b68c:	059a      	lsls	r2, r3, #22
 800b68e:	d402      	bmi.n	800b696 <_vfiprintf_r+0x202>
 800b690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b692:	f7ff fdce 	bl	800b232 <__retarget_lock_release_recursive>
 800b696:	89ab      	ldrh	r3, [r5, #12]
 800b698:	065b      	lsls	r3, r3, #25
 800b69a:	f53f af1d 	bmi.w	800b4d8 <_vfiprintf_r+0x44>
 800b69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6a0:	e71c      	b.n	800b4dc <_vfiprintf_r+0x48>
 800b6a2:	ab03      	add	r3, sp, #12
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	462a      	mov	r2, r5
 800b6a8:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <_vfiprintf_r+0x22c>)
 800b6aa:	a904      	add	r1, sp, #16
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f000 f879 	bl	800b7a4 <_printf_i>
 800b6b2:	e7e4      	b.n	800b67e <_vfiprintf_r+0x1ea>
 800b6b4:	0800d6d0 	.word	0x0800d6d0
 800b6b8:	0800d6da 	.word	0x0800d6da
 800b6bc:	00000000 	.word	0x00000000
 800b6c0:	0800b46f 	.word	0x0800b46f
 800b6c4:	0800d6d6 	.word	0x0800d6d6

0800b6c8 <_printf_common>:
 800b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	4699      	mov	r9, r3
 800b6d0:	688a      	ldr	r2, [r1, #8]
 800b6d2:	690b      	ldr	r3, [r1, #16]
 800b6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bfb8      	it	lt
 800b6dc:	4613      	movlt	r3, r2
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	b10a      	cbz	r2, 800b6ee <_printf_common+0x26>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	6033      	str	r3, [r6, #0]
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	0699      	lsls	r1, r3, #26
 800b6f2:	bf42      	ittt	mi
 800b6f4:	6833      	ldrmi	r3, [r6, #0]
 800b6f6:	3302      	addmi	r3, #2
 800b6f8:	6033      	strmi	r3, [r6, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	f015 0506 	ands.w	r5, r5, #6
 800b700:	d106      	bne.n	800b710 <_printf_common+0x48>
 800b702:	f104 0a19 	add.w	sl, r4, #25
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	6832      	ldr	r2, [r6, #0]
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dc26      	bgt.n	800b75e <_printf_common+0x96>
 800b710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b714:	1e13      	subs	r3, r2, #0
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	bf18      	it	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	0692      	lsls	r2, r2, #26
 800b71e:	d42b      	bmi.n	800b778 <_printf_common+0xb0>
 800b720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d01e      	beq.n	800b76c <_printf_common+0xa4>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	6922      	ldr	r2, [r4, #16]
 800b732:	f003 0306 	and.w	r3, r3, #6
 800b736:	2b04      	cmp	r3, #4
 800b738:	bf02      	ittt	eq
 800b73a:	68e5      	ldreq	r5, [r4, #12]
 800b73c:	6833      	ldreq	r3, [r6, #0]
 800b73e:	1aed      	subeq	r5, r5, r3
 800b740:	68a3      	ldr	r3, [r4, #8]
 800b742:	bf0c      	ite	eq
 800b744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b748:	2500      	movne	r5, #0
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bfc4      	itt	gt
 800b74e:	1a9b      	subgt	r3, r3, r2
 800b750:	18ed      	addgt	r5, r5, r3
 800b752:	2600      	movs	r6, #0
 800b754:	341a      	adds	r4, #26
 800b756:	42b5      	cmp	r5, r6
 800b758:	d11a      	bne.n	800b790 <_printf_common+0xc8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e008      	b.n	800b770 <_printf_common+0xa8>
 800b75e:	2301      	movs	r3, #1
 800b760:	4652      	mov	r2, sl
 800b762:	4649      	mov	r1, r9
 800b764:	4638      	mov	r0, r7
 800b766:	47c0      	blx	r8
 800b768:	3001      	adds	r0, #1
 800b76a:	d103      	bne.n	800b774 <_printf_common+0xac>
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	3501      	adds	r5, #1
 800b776:	e7c6      	b.n	800b706 <_printf_common+0x3e>
 800b778:	18e1      	adds	r1, r4, r3
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	2030      	movs	r0, #48	; 0x30
 800b77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b782:	4422      	add	r2, r4
 800b784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b78c:	3302      	adds	r3, #2
 800b78e:	e7c7      	b.n	800b720 <_printf_common+0x58>
 800b790:	2301      	movs	r3, #1
 800b792:	4622      	mov	r2, r4
 800b794:	4649      	mov	r1, r9
 800b796:	4638      	mov	r0, r7
 800b798:	47c0      	blx	r8
 800b79a:	3001      	adds	r0, #1
 800b79c:	d0e6      	beq.n	800b76c <_printf_common+0xa4>
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7d9      	b.n	800b756 <_printf_common+0x8e>
	...

0800b7a4 <_printf_i>:
 800b7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	7e0f      	ldrb	r7, [r1, #24]
 800b7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7ac:	2f78      	cmp	r7, #120	; 0x78
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	469a      	mov	sl, r3
 800b7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7ba:	d807      	bhi.n	800b7cc <_printf_i+0x28>
 800b7bc:	2f62      	cmp	r7, #98	; 0x62
 800b7be:	d80a      	bhi.n	800b7d6 <_printf_i+0x32>
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f000 80d4 	beq.w	800b96e <_printf_i+0x1ca>
 800b7c6:	2f58      	cmp	r7, #88	; 0x58
 800b7c8:	f000 80c0 	beq.w	800b94c <_printf_i+0x1a8>
 800b7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7d4:	e03a      	b.n	800b84c <_printf_i+0xa8>
 800b7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7da:	2b15      	cmp	r3, #21
 800b7dc:	d8f6      	bhi.n	800b7cc <_printf_i+0x28>
 800b7de:	a101      	add	r1, pc, #4	; (adr r1, 800b7e4 <_printf_i+0x40>)
 800b7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e4:	0800b83d 	.word	0x0800b83d
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b7cd 	.word	0x0800b7cd
 800b7f0:	0800b7cd 	.word	0x0800b7cd
 800b7f4:	0800b7cd 	.word	0x0800b7cd
 800b7f8:	0800b7cd 	.word	0x0800b7cd
 800b7fc:	0800b851 	.word	0x0800b851
 800b800:	0800b7cd 	.word	0x0800b7cd
 800b804:	0800b7cd 	.word	0x0800b7cd
 800b808:	0800b7cd 	.word	0x0800b7cd
 800b80c:	0800b7cd 	.word	0x0800b7cd
 800b810:	0800b955 	.word	0x0800b955
 800b814:	0800b87d 	.word	0x0800b87d
 800b818:	0800b90f 	.word	0x0800b90f
 800b81c:	0800b7cd 	.word	0x0800b7cd
 800b820:	0800b7cd 	.word	0x0800b7cd
 800b824:	0800b977 	.word	0x0800b977
 800b828:	0800b7cd 	.word	0x0800b7cd
 800b82c:	0800b87d 	.word	0x0800b87d
 800b830:	0800b7cd 	.word	0x0800b7cd
 800b834:	0800b7cd 	.word	0x0800b7cd
 800b838:	0800b917 	.word	0x0800b917
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b84c:	2301      	movs	r3, #1
 800b84e:	e09f      	b.n	800b990 <_printf_i+0x1ec>
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	682b      	ldr	r3, [r5, #0]
 800b854:	0607      	lsls	r7, r0, #24
 800b856:	f103 0104 	add.w	r1, r3, #4
 800b85a:	6029      	str	r1, [r5, #0]
 800b85c:	d501      	bpl.n	800b862 <_printf_i+0xbe>
 800b85e:	681e      	ldr	r6, [r3, #0]
 800b860:	e003      	b.n	800b86a <_printf_i+0xc6>
 800b862:	0646      	lsls	r6, r0, #25
 800b864:	d5fb      	bpl.n	800b85e <_printf_i+0xba>
 800b866:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	da03      	bge.n	800b876 <_printf_i+0xd2>
 800b86e:	232d      	movs	r3, #45	; 0x2d
 800b870:	4276      	negs	r6, r6
 800b872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b876:	485a      	ldr	r0, [pc, #360]	; (800b9e0 <_printf_i+0x23c>)
 800b878:	230a      	movs	r3, #10
 800b87a:	e012      	b.n	800b8a2 <_printf_i+0xfe>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	6820      	ldr	r0, [r4, #0]
 800b880:	1d19      	adds	r1, r3, #4
 800b882:	6029      	str	r1, [r5, #0]
 800b884:	0605      	lsls	r5, r0, #24
 800b886:	d501      	bpl.n	800b88c <_printf_i+0xe8>
 800b888:	681e      	ldr	r6, [r3, #0]
 800b88a:	e002      	b.n	800b892 <_printf_i+0xee>
 800b88c:	0641      	lsls	r1, r0, #25
 800b88e:	d5fb      	bpl.n	800b888 <_printf_i+0xe4>
 800b890:	881e      	ldrh	r6, [r3, #0]
 800b892:	4853      	ldr	r0, [pc, #332]	; (800b9e0 <_printf_i+0x23c>)
 800b894:	2f6f      	cmp	r7, #111	; 0x6f
 800b896:	bf0c      	ite	eq
 800b898:	2308      	moveq	r3, #8
 800b89a:	230a      	movne	r3, #10
 800b89c:	2100      	movs	r1, #0
 800b89e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a2:	6865      	ldr	r5, [r4, #4]
 800b8a4:	60a5      	str	r5, [r4, #8]
 800b8a6:	2d00      	cmp	r5, #0
 800b8a8:	bfa2      	ittt	ge
 800b8aa:	6821      	ldrge	r1, [r4, #0]
 800b8ac:	f021 0104 	bicge.w	r1, r1, #4
 800b8b0:	6021      	strge	r1, [r4, #0]
 800b8b2:	b90e      	cbnz	r6, 800b8b8 <_printf_i+0x114>
 800b8b4:	2d00      	cmp	r5, #0
 800b8b6:	d04b      	beq.n	800b950 <_printf_i+0x1ac>
 800b8b8:	4615      	mov	r5, r2
 800b8ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8be:	fb03 6711 	mls	r7, r3, r1, r6
 800b8c2:	5dc7      	ldrb	r7, [r0, r7]
 800b8c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8c8:	4637      	mov	r7, r6
 800b8ca:	42bb      	cmp	r3, r7
 800b8cc:	460e      	mov	r6, r1
 800b8ce:	d9f4      	bls.n	800b8ba <_printf_i+0x116>
 800b8d0:	2b08      	cmp	r3, #8
 800b8d2:	d10b      	bne.n	800b8ec <_printf_i+0x148>
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	07de      	lsls	r6, r3, #31
 800b8d8:	d508      	bpl.n	800b8ec <_printf_i+0x148>
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	6861      	ldr	r1, [r4, #4]
 800b8de:	4299      	cmp	r1, r3
 800b8e0:	bfde      	ittt	le
 800b8e2:	2330      	movle	r3, #48	; 0x30
 800b8e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8ec:	1b52      	subs	r2, r2, r5
 800b8ee:	6122      	str	r2, [r4, #16]
 800b8f0:	f8cd a000 	str.w	sl, [sp]
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	aa03      	add	r2, sp, #12
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f7ff fee4 	bl	800b6c8 <_printf_common>
 800b900:	3001      	adds	r0, #1
 800b902:	d14a      	bne.n	800b99a <_printf_i+0x1f6>
 800b904:	f04f 30ff 	mov.w	r0, #4294967295
 800b908:	b004      	add	sp, #16
 800b90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	f043 0320 	orr.w	r3, r3, #32
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	4833      	ldr	r0, [pc, #204]	; (800b9e4 <_printf_i+0x240>)
 800b918:	2778      	movs	r7, #120	; 0x78
 800b91a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	6829      	ldr	r1, [r5, #0]
 800b922:	061f      	lsls	r7, r3, #24
 800b924:	f851 6b04 	ldr.w	r6, [r1], #4
 800b928:	d402      	bmi.n	800b930 <_printf_i+0x18c>
 800b92a:	065f      	lsls	r7, r3, #25
 800b92c:	bf48      	it	mi
 800b92e:	b2b6      	uxthmi	r6, r6
 800b930:	07df      	lsls	r7, r3, #31
 800b932:	bf48      	it	mi
 800b934:	f043 0320 	orrmi.w	r3, r3, #32
 800b938:	6029      	str	r1, [r5, #0]
 800b93a:	bf48      	it	mi
 800b93c:	6023      	strmi	r3, [r4, #0]
 800b93e:	b91e      	cbnz	r6, 800b948 <_printf_i+0x1a4>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	f023 0320 	bic.w	r3, r3, #32
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	2310      	movs	r3, #16
 800b94a:	e7a7      	b.n	800b89c <_printf_i+0xf8>
 800b94c:	4824      	ldr	r0, [pc, #144]	; (800b9e0 <_printf_i+0x23c>)
 800b94e:	e7e4      	b.n	800b91a <_printf_i+0x176>
 800b950:	4615      	mov	r5, r2
 800b952:	e7bd      	b.n	800b8d0 <_printf_i+0x12c>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	6826      	ldr	r6, [r4, #0]
 800b958:	6961      	ldr	r1, [r4, #20]
 800b95a:	1d18      	adds	r0, r3, #4
 800b95c:	6028      	str	r0, [r5, #0]
 800b95e:	0635      	lsls	r5, r6, #24
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	d501      	bpl.n	800b968 <_printf_i+0x1c4>
 800b964:	6019      	str	r1, [r3, #0]
 800b966:	e002      	b.n	800b96e <_printf_i+0x1ca>
 800b968:	0670      	lsls	r0, r6, #25
 800b96a:	d5fb      	bpl.n	800b964 <_printf_i+0x1c0>
 800b96c:	8019      	strh	r1, [r3, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	4615      	mov	r5, r2
 800b974:	e7bc      	b.n	800b8f0 <_printf_i+0x14c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	1d1a      	adds	r2, r3, #4
 800b97a:	602a      	str	r2, [r5, #0]
 800b97c:	681d      	ldr	r5, [r3, #0]
 800b97e:	6862      	ldr	r2, [r4, #4]
 800b980:	2100      	movs	r1, #0
 800b982:	4628      	mov	r0, r5
 800b984:	f7f4 fc5c 	bl	8000240 <memchr>
 800b988:	b108      	cbz	r0, 800b98e <_printf_i+0x1ea>
 800b98a:	1b40      	subs	r0, r0, r5
 800b98c:	6060      	str	r0, [r4, #4]
 800b98e:	6863      	ldr	r3, [r4, #4]
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	2300      	movs	r3, #0
 800b994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b998:	e7aa      	b.n	800b8f0 <_printf_i+0x14c>
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	47d0      	blx	sl
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d0ad      	beq.n	800b904 <_printf_i+0x160>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	079b      	lsls	r3, r3, #30
 800b9ac:	d413      	bmi.n	800b9d6 <_printf_i+0x232>
 800b9ae:	68e0      	ldr	r0, [r4, #12]
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	4298      	cmp	r0, r3
 800b9b4:	bfb8      	it	lt
 800b9b6:	4618      	movlt	r0, r3
 800b9b8:	e7a6      	b.n	800b908 <_printf_i+0x164>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4649      	mov	r1, r9
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	47d0      	blx	sl
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d09d      	beq.n	800b904 <_printf_i+0x160>
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	68e3      	ldr	r3, [r4, #12]
 800b9cc:	9903      	ldr	r1, [sp, #12]
 800b9ce:	1a5b      	subs	r3, r3, r1
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	dcf2      	bgt.n	800b9ba <_printf_i+0x216>
 800b9d4:	e7eb      	b.n	800b9ae <_printf_i+0x20a>
 800b9d6:	2500      	movs	r5, #0
 800b9d8:	f104 0619 	add.w	r6, r4, #25
 800b9dc:	e7f5      	b.n	800b9ca <_printf_i+0x226>
 800b9de:	bf00      	nop
 800b9e0:	0800d6e1 	.word	0x0800d6e1
 800b9e4:	0800d6f2 	.word	0x0800d6f2

0800b9e8 <__sflush_r>:
 800b9e8:	898a      	ldrh	r2, [r1, #12]
 800b9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	0710      	lsls	r0, r2, #28
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	d458      	bmi.n	800baa8 <__sflush_r+0xc0>
 800b9f6:	684b      	ldr	r3, [r1, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dc05      	bgt.n	800ba08 <__sflush_r+0x20>
 800b9fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dc02      	bgt.n	800ba08 <__sflush_r+0x20>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	d0f9      	beq.n	800ba02 <__sflush_r+0x1a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba14:	682f      	ldr	r7, [r5, #0]
 800ba16:	6a21      	ldr	r1, [r4, #32]
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	d032      	beq.n	800ba82 <__sflush_r+0x9a>
 800ba1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba1e:	89a3      	ldrh	r3, [r4, #12]
 800ba20:	075a      	lsls	r2, r3, #29
 800ba22:	d505      	bpl.n	800ba30 <__sflush_r+0x48>
 800ba24:	6863      	ldr	r3, [r4, #4]
 800ba26:	1ac0      	subs	r0, r0, r3
 800ba28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba2a:	b10b      	cbz	r3, 800ba30 <__sflush_r+0x48>
 800ba2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba2e:	1ac0      	subs	r0, r0, r3
 800ba30:	2300      	movs	r3, #0
 800ba32:	4602      	mov	r2, r0
 800ba34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba36:	6a21      	ldr	r1, [r4, #32]
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b0      	blx	r6
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	d106      	bne.n	800ba50 <__sflush_r+0x68>
 800ba42:	6829      	ldr	r1, [r5, #0]
 800ba44:	291d      	cmp	r1, #29
 800ba46:	d82b      	bhi.n	800baa0 <__sflush_r+0xb8>
 800ba48:	4a29      	ldr	r2, [pc, #164]	; (800baf0 <__sflush_r+0x108>)
 800ba4a:	410a      	asrs	r2, r1
 800ba4c:	07d6      	lsls	r6, r2, #31
 800ba4e:	d427      	bmi.n	800baa0 <__sflush_r+0xb8>
 800ba50:	2200      	movs	r2, #0
 800ba52:	6062      	str	r2, [r4, #4]
 800ba54:	04d9      	lsls	r1, r3, #19
 800ba56:	6922      	ldr	r2, [r4, #16]
 800ba58:	6022      	str	r2, [r4, #0]
 800ba5a:	d504      	bpl.n	800ba66 <__sflush_r+0x7e>
 800ba5c:	1c42      	adds	r2, r0, #1
 800ba5e:	d101      	bne.n	800ba64 <__sflush_r+0x7c>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b903      	cbnz	r3, 800ba66 <__sflush_r+0x7e>
 800ba64:	6560      	str	r0, [r4, #84]	; 0x54
 800ba66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba68:	602f      	str	r7, [r5, #0]
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	d0c9      	beq.n	800ba02 <__sflush_r+0x1a>
 800ba6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba72:	4299      	cmp	r1, r3
 800ba74:	d002      	beq.n	800ba7c <__sflush_r+0x94>
 800ba76:	4628      	mov	r0, r5
 800ba78:	f7ff fbea 	bl	800b250 <_free_r>
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	6360      	str	r0, [r4, #52]	; 0x34
 800ba80:	e7c0      	b.n	800ba04 <__sflush_r+0x1c>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b0      	blx	r6
 800ba88:	1c41      	adds	r1, r0, #1
 800ba8a:	d1c8      	bne.n	800ba1e <__sflush_r+0x36>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0c5      	beq.n	800ba1e <__sflush_r+0x36>
 800ba92:	2b1d      	cmp	r3, #29
 800ba94:	d001      	beq.n	800ba9a <__sflush_r+0xb2>
 800ba96:	2b16      	cmp	r3, #22
 800ba98:	d101      	bne.n	800ba9e <__sflush_r+0xb6>
 800ba9a:	602f      	str	r7, [r5, #0]
 800ba9c:	e7b1      	b.n	800ba02 <__sflush_r+0x1a>
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baa4:	81a3      	strh	r3, [r4, #12]
 800baa6:	e7ad      	b.n	800ba04 <__sflush_r+0x1c>
 800baa8:	690f      	ldr	r7, [r1, #16]
 800baaa:	2f00      	cmp	r7, #0
 800baac:	d0a9      	beq.n	800ba02 <__sflush_r+0x1a>
 800baae:	0793      	lsls	r3, r2, #30
 800bab0:	680e      	ldr	r6, [r1, #0]
 800bab2:	bf08      	it	eq
 800bab4:	694b      	ldreq	r3, [r1, #20]
 800bab6:	600f      	str	r7, [r1, #0]
 800bab8:	bf18      	it	ne
 800baba:	2300      	movne	r3, #0
 800babc:	eba6 0807 	sub.w	r8, r6, r7
 800bac0:	608b      	str	r3, [r1, #8]
 800bac2:	f1b8 0f00 	cmp.w	r8, #0
 800bac6:	dd9c      	ble.n	800ba02 <__sflush_r+0x1a>
 800bac8:	6a21      	ldr	r1, [r4, #32]
 800baca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bacc:	4643      	mov	r3, r8
 800bace:	463a      	mov	r2, r7
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b0      	blx	r6
 800bad4:	2800      	cmp	r0, #0
 800bad6:	dc06      	bgt.n	800bae6 <__sflush_r+0xfe>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	e78e      	b.n	800ba04 <__sflush_r+0x1c>
 800bae6:	4407      	add	r7, r0
 800bae8:	eba8 0800 	sub.w	r8, r8, r0
 800baec:	e7e9      	b.n	800bac2 <__sflush_r+0xda>
 800baee:	bf00      	nop
 800baf0:	dfbffffe 	.word	0xdfbffffe

0800baf4 <_fflush_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	690b      	ldr	r3, [r1, #16]
 800baf8:	4605      	mov	r5, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	b913      	cbnz	r3, 800bb04 <_fflush_r+0x10>
 800bafe:	2500      	movs	r5, #0
 800bb00:	4628      	mov	r0, r5
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	b118      	cbz	r0, 800bb0e <_fflush_r+0x1a>
 800bb06:	6a03      	ldr	r3, [r0, #32]
 800bb08:	b90b      	cbnz	r3, 800bb0e <_fflush_r+0x1a>
 800bb0a:	f7ff fa29 	bl	800af60 <__sinit>
 800bb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0f3      	beq.n	800bafe <_fflush_r+0xa>
 800bb16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb18:	07d0      	lsls	r0, r2, #31
 800bb1a:	d404      	bmi.n	800bb26 <_fflush_r+0x32>
 800bb1c:	0599      	lsls	r1, r3, #22
 800bb1e:	d402      	bmi.n	800bb26 <_fflush_r+0x32>
 800bb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb22:	f7ff fb85 	bl	800b230 <__retarget_lock_acquire_recursive>
 800bb26:	4628      	mov	r0, r5
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f7ff ff5d 	bl	800b9e8 <__sflush_r>
 800bb2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb30:	07da      	lsls	r2, r3, #31
 800bb32:	4605      	mov	r5, r0
 800bb34:	d4e4      	bmi.n	800bb00 <_fflush_r+0xc>
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	059b      	lsls	r3, r3, #22
 800bb3a:	d4e1      	bmi.n	800bb00 <_fflush_r+0xc>
 800bb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb3e:	f7ff fb78 	bl	800b232 <__retarget_lock_release_recursive>
 800bb42:	e7dd      	b.n	800bb00 <_fflush_r+0xc>

0800bb44 <__swbuf_r>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	460e      	mov	r6, r1
 800bb48:	4614      	mov	r4, r2
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	b118      	cbz	r0, 800bb56 <__swbuf_r+0x12>
 800bb4e:	6a03      	ldr	r3, [r0, #32]
 800bb50:	b90b      	cbnz	r3, 800bb56 <__swbuf_r+0x12>
 800bb52:	f7ff fa05 	bl	800af60 <__sinit>
 800bb56:	69a3      	ldr	r3, [r4, #24]
 800bb58:	60a3      	str	r3, [r4, #8]
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	071a      	lsls	r2, r3, #28
 800bb5e:	d525      	bpl.n	800bbac <__swbuf_r+0x68>
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	b31b      	cbz	r3, 800bbac <__swbuf_r+0x68>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	6922      	ldr	r2, [r4, #16]
 800bb68:	1a98      	subs	r0, r3, r2
 800bb6a:	6963      	ldr	r3, [r4, #20]
 800bb6c:	b2f6      	uxtb	r6, r6
 800bb6e:	4283      	cmp	r3, r0
 800bb70:	4637      	mov	r7, r6
 800bb72:	dc04      	bgt.n	800bb7e <__swbuf_r+0x3a>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7ff ffbc 	bl	800baf4 <_fflush_r>
 800bb7c:	b9e0      	cbnz	r0, 800bbb8 <__swbuf_r+0x74>
 800bb7e:	68a3      	ldr	r3, [r4, #8]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	60a3      	str	r3, [r4, #8]
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	6022      	str	r2, [r4, #0]
 800bb8a:	701e      	strb	r6, [r3, #0]
 800bb8c:	6962      	ldr	r2, [r4, #20]
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d004      	beq.n	800bb9e <__swbuf_r+0x5a>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	07db      	lsls	r3, r3, #31
 800bb98:	d506      	bpl.n	800bba8 <__swbuf_r+0x64>
 800bb9a:	2e0a      	cmp	r6, #10
 800bb9c:	d104      	bne.n	800bba8 <__swbuf_r+0x64>
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4628      	mov	r0, r5
 800bba2:	f7ff ffa7 	bl	800baf4 <_fflush_r>
 800bba6:	b938      	cbnz	r0, 800bbb8 <__swbuf_r+0x74>
 800bba8:	4638      	mov	r0, r7
 800bbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbac:	4621      	mov	r1, r4
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f000 f806 	bl	800bbc0 <__swsetup_r>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d0d5      	beq.n	800bb64 <__swbuf_r+0x20>
 800bbb8:	f04f 37ff 	mov.w	r7, #4294967295
 800bbbc:	e7f4      	b.n	800bba8 <__swbuf_r+0x64>
	...

0800bbc0 <__swsetup_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <__swsetup_r+0xac>)
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	460c      	mov	r4, r1
 800bbca:	b118      	cbz	r0, 800bbd4 <__swsetup_r+0x14>
 800bbcc:	6a03      	ldr	r3, [r0, #32]
 800bbce:	b90b      	cbnz	r3, 800bbd4 <__swsetup_r+0x14>
 800bbd0:	f7ff f9c6 	bl	800af60 <__sinit>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbda:	0718      	lsls	r0, r3, #28
 800bbdc:	d422      	bmi.n	800bc24 <__swsetup_r+0x64>
 800bbde:	06d9      	lsls	r1, r3, #27
 800bbe0:	d407      	bmi.n	800bbf2 <__swsetup_r+0x32>
 800bbe2:	2309      	movs	r3, #9
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	e034      	b.n	800bc5c <__swsetup_r+0x9c>
 800bbf2:	0758      	lsls	r0, r3, #29
 800bbf4:	d512      	bpl.n	800bc1c <__swsetup_r+0x5c>
 800bbf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf8:	b141      	cbz	r1, 800bc0c <__swsetup_r+0x4c>
 800bbfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbfe:	4299      	cmp	r1, r3
 800bc00:	d002      	beq.n	800bc08 <__swsetup_r+0x48>
 800bc02:	4628      	mov	r0, r5
 800bc04:	f7ff fb24 	bl	800b250 <_free_r>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6363      	str	r3, [r4, #52]	; 0x34
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc12:	81a3      	strh	r3, [r4, #12]
 800bc14:	2300      	movs	r3, #0
 800bc16:	6063      	str	r3, [r4, #4]
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f043 0308 	orr.w	r3, r3, #8
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	b94b      	cbnz	r3, 800bc3c <__swsetup_r+0x7c>
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc32:	d003      	beq.n	800bc3c <__swsetup_r+0x7c>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 f850 	bl	800bcdc <__smakebuf_r>
 800bc3c:	89a0      	ldrh	r0, [r4, #12]
 800bc3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc42:	f010 0301 	ands.w	r3, r0, #1
 800bc46:	d00a      	beq.n	800bc5e <__swsetup_r+0x9e>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	6963      	ldr	r3, [r4, #20]
 800bc4e:	425b      	negs	r3, r3
 800bc50:	61a3      	str	r3, [r4, #24]
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	b943      	cbnz	r3, 800bc68 <__swsetup_r+0xa8>
 800bc56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc5a:	d1c4      	bne.n	800bbe6 <__swsetup_r+0x26>
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	0781      	lsls	r1, r0, #30
 800bc60:	bf58      	it	pl
 800bc62:	6963      	ldrpl	r3, [r4, #20]
 800bc64:	60a3      	str	r3, [r4, #8]
 800bc66:	e7f4      	b.n	800bc52 <__swsetup_r+0x92>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e7f7      	b.n	800bc5c <__swsetup_r+0x9c>
 800bc6c:	20000094 	.word	0x20000094

0800bc70 <_sbrk_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_sbrk_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f5 ffde 	bl	8001c3c <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_sbrk_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_sbrk_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	200052ac 	.word	0x200052ac

0800bc90 <__swhatbuf_r>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc98:	2900      	cmp	r1, #0
 800bc9a:	b096      	sub	sp, #88	; 0x58
 800bc9c:	4615      	mov	r5, r2
 800bc9e:	461e      	mov	r6, r3
 800bca0:	da0d      	bge.n	800bcbe <__swhatbuf_r+0x2e>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bca8:	f04f 0100 	mov.w	r1, #0
 800bcac:	bf0c      	ite	eq
 800bcae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcb2:	2340      	movne	r3, #64	; 0x40
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	6031      	str	r1, [r6, #0]
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	b016      	add	sp, #88	; 0x58
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	466a      	mov	r2, sp
 800bcc0:	f000 f848 	bl	800bd54 <_fstat_r>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	dbec      	blt.n	800bca2 <__swhatbuf_r+0x12>
 800bcc8:	9901      	ldr	r1, [sp, #4]
 800bcca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcd2:	4259      	negs	r1, r3
 800bcd4:	4159      	adcs	r1, r3
 800bcd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcda:	e7eb      	b.n	800bcb4 <__swhatbuf_r+0x24>

0800bcdc <__smakebuf_r>:
 800bcdc:	898b      	ldrh	r3, [r1, #12]
 800bcde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bce0:	079d      	lsls	r5, r3, #30
 800bce2:	4606      	mov	r6, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	d507      	bpl.n	800bcf8 <__smakebuf_r+0x1c>
 800bce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	6163      	str	r3, [r4, #20]
 800bcf4:	b002      	add	sp, #8
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	ab01      	add	r3, sp, #4
 800bcfa:	466a      	mov	r2, sp
 800bcfc:	f7ff ffc8 	bl	800bc90 <__swhatbuf_r>
 800bd00:	9900      	ldr	r1, [sp, #0]
 800bd02:	4605      	mov	r5, r0
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fb0f 	bl	800b328 <_malloc_r>
 800bd0a:	b948      	cbnz	r0, 800bd20 <__smakebuf_r+0x44>
 800bd0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd10:	059a      	lsls	r2, r3, #22
 800bd12:	d4ef      	bmi.n	800bcf4 <__smakebuf_r+0x18>
 800bd14:	f023 0303 	bic.w	r3, r3, #3
 800bd18:	f043 0302 	orr.w	r3, r3, #2
 800bd1c:	81a3      	strh	r3, [r4, #12]
 800bd1e:	e7e3      	b.n	800bce8 <__smakebuf_r+0xc>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	9b00      	ldr	r3, [sp, #0]
 800bd2c:	6163      	str	r3, [r4, #20]
 800bd2e:	9b01      	ldr	r3, [sp, #4]
 800bd30:	6120      	str	r0, [r4, #16]
 800bd32:	b15b      	cbz	r3, 800bd4c <__smakebuf_r+0x70>
 800bd34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 f81d 	bl	800bd78 <_isatty_r>
 800bd3e:	b128      	cbz	r0, 800bd4c <__smakebuf_r+0x70>
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	f043 0301 	orr.w	r3, r3, #1
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	431d      	orrs	r5, r3
 800bd50:	81a5      	strh	r5, [r4, #12]
 800bd52:	e7cf      	b.n	800bcf4 <__smakebuf_r+0x18>

0800bd54 <_fstat_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	; (800bd74 <_fstat_r+0x20>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	4611      	mov	r1, r2
 800bd60:	602b      	str	r3, [r5, #0]
 800bd62:	f7f5 ff42 	bl	8001bea <_fstat>
 800bd66:	1c43      	adds	r3, r0, #1
 800bd68:	d102      	bne.n	800bd70 <_fstat_r+0x1c>
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	b103      	cbz	r3, 800bd70 <_fstat_r+0x1c>
 800bd6e:	6023      	str	r3, [r4, #0]
 800bd70:	bd38      	pop	{r3, r4, r5, pc}
 800bd72:	bf00      	nop
 800bd74:	200052ac 	.word	0x200052ac

0800bd78 <_isatty_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d06      	ldr	r5, [pc, #24]	; (800bd94 <_isatty_r+0x1c>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f5 ff41 	bl	8001c0a <_isatty>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_isatty_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_isatty_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	200052ac 	.word	0x200052ac

0800bd98 <_init>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr

0800bda4 <_fini>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr
