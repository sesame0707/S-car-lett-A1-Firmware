
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c880  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e494  0800e494  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e494  0800e494  0001e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e49c  0800e49c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e49c  0800e49c  0001e49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a0  0800e4a0  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005254  200000c0  0800e564  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005314  0800e564  00025314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f7f  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005aaa  00000000  00000000  000480b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  0004db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017d2  00000000  00000000  0004fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddbe  00000000  00000000  0005123a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029503  00000000  00000000  0007eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e923  00000000  00000000  000a84fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008708  00000000  00000000  001b6e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bf528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ca68 	.word	0x0800ca68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c4 	.word	0x200000c4
 800023c:	0800ca68 	.word	0x0800ca68

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d833      	bhi.n	8000658 <setLEDStripesEffect+0x7c>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <setLEDStripesEffect+0x1c>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000609 	.word	0x08000609
 80005fc:	0800061d 	.word	0x0800061d
 8000600:	08000631 	.word	0x08000631
 8000604:	08000645 	.word	0x08000645
	case 1:
		desiredStripesColor->red = 0x00;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	709a      	strb	r2, [r3, #2]
		break;
 800061a:	e01d      	b.n	8000658 <setLEDStripesEffect+0x7c>
	case 2:
		desiredStripesColor->red = 0x40;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2240      	movs	r2, #64	; 0x40
 8000620:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2220      	movs	r2, #32
 8000626:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	709a      	strb	r2, [r3, #2]
		break;
 800062e:	e013      	b.n	8000658 <setLEDStripesEffect+0x7c>
	case 3:
		desiredStripesColor->red = 0x40;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2240      	movs	r2, #64	; 0x40
 8000634:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	709a      	strb	r2, [r3, #2]
		break;
 8000642:	e009      	b.n	8000658 <setLEDStripesEffect+0x7c>
	case 4:
		desiredStripesColor->red = 0x00;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	709a      	strb	r2, [r3, #2]
		break;
 8000656:	bf00      	nop
	}
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	0000      	movs	r0, r0
	...

08000668 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <setBLDCMotorSpeed+0xf0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3302      	adds	r3, #2
 8000672:	2b06      	cmp	r3, #6
 8000674:	d84d      	bhi.n	8000712 <setBLDCMotorSpeed+0xaa>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <setBLDCMotorSpeed+0x14>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000699 	.word	0x08000699
 8000680:	080006ad 	.word	0x080006ad
 8000684:	080006bf 	.word	0x080006bf
 8000688:	080006c9 	.word	0x080006c9
 800068c:	080006db 	.word	0x080006db
 8000690:	080006ef 	.word	0x080006ef
 8000694:	08000701 	.word	0x08000701
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <setBLDCMotorSpeed+0xf4>)
 800069a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800069e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	482e      	ldr	r0, [pc, #184]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 80006a6:	f003 fadb 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 80006aa:	e032      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <setBLDCMotorSpeed+0xf4>)
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <setBLDCMotorSpeed+0xfc>)
 80006b0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	482a      	ldr	r0, [pc, #168]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 80006b8:	f003 fad2 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 80006bc:	e029      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <setBLDCMotorSpeed+0xf4>)
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
	  break;
 80006c6:	e024      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <setBLDCMotorSpeed+0xf4>)
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <setBLDCMotorSpeed+0xfc>)
 80006cc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	4823      	ldr	r0, [pc, #140]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 80006d4:	f003 fac4 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 80006d8:	e01b      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <setBLDCMotorSpeed+0xf4>)
 80006dc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006e0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2110      	movs	r1, #16
 80006e6:	481e      	ldr	r0, [pc, #120]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 80006e8:	f003 faba 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 80006ec:	e011      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <setBLDCMotorSpeed+0xf4>)
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <setBLDCMotorSpeed+0x100>)
 80006f2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	4819      	ldr	r0, [pc, #100]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 80006fa:	f003 fab1 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 80006fe:	e008      	b.n	8000712 <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <setBLDCMotorSpeed+0xf4>)
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <setBLDCMotorSpeed+0x104>)
 8000704:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	4815      	ldr	r0, [pc, #84]	; (8000760 <setBLDCMotorSpeed+0xf8>)
 800070c:	f003 faa8 	bl	8003c60 <HAL_GPIO_WritePin>
	  break;
 8000710:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <setBLDCMotorSpeed+0xf4>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000770 <setBLDCMotorSpeed+0x108>
 800071c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000720:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000724:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000750 <setBLDCMotorSpeed+0xe8>
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000730:	ee17 2a90 	vmov	r2, s15
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <setBLDCMotorSpeed+0x10c>)
 8000736:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <setBLDCMotorSpeed+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <setBLDCMotorSpeed+0x110>)
 8000742:	f002 fc4f 	bl	8002fe4 <HAL_DAC_SetValue>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	f3af 8000 	nop.w
 8000750:	66666666 	.word	0x66666666
 8000754:	400a6666 	.word	0x400a6666
 8000758:	200000e4 	.word	0x200000e4
 800075c:	200000ec 	.word	0x200000ec
 8000760:	40020400 	.word	0x40020400
 8000764:	3ecccccd 	.word	0x3ecccccd
 8000768:	3f19999a 	.word	0x3f19999a
 800076c:	3f333333 	.word	0x3f333333
 8000770:	45800000 	.word	0x45800000
 8000774:	200000f0 	.word	0x200000f0
 8000778:	20000104 	.word	0x20000104

0800077c <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	TIM4->CCR3 = 500;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <moveStepperMotor+0x1c>)
 8000782:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(35);
 8000788:	2023      	movs	r0, #35	; 0x23
 800078a:	f008 f9d1 	bl	8008b30 <osDelay>
	TIM4->CCR3 = 0;
 800078e:	4b02      	ldr	r3, [pc, #8]	; (8000798 <moveStepperMotor+0x1c>)
 8000790:	2200      	movs	r2, #0
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40000800 	.word	0x40000800

0800079c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007ac:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_DAC_Init+0x50>)
 80007ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007b2:	f002 fb49 	bl	8002e48 <HAL_DAC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007bc:	f001 f916 	bl	80019ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007d0:	f002 fc37 	bl	8003042 <HAL_DAC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007da:	f001 f907 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000104 	.word	0x20000104
 80007ec:	40007400 	.word	0x40007400

080007f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_DAC_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12b      	bne.n	800086a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_DAC_MspInit+0x88>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <HAL_DAC_MspInit+0x88>)
 8000818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_DAC_MspInit+0x88>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_DAC_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <HAL_DAC_MspInit+0x88>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_DAC_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <HAL_DAC_MspInit+0x8c>)
 8000856:	f003 f857 	bl	8003908 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2105      	movs	r1, #5
 800085e:	2036      	movs	r0, #54	; 0x36
 8000860:	f002 fac8 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000864:	2036      	movs	r0, #54	; 0x36
 8000866:	f002 fae1 	bl	8002e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40007400 	.word	0x40007400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_DMA_Init+0x38>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MX_DMA_Init+0x38>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DMA_Init+0x38>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	203b      	movs	r0, #59	; 0x3b
 80008a4:	f002 faa6 	bl	8002df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008a8:	203b      	movs	r0, #59	; 0x3b
 80008aa:	f002 fabf 	bl	8002e2c <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 80008c0:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <MX_FREERTOS_Init+0x12c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	4849      	ldr	r0, [pc, #292]	; (80009ec <MX_FREERTOS_Init+0x130>)
 80008c8:	f008 f976 	bl	8008bb8 <osTimerNew>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a48      	ldr	r2, [pc, #288]	; (80009f0 <MX_FREERTOS_Init+0x134>)
 80008d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80008d2:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <MX_FREERTOS_Init+0x138>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4848      	ldr	r0, [pc, #288]	; (80009f8 <MX_FREERTOS_Init+0x13c>)
 80008d8:	f008 f884 	bl	80089e4 <osThreadNew>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a47      	ldr	r2, [pc, #284]	; (80009fc <MX_FREERTOS_Init+0x140>)
 80008e0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 80008e2:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <MX_FREERTOS_Init+0x144>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4847      	ldr	r0, [pc, #284]	; (8000a04 <MX_FREERTOS_Init+0x148>)
 80008e8:	f008 f87c 	bl	80089e4 <osThreadNew>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a46      	ldr	r2, [pc, #280]	; (8000a08 <MX_FREERTOS_Init+0x14c>)
 80008f0:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 80008f2:	4a46      	ldr	r2, [pc, #280]	; (8000a0c <MX_FREERTOS_Init+0x150>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4846      	ldr	r0, [pc, #280]	; (8000a10 <MX_FREERTOS_Init+0x154>)
 80008f8:	f008 f874 	bl	80089e4 <osThreadNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a45      	ldr	r2, [pc, #276]	; (8000a14 <MX_FREERTOS_Init+0x158>)
 8000900:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000902:	4a45      	ldr	r2, [pc, #276]	; (8000a18 <MX_FREERTOS_Init+0x15c>)
 8000904:	2100      	movs	r1, #0
 8000906:	4845      	ldr	r0, [pc, #276]	; (8000a1c <MX_FREERTOS_Init+0x160>)
 8000908:	f008 f86c 	bl	80089e4 <osThreadNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a44      	ldr	r2, [pc, #272]	; (8000a20 <MX_FREERTOS_Init+0x164>)
 8000910:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000912:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <MX_FREERTOS_Init+0x168>)
 8000914:	2100      	movs	r1, #0
 8000916:	4844      	ldr	r0, [pc, #272]	; (8000a28 <MX_FREERTOS_Init+0x16c>)
 8000918:	f008 f864 	bl	80089e4 <osThreadNew>
 800091c:	4603      	mov	r3, r0
 800091e:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <MX_FREERTOS_Init+0x170>)
 8000920:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000922:	4a43      	ldr	r2, [pc, #268]	; (8000a30 <MX_FREERTOS_Init+0x174>)
 8000924:	2100      	movs	r1, #0
 8000926:	4843      	ldr	r0, [pc, #268]	; (8000a34 <MX_FREERTOS_Init+0x178>)
 8000928:	f008 f85c 	bl	80089e4 <osThreadNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a42      	ldr	r2, [pc, #264]	; (8000a38 <MX_FREERTOS_Init+0x17c>)
 8000930:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000932:	4a42      	ldr	r2, [pc, #264]	; (8000a3c <MX_FREERTOS_Init+0x180>)
 8000934:	2100      	movs	r1, #0
 8000936:	4842      	ldr	r0, [pc, #264]	; (8000a40 <MX_FREERTOS_Init+0x184>)
 8000938:	f008 f854 	bl	80089e4 <osThreadNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <MX_FREERTOS_Init+0x188>)
 8000940:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000942:	4a41      	ldr	r2, [pc, #260]	; (8000a48 <MX_FREERTOS_Init+0x18c>)
 8000944:	2100      	movs	r1, #0
 8000946:	4841      	ldr	r0, [pc, #260]	; (8000a4c <MX_FREERTOS_Init+0x190>)
 8000948:	f008 f84c 	bl	80089e4 <osThreadNew>
 800094c:	4603      	mov	r3, r0
 800094e:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <MX_FREERTOS_Init+0x194>)
 8000950:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <MX_FREERTOS_Init+0x198>)
 8000954:	2100      	movs	r1, #0
 8000956:	4840      	ldr	r0, [pc, #256]	; (8000a58 <MX_FREERTOS_Init+0x19c>)
 8000958:	f008 f844 	bl	80089e4 <osThreadNew>
 800095c:	4603      	mov	r3, r0
 800095e:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <MX_FREERTOS_Init+0x1a0>)
 8000960:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000962:	4a3f      	ldr	r2, [pc, #252]	; (8000a60 <MX_FREERTOS_Init+0x1a4>)
 8000964:	2100      	movs	r1, #0
 8000966:	483f      	ldr	r0, [pc, #252]	; (8000a64 <MX_FREERTOS_Init+0x1a8>)
 8000968:	f008 f83c 	bl	80089e4 <osThreadNew>
 800096c:	4603      	mov	r3, r0
 800096e:	4a3e      	ldr	r2, [pc, #248]	; (8000a68 <MX_FREERTOS_Init+0x1ac>)
 8000970:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000972:	4a3e      	ldr	r2, [pc, #248]	; (8000a6c <MX_FREERTOS_Init+0x1b0>)
 8000974:	2100      	movs	r1, #0
 8000976:	483e      	ldr	r0, [pc, #248]	; (8000a70 <MX_FREERTOS_Init+0x1b4>)
 8000978:	f008 f834 	bl	80089e4 <osThreadNew>
 800097c:	4603      	mov	r3, r0
 800097e:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <MX_FREERTOS_Init+0x1b8>)
 8000980:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000982:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <MX_FREERTOS_Init+0x1bc>)
 8000984:	2100      	movs	r1, #0
 8000986:	483d      	ldr	r0, [pc, #244]	; (8000a7c <MX_FREERTOS_Init+0x1c0>)
 8000988:	f008 f82c 	bl	80089e4 <osThreadNew>
 800098c:	4603      	mov	r3, r0
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <MX_FREERTOS_Init+0x1c4>)
 8000990:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000992:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <MX_FREERTOS_Init+0x1c8>)
 8000994:	2100      	movs	r1, #0
 8000996:	483c      	ldr	r0, [pc, #240]	; (8000a88 <MX_FREERTOS_Init+0x1cc>)
 8000998:	f008 f824 	bl	80089e4 <osThreadNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a3b      	ldr	r2, [pc, #236]	; (8000a8c <MX_FREERTOS_Init+0x1d0>)
 80009a0:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 80009a2:	4a3b      	ldr	r2, [pc, #236]	; (8000a90 <MX_FREERTOS_Init+0x1d4>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	483b      	ldr	r0, [pc, #236]	; (8000a94 <MX_FREERTOS_Init+0x1d8>)
 80009a8:	f008 f81c 	bl	80089e4 <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a3a      	ldr	r2, [pc, #232]	; (8000a98 <MX_FREERTOS_Init+0x1dc>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 80009b2:	4a3a      	ldr	r2, [pc, #232]	; (8000a9c <MX_FREERTOS_Init+0x1e0>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	483a      	ldr	r0, [pc, #232]	; (8000aa0 <MX_FREERTOS_Init+0x1e4>)
 80009b8:	f008 f814 	bl	80089e4 <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <MX_FREERTOS_Init+0x1e8>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 80009c2:	4a39      	ldr	r2, [pc, #228]	; (8000aa8 <MX_FREERTOS_Init+0x1ec>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_FREERTOS_Init+0x1f0>)
 80009c8:	f008 f80c 	bl	80089e4 <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_FREERTOS_Init+0x1f4>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 80009d2:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <MX_FREERTOS_Init+0x1f8>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <MX_FREERTOS_Init+0x1fc>)
 80009d8:	f008 f804 	bl	80089e4 <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a37      	ldr	r2, [pc, #220]	; (8000abc <MX_FREERTOS_Init+0x200>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	0800cf68 	.word	0x0800cf68
 80009ec:	08001449 	.word	0x08001449
 80009f0:	2000015c 	.word	0x2000015c
 80009f4:	0800cd04 	.word	0x0800cd04
 80009f8:	08000ac1 	.word	0x08000ac1
 80009fc:	20000118 	.word	0x20000118
 8000a00:	0800cd28 	.word	0x0800cd28
 8000a04:	08000bdd 	.word	0x08000bdd
 8000a08:	2000011c 	.word	0x2000011c
 8000a0c:	0800cd4c 	.word	0x0800cd4c
 8000a10:	08000cf9 	.word	0x08000cf9
 8000a14:	20000120 	.word	0x20000120
 8000a18:	0800cd70 	.word	0x0800cd70
 8000a1c:	08000ded 	.word	0x08000ded
 8000a20:	20000124 	.word	0x20000124
 8000a24:	0800cd94 	.word	0x0800cd94
 8000a28:	08000e29 	.word	0x08000e29
 8000a2c:	20000128 	.word	0x20000128
 8000a30:	0800cdb8 	.word	0x0800cdb8
 8000a34:	08001065 	.word	0x08001065
 8000a38:	2000012c 	.word	0x2000012c
 8000a3c:	0800cddc 	.word	0x0800cddc
 8000a40:	080010b9 	.word	0x080010b9
 8000a44:	20000130 	.word	0x20000130
 8000a48:	0800ce00 	.word	0x0800ce00
 8000a4c:	0800110d 	.word	0x0800110d
 8000a50:	20000134 	.word	0x20000134
 8000a54:	0800ce24 	.word	0x0800ce24
 8000a58:	08001139 	.word	0x08001139
 8000a5c:	20000138 	.word	0x20000138
 8000a60:	0800ce48 	.word	0x0800ce48
 8000a64:	08001165 	.word	0x08001165
 8000a68:	2000013c 	.word	0x2000013c
 8000a6c:	0800ce6c 	.word	0x0800ce6c
 8000a70:	080011e9 	.word	0x080011e9
 8000a74:	20000140 	.word	0x20000140
 8000a78:	0800ce90 	.word	0x0800ce90
 8000a7c:	0800127d 	.word	0x0800127d
 8000a80:	20000144 	.word	0x20000144
 8000a84:	0800ceb4 	.word	0x0800ceb4
 8000a88:	080012e1 	.word	0x080012e1
 8000a8c:	20000148 	.word	0x20000148
 8000a90:	0800ced8 	.word	0x0800ced8
 8000a94:	08001345 	.word	0x08001345
 8000a98:	2000014c 	.word	0x2000014c
 8000a9c:	0800cefc 	.word	0x0800cefc
 8000aa0:	08001381 	.word	0x08001381
 8000aa4:	20000150 	.word	0x20000150
 8000aa8:	0800cf20 	.word	0x0800cf20
 8000aac:	080013b1 	.word	0x080013b1
 8000ab0:	20000154 	.word	0x20000154
 8000ab4:	0800cf44 	.word	0x0800cf44
 8000ab8:	080013ed 	.word	0x080013ed
 8000abc:	20000158 	.word	0x20000158

08000ac0 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000ac8:	493b      	ldr	r1, [pc, #236]	; (8000bb8 <StartOLEDTask+0xf8>)
 8000aca:	483c      	ldr	r0, [pc, #240]	; (8000bbc <StartOLEDTask+0xfc>)
 8000acc:	f00b f943 	bl	800bd56 <strcat>

	// Initiate display
	ssd1306_Init();
 8000ad0:	f001 f89e 	bl	8001c10 <ssd1306_Init>
	uint8_t y = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f903 	bl	8001ce4 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f001 fa40 	bl	8001f68 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000ae8:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <StartOLEDTask+0x100>)
 8000aea:	2301      	movs	r3, #1
 8000aec:	ca06      	ldmia	r2, {r1, r2}
 8000aee:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <StartOLEDTask+0x104>)
 8000af0:	f001 fa14 	bl	8001f1c <ssd1306_WriteString>
	y += 30;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	331e      	adds	r3, #30
 8000af8:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2002      	movs	r0, #2
 8000b00:	f001 fa32 	bl	8001f68 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000b04:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <StartOLEDTask+0x108>)
 8000b06:	2301      	movs	r3, #1
 8000b08:	ca06      	ldmia	r2, {r1, r2}
 8000b0a:	482c      	ldr	r0, [pc, #176]	; (8000bbc <StartOLEDTask+0xfc>)
 8000b0c:	f001 fa06 	bl	8001f1c <ssd1306_WriteString>
	y += 36;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	3324      	adds	r3, #36	; 0x24
 8000b14:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000b16:	f001 f8fd 	bl	8001d14 <ssd1306_UpdateScreen>
	y = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000b1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b22:	f008 f805 	bl	8008b30 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f001 f8dc 	bl	8001ce4 <ssd1306_Fill>

	  if(isConnected) {
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <StartOLEDTask+0x10c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01c      	beq.n	8000b70 <StartOLEDTask+0xb0>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f001 fa14 	bl	8001f68 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <StartOLEDTask+0x100>)
 8000b42:	2301      	movs	r3, #1
 8000b44:	ca06      	ldmia	r2, {r1, r2}
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <StartOLEDTask+0x110>)
 8000b48:	f001 f9e8 	bl	8001f1c <ssd1306_WriteString>
		  y += 30;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	331e      	adds	r3, #30
 8000b50:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2002      	movs	r0, #2
 8000b58:	f001 fa06 	bl	8001f68 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <StartOLEDTask+0x108>)
 8000b5e:	2301      	movs	r3, #1
 8000b60:	ca06      	ldmia	r2, {r1, r2}
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <StartOLEDTask+0x114>)
 8000b64:	f001 f9da 	bl	8001f1c <ssd1306_WriteString>
		  y += 36;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3324      	adds	r3, #36	; 0x24
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e01b      	b.n	8000ba8 <StartOLEDTask+0xe8>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4619      	mov	r1, r3
 8000b74:	2002      	movs	r0, #2
 8000b76:	f001 f9f7 	bl	8001f68 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000b7a:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <StartOLEDTask+0x100>)
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	ca06      	ldmia	r2, {r1, r2}
 8000b80:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <StartOLEDTask+0x118>)
 8000b82:	f001 f9cb 	bl	8001f1c <ssd1306_WriteString>
		  y += 30;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	331e      	adds	r3, #30
 8000b8a:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	2002      	movs	r0, #2
 8000b92:	f001 f9e9 	bl	8001f68 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <StartOLEDTask+0x108>)
 8000b98:	2301      	movs	r3, #1
 8000b9a:	ca06      	ldmia	r2, {r1, r2}
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <StartOLEDTask+0x114>)
 8000b9e:	f001 f9bd 	bl	8001f1c <ssd1306_WriteString>
		  y += 36;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3324      	adds	r3, #36	; 0x24
 8000ba6:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000ba8:	f001 f8b4 	bl	8001d14 <ssd1306_UpdateScreen>
	  y = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f009 f8ad 	bl	8009d10 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000bb6:	e7b6      	b.n	8000b26 <StartOLEDTask+0x66>
 8000bb8:	0800cd00 	.word	0x0800cd00
 8000bbc:	2000002c 	.word	0x2000002c
 8000bc0:	20000044 	.word	0x20000044
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	2000004c 	.word	0x2000004c
 8000bcc:	200000dc 	.word	0x200000dc
 8000bd0:	20000020 	.word	0x20000020
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	20000010 	.word	0x20000010

08000bdc <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f009 f893 	bl	8009d10 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <StartDispatcherTask+0xe8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	2b0d      	cmp	r3, #13
 8000bf4:	d860      	bhi.n	8000cb8 <StartDispatcherTask+0xdc>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <StartDispatcherTask+0x20>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c35 	.word	0x08000c35
 8000c00:	08000c41 	.word	0x08000c41
 8000c04:	08000c4d 	.word	0x08000c4d
 8000c08:	08000c59 	.word	0x08000c59
 8000c0c:	08000c65 	.word	0x08000c65
 8000c10:	08000c71 	.word	0x08000c71
 8000c14:	08000c7d 	.word	0x08000c7d
 8000c18:	08000cb9 	.word	0x08000cb9
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cb9 	.word	0x08000cb9
 8000c24:	08000c89 	.word	0x08000c89
 8000c28:	08000c95 	.word	0x08000c95
 8000c2c:	08000ca1 	.word	0x08000ca1
 8000c30:	08000cad 	.word	0x08000cad
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <StartDispatcherTask+0xec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f009 f915 	bl	8009e68 <vTaskResume>
			break;
 8000c3e:	e040      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <StartDispatcherTask+0xf0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f009 f90f 	bl	8009e68 <vTaskResume>
			break;
 8000c4a:	e03a      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <StartDispatcherTask+0xf4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f009 f909 	bl	8009e68 <vTaskResume>
			break;
 8000c56:	e034      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <StartDispatcherTask+0xf8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f009 f903 	bl	8009e68 <vTaskResume>
			break;
 8000c62:	e02e      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <StartDispatcherTask+0xfc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 f8fd 	bl	8009e68 <vTaskResume>
			break;
 8000c6e:	e028      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <StartDispatcherTask+0x100>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f009 f8f7 	bl	8009e68 <vTaskResume>
			break;
 8000c7a:	e022      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <StartDispatcherTask+0x104>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f009 f8f1 	bl	8009e68 <vTaskResume>
			break;
 8000c86:	e01c      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <StartDispatcherTask+0x108>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f009 f8eb 	bl	8009e68 <vTaskResume>
			break;
 8000c92:	e016      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <StartDispatcherTask+0x10c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f009 f8e5 	bl	8009e68 <vTaskResume>
			break;
 8000c9e:	e010      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <StartDispatcherTask+0x110>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f009 f8df 	bl	8009e68 <vTaskResume>
			break;
 8000caa:	e00a      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <StartDispatcherTask+0x114>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 f8d9 	bl	8009e68 <vTaskResume>
			break;
 8000cb6:	e004      	b.n	8000cc2 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <StartDispatcherTask+0x118>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f009 f8d3 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 8000cc2:	e78f      	b.n	8000be4 <StartDispatcherTask+0x8>
 8000cc4:	200000fc 	.word	0x200000fc
 8000cc8:	20000120 	.word	0x20000120
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	20000128 	.word	0x20000128
 8000cd4:	2000012c 	.word	0x2000012c
 8000cd8:	20000130 	.word	0x20000130
 8000cdc:	20000134 	.word	0x20000134
 8000ce0:	20000138 	.word	0x20000138
 8000ce4:	2000013c 	.word	0x2000013c
 8000ce8:	20000140 	.word	0x20000140
 8000cec:	20000144 	.word	0x20000144
 8000cf0:	20000148 	.word	0x20000148
 8000cf4:	2000014c 	.word	0x2000014c

08000cf8 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f009 f805 	bl	8009d10 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <StartStopTask+0xcc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <StartStopTask+0xd0>)
 8000d0c:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <StartStopTask+0xcc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000d14:	f7ff fca8 	bl	8000668 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <StartStopTask+0xd4>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <StartStopTask+0xd8>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <StartStopTask+0xdc>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <StartStopTask+0xe0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f009 f89a 	bl	8009e68 <vTaskResume>

	  // Home stepper motor
	  if(sliderLeftRightCurrentValue == 0) {
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <StartStopTask+0xe4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d030      	beq.n	8000d9e <StartStopTask+0xa6>
		  // Do nothing
	  } else if(sliderLeftRightCurrentValue > 0) {
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <StartStopTask+0xe4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd16      	ble.n	8000d72 <StartStopTask+0x7a>
		  // Turn left until center
		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4825      	ldr	r0, [pc, #148]	; (8000de0 <StartStopTask+0xe8>)
 8000d4c:	f002 ff88 	bl	8003c60 <HAL_GPIO_WritePin>
		  for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != 0; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <StartStopTask+0xe4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	e008      	b.n	8000d68 <StartStopTask+0x70>
			  moveStepperMotor();
 8000d56:	f7ff fd11 	bl	800077c <moveStepperMotor>
		  for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != 0; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <StartStopTask+0xe4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	491e      	ldr	r1, [pc, #120]	; (8000ddc <StartStopTask+0xe4>)
 8000d62:	600a      	str	r2, [r1, #0]
 8000d64:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <StartStopTask+0xec>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <StartStopTask+0xe4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f2      	bne.n	8000d56 <StartStopTask+0x5e>
 8000d70:	e015      	b.n	8000d9e <StartStopTask+0xa6>
		  }
	  } else {
		  // Turn right until center
		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	4819      	ldr	r0, [pc, #100]	; (8000de0 <StartStopTask+0xe8>)
 8000d7a:	f002 ff71 	bl	8003c60 <HAL_GPIO_WritePin>
		  for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != 0; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <StartStopTask+0xe4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	e008      	b.n	8000d96 <StartStopTask+0x9e>
			  moveStepperMotor();
 8000d84:	f7ff fcfa 	bl	800077c <moveStepperMotor>
		  for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != 0; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <StartStopTask+0xe4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	4913      	ldr	r1, [pc, #76]	; (8000ddc <StartStopTask+0xe4>)
 8000d90:	600a      	str	r2, [r1, #0]
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <StartStopTask+0xec>)
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <StartStopTask+0xe4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f2      	bne.n	8000d84 <StartStopTask+0x8c>
		  }
	  }

	  // Turn off all the lights
	  HAL_GPIO_WritePin(DrivingLights_GPIO_Port, DrivingLights_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <StartStopTask+0xf0>)
 8000da6:	f002 ff5b 	bl	8003c60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <StartStopTask+0xf0>)
 8000db2:	f002 ff55 	bl	8003c60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <StartStopTask+0xf0>)
 8000dbe:	f002 ff4f 	bl	8003c60 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000dc2:	e79d      	b.n	8000d00 <StartStopTask+0x8>
 8000dc4:	200000e4 	.word	0x200000e4
 8000dc8:	200000e0 	.word	0x200000e0
 8000dcc:	200000df 	.word	0x200000df
 8000dd0:	20000043 	.word	0x20000043
 8000dd4:	200000de 	.word	0x200000de
 8000dd8:	20000128 	.word	0x20000128
 8000ddc:	200000f8 	.word	0x200000f8
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	200000f4 	.word	0x200000f4
 8000de8:	40020800 	.word	0x40020800

08000dec <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f008 ff8b 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <StartDrivingLightsTask+0x30>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <StartDrivingLightsTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <StartDrivingLightsTask+0x34>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 f82d 	bl	8009e68 <vTaskResume>
	  }

	  // Driving lights effect
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <StartDrivingLightsTask+0x38>)
 8000e14:	f002 ff3d 	bl	8003c92 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000e18:	e7ec      	b.n	8000df4 <StartDrivingLightsTask+0x8>
 8000e1a:	bf00      	nop
 8000e1c:	200000df 	.word	0x200000df
 8000e20:	20000158 	.word	0x20000158
 8000e24:	40020800 	.word	0x40020800

08000e28 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8000e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e2c:	b096      	sub	sp, #88	; 0x58
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <StartLEDStripesTask+0x224>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8000e38:	2300      	movs	r3, #0
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000e3c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	2204      	movs	r2, #4
 8000e44:	4882      	ldr	r0, [pc, #520]	; (8001050 <StartLEDStripesTask+0x228>)
 8000e46:	f004 fdea 	bl	8005a1e <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000e50:	233f      	movs	r3, #63	; 0x3f
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8000e56:	2303      	movs	r3, #3
 8000e58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000e62:	2301      	movs	r3, #1
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000e66:	2304      	movs	r3, #4
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8000e70:	4b76      	ldr	r3, [pc, #472]	; (800104c <StartLEDStripesTask+0x224>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f107 0208 	add.w	r2, r7, #8
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbad 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	; 0x54
 8000e86:	e020      	b.n	8000eca <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 8000e88:	7a39      	ldrb	r1, [r7, #8]
 8000e8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	3358      	adds	r3, #88	; 0x58
 8000e94:	443b      	add	r3, r7
 8000e96:	3b4c      	subs	r3, #76	; 0x4c
 8000e98:	460a      	mov	r2, r1
 8000e9a:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 8000e9c:	7a79      	ldrb	r1, [r7, #9]
 8000e9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3358      	adds	r3, #88	; 0x58
 8000ea8:	443b      	add	r3, r7
 8000eaa:	3b4b      	subs	r3, #75	; 0x4b
 8000eac:	460a      	mov	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 8000eb0:	7ab9      	ldrb	r1, [r7, #10]
 8000eb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	3358      	adds	r3, #88	; 0x58
 8000ebc:	443b      	add	r3, r7
 8000ebe:	3b4a      	subs	r3, #74	; 0x4a
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 8000ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8000eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	dddb      	ble.n	8000e88 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fb6c 	bl	80025bc <ws2812b_init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 8000eea:	4b5a      	ldr	r3, [pc, #360]	; (8001054 <StartLEDStripesTask+0x22c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4859      	ldr	r0, [pc, #356]	; (8001058 <StartLEDStripesTask+0x230>)
 8000ef2:	f00a fed3 	bl	800bc9c <iprintf>
	  while(1) {;}
 8000ef6:	e7fe      	b.n	8000ef6 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fcf9 	bl	80028f4 <ws2812b_required_buffer_len>
 8000f02:	4601      	mov	r1, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	3b01      	subs	r3, #1
 8000f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4688      	mov	r8, r1
 8000f0e:	4699      	mov	r9, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f24:	2300      	movs	r3, #0
 8000f26:	460c      	mov	r4, r1
 8000f28:	461d      	mov	r5, r3
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	00eb      	lsls	r3, r5, #3
 8000f34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f38:	00e2      	lsls	r2, r4, #3
 8000f3a:	1dcb      	adds	r3, r1, #7
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	ebad 0d03 	sub.w	sp, sp, r3
 8000f44:	466b      	mov	r3, sp
 8000f46:	3300      	adds	r3, #0
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fcea 	bl	800292a <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fcca 	bl	80028f4 <ws2812b_required_buffer_len>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f68:	4839      	ldr	r0, [pc, #228]	; (8001050 <StartLEDStripesTask+0x228>)
 8000f6a:	f004 fec7 	bl	8005cfc <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f001 fe64 	bl	8002c3c <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f008 fecb 	bl	8009d10 <vTaskSuspend>

	  // LED stripes effect
	  if(ommitToggle == false) {
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <StartLEDStripesTask+0x234>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f083 0301 	eor.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d014      	beq.n	8000fb4 <StartLEDStripesTask+0x18c>
		  if(isOn == false) {
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <StartLEDStripesTask+0x238>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <StartLEDStripesTask+0x180>
			  isOn = true;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <StartLEDStripesTask+0x238>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
			  stripesEffect = DEFAULT;
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <StartLEDStripesTask+0x224>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e005      	b.n	8000fb4 <StartLEDStripesTask+0x18c>
		  } else {
			  isOn = false;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <StartLEDStripesTask+0x238>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
			  stripesEffect = NONE;
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <StartLEDStripesTask+0x224>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  ommitToggle = false;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <StartLEDStripesTask+0x234>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	  // Update LED color
	  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <StartLEDStripesTask+0x224>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb08 	bl	80005dc <setLEDStripesEffect>
	  for(int i = 0; i < LED_COUNT; i ++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
 8000fd0:	e020      	b.n	8001014 <StartLEDStripesTask+0x1ec>
		  leds[i].red = desiredStripesColor.red;
 8000fd2:	7a39      	ldrb	r1, [r7, #8]
 8000fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	3358      	adds	r3, #88	; 0x58
 8000fde:	443b      	add	r3, r7
 8000fe0:	3b4c      	subs	r3, #76	; 0x4c
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
		  leds[i].green = desiredStripesColor.green;
 8000fe6:	7a79      	ldrb	r1, [r7, #9]
 8000fe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3358      	adds	r3, #88	; 0x58
 8000ff2:	443b      	add	r3, r7
 8000ff4:	3b4b      	subs	r3, #75	; 0x4b
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
		  leds[i].blue = desiredStripesColor.blue;
 8000ffa:	7ab9      	ldrb	r1, [r7, #10]
 8000ffc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	3358      	adds	r3, #88	; 0x58
 8001006:	443b      	add	r3, r7
 8001008:	3b4a      	subs	r3, #74	; 0x4a
 800100a:	460a      	mov	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < LED_COUNT; i ++) {
 800100e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001010:	3301      	adds	r3, #1
 8001012:	653b      	str	r3, [r7, #80]	; 0x50
 8001014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001016:	2b06      	cmp	r3, #6
 8001018:	dddb      	ble.n	8000fd2 <StartLEDStripesTask+0x1aa>
	  }

	  // Add LEDs to handle
	  hws2812b.leds = leds;
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38

	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fc7f 	bl	800292a <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fc5f 	bl	80028f4 <ws2812b_required_buffer_len>
 8001036:	4603      	mov	r3, r0
 8001038:	b29b      	uxth	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <StartLEDStripesTask+0x228>)
 8001040:	f004 fe5c 	bl	8005cfc <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8001044:	200a      	movs	r0, #10
 8001046:	f001 fdf9 	bl	8002c3c <HAL_Delay>
	  vTaskSuspend(NULL);
 800104a:	e793      	b.n	8000f74 <StartLEDStripesTask+0x14c>
 800104c:	20000043 	.word	0x20000043
 8001050:	200001b4 	.word	0x200001b4
 8001054:	200007a4 	.word	0x200007a4
 8001058:	0800cb9c 	.word	0x0800cb9c
 800105c:	200000de 	.word	0x200000de
 8001060:	200000dd 	.word	0x200000dd

08001064 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800106c:	2000      	movs	r0, #0
 800106e:	f008 fe4f 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <StartLeftBlinkersTask+0x48>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <StartLeftBlinkersTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <StartLeftBlinkersTask+0x4c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f008 fef1 	bl	8009e68 <vTaskResume>
	  }

	  // Left blinkers effect
	  for(int i = 0; i < 6; i ++) {
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e00b      	b.n	80010a4 <StartLeftBlinkersTask+0x40>
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <StartLeftBlinkersTask+0x50>)
 8001092:	f002 fdfe 	bl	8003c92 <HAL_GPIO_TogglePin>
		  osDelay(BLINKERS_DURATION);
 8001096:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800109a:	f007 fd49 	bl	8008b30 <osDelay>
	  for(int i = 0; i < 6; i ++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	ddf0      	ble.n	800108c <StartLeftBlinkersTask+0x28>
	  vTaskSuspend(NULL);
 80010aa:	e7df      	b.n	800106c <StartLeftBlinkersTask+0x8>
 80010ac:	200000df 	.word	0x200000df
 80010b0:	20000158 	.word	0x20000158
 80010b4:	40020800 	.word	0x40020800

080010b8 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f008 fe25 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <StartRightBlinkersTask+0x48>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <StartRightBlinkersTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <StartRightBlinkersTask+0x4c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f008 fec7 	bl	8009e68 <vTaskResume>
	  }

	  // Right blinkers effect
	  for(int i = 0; i < 6; i ++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e00b      	b.n	80010f8 <StartRightBlinkersTask+0x40>
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <StartRightBlinkersTask+0x50>)
 80010e6:	f002 fdd4 	bl	8003c92 <HAL_GPIO_TogglePin>
		  osDelay(BLINKERS_DURATION);
 80010ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ee:	f007 fd1f 	bl	8008b30 <osDelay>
	  for(int i = 0; i < 6; i ++) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	ddf0      	ble.n	80010e0 <StartRightBlinkersTask+0x28>
	  vTaskSuspend(NULL);
 80010fe:	e7df      	b.n	80010c0 <StartRightBlinkersTask+0x8>
 8001100:	200000df 	.word	0x200000df
 8001104:	20000158 	.word	0x20000158
 8001108:	40020800 	.word	0x40020800

0800110c <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001114:	2000      	movs	r0, #0
 8001116:	f008 fdfb 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <StartParkLeftTask+0x24>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f7      	beq.n	8001114 <StartParkLeftTask+0x8>
		  vTaskResume(ResumeFromStopTHandle);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <StartParkLeftTask+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fe9d 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 800112e:	e7f1      	b.n	8001114 <StartParkLeftTask+0x8>
 8001130:	200000df 	.word	0x200000df
 8001134:	20000158 	.word	0x20000158

08001138 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001140:	2000      	movs	r0, #0
 8001142:	f008 fde5 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <StartParkRightTask+0x24>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f7      	beq.n	8001140 <StartParkRightTask+0x8>
		  vTaskResume(ResumeFromStopTHandle);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <StartParkRightTask+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f008 fe87 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 800115a:	e7f1      	b.n	8001140 <StartParkRightTask+0x8>
 800115c:	200000df 	.word	0x200000df
 8001160:	20000158 	.word	0x20000158

08001164 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 800116c:	2300      	movs	r3, #0
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <StartAccelerateTask+0x68>)
 8001174:	f001 ff36 	bl	8002fe4 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001178:	2000      	movs	r0, #0
 800117a:	f008 fdc9 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <StartAccelerateTask+0x6c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <StartAccelerateTask+0x2e>
		  vTaskResume(ResumeFromStopTHandle);
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <StartAccelerateTask+0x70>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f008 fe6b 	bl	8009e68 <vTaskResume>
	  }

	  // Accelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue < 4) {
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <StartAccelerateTask+0x74>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b03      	cmp	r3, #3
 8001198:	dc08      	bgt.n	80011ac <StartAccelerateTask+0x48>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <StartAccelerateTask+0x74>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <StartAccelerateTask+0x78>)
 80011a0:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue ++;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <StartAccelerateTask+0x74>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <StartAccelerateTask+0x74>)
 80011aa:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 80011ac:	f7ff fa5c 	bl	8000668 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <StartAccelerateTask+0x74>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dbdf      	blt.n	8001178 <StartAccelerateTask+0x14>
		  isWithdrawing = false;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <StartAccelerateTask+0x7c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <StartAccelerateTask+0x80>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f008 fe50 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 80011c8:	e7d6      	b.n	8001178 <StartAccelerateTask+0x14>
 80011ca:	bf00      	nop
 80011cc:	20000104 	.word	0x20000104
 80011d0:	200000df 	.word	0x200000df
 80011d4:	20000158 	.word	0x20000158
 80011d8:	200000e4 	.word	0x200000e4
 80011dc:	200000e0 	.word	0x200000e0
 80011e0:	200000e8 	.word	0x200000e8
 80011e4:	20000154 	.word	0x20000154

080011e8 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 80011f0:	2300      	movs	r3, #0
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	4819      	ldr	r0, [pc, #100]	; (800125c <StartDecelerateTask+0x74>)
 80011f8:	f001 fef4 	bl	8002fe4 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f008 fd87 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <StartDecelerateTask+0x78>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <StartDecelerateTask+0x2e>
		  vTaskResume(ResumeFromStopTHandle);
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <StartDecelerateTask+0x7c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f008 fe29 	bl	8009e68 <vTaskResume>
	  }

	  // Decelerate if possible
	  if(sliderAccelerateDecelerateCurrentValue > -2) {
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <StartDecelerateTask+0x80>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121e:	db08      	blt.n	8001232 <StartDecelerateTask+0x4a>
		  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <StartDecelerateTask+0x80>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <StartDecelerateTask+0x84>)
 8001226:	6013      	str	r3, [r2, #0]
		  sliderAccelerateDecelerateCurrentValue --;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <StartDecelerateTask+0x80>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <StartDecelerateTask+0x80>)
 8001230:	6013      	str	r3, [r2, #0]
	  }
	  setBLDCMotorSpeed();
 8001232:	f7ff fa19 	bl	8000668 <setBLDCMotorSpeed>

	  // Set withdraw lights appropriately
	  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <StartDecelerateTask+0x80>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db05      	blt.n	800124a <StartDecelerateTask+0x62>
		  vTaskResume(BrakeLightsTaskHandle);
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <StartDecelerateTask+0x88>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f008 fe10 	bl	8009e68 <vTaskResume>
 8001248:	e7d8      	b.n	80011fc <StartDecelerateTask+0x14>
	  } else {
		  isWithdrawing = true;
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <StartDecelerateTask+0x8c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
		  vTaskResume(WithdrawLightsTHandle);
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <StartDecelerateTask+0x90>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f008 fe07 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 800125a:	e7cf      	b.n	80011fc <StartDecelerateTask+0x14>
 800125c:	20000104 	.word	0x20000104
 8001260:	200000df 	.word	0x200000df
 8001264:	20000158 	.word	0x20000158
 8001268:	200000e4 	.word	0x200000e4
 800126c:	200000e0 	.word	0x200000e0
 8001270:	20000150 	.word	0x20000150
 8001274:	200000e8 	.word	0x200000e8
 8001278:	20000154 	.word	0x20000154

0800127c <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001284:	2000      	movs	r0, #0
 8001286:	f008 fd43 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <StartTurnLeftTask+0x50>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <StartTurnLeftTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <StartTurnLeftTask+0x54>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fde5 	bl	8009e68 <vTaskResume>
	  }

	  // Turn left if possible
	  if(sliderLeftRightCurrentValue > -3) {
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <StartTurnLeftTask+0x58>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f113 0f02 	cmn.w	r3, #2
 80012a6:	dbed      	blt.n	8001284 <StartTurnLeftTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <StartTurnLeftTask+0x58>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <StartTurnLeftTask+0x5c>)
 80012ae:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue --;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <StartTurnLeftTask+0x58>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <StartTurnLeftTask+0x58>)
 80012b8:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <StartTurnLeftTask+0x60>)
 80012c2:	f002 fccd 	bl	8003c60 <HAL_GPIO_WritePin>
		  moveStepperMotor();
 80012c6:	f7ff fa59 	bl	800077c <moveStepperMotor>
	  vTaskSuspend(NULL);
 80012ca:	e7db      	b.n	8001284 <StartTurnLeftTask+0x8>
 80012cc:	200000df 	.word	0x200000df
 80012d0:	20000158 	.word	0x20000158
 80012d4:	200000f8 	.word	0x200000f8
 80012d8:	200000f4 	.word	0x200000f4
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f008 fd11 	bl	8009d10 <vTaskSuspend>

	  // Exit stopped state if applicable
	  if(isStopped) {
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <StartTurnRightTask+0x50>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <StartTurnRightTask+0x22>
		  vTaskResume(ResumeFromStopTHandle);
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <StartTurnRightTask+0x54>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f008 fdb3 	bl	8009e68 <vTaskResume>
	  }

	  // Turn right if possible
	  if(sliderLeftRightCurrentValue < 3) {
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <StartTurnRightTask+0x58>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	dcee      	bgt.n	80012e8 <StartTurnRightTask+0x8>
		  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <StartTurnRightTask+0x58>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <StartTurnRightTask+0x5c>)
 8001310:	6013      	str	r3, [r2, #0]
		  sliderLeftRightCurrentValue ++;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <StartTurnRightTask+0x58>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <StartTurnRightTask+0x58>)
 800131a:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <StartTurnRightTask+0x60>)
 8001324:	f002 fc9c 	bl	8003c60 <HAL_GPIO_WritePin>
		  moveStepperMotor();
 8001328:	f7ff fa28 	bl	800077c <moveStepperMotor>
	  vTaskSuspend(NULL);
 800132c:	e7dc      	b.n	80012e8 <StartTurnRightTask+0x8>
 800132e:	bf00      	nop
 8001330:	200000df 	.word	0x200000df
 8001334:	20000158 	.word	0x20000158
 8001338:	200000f8 	.word	0x200000f8
 800133c:	200000f4 	.word	0x200000f4
 8001340:	40020c00 	.word	0x40020c00

08001344 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800134c:	2000      	movs	r0, #0
 800134e:	f008 fcdf 	bl	8009d10 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <StartConnectionTask+0x30>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f241 517c 	movw	r1, #5500	; 0x157c
 800135a:	4618      	mov	r0, r3
 800135c:	f007 fcb0 	bl	8008cc0 <osTimerStart>
	  isConnected = true;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <StartConnectionTask+0x34>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <StartConnectionTask+0x38>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fd7c 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 8001370:	e7ec      	b.n	800134c <StartConnectionTask+0x8>
 8001372:	bf00      	nop
 8001374:	2000015c 	.word	0x2000015c
 8001378:	200000dc 	.word	0x200000dc
 800137c:	20000118 	.word	0x20000118

08001380 <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001388:	2000      	movs	r0, #0
 800138a:	f008 fcc1 	bl	8009d10 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <StartBrakeLightsTask+0x2c>)
 8001394:	f002 fc7d 	bl	8003c92 <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139c:	f007 fbc8 	bl	8008b30 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 80013a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a4:	4801      	ldr	r0, [pc, #4]	; (80013ac <StartBrakeLightsTask+0x2c>)
 80013a6:	f002 fc74 	bl	8003c92 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 80013aa:	e7ed      	b.n	8001388 <StartBrakeLightsTask+0x8>
 80013ac:	40020800 	.word	0x40020800

080013b0 <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f008 fca9 	bl	8009d10 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <StartWithdrawLightsTask+0x34>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <StartWithdrawLightsTask+0x38>)
 80013d0:	f002 fc46 	bl	8003c60 <HAL_GPIO_WritePin>
 80013d4:	e7f0      	b.n	80013b8 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <StartWithdrawLightsTask+0x38>)
 80013de:	f002 fc3f 	bl	8003c60 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 80013e2:	e7e9      	b.n	80013b8 <StartWithdrawLightsTask+0x8>
 80013e4:	200000e8 	.word	0x200000e8
 80013e8:	40020800 	.word	0x40020800

080013ec <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f008 fc8b 	bl	8009d10 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <StartResumeFromStopTask+0x48>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f7      	beq.n	80013f4 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <StartResumeFromStopTask+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <StartResumeFromStopTask+0x4c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <StartResumeFromStopTask+0x50>)
 8001416:	2202      	movs	r2, #2
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e002      	b.n	8001422 <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <StartResumeFromStopTask+0x50>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <StartResumeFromStopTask+0x54>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <StartResumeFromStopTask+0x58>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f008 fd1b 	bl	8009e68 <vTaskResume>
	  vTaskSuspend(NULL);
 8001432:	e7df      	b.n	80013f4 <StartResumeFromStopTask+0x8>
 8001434:	200000df 	.word	0x200000df
 8001438:	200000dd 	.word	0x200000dd
 800143c:	20000043 	.word	0x20000043
 8001440:	200000de 	.word	0x200000de
 8001444:	20000128 	.word	0x20000128

08001448 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <CallbackConnectionTaskTimer+0x2c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f008 fd07 	bl	8009e68 <vTaskResume>
	isConnected = false;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <CallbackConnectionTaskTimer+0x30>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <CallbackConnectionTaskTimer+0x34>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f008 fcff 	bl	8009e68 <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000120 	.word	0x20000120
 8001478:	200000dc 	.word	0x200000dc
 800147c:	20000118 	.word	0x20000118

08001480 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b94      	ldr	r3, [pc, #592]	; (80016e8 <MX_GPIO_Init+0x268>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a93      	ldr	r2, [pc, #588]	; (80016e8 <MX_GPIO_Init+0x268>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b91      	ldr	r3, [pc, #580]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a8d      	ldr	r2, [pc, #564]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a81      	ldr	r2, [pc, #516]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a7b      	ldr	r2, [pc, #492]	; (80016e8 <MX_GPIO_Init+0x268>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <MX_GPIO_Init+0x268>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <MX_GPIO_Init+0x268>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a75      	ldr	r2, [pc, #468]	; (80016e8 <MX_GPIO_Init+0x268>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <MX_GPIO_Init+0x268>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f244 0191 	movw	r1, #16529	; 0x4091
 800152c:	486f      	ldr	r0, [pc, #444]	; (80016ec <MX_GPIO_Init+0x26c>)
 800152e:	f002 fb97 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001538:	486d      	ldr	r0, [pc, #436]	; (80016f0 <MX_GPIO_Init+0x270>)
 800153a:	f002 fb91 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	486c      	ldr	r0, [pc, #432]	; (80016f4 <MX_GPIO_Init+0x274>)
 8001544:	f002 fb8c 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800154e:	486a      	ldr	r0, [pc, #424]	; (80016f8 <MX_GPIO_Init+0x278>)
 8001550:	f002 fb86 	bl	8003c60 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4863      	ldr	r0, [pc, #396]	; (80016f8 <MX_GPIO_Init+0x278>)
 800156c:	f002 f9cc 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001570:	2332      	movs	r3, #50	; 0x32
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001580:	230b      	movs	r3, #11
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	485b      	ldr	r0, [pc, #364]	; (80016f8 <MX_GPIO_Init+0x278>)
 800158c:	f002 f9bc 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001590:	2386      	movs	r3, #134	; 0x86
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a0:	230b      	movs	r3, #11
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4854      	ldr	r0, [pc, #336]	; (80016fc <MX_GPIO_Init+0x27c>)
 80015ac:	f002 f9ac 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 80015b0:	f244 0391 	movw	r3, #16529	; 0x4091
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <MX_GPIO_Init+0x26c>)
 80015ca:	f002 f99d 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e0:	230b      	movs	r3, #11
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4840      	ldr	r0, [pc, #256]	; (80016ec <MX_GPIO_Init+0x26c>)
 80015ec:	f002 f98c 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001602:	2307      	movs	r3, #7
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4838      	ldr	r0, [pc, #224]	; (80016f0 <MX_GPIO_Init+0x270>)
 800160e:	f002 f97b 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8001612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4831      	ldr	r0, [pc, #196]	; (80016f0 <MX_GPIO_Init+0x270>)
 800162c:	f002 f96c 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001630:	2340      	movs	r3, #64	; 0x40
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	482b      	ldr	r0, [pc, #172]	; (80016f4 <MX_GPIO_Init+0x274>)
 8001648:	f002 f95e 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4825      	ldr	r0, [pc, #148]	; (80016f4 <MX_GPIO_Init+0x274>)
 8001660:	f002 f952 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001664:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001668:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	481e      	ldr	r0, [pc, #120]	; (80016f8 <MX_GPIO_Init+0x278>)
 800167e:	f002 f943 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001682:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001694:	230a      	movs	r3, #10
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <MX_GPIO_Init+0x27c>)
 80016a0:	f002 f932 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <MX_GPIO_Init+0x27c>)
 80016ba:	f002 f925 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d0:	230b      	movs	r3, #11
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_GPIO_Init+0x274>)
 80016dc:	f002 f914 	bl	8003908 <HAL_GPIO_Init>

}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020000 	.word	0x40020000

08001700 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_I2C1_Init+0x74>)
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <MX_I2C1_Init+0x78>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_I2C1_Init+0x74>)
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <MX_I2C1_Init+0x7c>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_I2C1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_I2C1_Init+0x74>)
 8001718:	2201      	movs	r2, #1
 800171a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_I2C1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_I2C1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2C1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_I2C1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_I2C1_Init+0x74>)
 800173c:	f002 fac4 	bl	8003cc8 <HAL_I2C_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001746:	f000 f951 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174a:	2100      	movs	r1, #0
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <MX_I2C1_Init+0x74>)
 800174e:	f002 fea5 	bl	800449c <HAL_I2CEx_ConfigAnalogFilter>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001758:	f000 f948 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_I2C1_Init+0x74>)
 8001760:	f002 fee7 	bl	8004532 <HAL_I2CEx_ConfigDigitalFilter>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800176a:	f000 f93f 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000160 	.word	0x20000160
 8001778:	40005400 	.word	0x40005400
 800177c:	20404768 	.word	0x20404768

08001780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ae      	sub	sp, #184	; 0xb8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2290      	movs	r2, #144	; 0x90
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00a fad0 	bl	800bd46 <memset>
  if(i2cHandle->Instance==I2C1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a22      	ldr	r2, [pc, #136]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13c      	bne.n	800182a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fc5a 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017ca:	f000 f90f 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80017e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001800:	2304      	movs	r3, #4
 8001802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800180a:	4619      	mov	r1, r3
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <HAL_I2C_MspInit+0xbc>)
 800180e:	f002 f87b 	bl	8003908 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	37b8      	adds	r7, #184	; 0xb8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400

08001840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001844:	f001 f9cd 	bl	8002be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001848:	f000 f82a 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184c:	f7ff fe18 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8001850:	f7ff f816 	bl	8000880 <MX_DMA_Init>
  MX_SPI1_Init();
 8001854:	f000 f8d0 	bl	80019f8 <MX_SPI1_Init>
  MX_DAC_Init();
 8001858:	f7fe ffa0 	bl	800079c <MX_DAC_Init>
  MX_I2C1_Init();
 800185c:	f7ff ff50 	bl	8001700 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001860:	f000 fd62 	bl	8002328 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001864:	f000 fe12 	bl	800248c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	4909      	ldr	r1, [pc, #36]	; (8001890 <main+0x50>)
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <main+0x54>)
 800186e:	f005 fe07 	bl	8007480 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <main+0x58>)
 8001876:	f001 fb09 	bl	8002e8c <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800187a:	2108      	movs	r1, #8
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <main+0x5c>)
 800187e:	f004 fe8b 	bl	8006598 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001882:	f007 f845 	bl	8008910 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001886:	f7ff f819 	bl	80008bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800188a:	f007 f875 	bl	8008978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800188e:	e7fe      	b.n	800188e <main+0x4e>
 8001890:	200000fc 	.word	0x200000fc
 8001894:	2000071c 	.word	0x2000071c
 8001898:	20000104 	.word	0x20000104
 800189c:	200006d0 	.word	0x200006d0

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	2234      	movs	r2, #52	; 0x34
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00a fa49 	bl	800bd46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <SystemClock_Config+0xd4>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <SystemClock_Config+0xd4>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <SystemClock_Config+0xd4>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <SystemClock_Config+0xd8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <SystemClock_Config+0xd8>)
 80018e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <SystemClock_Config+0xd8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fe:	2302      	movs	r3, #2
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001908:	2304      	movs	r3, #4
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800190c:	23d8      	movs	r3, #216	; 0xd8
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fea3 	bl	800466c <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800192c:	f000 f85e 	bl	80019ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001930:	f002 fe4c 	bl	80045cc <HAL_PWREx_EnableOverDrive>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800193a:	f000 f857 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193e:	230f      	movs	r3, #15
 8001940:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001942:	2302      	movs	r3, #2
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800194a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2107      	movs	r1, #7
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f933 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001968:	f000 f840 	bl	80019ec <Error_Handler>
  }
}
 800196c:	bf00      	nop
 800196e:	3750      	adds	r7, #80	; 0x50
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000

0800197c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_UART_RxCpltCallback+0x3c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f008 facd 	bl	8009f28 <xTaskResumeFromISR>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_UART_RxCpltCallback+0x28>
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_UART_RxCpltCallback+0x40>)
 8001996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 80019a4:	2201      	movs	r2, #1
 80019a6:	4906      	ldr	r1, [pc, #24]	; (80019c0 <HAL_UART_RxCpltCallback+0x44>)
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_UART_RxCpltCallback+0x48>)
 80019aa:	f005 fd69 	bl	8007480 <HAL_UART_Receive_IT>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000011c 	.word	0x2000011c
 80019bc:	e000ed04 	.word	0xe000ed04
 80019c0:	200000fc 	.word	0x200000fc
 80019c4:	2000071c 	.word	0x2000071c

080019c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019da:	f001 f90f 	bl	8002bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40001000 	.word	0x40001000

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_SPI1_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <MX_SPI1_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a30:	2218      	movs	r2, #24
 8001a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a54:	2208      	movs	r2, #8
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a5a:	f003 ff35 	bl	80058c8 <HAL_SPI_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001a64:	f7ff ffc2 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001b4 	.word	0x200001b4
 8001a70:	40013000 	.word	0x40013000

08001a74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_SPI_MspInit+0x110>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d171      	bne.n	8001b7a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a35      	ldr	r2, [pc, #212]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_SPI_MspInit+0x114>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aee:	2305      	movs	r3, #5
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4824      	ldr	r0, [pc, #144]	; (8001b8c <HAL_SPI_MspInit+0x118>)
 8001afa:	f001 ff05 	bl	8003908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	481d      	ldr	r0, [pc, #116]	; (8001b90 <HAL_SPI_MspInit+0x11c>)
 8001b1a:	f001 fef5 	bl	8003908 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_SPI_MspInit+0x124>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b26:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b60:	f001 fac8 	bl	80030f4 <HAL_DMA_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001b6a:	f7ff ff3f 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_SPI_MspInit+0x120>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40013000 	.word	0x40013000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	20000218 	.word	0x20000218
 8001b98:	40026458 	.word	0x40026458

08001b9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2178      	movs	r1, #120	; 0x78
 8001bca:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <ssd1306_WriteCommand+0x2c>)
 8001bcc:	f002 f90c 	bl	8003de8 <HAL_I2C_Mem_Write>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000160 	.word	0x20000160

08001bdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	9202      	str	r2, [sp, #8]
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2240      	movs	r2, #64	; 0x40
 8001bfa:	2178      	movs	r1, #120	; 0x78
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <ssd1306_WriteData+0x30>)
 8001bfe:	f002 f8f3 	bl	8003de8 <HAL_I2C_Mem_Write>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000160 	.word	0x20000160

08001c10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c14:	f7ff ffc2 	bl	8001b9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c18:	2064      	movs	r0, #100	; 0x64
 8001c1a:	f001 f80f 	bl	8002c3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f000 f9ce 	bl	8001fc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c24:	2020      	movs	r0, #32
 8001c26:	f7ff ffc1 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ffbe 	bl	8001bac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c30:	20b0      	movs	r0, #176	; 0xb0
 8001c32:	f7ff ffbb 	bl	8001bac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c36:	20c8      	movs	r0, #200	; 0xc8
 8001c38:	f7ff ffb8 	bl	8001bac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ffb5 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c42:	2010      	movs	r0, #16
 8001c44:	f7ff ffb2 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c48:	2040      	movs	r0, #64	; 0x40
 8001c4a:	f7ff ffaf 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c4e:	20ff      	movs	r0, #255	; 0xff
 8001c50:	f000 f9a2 	bl	8001f98 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c54:	20a1      	movs	r0, #161	; 0xa1
 8001c56:	f7ff ffa9 	bl	8001bac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c5a:	20a6      	movs	r0, #166	; 0xa6
 8001c5c:	f7ff ffa6 	bl	8001bac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c60:	20a8      	movs	r0, #168	; 0xa8
 8001c62:	f7ff ffa3 	bl	8001bac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c66:	203f      	movs	r0, #63	; 0x3f
 8001c68:	f7ff ffa0 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c6c:	20a4      	movs	r0, #164	; 0xa4
 8001c6e:	f7ff ff9d 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c72:	20d3      	movs	r0, #211	; 0xd3
 8001c74:	f7ff ff9a 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff ff97 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c7e:	20d5      	movs	r0, #213	; 0xd5
 8001c80:	f7ff ff94 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c84:	20f0      	movs	r0, #240	; 0xf0
 8001c86:	f7ff ff91 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c8a:	20d9      	movs	r0, #217	; 0xd9
 8001c8c:	f7ff ff8e 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c90:	2022      	movs	r0, #34	; 0x22
 8001c92:	f7ff ff8b 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c96:	20da      	movs	r0, #218	; 0xda
 8001c98:	f7ff ff88 	bl	8001bac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c9c:	2012      	movs	r0, #18
 8001c9e:	f7ff ff85 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ca2:	20db      	movs	r0, #219	; 0xdb
 8001ca4:	f7ff ff82 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ca8:	2020      	movs	r0, #32
 8001caa:	f7ff ff7f 	bl	8001bac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cae:	208d      	movs	r0, #141	; 0x8d
 8001cb0:	f7ff ff7c 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cb4:	2014      	movs	r0, #20
 8001cb6:	f7ff ff79 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 f980 	bl	8001fc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 f80f 	bl	8001ce4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cc6:	f000 f825 	bl	8001d14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <ssd1306_Init+0xd0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <ssd1306_Init+0xd0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cd6:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <ssd1306_Init+0xd0>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	711a      	strb	r2, [r3, #4]
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000678 	.word	0x20000678

08001ce4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <ssd1306_Fill+0x14>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <ssd1306_Fill+0x16>
 8001cf8:	23ff      	movs	r3, #255	; 0xff
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <ssd1306_Fill+0x2c>)
 8001d02:	f00a f820 	bl	800bd46 <memset>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000278 	.word	0x20000278

08001d14 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e016      	b.n	8001d4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	3b50      	subs	r3, #80	; 0x50
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff40 	bl	8001bac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff ff3d 	bl	8001bac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d32:	2010      	movs	r0, #16
 8001d34:	f7ff ff3a 	bl	8001bac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <ssd1306_UpdateScreen+0x4c>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff4a 	bl	8001bdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d9e5      	bls.n	8001d20 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000278 	.word	0x20000278

08001d64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	71bb      	strb	r3, [r7, #6]
 8001d72:	4613      	mov	r3, r2
 8001d74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db3d      	blt.n	8001dfa <ssd1306_DrawPixel+0x96>
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	2b3f      	cmp	r3, #63	; 0x3f
 8001d82:	d83a      	bhi.n	8001dfa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d11a      	bne.n	8001dc0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d8a:	79fa      	ldrb	r2, [r7, #7]
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	01db      	lsls	r3, r3, #7
 8001d96:	4413      	add	r3, r2
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <ssd1306_DrawPixel+0xa4>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	b25a      	sxtb	r2, r3
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b259      	sxtb	r1, r3
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	4603      	mov	r3, r0
 8001db4:	01db      	lsls	r3, r3, #7
 8001db6:	4413      	add	r3, r2
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <ssd1306_DrawPixel+0xa4>)
 8001dbc:	54d1      	strb	r1, [r2, r3]
 8001dbe:	e01d      	b.n	8001dfc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	b2d8      	uxtb	r0, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	01db      	lsls	r3, r3, #7
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <ssd1306_DrawPixel+0xa4>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	4013      	ands	r3, r2
 8001de8:	b259      	sxtb	r1, r3
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4603      	mov	r3, r0
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	4413      	add	r3, r2
 8001df2:	b2c9      	uxtb	r1, r1
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <ssd1306_DrawPixel+0xa4>)
 8001df6:	54d1      	strb	r1, [r2, r3]
 8001df8:	e000      	b.n	8001dfc <ssd1306_DrawPixel+0x98>
        return;
 8001dfa:	bf00      	nop
    }
}
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000278 	.word	0x20000278

08001e0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4604      	mov	r4, r0
 8001e14:	1d38      	adds	r0, r7, #4
 8001e16:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4623      	mov	r3, r4
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	4613      	mov	r3, r2
 8001e22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b1f      	cmp	r3, #31
 8001e28:	d902      	bls.n	8001e30 <ssd1306_WriteChar+0x24>
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b7e      	cmp	r3, #126	; 0x7e
 8001e2e:	d901      	bls.n	8001e34 <ssd1306_WriteChar+0x28>
        return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e06d      	b.n	8001f10 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	793b      	ldrb	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	dc06      	bgt.n	8001e50 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	461a      	mov	r2, r3
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	dd01      	ble.n	8001e54 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e05d      	b.n	8001f10 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e04c      	b.n	8001ef4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3b20      	subs	r3, #32
 8001e60:	7979      	ldrb	r1, [r7, #5]
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	e034      	b.n	8001ee4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	b2d8      	uxtb	r0, r3
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	7bba      	ldrb	r2, [r7, #14]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7ff ff5b 	bl	8001d64 <ssd1306_DrawPixel>
 8001eae:	e016      	b.n	8001ede <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2d8      	uxtb	r0, r3
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001ec0:	885b      	ldrh	r3, [r3, #2]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b2d9      	uxtb	r1, r3
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f7ff ff43 	bl	8001d64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	793b      	ldrb	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d3c5      	bcc.n	8001e7a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	797b      	ldrb	r3, [r7, #5]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d3ad      	bcc.n	8001e5a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	793b      	ldrb	r3, [r7, #4]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <ssd1306_WriteChar+0x10c>)
 8001f0c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	20000678 	.word	0x20000678

08001f1c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	1d38      	adds	r0, r7, #4
 8001f26:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f2a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001f2c:	e012      	b.n	8001f54 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	7818      	ldrb	r0, [r3, #0]
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	1d3a      	adds	r2, r7, #4
 8001f36:	ca06      	ldmia	r2, {r1, r2}
 8001f38:	f7ff ff68 	bl	8001e0c <ssd1306_WriteChar>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d002      	beq.n	8001f4e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	e008      	b.n	8001f60 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e8      	bne.n	8001f2e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <ssd1306_SetCursor+0x2c>)
 8001f7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <ssd1306_SetCursor+0x2c>)
 8001f86:	805a      	strh	r2, [r3, #2]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20000678 	.word	0x20000678

08001f98 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001fa2:	2381      	movs	r3, #129	; 0x81
 8001fa4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fdff 	bl	8001bac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fdfb 	bl	8001bac <ssd1306_WriteCommand>
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001fd0:	23af      	movs	r3, #175	; 0xaf
 8001fd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <ssd1306_SetDisplayOn+0x38>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	715a      	strb	r2, [r3, #5]
 8001fda:	e004      	b.n	8001fe6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001fdc:	23ae      	movs	r3, #174	; 0xae
 8001fde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <ssd1306_SetDisplayOn+0x38>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fddf 	bl	8001bac <ssd1306_WriteCommand>
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000678 	.word	0x20000678

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_MspInit+0x4c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_MspInit+0x4c>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_MspInit+0x4c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_MspInit+0x4c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_MspInit+0x4c>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	210f      	movs	r1, #15
 8002036:	f06f 0001 	mvn.w	r0, #1
 800203a:	f000 fedb 	bl	8002df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	; 0x38
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <HAL_InitTick+0xe0>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_InitTick+0xe0>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_InitTick+0xe0>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002074:	f107 0210 	add.w	r2, r7, #16
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f002 ffc8 	bl	8005014 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800208e:	f002 ff99 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8002092:	6378      	str	r0, [r7, #52]	; 0x34
 8002094:	e004      	b.n	80020a0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002096:	f002 ff95 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 800209a:	4603      	mov	r3, r0
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_InitTick+0xe4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9b      	lsrs	r3, r3, #18
 80020aa:	3b01      	subs	r3, #1
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_InitTick+0xe8>)
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <HAL_InitTick+0xec>)
 80020b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_InitTick+0xe8>)
 80020b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_InitTick+0xe8>)
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_InitTick+0xe8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_InitTick+0xe8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_InitTick+0xe8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020d4:	4817      	ldr	r0, [pc, #92]	; (8002134 <HAL_InitTick+0xe8>)
 80020d6:	f004 f92d 	bl	8006334 <HAL_TIM_Base_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11b      	bne.n	8002120 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020e8:	4812      	ldr	r0, [pc, #72]	; (8002134 <HAL_InitTick+0xe8>)
 80020ea:	f004 f985 	bl	80063f8 <HAL_TIM_Base_Start_IT>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020fc:	2036      	movs	r0, #54	; 0x36
 80020fe:	f000 fe95 	bl	8002e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d808      	bhi.n	800211a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	2036      	movs	r0, #54	; 0x36
 800210e:	f000 fe71 	bl	8002df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_InitTick+0xf0>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e002      	b.n	8002120 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002124:	4618      	mov	r0, r3
 8002126:	3738      	adds	r7, #56	; 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	431bde83 	.word	0x431bde83
 8002134:	20000680 	.word	0x20000680
 8002138:	40001000 	.word	0x40001000
 800213c:	20000058 	.word	0x20000058

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <NMI_Handler+0x4>

08002146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <MemManage_Handler+0x4>

08002152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <UsageFault_Handler+0x4>

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <TIM6_DAC_IRQHandler+0x20>)
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800217a:	4804      	ldr	r0, [pc, #16]	; (800218c <TIM6_DAC_IRQHandler+0x20>)
 800217c:	f000 fed8 	bl	8002f30 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <TIM6_DAC_IRQHandler+0x24>)
 8002182:	f004 fb03 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000104 	.word	0x20000104
 8002190:	20000680 	.word	0x20000680

08002194 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA2_Stream3_IRQHandler+0x10>)
 800219a:	f001 f94b 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000218 	.word	0x20000218

080021a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <USART6_IRQHandler+0x10>)
 80021ae:	f005 f9ab 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000071c 	.word	0x2000071c

080021bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e00a      	b.n	80021e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ce:	f3af 8000 	nop.w
 80021d2:	4601      	mov	r1, r0
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	b2ca      	uxtb	r2, r1
 80021dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dbf0      	blt.n	80021ce <_read+0x12>
  }

  return len;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e009      	b.n	800221c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf1      	blt.n	8002208 <_write+0x12>
  }
  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_close>:

int _close(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002256:	605a      	str	r2, [r3, #4]
  return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_isatty>:

int _isatty(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f009 fdf0 	bl	800beac <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20080000 	.word	0x20080000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	200006cc 	.word	0x200006cc
 8002300:	20005318 	.word	0x20005318

08002304 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <MX_TIM4_Init+0xac>)
 800234e:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <MX_TIM4_Init+0xb0>)
 8002350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <MX_TIM4_Init+0xac>)
 8002354:	221f      	movs	r2, #31
 8002356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_TIM4_Init+0xac>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <MX_TIM4_Init+0xac>)
 8002360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_TIM4_Init+0xac>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <MX_TIM4_Init+0xac>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002372:	4818      	ldr	r0, [pc, #96]	; (80023d4 <MX_TIM4_Init+0xac>)
 8002374:	f004 f8b8 	bl	80064e8 <HAL_TIM_PWM_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800237e:	f7ff fb35 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4810      	ldr	r0, [pc, #64]	; (80023d4 <MX_TIM4_Init+0xac>)
 8002392:	f004 ff7b 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800239c:	f7ff fb26 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a0:	2360      	movs	r3, #96	; 0x60
 80023a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b0:	463b      	mov	r3, r7
 80023b2:	2208      	movs	r2, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	4807      	ldr	r0, [pc, #28]	; (80023d4 <MX_TIM4_Init+0xac>)
 80023b8:	f004 fb08 	bl	80069cc <HAL_TIM_PWM_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80023c2:	f7ff fb13 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023c6:	4803      	ldr	r0, [pc, #12]	; (80023d4 <MX_TIM4_Init+0xac>)
 80023c8:	f000 f828 	bl	800241c <HAL_TIM_MspPostInit>

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200006d0 	.word	0x200006d0
 80023d8:	40000800 	.word	0x40000800

080023dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_TIM_PWM_MspInit+0x38>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10b      	bne.n	8002406 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_TIM_PWM_MspInit+0x3c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40000800 	.word	0x40000800
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_TIM_MspPostInit+0x64>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11c      	bne.n	8002478 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 8002456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002468:	2302      	movs	r3, #2
 800246a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_TIM_MspPostInit+0x6c>)
 8002474:	f001 fa48 	bl	8003908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40000800 	.word	0x40000800
 8002484:	40023800 	.word	0x40023800
 8002488:	40020c00 	.word	0x40020c00

0800248c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <MX_USART6_UART_Init+0x5c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_USART6_UART_Init+0x58>)
 80024d0:	f004 ff88 	bl	80073e4 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80024da:	f7ff fa87 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000071c 	.word	0x2000071c
 80024e8:	40011400 	.word	0x40011400

080024ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0ae      	sub	sp, #184	; 0xb8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2290      	movs	r2, #144	; 0x90
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f009 fc1a 	bl	800bd46 <memset>
  if(uartHandle->Instance==USART6)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_UART_MspInit+0xc4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d144      	bne.n	80025a6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800251c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002522:	2300      	movs	r3, #0
 8002524:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fda4 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002536:	f7ff fa59 	bl	80019ec <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 800256a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002584:	2308      	movs	r3, #8
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800258a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800258e:	4619      	mov	r1, r3
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002592:	f001 f9b9 	bl	8003908 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2105      	movs	r1, #5
 800259a:	2047      	movs	r0, #71	; 0x47
 800259c:	f000 fc2a 	bl	8002df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025a0:	2047      	movs	r0, #71	; 0x47
 80025a2:	f000 fc43 	bl	8002e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80025a6:	bf00      	nop
 80025a8:	37b8      	adds	r7, #184	; 0xb8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40021800 	.word	0x40021800

080025bc <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 80025c4:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <ws2812b_init+0x1f4>)
 80025c6:	4a7b      	ldr	r2, [pc, #492]	; (80027b4 <ws2812b_init+0x1f8>)
 80025c8:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 80025ca:	4b7a      	ldr	r3, [pc, #488]	; (80027b4 <ws2812b_init+0x1f8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <ws2812b_init+0x30>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d005      	beq.n	80025ec <ws2812b_init+0x30>
 80025e0:	4875      	ldr	r0, [pc, #468]	; (80027b8 <ws2812b_init+0x1fc>)
 80025e2:	f000 f9f5 	bl	80029d0 <set_init_error_msg>
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e17f      	b.n	80028ec <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	789b      	ldrb	r3, [r3, #2]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d01d      	beq.n	8002630 <ws2812b_init+0x74>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	789b      	ldrb	r3, [r3, #2]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d019      	beq.n	8002630 <ws2812b_init+0x74>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	2b07      	cmp	r3, #7
 8002602:	d015      	beq.n	8002630 <ws2812b_init+0x74>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	789b      	ldrb	r3, [r3, #2]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d011      	beq.n	8002630 <ws2812b_init+0x74>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	2b3f      	cmp	r3, #63	; 0x3f
 8002612:	d00d      	beq.n	8002630 <ws2812b_init+0x74>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	789b      	ldrb	r3, [r3, #2]
 8002618:	2b1f      	cmp	r3, #31
 800261a:	d009      	beq.n	8002630 <ws2812b_init+0x74>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	789b      	ldrb	r3, [r3, #2]
 8002620:	2b7f      	cmp	r3, #127	; 0x7f
 8002622:	d005      	beq.n	8002630 <ws2812b_init+0x74>
 8002624:	4865      	ldr	r0, [pc, #404]	; (80027bc <ws2812b_init+0x200>)
 8002626:	f000 f9d3 	bl	80029d0 <set_init_error_msg>
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	e15d      	b.n	80028ec <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d01d      	beq.n	8002674 <ws2812b_init+0xb8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d019      	beq.n	8002674 <ws2812b_init+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	785b      	ldrb	r3, [r3, #1]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d015      	beq.n	8002674 <ws2812b_init+0xb8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d011      	beq.n	8002674 <ws2812b_init+0xb8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b3f      	cmp	r3, #63	; 0x3f
 8002656:	d00d      	beq.n	8002674 <ws2812b_init+0xb8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	2b1f      	cmp	r3, #31
 800265e:	d009      	beq.n	8002674 <ws2812b_init+0xb8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b7f      	cmp	r3, #127	; 0x7f
 8002666:	d005      	beq.n	8002674 <ws2812b_init+0xb8>
 8002668:	4855      	ldr	r0, [pc, #340]	; (80027c0 <ws2812b_init+0x204>)
 800266a:	f000 f9b1 	bl	80029d0 <set_init_error_msg>
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e13b      	b.n	80028ec <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	78db      	ldrb	r3, [r3, #3]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <ws2812b_init+0xd4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <ws2812b_init+0xd4>
 8002684:	484f      	ldr	r0, [pc, #316]	; (80027c4 <ws2812b_init+0x208>)
 8002686:	f000 f9a3 	bl	80029d0 <set_init_error_msg>
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e12d      	b.n	80028ec <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d009      	beq.n	80026ac <ws2812b_init+0xf0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <ws2812b_init+0xf0>
 80026a0:	4849      	ldr	r0, [pc, #292]	; (80027c8 <ws2812b_init+0x20c>)
 80026a2:	f000 f995 	bl	80029d0 <set_init_error_msg>
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e11f      	b.n	80028ec <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	789a      	ldrb	r2, [r3, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d805      	bhi.n	80026c4 <ws2812b_init+0x108>
 80026b8:	4844      	ldr	r0, [pc, #272]	; (80027cc <ws2812b_init+0x210>)
 80026ba:	f000 f989 	bl	80029d0 <set_init_error_msg>
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e113      	b.n	80028ec <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d109      	bne.n	80026e0 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	789b      	ldrb	r3, [r3, #2]
 80026d0:	2b0e      	cmp	r3, #14
 80026d2:	d905      	bls.n	80026e0 <ws2812b_init+0x124>
 80026d4:	483e      	ldr	r0, [pc, #248]	; (80027d0 <ws2812b_init+0x214>)
 80026d6:	f000 f97b 	bl	80029d0 <set_init_error_msg>
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e105      	b.n	80028ec <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	789b      	ldrb	r3, [r3, #2]
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	791b      	ldrb	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 80e9 	bne.w	80028e4 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d15c      	bne.n	80027d4 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e5b      	ldrb	r3, [r3, #25]
 800271e:	10db      	asrs	r3, r3, #3
 8002720:	b25b      	sxtb	r3, r3
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	b25a      	sxtb	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7e5b      	ldrb	r3, [r3, #25]
 800272c:	105b      	asrs	r3, r3, #1
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	b25b      	sxtb	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b25a      	sxtb	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7e5b      	ldrb	r3, [r3, #25]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	b25b      	sxtb	r3, r3
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	b25b      	sxtb	r3, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	b25a      	sxtb	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7e5b      	ldrb	r3, [r3, #25]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	b25b      	sxtb	r3, r3
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	b25b      	sxtb	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b25b      	sxtb	r3, r3
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	10db      	asrs	r3, r3, #3
 800276a:	b25b      	sxtb	r3, r3
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	b25a      	sxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7e1b      	ldrb	r3, [r3, #24]
 8002776:	105b      	asrs	r3, r3, #1
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	b25b      	sxtb	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b25a      	sxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	b25b      	sxtb	r3, r3
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	b25b      	sxtb	r3, r3
 8002792:	4313      	orrs	r3, r2
 8002794:	b25a      	sxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7e1b      	ldrb	r3, [r3, #24]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	b25b      	sxtb	r3, r3
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	761a      	strb	r2, [r3, #24]
 80027ae:	e099      	b.n	80028e4 <ws2812b_init+0x328>
 80027b0:	200007a4 	.word	0x200007a4
 80027b4:	200007a8 	.word	0x200007a8
 80027b8:	0800cbbc 	.word	0x0800cbbc
 80027bc:	0800cbe0 	.word	0x0800cbe0
 80027c0:	0800cc08 	.word	0x0800cc08
 80027c4:	0800cc30 	.word	0x0800cc30
 80027c8:	0800cc58 	.word	0x0800cc58
 80027cc:	0800cc84 	.word	0x0800cc84
 80027d0:	0800ccb8 	.word	0x0800ccb8
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7e5b      	ldrb	r3, [r3, #25]
 80027d8:	09db      	lsrs	r3, r3, #7
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e5b      	ldrb	r3, [r3, #25]
 80027e2:	115b      	asrs	r3, r3, #5
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e5b      	ldrb	r3, [r3, #25]
 80027f4:	10db      	asrs	r3, r3, #3
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b25a      	sxtb	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7e5b      	ldrb	r3, [r3, #25]
 8002806:	105b      	asrs	r3, r3, #1
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	b25b      	sxtb	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b25a      	sxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	b25b      	sxtb	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b25a      	sxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e5b      	ldrb	r3, [r3, #25]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	b25b      	sxtb	r3, r3
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	b25b      	sxtb	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b25a      	sxtb	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e5b      	ldrb	r3, [r3, #25]
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	b25b      	sxtb	r3, r3
 8002846:	4313      	orrs	r3, r2
 8002848:	b25a      	sxtb	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7e5b      	ldrb	r3, [r3, #25]
 800284e:	01db      	lsls	r3, r3, #7
 8002850:	b25b      	sxtb	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	b25b      	sxtb	r3, r3
 8002856:	b2da      	uxtb	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e1b      	ldrb	r3, [r3, #24]
 8002860:	09db      	lsrs	r3, r3, #7
 8002862:	b2db      	uxtb	r3, r3
 8002864:	b25a      	sxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7e1b      	ldrb	r3, [r3, #24]
 800286a:	115b      	asrs	r3, r3, #5
 800286c:	b25b      	sxtb	r3, r3
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	b25b      	sxtb	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b25a      	sxtb	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7e1b      	ldrb	r3, [r3, #24]
 800287c:	10db      	asrs	r3, r3, #3
 800287e:	b25b      	sxtb	r3, r3
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	b25b      	sxtb	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b25a      	sxtb	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7e1b      	ldrb	r3, [r3, #24]
 800288e:	105b      	asrs	r3, r3, #1
 8002890:	b25b      	sxtb	r3, r3
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	b25b      	sxtb	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b25a      	sxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b25a      	sxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e1b      	ldrb	r3, [r3, #24]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25a      	sxtb	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7e1b      	ldrb	r3, [r3, #24]
 80028c4:	015b      	lsls	r3, r3, #5
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b25a      	sxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7e1b      	ldrb	r3, [r3, #24]
 80028d6:	01db      	lsls	r3, r3, #7
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]

  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <ws2812b_required_buffer_len+0x18>
 8002908:	2318      	movs	r3, #24
 800290a:	e000      	b.n	800290e <ws2812b_required_buffer_len+0x1a>
 800290c:	230c      	movs	r3, #12
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	441a      	add	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	e008      	b.n	8002952 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	3301      	adds	r3, #1
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3f1      	bcc.n	8002940 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e01a      	b.n	8002998 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	463a      	mov	r2, r7
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f85a 	bl	8002a24 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	463a      	mov	r2, r7
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f853 	bl	8002a24 <add_byte>
    add_byte(ws, led->blue, &buffer);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	789b      	ldrb	r3, [r3, #2]
 8002982:	463a      	mov	r2, r7
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f84c 	bl	8002a24 <add_byte>
    led++;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3303      	adds	r3, #3
 8002990:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3df      	bcc.n	8002962 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	e008      	b.n	80029ba <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
    buffer++;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3f1      	bcc.n	80029a8 <ws2812b_fill_buffer+0x7e>
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 80029dc:	e00b      	b.n	80029f6 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	7819      	ldrb	r1, [r3, #0]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <set_init_error_msg+0x50>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	460a      	mov	r2, r1
 80029ee:	701a      	strb	r2, [r3, #0]
    i++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b3a      	cmp	r3, #58	; 0x3a
 80029fa:	dc05      	bgt.n	8002a08 <set_init_error_msg+0x38>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ea      	bne.n	80029de <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002a08:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <set_init_error_msg+0x50>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200007a8 	.word	0x200007a8

08002a24 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d118      	bne.n	8002a6c <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e011      	b.n	8002a64 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f844 	bl	8002ad8 <construct_double_pulse>
 8002a50:	4603      	mov	r3, r0
 8002a52:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3302      	adds	r3, #2
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b07      	cmp	r3, #7
 8002a68:	d9ea      	bls.n	8002a40 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002a6a:	e017      	b.n	8002a9c <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e011      	b.n	8002a96 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681c      	ldr	r4, [r3, #0]
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6939      	ldr	r1, [r7, #16]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f811 	bl	8002aa4 <construct_single_pulse>
 8002a82:	4603      	mov	r3, r0
 8002a84:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3301      	adds	r3, #1
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d9ea      	bls.n	8002a72 <add_byte+0x4e>
}
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}

08002aa4 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002ab2:	79fa      	ldrb	r2, [r7, #7]
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <construct_single_pulse+0x24>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	7e1b      	ldrb	r3, [r3, #24]
 8002ac6:	e001      	b.n	8002acc <construct_single_pulse+0x28>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	7e5b      	ldrb	r3, [r3, #25]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	7e1b      	ldrb	r3, [r3, #24]
 8002aea:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	7e5b      	ldrb	r3, [r3, #25]
 8002af0:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d121      	bne.n	8002b3e <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	fa21 f303 	lsr.w	r3, r1, r3
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <construct_double_pulse+0x38>
 8002b0c:	7dbb      	ldrb	r3, [r7, #22]
 8002b0e:	e000      	b.n	8002b12 <construct_double_pulse+0x3a>
 8002b10:	7d7b      	ldrb	r3, [r7, #21]
 8002b12:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002b14:	79fa      	ldrb	r2, [r7, #7]
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <construct_double_pulse+0x54>
 8002b24:	7dbb      	ldrb	r3, [r7, #22]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	e002      	b.n	8002b32 <construct_double_pulse+0x5a>
 8002b2c:	7d7b      	ldrb	r3, [r7, #21]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	75fb      	strb	r3, [r7, #23]
 8002b3c:	e020      	b.n	8002b80 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	fa21 f303 	lsr.w	r3, r1, r3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <construct_double_pulse+0x7a>
 8002b4e:	7dbb      	ldrb	r3, [r7, #22]
 8002b50:	e000      	b.n	8002b54 <construct_double_pulse+0x7c>
 8002b52:	7d7b      	ldrb	r3, [r7, #21]
 8002b54:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <construct_double_pulse+0x98>
 8002b68:	7dbb      	ldrb	r3, [r7, #22]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	e002      	b.n	8002b76 <construct_double_pulse+0x9e>
 8002b70:	7d7b      	ldrb	r3, [r7, #21]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b96:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bac:	4c0b      	ldr	r4, [pc, #44]	; (8002bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bba:	f7ff fba3 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f009 f97b 	bl	800beb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7fe fe3d 	bl	8001840 <main>
  bx  lr    
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002bd4:	0800e4a4 	.word	0x0800e4a4
  ldr r2, =_sbss
 8002bd8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002bdc:	20005314 	.word	0x20005314

08002be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>

08002be2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be6:	2003      	movs	r0, #3
 8002be8:	f000 f8f9 	bl	8002dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bec:	2005      	movs	r0, #5
 8002bee:	f7ff fa2d 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf2:	f7ff fa03 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x20>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_IncTick+0x24>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_IncTick+0x24>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000005c 	.word	0x2000005c
 8002c20:	200007e4 	.word	0x200007e4

08002c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetTick+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200007e4 	.word	0x200007e4

08002c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff ffee 	bl	8002c24 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d005      	beq.n	8002c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_Delay+0x44>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c62:	bf00      	nop
 8002c64:	f7ff ffde 	bl	8002c24 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d8f7      	bhi.n	8002c64 <HAL_Delay+0x28>
  {
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000005c 	.word	0x2000005c

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	05fa0000 	.word	0x05fa0000

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff4c 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e06:	f7ff ff61 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7ff ffb1 	bl	8002d78 <NVIC_EncodePriority>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff80 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff54 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e014      	b.n	8002e84 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	791b      	ldrb	r3, [r3, #4]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fcc0 	bl	80007f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	795b      	ldrb	r3, [r3, #5]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DAC_Start+0x16>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e040      	b.n	8002f24 <HAL_DAC_Start+0x98>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002ed6:	2b3c      	cmp	r3, #60	; 0x3c
 8002ed8:	d11d      	bne.n	8002f16 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e014      	b.n	8002f16 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	213c      	movs	r1, #60	; 0x3c
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d107      	bne.n	8002f16 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0202 	orr.w	r2, r2, #2
 8002f14:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	d120      	bne.n	8002f8a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f56:	d118      	bne.n	8002f8a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f852 	bl	800302e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f98:	d120      	bne.n	8002fdc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa8:	d118      	bne.n	8002fdc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f882 	bl	80030e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3308      	adds	r3, #8
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e004      	b.n	8003018 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3314      	adds	r3, #20
 8003016:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	461a      	mov	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	795b      	ldrb	r3, [r3, #5]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_DAC_ConfigChannel+0x18>
 8003056:	2302      	movs	r3, #2
 8003058:	e03c      	b.n	80030d4 <HAL_DAC_ConfigChannel+0x92>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2202      	movs	r2, #2
 8003064:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	22c0      	movs	r2, #192	; 0xc0
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43da      	mvns	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	400a      	ands	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff fd90 	bl	8002c24 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e099      	b.n	8003244 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003130:	e00f      	b.n	8003152 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003132:	f7ff fd77 	bl	8002c24 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b05      	cmp	r3, #5
 800313e:	d908      	bls.n	8003152 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2203      	movs	r2, #3
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e078      	b.n	8003244 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e8      	bne.n	8003132 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_DMA_Init+0x158>)
 800316c:	4013      	ands	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800317e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4313      	orrs	r3, r2
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d117      	bne.n	8003216 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb09 	bl	8003810 <DMA_CheckFifoParam>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003212:	2301      	movs	r3, #1
 8003214:	e016      	b.n	8003244 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fac0 	bl	80037a4 <DMA_CalcBaseAndBitshift>
 8003224:	4603      	mov	r3, r0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	223f      	movs	r2, #63	; 0x3f
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	e010803f 	.word	0xe010803f

08003250 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_DMA_Start_IT+0x26>
 8003272:	2302      	movs	r3, #2
 8003274:	e048      	b.n	8003308 <HAL_DMA_Start_IT+0xb8>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d137      	bne.n	80032fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fa52 	bl	8003748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	223f      	movs	r2, #63	; 0x3f
 80032aa:	409a      	lsls	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0216 	orr.w	r2, r2, #22
 80032be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e005      	b.n	8003306 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7ff fc81 	bl	8002c24 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e052      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_Abort+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	e013      	b.n	80033bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003394:	f7ff fc46 	bl	8002c24 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d90c      	bls.n	80033bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e015      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003440:	4b8e      	ldr	r3, [pc, #568]	; (800367c <HAL_DMA_IRQHandler+0x248>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8e      	ldr	r2, [pc, #568]	; (8003680 <HAL_DMA_IRQHandler+0x24c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2208      	movs	r2, #8
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d043      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2210      	movs	r2, #16
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d024      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e01f      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e016      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	2220      	movs	r2, #32
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 808f 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d136      	bne.n	800364c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0216 	bic.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_DMA_IRQHandler+0x1da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	223f      	movs	r2, #63	; 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
        }
        return;
 800364a:	e079      	b.n	8003740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e02c      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
 800367a:	bf00      	nop
 800367c:	20000054 	.word	0x20000054
 8003680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d023      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e01e      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0210 	bic.w	r2, r2, #16
 80036b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2205      	movs	r2, #5
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d307      	bcc.n	800371c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_DMA_IRQHandler+0x2cc>
 800371a:	e000      	b.n	800371e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800371c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e000      	b.n	8003742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003740:	bf00      	nop
    }
  }
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d108      	bne.n	8003788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003786:	e007      	b.n	8003798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3b10      	subs	r3, #16
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <DMA_CalcBaseAndBitshift+0x60>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <DMA_CalcBaseAndBitshift+0x64>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d908      	bls.n	80037e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037da:	4013      	ands	r3, r2
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
 80037e2:	e006      	b.n	80037f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	aaaaaaab 	.word	0xaaaaaaab
 8003808:	0800e458 	.word	0x0800e458
 800380c:	fffffc00 	.word	0xfffffc00

08003810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11f      	bne.n	800386a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d856      	bhi.n	80038de <DMA_CheckFifoParam+0xce>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <DMA_CheckFifoParam+0x28>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	0800385b 	.word	0x0800385b
 8003840:	08003849 	.word	0x08003849
 8003844:	080038df 	.word	0x080038df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e043      	b.n	80038e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003862:	d140      	bne.n	80038e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e03d      	b.n	80038e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003872:	d121      	bne.n	80038b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d837      	bhi.n	80038ea <DMA_CheckFifoParam+0xda>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x70>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	08003897 	.word	0x08003897
 8003888:	08003891 	.word	0x08003891
 800388c:	080038a9 	.word	0x080038a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e030      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e022      	b.n	80038ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b0:	d11f      	bne.n	80038f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038b6:	e01c      	b.n	80038f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d903      	bls.n	80038c6 <DMA_CheckFifoParam+0xb6>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c4:	e018      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ca:	e015      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e00b      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038de:	bf00      	nop
 80038e0:	e00a      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e008      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e006      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e004      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
    }
  } 
  
  return status; 
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e175      	b.n	8003c14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8164 	bne.w	8003c0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d005      	beq.n	800395e <HAL_GPIO_Init+0x56>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d130      	bne.n	80039c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0201 	and.w	r2, r3, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d017      	beq.n	80039fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d123      	bne.n	8003a50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80be 	beq.w	8003c0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a65      	ldr	r2, [pc, #404]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003aaa:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <HAL_GPIO_Init+0x328>)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_GPIO_Init+0x32c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d037      	beq.n	8003b46 <HAL_GPIO_Init+0x23e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_GPIO_Init+0x330>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d031      	beq.n	8003b42 <HAL_GPIO_Init+0x23a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a56      	ldr	r2, [pc, #344]	; (8003c3c <HAL_GPIO_Init+0x334>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <HAL_GPIO_Init+0x236>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a55      	ldr	r2, [pc, #340]	; (8003c40 <HAL_GPIO_Init+0x338>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d025      	beq.n	8003b3a <HAL_GPIO_Init+0x232>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a54      	ldr	r2, [pc, #336]	; (8003c44 <HAL_GPIO_Init+0x33c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <HAL_GPIO_Init+0x22e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a53      	ldr	r2, [pc, #332]	; (8003c48 <HAL_GPIO_Init+0x340>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d019      	beq.n	8003b32 <HAL_GPIO_Init+0x22a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_GPIO_Init+0x344>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_GPIO_Init+0x226>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a51      	ldr	r2, [pc, #324]	; (8003c50 <HAL_GPIO_Init+0x348>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00d      	beq.n	8003b2a <HAL_GPIO_Init+0x222>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a50      	ldr	r2, [pc, #320]	; (8003c54 <HAL_GPIO_Init+0x34c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <HAL_GPIO_Init+0x21e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4f      	ldr	r2, [pc, #316]	; (8003c58 <HAL_GPIO_Init+0x350>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_GPIO_Init+0x21a>
 8003b1e:	2309      	movs	r3, #9
 8003b20:	e012      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b22:	230a      	movs	r3, #10
 8003b24:	e010      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b26:	2308      	movs	r3, #8
 8003b28:	e00e      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	e00c      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b2e:	2306      	movs	r3, #6
 8003b30:	e00a      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b32:	2305      	movs	r3, #5
 8003b34:	e008      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b36:	2304      	movs	r3, #4
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e004      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b46:	2300      	movs	r3, #0
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f002 0203 	and.w	r2, r2, #3
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	4093      	lsls	r3, r2
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b58:	4935      	ldr	r1, [pc, #212]	; (8003c30 <HAL_GPIO_Init+0x328>)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b66:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b8a:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bde:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	f67f ae86 	bls.w	8003928 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40021400 	.word	0x40021400
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	40021c00 	.word	0x40021c00
 8003c54:	40022000 	.word	0x40022000
 8003c58:	40022400 	.word	0x40022400
 8003c5c:	40013c00 	.word	0x40013c00

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c7c:	e003      	b.n	8003c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd fd46 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e006      	b.n	8003d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d104      	bne.n	8003d62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_I2C_Init+0x11c>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	02008000 	.word	0x02008000

08003de8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	4608      	mov	r0, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	817b      	strh	r3, [r7, #10]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	813b      	strh	r3, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	f040 80f9 	bne.w	8004002 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_I2C_Mem_Write+0x34>
 8003e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0ed      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Mem_Write+0x4e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0e6      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e3e:	f7fe fef1 	bl	8002c24 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f955 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0d1      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	; 0x21
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e88:	88f8      	ldrh	r0, [r7, #6]
 8003e8a:	893a      	ldrh	r2, [r7, #8]
 8003e8c:	8979      	ldrh	r1, [r7, #10]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4603      	mov	r3, r0
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8b9 	bl	8004010 <I2C_RequestMemoryWrite>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0a9      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d90e      	bls.n	8003ed8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8979      	ldrh	r1, [r7, #10]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fab1 	bl	8004438 <I2C_TransferConfig>
 8003ed6:	e00f      	b.n	8003ef8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 faa0 	bl	8004438 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f93f 	bl	8004180 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e07b      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d034      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x1c8>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d130      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2200      	movs	r2, #0
 8003f56:	2180      	movs	r1, #128	; 0x80
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f8d1 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e04d      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2bff      	cmp	r3, #255	; 0xff
 8003f70:	d90e      	bls.n	8003f90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	8979      	ldrh	r1, [r7, #10]
 8003f80:	2300      	movs	r3, #0
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa55 	bl	8004438 <I2C_TransferConfig>
 8003f8e:	e00f      	b.n	8003fb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa44 	bl	8004438 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d19e      	bne.n	8003ef8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f91e 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e01a      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_I2C_Mem_Write+0x224>)
 8003fe2:	400b      	ands	r3, r1
 8003fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	fe00e800 	.word	0xfe00e800

08004010 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4603      	mov	r3, r0
 8004020:	817b      	strh	r3, [r7, #10]
 8004022:	460b      	mov	r3, r1
 8004024:	813b      	strh	r3, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	8979      	ldrh	r1, [r7, #10]
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <I2C_RequestMemoryWrite+0xa4>)
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f9fd 	bl	8004438 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f89c 	bl	8004180 <I2C_WaitOnTXISFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e02c      	b.n	80040ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
 8004062:	e015      	b.n	8004090 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f882 	bl	8004180 <I2C_WaitOnTXISFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e012      	b.n	80040ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004086:	893b      	ldrh	r3, [r7, #8]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2200      	movs	r2, #0
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f830 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	80002000 	.word	0x80002000

080040b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d007      	beq.n	80040f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	619a      	str	r2, [r3, #24]
  }
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	e022      	b.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d01e      	beq.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fd83 	bl	8002c24 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e00f      	b.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	429a      	cmp	r2, r3
 8004174:	d0cd      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800418c:	e02c      	b.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f870 	bl	8004278 <I2C_IsErrorOccurred>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e02a      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d01e      	beq.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fd3b 	bl	8002c24 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d1cb      	bne.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420c:	e028      	b.n	8004260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f830 	bl	8004278 <I2C_IsErrorOccurred>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e026      	b.n	8004270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe fcff 	bl	8002c24 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d113      	bne.n	8004260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	d1cf      	bne.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d068      	beq.n	8004376 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2210      	movs	r2, #16
 80042aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042ac:	e049      	b.n	8004342 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d045      	beq.n	8004342 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe fcb5 	bl	8002c24 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_IsErrorOccurred+0x54>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d13a      	bne.n	8004342 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ee:	d121      	bne.n	8004334 <I2C_IsErrorOccurred+0xbc>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f6:	d01d      	beq.n	8004334 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d01a      	beq.n	8004334 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800430c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800430e:	f7fe fc89 	bl	8002c24 <HAL_GetTick>
 8004312:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004314:	e00e      	b.n	8004334 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004316:	f7fe fc85 	bl	8002c24 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b19      	cmp	r3, #25
 8004322:	d907      	bls.n	8004334 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f043 0320 	orr.w	r3, r3, #32
 800432a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004332:	e006      	b.n	8004342 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	d1e9      	bne.n	8004316 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b20      	cmp	r3, #32
 800434e:	d003      	beq.n	8004358 <I2C_IsErrorOccurred+0xe0>
 8004350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0aa      	beq.n	80042ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2220      	movs	r2, #32
 8004366:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f043 0308 	orr.w	r3, r3, #8
 80043b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01c      	beq.n	8004426 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fe63 	bl	80040b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <I2C_IsErrorOccurred+0x1bc>)
 80043fe:	400b      	ands	r3, r1
 8004400:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	4613      	mov	r3, r2
 8004448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004450:	7a7b      	ldrb	r3, [r7, #9]
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004458:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	4313      	orrs	r3, r2
 8004462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004466:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	0d5b      	lsrs	r3, r3, #21
 8004472:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <I2C_TransferConfig+0x60>)
 8004478:	430b      	orrs	r3, r1
 800447a:	43db      	mvns	r3, r3
 800447c:	ea02 0103 	and.w	r1, r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	03ff63ff 	.word	0x03ff63ff

0800449c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d138      	bne.n	8004524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044bc:	2302      	movs	r3, #2
 80044be:	e032      	b.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d139      	bne.n	80045bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004552:	2302      	movs	r3, #2
 8004554:	e033      	b.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_PWREx_EnableOverDrive+0x98>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <HAL_PWREx_EnableOverDrive+0x98>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_PWREx_EnableOverDrive+0x98>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045ee:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045fa:	f7fe fb13 	bl	8002c24 <HAL_GetTick>
 80045fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004600:	e009      	b.n	8004616 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004602:	f7fe fb0f 	bl	8002c24 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004610:	d901      	bls.n	8004616 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e022      	b.n	800465c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d1ee      	bne.n	8004602 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004630:	f7fe faf8 	bl	8002c24 <HAL_GetTick>
 8004634:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004636:	e009      	b.n	800464c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004638:	f7fe faf4 	bl	8002c24 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004646:	d901      	bls.n	800464c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e007      	b.n	800465c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_PWREx_EnableOverDrive+0x9c>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004658:	d1ee      	bne.n	8004638 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000

0800466c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004674:	2300      	movs	r3, #0
 8004676:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e29b      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8087 	beq.w	800479e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004690:	4b96      	ldr	r3, [pc, #600]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b04      	cmp	r3, #4
 800469a:	d00c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469c:	4b93      	ldr	r3, [pc, #588]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d112      	bne.n	80046ce <HAL_RCC_OscConfig+0x62>
 80046a8:	4b90      	ldr	r3, [pc, #576]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b4:	d10b      	bne.n	80046ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b6:	4b8d      	ldr	r3, [pc, #564]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d06c      	beq.n	800479c <HAL_RCC_OscConfig+0x130>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d168      	bne.n	800479c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e275      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x7a>
 80046d8:	4b84      	ldr	r3, [pc, #528]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a83      	ldr	r2, [pc, #524]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x9c>
 80046ee:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7e      	ldr	r2, [pc, #504]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b7c      	ldr	r3, [pc, #496]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7b      	ldr	r2, [pc, #492]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0xc0>
 8004712:	4b76      	ldr	r3, [pc, #472]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a75      	ldr	r2, [pc, #468]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b73      	ldr	r3, [pc, #460]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a72      	ldr	r2, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xd8>
 800472c:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6e      	ldr	r2, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b6c      	ldr	r3, [pc, #432]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a6b      	ldr	r2, [pc, #428]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fe fa6a 	bl	8002c24 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe fa66 	bl	8002c24 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e229      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b61      	ldr	r3, [pc, #388]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fe fa56 	bl	8002c24 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fe fa52 	bl	8002c24 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e215      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b57      	ldr	r3, [pc, #348]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x110>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d069      	beq.n	800487e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047aa:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b6:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x190>
 80047c2:	4b4a      	ldr	r3, [pc, #296]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b47      	ldr	r3, [pc, #284]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x17a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1e9      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b41      	ldr	r3, [pc, #260]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	493d      	ldr	r1, [pc, #244]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e040      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d023      	beq.n	800484c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b39      	ldr	r3, [pc, #228]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a38      	ldr	r2, [pc, #224]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fe fa08 	bl	8002c24 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004818:	f7fe fa04 	bl	8002c24 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e1c7      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004836:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4929      	ldr	r1, [pc, #164]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
 800484a:	e018      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a26      	ldr	r2, [pc, #152]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe f9e4 	bl	8002c24 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fe f9e0 	bl	8002c24 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1a3      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d038      	beq.n	80048fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d019      	beq.n	80048c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fe f9c1 	bl	8002c24 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fe f9bd 	bl	8002c24 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e180      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x23a>
 80048c4:	e01a      	b.n	80048fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d2:	f7fe f9a7 	bl	8002c24 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048da:	f7fe f9a3 	bl	8002c24 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d903      	bls.n	80048f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e166      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
 80048ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ee      	bne.n	80048da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a4 	beq.w	8004a52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a88      	ldr	r2, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b86      	ldr	r3, [pc, #536]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004932:	4b83      	ldr	r3, [pc, #524]	; (8004b40 <HAL_RCC_OscConfig+0x4d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800493e:	4b80      	ldr	r3, [pc, #512]	; (8004b40 <HAL_RCC_OscConfig+0x4d4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <HAL_RCC_OscConfig+0x4d4>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fe f96b 	bl	8002c24 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fe f967 	bl	8002c24 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b64      	cmp	r3, #100	; 0x64
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e12a      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	4b76      	ldr	r3, [pc, #472]	; (8004b40 <HAL_RCC_OscConfig+0x4d4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x31a>
 8004978:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a6f      	ldr	r2, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	e02d      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x33c>
 800498e:	4b6b      	ldr	r3, [pc, #428]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a67      	ldr	r2, [pc, #412]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e01c      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x35e>
 80049b0:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a61      	ldr	r2, [pc, #388]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a5e      	ldr	r2, [pc, #376]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	e00b      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
 80049ca:	4b5c      	ldr	r3, [pc, #368]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a5b      	ldr	r2, [pc, #364]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a58      	ldr	r2, [pc, #352]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fe f91b 	bl	8002c24 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fe f917 	bl	8002c24 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0d8      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	4b4c      	ldr	r3, [pc, #304]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ee      	beq.n	80049f2 <HAL_RCC_OscConfig+0x386>
 8004a14:	e014      	b.n	8004a40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fe f905 	bl	8002c24 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fe f901 	bl	8002c24 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0c2      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a34:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80ae 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5c:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d06d      	beq.n	8004b44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d14b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe f8d2 	bl	8002c24 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fe f8ce 	bl	8002c24 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e091      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	019b      	lsls	r3, r3, #6
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	491b      	ldr	r1, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f8a0 	bl	8002c24 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe f89c 	bl	8002c24 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e05f      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
 8004b06:	e057      	b.n	8004bb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe f886 	bl	8002c24 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fe f882 	bl	8002c24 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e045      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_RCC_OscConfig+0x4d0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4b0>
 8004b3a:	e03d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x54c>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b44:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <HAL_RCC_OscConfig+0x558>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d030      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d129      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d122      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d119      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d10f      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0d0      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4965      	ldr	r1, [pc, #404]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b8      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c28:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a58      	ldr	r2, [pc, #352]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4c:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	494d      	ldr	r1, [pc, #308]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d040      	beq.n	8004cec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07f      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e073      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4936      	ldr	r1, [pc, #216]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbc:	f7fd ffb2 	bl	8002c24 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fd ffae 	bl	8002c24 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e053      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d210      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4922      	ldr	r1, [pc, #136]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e032      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4916      	ldr	r1, [pc, #88]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5a:	f000 f821 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	490a      	ldr	r1, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x1cc>)
 8004d6c:	5ccb      	ldrb	r3, [r1, r3]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1d0>)
 8004d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d76:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd f966 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023c00 	.word	0x40023c00
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0800e440 	.word	0x0800e440
 8004d98:	20000054 	.word	0x20000054
 8004d9c:	20000058 	.word	0x20000058

08004da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b094      	sub	sp, #80	; 0x50
 8004da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	2300      	movs	r3, #0
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	2300      	movs	r3, #0
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db8:	4b79      	ldr	r3, [pc, #484]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	f200 80e1 	bhi.w	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd2:	e0db      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd8:	e0db      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dde:	e0d8      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	6139      	str	r1, [r7, #16]
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	018b      	lsls	r3, r1, #6
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4e:	4651      	mov	r1, sl
 8004e50:	018a      	lsls	r2, r1, #6
 8004e52:	4651      	mov	r1, sl
 8004e54:	ebb2 0801 	subs.w	r8, r2, r1
 8004e58:	4659      	mov	r1, fp
 8004e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e72:	4690      	mov	r8, r2
 8004e74:	4699      	mov	r9, r3
 8004e76:	4623      	mov	r3, r4
 8004e78:	eb18 0303 	adds.w	r3, r8, r3
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	462b      	mov	r3, r5
 8004e80:	eb49 0303 	adc.w	r3, r9, r3
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e92:	4629      	mov	r1, r5
 8004e94:	024b      	lsls	r3, r1, #9
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	024a      	lsls	r2, r1, #9
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb0:	f7fb fa16 	bl	80002e0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	e058      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebe:	4b38      	ldr	r3, [pc, #224]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4611      	mov	r1, r2
 8004eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eea:	0150      	lsls	r0, r2, #5
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f10:	ebb2 040a 	subs.w	r4, r2, sl
 8004f14:	eb63 050b 	sbc.w	r5, r3, fp
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	00eb      	lsls	r3, r5, #3
 8004f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f26:	00e2      	lsls	r2, r4, #3
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	4643      	mov	r3, r8
 8004f2e:	18e3      	adds	r3, r4, r3
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	464b      	mov	r3, r9
 8004f34:	eb45 0303 	adc.w	r3, r5, r3
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f46:	4629      	mov	r1, r5
 8004f48:	028b      	lsls	r3, r1, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f50:	4621      	mov	r1, r4
 8004f52:	028a      	lsls	r2, r1, #10
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	61fa      	str	r2, [r7, #28]
 8004f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f64:	f7fb f9bc 	bl	80002e0 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3750      	adds	r7, #80	; 0x50
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000054 	.word	0x20000054

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4903      	ldr	r1, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	0800e450 	.word	0x0800e450

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	f7ff ffdc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0b5b      	lsrs	r3, r3, #13
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4903      	ldr	r1, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	0800e450 	.word	0x0800e450

08005014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	220f      	movs	r2, #15
 8005022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0203 	and.w	r2, r3, #3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005030:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_RCC_GetClockConfig+0x60>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	40023c00 	.word	0x40023c00

08005078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d012      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050a0:	4b69      	ldr	r3, [pc, #420]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a68      	ldr	r2, [pc, #416]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050aa:	6093      	str	r3, [r2, #8]
 80050ac:	4b66      	ldr	r3, [pc, #408]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	4964      	ldr	r1, [pc, #400]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050d2:	4b5d      	ldr	r3, [pc, #372]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	4959      	ldr	r1, [pc, #356]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f0:	d101      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d017      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800510e:	4b4e      	ldr	r3, [pc, #312]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005114:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	494a      	ldr	r1, [pc, #296]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512c:	d101      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800513a:	2301      	movs	r3, #1
 800513c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 808b 	beq.w	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a39      	ldr	r2, [pc, #228]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
 8005168:	4b37      	ldr	r3, [pc, #220]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a34      	ldr	r2, [pc, #208]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fd fd50 	bl	8002c24 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005188:	f7fd fd4c 	bl	8002c24 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e38f      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800519a:	4b2c      	ldr	r3, [pc, #176]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d035      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d02e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d114      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd fd14 	bl	8002c24 <HAL_GetTick>
 80051fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	e00a      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7fd fd10 	bl	8002c24 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e351      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ee      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522e:	d111      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800523e:	400b      	ands	r3, r1
 8005240:	4901      	ldr	r1, [pc, #4]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
 8005246:	e00b      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005248:	40023800 	.word	0x40023800
 800524c:	40007000 	.word	0x40007000
 8005250:	0ffffcff 	.word	0x0ffffcff
 8005254:	4bac      	ldr	r3, [pc, #688]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4aab      	ldr	r2, [pc, #684]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800525e:	6093      	str	r3, [r2, #8]
 8005260:	4ba9      	ldr	r3, [pc, #676]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	49a6      	ldr	r1, [pc, #664]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526e:	4313      	orrs	r3, r2
 8005270:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800527e:	4ba2      	ldr	r3, [pc, #648]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	4aa0      	ldr	r2, [pc, #640]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800528e:	4b9e      	ldr	r3, [pc, #632]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005290:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	499b      	ldr	r1, [pc, #620]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ac:	4b96      	ldr	r3, [pc, #600]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ba:	4993      	ldr	r1, [pc, #588]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ce:	4b8e      	ldr	r3, [pc, #568]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052dc:	498a      	ldr	r1, [pc, #552]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f0:	4b85      	ldr	r3, [pc, #532]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fe:	4982      	ldr	r1, [pc, #520]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005312:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4979      	ldr	r1, [pc, #484]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005334:	4b74      	ldr	r3, [pc, #464]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4971      	ldr	r1, [pc, #452]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005356:	4b6c      	ldr	r3, [pc, #432]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f023 020c 	bic.w	r2, r3, #12
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005364:	4968      	ldr	r1, [pc, #416]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	4960      	ldr	r1, [pc, #384]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800539a:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	4957      	ldr	r1, [pc, #348]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053bc:	4b52      	ldr	r3, [pc, #328]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	494f      	ldr	r1, [pc, #316]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053de:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	4946      	ldr	r1, [pc, #280]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005400:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540e:	493e      	ldr	r1, [pc, #248]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	4935      	ldr	r1, [pc, #212]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005444:	4b30      	ldr	r3, [pc, #192]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005452:	492d      	ldr	r1, [pc, #180]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d011      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005474:	4924      	ldr	r1, [pc, #144]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005484:	d101      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005486:	2301      	movs	r3, #1
 8005488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b4:	4914      	ldr	r1, [pc, #80]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054c8:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d8:	490b      	ldr	r1, [pc, #44]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	4902      	ldr	r1, [pc, #8]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005504:	e002      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005518:	4b8a      	ldr	r3, [pc, #552]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	4986      	ldr	r1, [pc, #536]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800553e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005542:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	497d      	ldr	r1, [pc, #500]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d006      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80d6 	beq.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005568:	4b76      	ldr	r3, [pc, #472]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a75      	ldr	r2, [pc, #468]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fd fb56 	bl	8002c24 <HAL_GetTick>
 8005578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800557c:	f7fd fb52 	bl	8002c24 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	; 0x64
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e195      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800558e:	4b6d      	ldr	r3, [pc, #436]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d021      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11d      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055ae:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	4958      	ldr	r1, [pc, #352]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02e      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005614:	d129      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005616:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005624:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562a:	0f1b      	lsrs	r3, r3, #28
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	019a      	lsls	r2, r3, #6
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	061b      	lsls	r3, r3, #24
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	071b      	lsls	r3, r3, #28
 800564a:	493e      	ldr	r1, [pc, #248]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005652:	4b3c      	ldr	r3, [pc, #240]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005658:	f023 021f 	bic.w	r2, r3, #31
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	3b01      	subs	r3, #1
 8005662:	4938      	ldr	r1, [pc, #224]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01d      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005676:	4b33      	ldr	r3, [pc, #204]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567c:	0e1b      	lsrs	r3, r3, #24
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005684:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568a:	0f1b      	lsrs	r3, r3, #28
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	019a      	lsls	r2, r3, #6
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	431a      	orrs	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	4926      	ldr	r1, [pc, #152]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d011      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	019a      	lsls	r2, r3, #6
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	491a      	ldr	r1, [pc, #104]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a17      	ldr	r2, [pc, #92]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fd fa99 	bl	8002c24 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056f6:	f7fd fa95 	bl	8002c24 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b64      	cmp	r3, #100	; 0x64
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0d8      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b01      	cmp	r3, #1
 8005718:	f040 80ce 	bne.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fd fa7c 	bl	8002c24 <HAL_GetTick>
 800572c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800572e:	e00b      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005730:	f7fd fa78 	bl	8002c24 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d904      	bls.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0bb      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005748:	4b5e      	ldr	r3, [pc, #376]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005754:	d0ec      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02e      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d12a      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800577e:	4b51      	ldr	r3, [pc, #324]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800578c:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	0f1b      	lsrs	r3, r3, #28
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	019a      	lsls	r2, r3, #6
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	061b      	lsls	r3, r3, #24
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	071b      	lsls	r3, r3, #28
 80057b2:	4944      	ldr	r1, [pc, #272]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ba:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	493d      	ldr	r1, [pc, #244]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d022      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e8:	d11d      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	0e1b      	lsrs	r3, r3, #24
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057f8:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	0f1b      	lsrs	r3, r3, #28
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	019a      	lsls	r2, r3, #6
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	431a      	orrs	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	061b      	lsls	r3, r3, #24
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	071b      	lsls	r3, r3, #28
 800581e:	4929      	ldr	r1, [pc, #164]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d028      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005840:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	4917      	ldr	r1, [pc, #92]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4911      	ldr	r1, [pc, #68]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005890:	f7fd f9c8 	bl	8002c24 <HAL_GetTick>
 8005894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005898:	f7fd f9c4 	bl	8002c24 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e007      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b6:	d1ef      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e09d      	b.n	8005a16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e005      	b.n	8005900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fc f8aa 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005940:	d902      	bls.n	8005948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e002      	b.n	800594e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005956:	d007      	beq.n	8005968 <HAL_SPI_Init+0xa0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	ea42 0103 	orr.w	r1, r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	f003 0204 	and.w	r2, r3, #4
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b088      	sub	sp, #32
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_SPI_Transmit+0x22>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e158      	b.n	8005cf2 <HAL_SPI_Transmit+0x2d4>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a48:	f7fd f8ec 	bl	8002c24 <HAL_GetTick>
 8005a4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a62:	e13d      	b.n	8005ce0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Transmit+0x52>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a74:	e134      	b.n	8005ce0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac0:	d10f      	bne.n	8005ae2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d007      	beq.n	8005b00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b08:	d94b      	bls.n	8005ba2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_SPI_Transmit+0xfa>
 8005b12:	8afb      	ldrh	r3, [r7, #22]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d13e      	bne.n	8005b96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	881a      	ldrh	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b3c:	e02b      	b.n	8005b96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d112      	bne.n	8005b72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b70:	e011      	b.n	8005b96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b72:	f7fd f857 	bl	8002c24 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d803      	bhi.n	8005b8a <HAL_SPI_Transmit+0x16c>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d102      	bne.n	8005b90 <HAL_SPI_Transmit+0x172>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b94:	e0a4      	b.n	8005ce0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ce      	bne.n	8005b3e <HAL_SPI_Transmit+0x120>
 8005ba0:	e07c      	b.n	8005c9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0x192>
 8005baa:	8afb      	ldrh	r3, [r7, #22]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d170      	bne.n	8005c92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d912      	bls.n	8005be0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	881a      	ldrh	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	1c9a      	adds	r2, r3, #2
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bde:	e058      	b.n	8005c92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c06:	e044      	b.n	8005c92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d12b      	bne.n	8005c6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d912      	bls.n	8005c46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b02      	subs	r3, #2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c44:	e025      	b.n	8005c92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c6c:	e011      	b.n	8005c92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6e:	f7fc ffd9 	bl	8002c24 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d803      	bhi.n	8005c86 <HAL_SPI_Transmit+0x268>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Transmit+0x26e>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c90:	e026      	b.n	8005ce0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1b5      	bne.n	8005c08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fadd 	bl	8006260 <SPI_EndRxTxTransaction>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e000      	b.n	8005ce0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_SPI_Transmit_DMA+0x20>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e0d8      	b.n	8005ece <HAL_SPI_Transmit_DMA+0x1d2>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
 8005d32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d34:	e0c6      	b.n	8005ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Transmit_DMA+0x46>
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d46:	e0bd      	b.n	8005ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d92:	d10f      	bne.n	8005db4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db8:	4a47      	ldr	r2, [pc, #284]	; (8005ed8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc0:	4a46      	ldr	r2, [pc, #280]	; (8005edc <HAL_SPI_Transmit_DMA+0x1e0>)
 8005dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	4a45      	ldr	r2, [pc, #276]	; (8005ee0 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005de2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dec:	d82d      	bhi.n	8005e4a <HAL_SPI_Transmit_DMA+0x14e>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d127      	bne.n	8005e4a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e16:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e26:	e010      	b.n	8005e4a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e36:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3301      	adds	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	4619      	mov	r1, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e62:	f7fd f9f5 	bl	8003250 <HAL_DMA_Start_IT>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	f043 0210 	orr.w	r2, r3, #16
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005e84:	e01e      	b.n	8005ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d007      	beq.n	8005ea4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0220 	orr.w	r2, r2, #32
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0202 	orr.w	r2, r2, #2
 8005ec2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08005fc9 	.word	0x08005fc9
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005fe5 	.word	0x08005fe5

08005ee4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f2e:	f7fc fe79 	bl	8002c24 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	d03b      	beq.n	8005fbc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0220 	bic.w	r2, r2, #32
 8005f52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0202 	bic.w	r2, r2, #2
 8005f62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	6978      	ldr	r0, [r7, #20]
 8005f6a:	f000 f979 	bl	8006260 <SPI_EndRxTxTransaction>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f7ff ffa9 	bl	8005f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fba:	e002      	b.n	8005fc2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f7ff ff91 	bl	8005ee4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff8e 	bl	8005ef8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0203 	bic.w	r2, r2, #3
 8006000:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f043 0210 	orr.w	r2, r3, #16
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff ff78 	bl	8005f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006034:	f7fc fdf6 	bl	8002c24 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4413      	add	r3, r2
 8006042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006044:	f7fc fdee 	bl	8002c24 <HAL_GetTick>
 8006048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800604a:	4b39      	ldr	r3, [pc, #228]	; (8006130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	015b      	lsls	r3, r3, #5
 8006050:	0d1b      	lsrs	r3, r3, #20
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800605a:	e054      	b.n	8006106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d050      	beq.n	8006106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006064:	f7fc fdde 	bl	8002c24 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	429a      	cmp	r2, r3
 8006072:	d902      	bls.n	800607a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d13d      	bne.n	80060f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006092:	d111      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d004      	beq.n	80060a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a6:	d107      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d10f      	bne.n	80060e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e017      	b.n	8006126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	3b01      	subs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	429a      	cmp	r2, r3
 8006122:	d19b      	bne.n	800605c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000054 	.word	0x20000054

08006134 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006146:	f7fc fd6d 	bl	8002c24 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	4413      	add	r3, r2
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006156:	f7fc fd65 	bl	8002c24 <HAL_GetTick>
 800615a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006164:	4b3d      	ldr	r3, [pc, #244]	; (800625c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	00da      	lsls	r2, r3, #3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	0d1b      	lsrs	r3, r3, #20
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800617c:	e060      	b.n	8006240 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006184:	d107      	bne.n	8006196 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006194:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d050      	beq.n	8006240 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800619e:	f7fc fd41 	bl	8002c24 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d902      	bls.n	80061b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d13d      	bne.n	8006230 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061cc:	d111      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d6:	d004      	beq.n	80061e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e0:	d107      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fa:	d10f      	bne.n	800621c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800621a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e010      	b.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3b01      	subs	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d196      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3728      	adds	r7, #40	; 0x28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000054 	.word	0x20000054

08006260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ff5b 	bl	8006134 <SPI_WaitFifoStateUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e046      	b.n	8006322 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <SPI_EndRxTxTransaction+0xcc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a25      	ldr	r2, [pc, #148]	; (8006330 <SPI_EndRxTxTransaction+0xd0>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0d5b      	lsrs	r3, r3, #21
 80062a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d112      	bne.n	80062da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff feb0 	bl	8006024 <SPI_WaitFlagStateUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e023      	b.n	8006322 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d0f2      	beq.n	80062da <SPI_EndRxTxTransaction+0x7a>
 80062f4:	e000      	b.n	80062f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80062f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ff15 	bl	8006134 <SPI_WaitFifoStateUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e000      	b.n	8006322 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000054 	.word	0x20000054
 8006330:	165e9f81 	.word	0x165e9f81

08006334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e049      	b.n	80063da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f841 	bl	80063e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fc66 	bl	8006c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d001      	beq.n	8006410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e054      	b.n	80064ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d01d      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a22      	ldr	r2, [pc, #136]	; (80064cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <HAL_TIM_Base_Start_IT+0xe4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d115      	bne.n	80064a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <HAL_TIM_Base_Start_IT+0xec>)
 8006480:	4013      	ands	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d015      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xbe>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d011      	beq.n	80064b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	e008      	b.n	80064b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e000      	b.n	80064b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800
 80064d4:	40000c00 	.word	0x40000c00
 80064d8:	40010400 	.word	0x40010400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40001800 	.word	0x40001800
 80064e4:	00010007 	.word	0x00010007

080064e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e049      	b.n	800658e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fb ff64 	bl	80023dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f000 fb8c 	bl	8006c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_TIM_PWM_Start+0x24>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e03c      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d109      	bne.n	80065d6 <HAL_TIM_PWM_Start+0x3e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e02f      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d109      	bne.n	80065f0 <HAL_TIM_PWM_Start+0x58>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e022      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b0c      	cmp	r3, #12
 80065f4:	d109      	bne.n	800660a <HAL_TIM_PWM_Start+0x72>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	e015      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d109      	bne.n	8006624 <HAL_TIM_PWM_Start+0x8c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e008      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e092      	b.n	8006764 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_TIM_PWM_Start+0xb6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800664c:	e023      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d104      	bne.n	800665e <HAL_TIM_PWM_Start+0xc6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665c:	e01b      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d104      	bne.n	800666e <HAL_TIM_PWM_Start+0xd6>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800666c:	e013      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d104      	bne.n	800667e <HAL_TIM_PWM_Start+0xe6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800667c:	e00b      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b10      	cmp	r3, #16
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start+0xf6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800668c:	e003      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2201      	movs	r2, #1
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fdce 	bl	8007240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a30      	ldr	r2, [pc, #192]	; (800676c <HAL_TIM_PWM_Start+0x1d4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIM_PWM_Start+0x120>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2f      	ldr	r2, [pc, #188]	; (8006770 <HAL_TIM_PWM_Start+0x1d8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_PWM_Start+0x124>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_TIM_PWM_Start+0x126>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a25      	ldr	r2, [pc, #148]	; (800676c <HAL_TIM_PWM_Start+0x1d4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d01d      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a22      	ldr	r2, [pc, #136]	; (8006774 <HAL_TIM_PWM_Start+0x1dc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <HAL_TIM_PWM_Start+0x1e0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1f      	ldr	r2, [pc, #124]	; (800677c <HAL_TIM_PWM_Start+0x1e4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_TIM_PWM_Start+0x1d8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <HAL_TIM_PWM_Start+0x1e8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_PWM_Start+0x18a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <HAL_TIM_PWM_Start+0x1ec>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d115      	bne.n	800674e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <HAL_TIM_PWM_Start+0x1f0>)
 800672a:	4013      	ands	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d015      	beq.n	8006760 <HAL_TIM_PWM_Start+0x1c8>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673a:	d011      	beq.n	8006760 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674c:	e008      	b.n	8006760 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e000      	b.n	8006762 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800
 8006788:	00010007 	.word	0x00010007

0800678c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d122      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d11b      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0202 	mvn.w	r2, #2
 80067b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa1a 	bl	8006c08 <HAL_TIM_IC_CaptureCallback>
 80067d4:	e005      	b.n	80067e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa0c 	bl	8006bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fa1d 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d122      	bne.n	800683c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b04      	cmp	r3, #4
 8006802:	d11b      	bne.n	800683c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0204 	mvn.w	r2, #4
 800680c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9f0 	bl	8006c08 <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9e2 	bl	8006bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9f3 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b08      	cmp	r3, #8
 8006848:	d122      	bne.n	8006890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b08      	cmp	r3, #8
 8006856:	d11b      	bne.n	8006890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0208 	mvn.w	r2, #8
 8006860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9c6 	bl	8006c08 <HAL_TIM_IC_CaptureCallback>
 800687c:	e005      	b.n	800688a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9b8 	bl	8006bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f9c9 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b10      	cmp	r3, #16
 800689c:	d122      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d11b      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0210 	mvn.w	r2, #16
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2208      	movs	r2, #8
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f99c 	bl	8006c08 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f98e 	bl	8006bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f99f 	bl	8006c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d10e      	bne.n	8006910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d107      	bne.n	8006910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0201 	mvn.w	r2, #1
 8006908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fb f85c 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d10e      	bne.n	800693c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	2b80      	cmp	r3, #128	; 0x80
 800692a:	d107      	bne.n	800693c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd40 	bl	80073bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d10e      	bne.n	800696a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d107      	bne.n	800696a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fd33 	bl	80073d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d10e      	bne.n	8006996 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d107      	bne.n	8006996 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f94d 	bl	8006c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d10e      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0220 	mvn.w	r2, #32
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fcf3 	bl	80073a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e0ff      	b.n	8006bea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b14      	cmp	r3, #20
 80069f6:	f200 80f0 	bhi.w	8006bda <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	08006bdb 	.word	0x08006bdb
 8006a08:	08006bdb 	.word	0x08006bdb
 8006a0c:	08006bdb 	.word	0x08006bdb
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006bdb 	.word	0x08006bdb
 8006a18:	08006bdb 	.word	0x08006bdb
 8006a1c:	08006bdb 	.word	0x08006bdb
 8006a20:	08006ad7 	.word	0x08006ad7
 8006a24:	08006bdb 	.word	0x08006bdb
 8006a28:	08006bdb 	.word	0x08006bdb
 8006a2c:	08006bdb 	.word	0x08006bdb
 8006a30:	08006b17 	.word	0x08006b17
 8006a34:	08006bdb 	.word	0x08006bdb
 8006a38:	08006bdb 	.word	0x08006bdb
 8006a3c:	08006bdb 	.word	0x08006bdb
 8006a40:	08006b59 	.word	0x08006b59
 8006a44:	08006bdb 	.word	0x08006bdb
 8006a48:	08006bdb 	.word	0x08006bdb
 8006a4c:	08006bdb 	.word	0x08006bdb
 8006a50:	08006b99 	.word	0x08006b99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 f992 	bl	8006d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0204 	bic.w	r2, r2, #4
 8006a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6999      	ldr	r1, [r3, #24]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	619a      	str	r2, [r3, #24]
      break;
 8006a92:	e0a5      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f9e4 	bl	8006e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6999      	ldr	r1, [r3, #24]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	021a      	lsls	r2, r3, #8
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	619a      	str	r2, [r3, #24]
      break;
 8006ad4:	e084      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fa3b 	bl	8006f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0208 	orr.w	r2, r2, #8
 8006af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0204 	bic.w	r2, r2, #4
 8006b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69d9      	ldr	r1, [r3, #28]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	61da      	str	r2, [r3, #28]
      break;
 8006b14:	e064      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fa91 	bl	8007044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69d9      	ldr	r1, [r3, #28]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	021a      	lsls	r2, r3, #8
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	61da      	str	r2, [r3, #28]
      break;
 8006b56:	e043      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fac8 	bl	80070f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0208 	orr.w	r2, r2, #8
 8006b72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b96:	e023      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fafa 	bl	8007198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	021a      	lsls	r2, r3, #8
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bd8:	e002      	b.n	8006be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop

08006bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a40      	ldr	r2, [pc, #256]	; (8006d58 <TIM_Base_SetConfig+0x114>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c62:	d00f      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a3d      	ldr	r2, [pc, #244]	; (8006d5c <TIM_Base_SetConfig+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <TIM_Base_SetConfig+0x11c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a3b      	ldr	r2, [pc, #236]	; (8006d64 <TIM_Base_SetConfig+0x120>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a3a      	ldr	r2, [pc, #232]	; (8006d68 <TIM_Base_SetConfig+0x124>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2f      	ldr	r2, [pc, #188]	; (8006d58 <TIM_Base_SetConfig+0x114>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d02b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca4:	d027      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <TIM_Base_SetConfig+0x118>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d023      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2b      	ldr	r2, [pc, #172]	; (8006d60 <TIM_Base_SetConfig+0x11c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a2a      	ldr	r2, [pc, #168]	; (8006d64 <TIM_Base_SetConfig+0x120>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <TIM_Base_SetConfig+0x124>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d017      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <TIM_Base_SetConfig+0x128>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	; (8006d74 <TIM_Base_SetConfig+0x130>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a25      	ldr	r2, [pc, #148]	; (8006d78 <TIM_Base_SetConfig+0x134>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <TIM_Base_SetConfig+0x138>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <TIM_Base_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0xf8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a0c      	ldr	r2, [pc, #48]	; (8006d68 <TIM_Base_SetConfig+0x124>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d103      	bne.n	8006d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	615a      	str	r2, [r3, #20]
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	40001800 	.word	0x40001800
 8006d7c:	40001c00 	.word	0x40001c00
 8006d80:	40002000 	.word	0x40002000

08006d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <TIM_OC1_SetConfig+0xd8>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 0302 	bic.w	r3, r3, #2
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a21      	ldr	r2, [pc, #132]	; (8006e60 <TIM_OC1_SetConfig+0xdc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC1_SetConfig+0x64>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <TIM_OC1_SetConfig+0xe0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10c      	bne.n	8006e02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f023 0308 	bic.w	r3, r3, #8
 8006dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f023 0304 	bic.w	r3, r3, #4
 8006e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <TIM_OC1_SetConfig+0xdc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_OC1_SetConfig+0x8e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <TIM_OC1_SetConfig+0xe0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d111      	bne.n	8006e36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	621a      	str	r2, [r3, #32]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	fffeff8f 	.word	0xfffeff8f
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400

08006e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0210 	bic.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <TIM_OC2_SetConfig+0xe4>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0320 	bic.w	r3, r3, #32
 8006eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a23      	ldr	r2, [pc, #140]	; (8006f50 <TIM_OC2_SetConfig+0xe8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC2_SetConfig+0x68>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <TIM_OC2_SetConfig+0xec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10d      	bne.n	8006eec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <TIM_OC2_SetConfig+0xe8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_OC2_SetConfig+0x94>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC2_SetConfig+0xec>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d113      	bne.n	8006f24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	feff8fff 	.word	0xfeff8fff
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40010400 	.word	0x40010400

08006f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <TIM_OC3_SetConfig+0xe0>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a22      	ldr	r2, [pc, #136]	; (800703c <TIM_OC3_SetConfig+0xe4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <TIM_OC3_SetConfig+0x66>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a21      	ldr	r2, [pc, #132]	; (8007040 <TIM_OC3_SetConfig+0xe8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d10d      	bne.n	8006fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a17      	ldr	r2, [pc, #92]	; (800703c <TIM_OC3_SetConfig+0xe4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_OC3_SetConfig+0x92>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a16      	ldr	r2, [pc, #88]	; (8007040 <TIM_OC3_SetConfig+0xe8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d113      	bne.n	8007012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	621a      	str	r2, [r3, #32]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	fffeff8f 	.word	0xfffeff8f
 800703c:	40010000 	.word	0x40010000
 8007040:	40010400 	.word	0x40010400

08007044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <TIM_OC4_SetConfig+0xa4>)
 8007070:	4013      	ands	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800708e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <TIM_OC4_SetConfig+0xa8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC4_SetConfig+0x68>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <TIM_OC4_SetConfig+0xac>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d109      	bne.n	80070c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	019b      	lsls	r3, r3, #6
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	feff8fff 	.word	0xfeff8fff
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400

080070f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <TIM_OC5_SetConfig+0x98>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a12      	ldr	r2, [pc, #72]	; (8007190 <TIM_OC5_SetConfig+0x9c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d003      	beq.n	8007152 <TIM_OC5_SetConfig+0x5e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a11      	ldr	r2, [pc, #68]	; (8007194 <TIM_OC5_SetConfig+0xa0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d109      	bne.n	8007166 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	621a      	str	r2, [r3, #32]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	fffeff8f 	.word	0xfffeff8f
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400

08007198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <TIM_OC6_SetConfig+0x9c>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	051b      	lsls	r3, r3, #20
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <TIM_OC6_SetConfig+0xa0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC6_SetConfig+0x60>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a12      	ldr	r2, [pc, #72]	; (800723c <TIM_OC6_SetConfig+0xa4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d109      	bne.n	800720c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	029b      	lsls	r3, r3, #10
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	feff8fff 	.word	0xfeff8fff
 8007238:	40010000 	.word	0x40010000
 800723c:	40010400 	.word	0x40010400

08007240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2201      	movs	r2, #1
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e06d      	b.n	8007380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a30      	ldr	r2, [pc, #192]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2f      	ldr	r2, [pc, #188]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a20      	ldr	r2, [pc, #128]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007316:	d01d      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1a      	ldr	r2, [pc, #104]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a15      	ldr	r2, [pc, #84]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d10c      	bne.n	800736e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	40010000 	.word	0x40010000
 8007390:	40010400 	.word	0x40010400
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40001800 	.word	0x40001800

080073a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e040      	b.n	8007478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb f870 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2224      	movs	r2, #36	; 0x24
 8007410:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb82 	bl	8007b2c <UART_SetConfig>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e022      	b.n	8007478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fdda 	bl	8007ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800744e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800745e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fe61 	bl	8008138 <UART_CheckIdleState>
 8007476:	4603      	mov	r3, r0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007494:	2b20      	cmp	r3, #32
 8007496:	d132      	bne.n	80074fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_UART_Receive_IT+0x24>
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e02b      	b.n	8007500 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d018      	beq.n	80074ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	69f9      	ldr	r1, [r7, #28]
 80074e0:	6a3a      	ldr	r2, [r7, #32]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e6      	bne.n	80074bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	461a      	mov	r2, r3
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 ff33 	bl	8008360 <UART_Start_Receive_IT>
 80074fa:	4603      	mov	r3, r0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3728      	adds	r7, #40	; 0x28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ba      	sub	sp, #232	; 0xe8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007532:	f640 030f 	movw	r3, #2063	; 0x80f
 8007536:	4013      	ands	r3, r2
 8007538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800753c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d115      	bne.n	8007570 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 82ac 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      }
      return;
 800756e:	e2a6      	b.n	8007abe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8117 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800758a:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_UART_IRQHandler+0x298>)
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 810a 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d011      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d011      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2204      	movs	r2, #4
 8007612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2208      	movs	r2, #8
 800764e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007656:	f043 0208 	orr.w	r2, r3, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d012      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8212 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fefe 	bl	80084ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d141      	bne.n	8007782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800772a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800772e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1d9      	bne.n	80076fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <HAL_UART_IRQHandler+0x29c>)
 8007758:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775e:	4618      	mov	r0, r3
 8007760:	f7fb fe46 	bl	80033f0 <HAL_DMA_Abort_IT>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e00f      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9b6 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00b      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9b2 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	e007      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9ae 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007798:	e193      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	bf00      	nop
    return;
 800779c:	e191      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
 800779e:	bf00      	nop
 80077a0:	04000120 	.word	0x04000120
 80077a4:	080085b5 	.word	0x080085b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 814c 	bne.w	8007a4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8145 	beq.w	8007a4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 813e 	beq.w	8007a4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2210      	movs	r2, #16
 80077d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	f040 80b6 	bne.w	8007952 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8165 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007806:	429a      	cmp	r2, r3
 8007808:	f080 815d 	bcs.w	8007ac6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007820:	f000 8086 	beq.w	8007930 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800784e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1da      	bne.n	8007824 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800787e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e1      	bne.n	800786e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e3      	bne.n	80078aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007912:	65bb      	str	r3, [r7, #88]	; 0x58
 8007914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e4      	bne.n	80078f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792a:	4618      	mov	r0, r3
 800792c:	f7fb fcf0 	bl	8003310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007942:	b29b      	uxth	r3, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8d8 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007950:	e0b9      	b.n	8007ac6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795e:	b29b      	uxth	r3, r3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80ab 	beq.w	8007aca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a6 	beq.w	8007aca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a0:	647b      	str	r3, [r7, #68]	; 0x44
 80079a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e4      	bne.n	800797e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	623b      	str	r3, [r7, #32]
   return(result);
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d8:	633a      	str	r2, [r7, #48]	; 0x30
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e3      	bne.n	80079b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 0310 	bic.w	r3, r3, #16
 8007a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	69b9      	ldr	r1, [r7, #24]
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e4      	bne.n	8007a00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f85c 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a48:	e03f      	b.n	8007aca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00e      	beq.n	8007a74 <HAL_UART_IRQHandler+0x56c>
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f853 	bl	8007b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a72:	e02d      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01c      	beq.n	8007ace <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
    }
    return;
 8007a9c:	e017      	b.n	8007ace <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d012      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fd92 	bl	80085e0 <UART_EndTransmit_IT>
    return;
 8007abc:	e008      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e006      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007ac2:	bf00      	nop
 8007ac4:	e004      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007ace:	bf00      	nop
  }

}
 8007ad0:	37e8      	adds	r7, #232	; 0xe8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4ba6      	ldr	r3, [pc, #664]	; (8007df0 <UART_SetConfig+0x2c4>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	430b      	orrs	r3, r1
 8007b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a94      	ldr	r2, [pc, #592]	; (8007df4 <UART_SetConfig+0x2c8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d120      	bne.n	8007bea <UART_SetConfig+0xbe>
 8007ba8:	4b93      	ldr	r3, [pc, #588]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d816      	bhi.n	8007be4 <UART_SetConfig+0xb8>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x90>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007bd3 	.word	0x08007bd3
 8007bc8:	08007bdf 	.word	0x08007bdf
 8007bcc:	2301      	movs	r3, #1
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e150      	b.n	8007e74 <UART_SetConfig+0x348>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	e14d      	b.n	8007e74 <UART_SetConfig+0x348>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	77fb      	strb	r3, [r7, #31]
 8007bdc:	e14a      	b.n	8007e74 <UART_SetConfig+0x348>
 8007bde:	2308      	movs	r3, #8
 8007be0:	77fb      	strb	r3, [r7, #31]
 8007be2:	e147      	b.n	8007e74 <UART_SetConfig+0x348>
 8007be4:	2310      	movs	r3, #16
 8007be6:	77fb      	strb	r3, [r7, #31]
 8007be8:	e144      	b.n	8007e74 <UART_SetConfig+0x348>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a83      	ldr	r2, [pc, #524]	; (8007dfc <UART_SetConfig+0x2d0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d132      	bne.n	8007c5a <UART_SetConfig+0x12e>
 8007bf4:	4b80      	ldr	r3, [pc, #512]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f003 030c 	and.w	r3, r3, #12
 8007bfe:	2b0c      	cmp	r3, #12
 8007c00:	d828      	bhi.n	8007c54 <UART_SetConfig+0x128>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0xdc>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c3d 	.word	0x08007c3d
 8007c0c:	08007c55 	.word	0x08007c55
 8007c10:	08007c55 	.word	0x08007c55
 8007c14:	08007c55 	.word	0x08007c55
 8007c18:	08007c49 	.word	0x08007c49
 8007c1c:	08007c55 	.word	0x08007c55
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c43 	.word	0x08007c43
 8007c2c:	08007c55 	.word	0x08007c55
 8007c30:	08007c55 	.word	0x08007c55
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c4f 	.word	0x08007c4f
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e118      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c42:	2302      	movs	r3, #2
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e115      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e112      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e10f      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c54:	2310      	movs	r3, #16
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e10c      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a68      	ldr	r2, [pc, #416]	; (8007e00 <UART_SetConfig+0x2d4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d120      	bne.n	8007ca6 <UART_SetConfig+0x17a>
 8007c64:	4b64      	ldr	r3, [pc, #400]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c6e:	2b30      	cmp	r3, #48	; 0x30
 8007c70:	d013      	beq.n	8007c9a <UART_SetConfig+0x16e>
 8007c72:	2b30      	cmp	r3, #48	; 0x30
 8007c74:	d814      	bhi.n	8007ca0 <UART_SetConfig+0x174>
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d009      	beq.n	8007c8e <UART_SetConfig+0x162>
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d810      	bhi.n	8007ca0 <UART_SetConfig+0x174>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <UART_SetConfig+0x15c>
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d006      	beq.n	8007c94 <UART_SetConfig+0x168>
 8007c86:	e00b      	b.n	8007ca0 <UART_SetConfig+0x174>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e0f2      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e0ef      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c94:	2304      	movs	r3, #4
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e0ec      	b.n	8007e74 <UART_SetConfig+0x348>
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e0e9      	b.n	8007e74 <UART_SetConfig+0x348>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e0e6      	b.n	8007e74 <UART_SetConfig+0x348>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a56      	ldr	r2, [pc, #344]	; (8007e04 <UART_SetConfig+0x2d8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d120      	bne.n	8007cf2 <UART_SetConfig+0x1c6>
 8007cb0:	4b51      	ldr	r3, [pc, #324]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cba:	2bc0      	cmp	r3, #192	; 0xc0
 8007cbc:	d013      	beq.n	8007ce6 <UART_SetConfig+0x1ba>
 8007cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc0:	d814      	bhi.n	8007cec <UART_SetConfig+0x1c0>
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d009      	beq.n	8007cda <UART_SetConfig+0x1ae>
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d810      	bhi.n	8007cec <UART_SetConfig+0x1c0>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <UART_SetConfig+0x1a8>
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d006      	beq.n	8007ce0 <UART_SetConfig+0x1b4>
 8007cd2:	e00b      	b.n	8007cec <UART_SetConfig+0x1c0>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	77fb      	strb	r3, [r7, #31]
 8007cd8:	e0cc      	b.n	8007e74 <UART_SetConfig+0x348>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	77fb      	strb	r3, [r7, #31]
 8007cde:	e0c9      	b.n	8007e74 <UART_SetConfig+0x348>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	77fb      	strb	r3, [r7, #31]
 8007ce4:	e0c6      	b.n	8007e74 <UART_SetConfig+0x348>
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	77fb      	strb	r3, [r7, #31]
 8007cea:	e0c3      	b.n	8007e74 <UART_SetConfig+0x348>
 8007cec:	2310      	movs	r3, #16
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e0c0      	b.n	8007e74 <UART_SetConfig+0x348>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a44      	ldr	r2, [pc, #272]	; (8007e08 <UART_SetConfig+0x2dc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d125      	bne.n	8007d48 <UART_SetConfig+0x21c>
 8007cfc:	4b3e      	ldr	r3, [pc, #248]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0a:	d017      	beq.n	8007d3c <UART_SetConfig+0x210>
 8007d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d10:	d817      	bhi.n	8007d42 <UART_SetConfig+0x216>
 8007d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d16:	d00b      	beq.n	8007d30 <UART_SetConfig+0x204>
 8007d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1c:	d811      	bhi.n	8007d42 <UART_SetConfig+0x216>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <UART_SetConfig+0x1fe>
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	d006      	beq.n	8007d36 <UART_SetConfig+0x20a>
 8007d28:	e00b      	b.n	8007d42 <UART_SetConfig+0x216>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e0a1      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d30:	2302      	movs	r3, #2
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e09e      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d36:	2304      	movs	r3, #4
 8007d38:	77fb      	strb	r3, [r7, #31]
 8007d3a:	e09b      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	77fb      	strb	r3, [r7, #31]
 8007d40:	e098      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d42:	2310      	movs	r3, #16
 8007d44:	77fb      	strb	r3, [r7, #31]
 8007d46:	e095      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2f      	ldr	r2, [pc, #188]	; (8007e0c <UART_SetConfig+0x2e0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d125      	bne.n	8007d9e <UART_SetConfig+0x272>
 8007d52:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d60:	d017      	beq.n	8007d92 <UART_SetConfig+0x266>
 8007d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d66:	d817      	bhi.n	8007d98 <UART_SetConfig+0x26c>
 8007d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6c:	d00b      	beq.n	8007d86 <UART_SetConfig+0x25a>
 8007d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d72:	d811      	bhi.n	8007d98 <UART_SetConfig+0x26c>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <UART_SetConfig+0x254>
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7c:	d006      	beq.n	8007d8c <UART_SetConfig+0x260>
 8007d7e:	e00b      	b.n	8007d98 <UART_SetConfig+0x26c>
 8007d80:	2301      	movs	r3, #1
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e076      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d86:	2302      	movs	r3, #2
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e073      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e070      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d92:	2308      	movs	r3, #8
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e06d      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e06a      	b.n	8007e74 <UART_SetConfig+0x348>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <UART_SetConfig+0x2e4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d138      	bne.n	8007e1a <UART_SetConfig+0x2ee>
 8007da8:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <UART_SetConfig+0x2cc>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007db6:	d017      	beq.n	8007de8 <UART_SetConfig+0x2bc>
 8007db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dbc:	d82a      	bhi.n	8007e14 <UART_SetConfig+0x2e8>
 8007dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc2:	d00b      	beq.n	8007ddc <UART_SetConfig+0x2b0>
 8007dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc8:	d824      	bhi.n	8007e14 <UART_SetConfig+0x2e8>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <UART_SetConfig+0x2aa>
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	d006      	beq.n	8007de2 <UART_SetConfig+0x2b6>
 8007dd4:	e01e      	b.n	8007e14 <UART_SetConfig+0x2e8>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e04b      	b.n	8007e74 <UART_SetConfig+0x348>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e048      	b.n	8007e74 <UART_SetConfig+0x348>
 8007de2:	2304      	movs	r3, #4
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e045      	b.n	8007e74 <UART_SetConfig+0x348>
 8007de8:	2308      	movs	r3, #8
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e042      	b.n	8007e74 <UART_SetConfig+0x348>
 8007dee:	bf00      	nop
 8007df0:	efff69f3 	.word	0xefff69f3
 8007df4:	40011000 	.word	0x40011000
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	40004400 	.word	0x40004400
 8007e00:	40004800 	.word	0x40004800
 8007e04:	40004c00 	.word	0x40004c00
 8007e08:	40005000 	.word	0x40005000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	40007800 	.word	0x40007800
 8007e14:	2310      	movs	r3, #16
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	e02c      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a72      	ldr	r2, [pc, #456]	; (8007fe8 <UART_SetConfig+0x4bc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d125      	bne.n	8007e70 <UART_SetConfig+0x344>
 8007e24:	4b71      	ldr	r3, [pc, #452]	; (8007fec <UART_SetConfig+0x4c0>)
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e32:	d017      	beq.n	8007e64 <UART_SetConfig+0x338>
 8007e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e38:	d817      	bhi.n	8007e6a <UART_SetConfig+0x33e>
 8007e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e3e:	d00b      	beq.n	8007e58 <UART_SetConfig+0x32c>
 8007e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e44:	d811      	bhi.n	8007e6a <UART_SetConfig+0x33e>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <UART_SetConfig+0x326>
 8007e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e4e:	d006      	beq.n	8007e5e <UART_SetConfig+0x332>
 8007e50:	e00b      	b.n	8007e6a <UART_SetConfig+0x33e>
 8007e52:	2300      	movs	r3, #0
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e00d      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e00a      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e007      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e64:	2308      	movs	r3, #8
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e004      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e6a:	2310      	movs	r3, #16
 8007e6c:	77fb      	strb	r3, [r7, #31]
 8007e6e:	e001      	b.n	8007e74 <UART_SetConfig+0x348>
 8007e70:	2310      	movs	r3, #16
 8007e72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7c:	d15b      	bne.n	8007f36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e7e:	7ffb      	ldrb	r3, [r7, #31]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d828      	bhi.n	8007ed6 <UART_SetConfig+0x3aa>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0x360>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007ed7 	.word	0x08007ed7
 8007e9c:	08007ec7 	.word	0x08007ec7
 8007ea0:	08007ed7 	.word	0x08007ed7
 8007ea4:	08007ed7 	.word	0x08007ed7
 8007ea8:	08007ed7 	.word	0x08007ed7
 8007eac:	08007ecf 	.word	0x08007ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb0:	f7fd f888 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007eb4:	61b8      	str	r0, [r7, #24]
        break;
 8007eb6:	e013      	b.n	8007ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb8:	f7fd f898 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8007ebc:	61b8      	str	r0, [r7, #24]
        break;
 8007ebe:	e00f      	b.n	8007ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	; (8007ff0 <UART_SetConfig+0x4c4>)
 8007ec2:	61bb      	str	r3, [r7, #24]
        break;
 8007ec4:	e00c      	b.n	8007ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec6:	f7fc ff6b 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8007eca:	61b8      	str	r0, [r7, #24]
        break;
 8007ecc:	e008      	b.n	8007ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed2:	61bb      	str	r3, [r7, #24]
        break;
 8007ed4:	e004      	b.n	8007ee0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	77bb      	strb	r3, [r7, #30]
        break;
 8007ede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d074      	beq.n	8007fd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	005a      	lsls	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b0f      	cmp	r3, #15
 8007f00:	d916      	bls.n	8007f30 <UART_SetConfig+0x404>
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f08:	d212      	bcs.n	8007f30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f023 030f 	bic.w	r3, r3, #15
 8007f12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	89fb      	ldrh	r3, [r7, #14]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	89fa      	ldrh	r2, [r7, #14]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e04f      	b.n	8007fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	77bb      	strb	r3, [r7, #30]
 8007f34:	e04c      	b.n	8007fd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f36:	7ffb      	ldrb	r3, [r7, #31]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d828      	bhi.n	8007f8e <UART_SetConfig+0x462>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <UART_SetConfig+0x418>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f8f 	.word	0x08007f8f
 8007f54:	08007f7f 	.word	0x08007f7f
 8007f58:	08007f8f 	.word	0x08007f8f
 8007f5c:	08007f8f 	.word	0x08007f8f
 8007f60:	08007f8f 	.word	0x08007f8f
 8007f64:	08007f87 	.word	0x08007f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f68:	f7fd f82c 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007f6c:	61b8      	str	r0, [r7, #24]
        break;
 8007f6e:	e013      	b.n	8007f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f70:	f7fd f83c 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8007f74:	61b8      	str	r0, [r7, #24]
        break;
 8007f76:	e00f      	b.n	8007f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f78:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <UART_SetConfig+0x4c4>)
 8007f7a:	61bb      	str	r3, [r7, #24]
        break;
 8007f7c:	e00c      	b.n	8007f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7e:	f7fc ff0f 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8007f82:	61b8      	str	r0, [r7, #24]
        break;
 8007f84:	e008      	b.n	8007f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8a:	61bb      	str	r3, [r7, #24]
        break;
 8007f8c:	e004      	b.n	8007f98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	77bb      	strb	r3, [r7, #30]
        break;
 8007f96:	bf00      	nop
    }

    if (pclk != 0U)
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d018      	beq.n	8007fd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	085a      	lsrs	r2, r3, #1
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	441a      	add	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b0f      	cmp	r3, #15
 8007fb6:	d909      	bls.n	8007fcc <UART_SetConfig+0x4a0>
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbe:	d205      	bcs.n	8007fcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	e001      	b.n	8007fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007fdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40007c00 	.word	0x40007c00
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	00f42400 	.word	0x00f42400

08007ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01a      	beq.n	800810a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080f2:	d10a      	bne.n	800810a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008148:	f7fa fd6c 	bl	8002c24 <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b08      	cmp	r3, #8
 800815a:	d10e      	bne.n	800817a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800815c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f831 	bl	80081d2 <UART_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e027      	b.n	80081ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b04      	cmp	r3, #4
 8008186:	d10e      	bne.n	80081a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f81b 	bl	80081d2 <UART_WaitOnFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e011      	b.n	80081ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b09c      	sub	sp, #112	; 0x70
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e2:	e0a7      	b.n	8008334 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	f000 80a3 	beq.w	8008334 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ee:	f7fa fd19 	bl	8002c24 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <UART_WaitOnFlagUntilTimeout+0x32>
 80081fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008200:	2b00      	cmp	r3, #0
 8008202:	d13f      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008218:	667b      	str	r3, [r7, #100]	; 0x64
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008224:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e6      	bne.n	8008204 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	663b      	str	r3, [r7, #96]	; 0x60
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008256:	64ba      	str	r2, [r7, #72]	; 0x48
 8008258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800825c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e068      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d050      	beq.n	8008334 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a0:	d148      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
 80082cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e6      	bne.n	80082ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	613b      	str	r3, [r7, #16]
   return(result);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082fe:	623a      	str	r2, [r7, #32]
 8008300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	69f9      	ldr	r1, [r7, #28]
 8008304:	6a3a      	ldr	r2, [r7, #32]
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	61bb      	str	r3, [r7, #24]
   return(result);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e5      	bne.n	80082de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e010      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69da      	ldr	r2, [r3, #28]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4013      	ands	r3, r2
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	bf0c      	ite	eq
 8008344:	2301      	moveq	r3, #1
 8008346:	2300      	movne	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	429a      	cmp	r2, r3
 8008350:	f43f af48 	beq.w	80081e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3770      	adds	r7, #112	; 0x70
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008360:	b480      	push	{r7}
 8008362:	b097      	sub	sp, #92	; 0x5c
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008392:	d10e      	bne.n	80083b2 <UART_Start_Receive_IT+0x52>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <UART_Start_Receive_IT+0x48>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083a6:	e02d      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	22ff      	movs	r2, #255	; 0xff
 80083ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b0:	e028      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <UART_Start_Receive_IT+0x76>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <UART_Start_Receive_IT+0x6c>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ca:	e01b      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	227f      	movs	r2, #127	; 0x7f
 80083d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d4:	e016      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083de:	d10d      	bne.n	80083fc <UART_Start_Receive_IT+0x9c>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <UART_Start_Receive_IT+0x92>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	227f      	movs	r2, #127	; 0x7f
 80083ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f0:	e008      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	223f      	movs	r2, #63	; 0x3f
 80083f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083fa:	e003      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2222      	movs	r2, #34	; 0x22
 8008410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	657b      	str	r3, [r7, #84]	; 0x54
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008434:	64ba      	str	r2, [r7, #72]	; 0x48
 8008436:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800843a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e5      	bne.n	8008414 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008450:	d107      	bne.n	8008462 <UART_Start_Receive_IT+0x102>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a21      	ldr	r2, [pc, #132]	; (80084e4 <UART_Start_Receive_IT+0x184>)
 800845e:	669a      	str	r2, [r3, #104]	; 0x68
 8008460:	e002      	b.n	8008468 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4a20      	ldr	r2, [pc, #128]	; (80084e8 <UART_Start_Receive_IT+0x188>)
 8008466:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d019      	beq.n	80084a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e6      	bne.n	8008470 <UART_Start_Receive_IT+0x110>
 80084a2:	e018      	b.n	80084d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	613b      	str	r3, [r7, #16]
   return(result);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f043 0320 	orr.w	r3, r3, #32
 80084b8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c2:	623b      	str	r3, [r7, #32]
 80084c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	69f9      	ldr	r1, [r7, #28]
 80084c8:	6a3a      	ldr	r2, [r7, #32]
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e6      	bne.n	80084a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	375c      	adds	r7, #92	; 0x5c
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	0800879b 	.word	0x0800879b
 80084e8:	08008635 	.word	0x08008635

080084ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b095      	sub	sp, #84	; 0x54
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008512:	643b      	str	r3, [r7, #64]	; 0x40
 8008514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	61fb      	str	r3, [r7, #28]
   return(result);
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800854c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e5      	bne.n	8008526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855e:	2b01      	cmp	r3, #1
 8008560:	d118      	bne.n	8008594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f023 0310 	bic.w	r3, r3, #16
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e6      	bne.n	8008562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085a8:	bf00      	nop
 80085aa:	3754      	adds	r7, #84	; 0x54
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff fa8a 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d8:	bf00      	nop
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	613b      	str	r3, [r7, #16]
   return(result);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fa56 	bl	8007ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862c:	bf00      	nop
 800862e:	3720      	adds	r7, #32
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b096      	sub	sp, #88	; 0x58
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008642:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864c:	2b22      	cmp	r3, #34	; 0x22
 800864e:	f040 8098 	bne.w	8008782 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800865c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008660:	b2d9      	uxtb	r1, r3
 8008662:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866c:	400a      	ands	r2, r1
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d17b      	bne.n	8008792 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ae:	653b      	str	r3, [r7, #80]	; 0x50
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e6      	bne.n	800869a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	623b      	str	r3, [r7, #32]
   return(result);
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ec:	633a      	str	r2, [r7, #48]	; 0x30
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	2b01      	cmp	r3, #1
 800871a:	d12e      	bne.n	800877a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0310 	bic.w	r3, r3, #16
 8008736:	64bb      	str	r3, [r7, #72]	; 0x48
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b10      	cmp	r3, #16
 8008760:	d103      	bne.n	800876a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2210      	movs	r2, #16
 8008768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff f9c4 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008778:	e00b      	b.n	8008792 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7f9 f8fe 	bl	800197c <HAL_UART_RxCpltCallback>
}
 8008780:	e007      	b.n	8008792 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0208 	orr.w	r2, r2, #8
 8008790:	619a      	str	r2, [r3, #24]
}
 8008792:	bf00      	nop
 8008794:	3758      	adds	r7, #88	; 0x58
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b096      	sub	sp, #88	; 0x58
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b2:	2b22      	cmp	r3, #34	; 0x22
 80087b4:	f040 8098 	bne.w	80088e8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087c8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087d0:	4013      	ands	r3, r2
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d17b      	bne.n	80088f8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881e:	643b      	str	r3, [r7, #64]	; 0x40
 8008820:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	61fb      	str	r3, [r7, #28]
   return(result);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	64bb      	str	r3, [r7, #72]	; 0x48
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887e:	2b01      	cmp	r3, #1
 8008880:	d12e      	bne.n	80088e0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	60bb      	str	r3, [r7, #8]
   return(result);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f023 0310 	bic.w	r3, r3, #16
 800889c:	647b      	str	r3, [r7, #68]	; 0x44
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6979      	ldr	r1, [r7, #20]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	613b      	str	r3, [r7, #16]
   return(result);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e6      	bne.n	8008888 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d103      	bne.n	80088d0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2210      	movs	r2, #16
 80088ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff f911 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088de:	e00b      	b.n	80088f8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7f9 f84b 	bl	800197c <HAL_UART_RxCpltCallback>
}
 80088e6:	e007      	b.n	80088f8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0208 	orr.w	r2, r2, #8
 80088f6:	619a      	str	r2, [r3, #24]
}
 80088f8:	bf00      	nop
 80088fa:	3758      	adds	r7, #88	; 0x58
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008904:	bf00      	nop
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008916:	f3ef 8305 	mrs	r3, IPSR
 800891a:	60bb      	str	r3, [r7, #8]
  return(result);
 800891c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008922:	f3ef 8310 	mrs	r3, PRIMASK
 8008926:	607b      	str	r3, [r7, #4]
  return(result);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d105      	bne.n	800893a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800892e:	f3ef 8311 	mrs	r3, BASEPRI
 8008932:	603b      	str	r3, [r7, #0]
  return(result);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <osKernelInitialize+0x3a>
 800893a:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <osKernelInitialize+0x64>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d103      	bne.n	800894a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008942:	f06f 0305 	mvn.w	r3, #5
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e00c      	b.n	8008964 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800894a:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <osKernelInitialize+0x64>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008952:	4b08      	ldr	r3, [pc, #32]	; (8008974 <osKernelInitialize+0x64>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e002      	b.n	8008964 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008964:	68fb      	ldr	r3, [r7, #12]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	200007e8 	.word	0x200007e8

08008978 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897e:	f3ef 8305 	mrs	r3, IPSR
 8008982:	60bb      	str	r3, [r7, #8]
  return(result);
 8008984:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10f      	bne.n	80089aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800898a:	f3ef 8310 	mrs	r3, PRIMASK
 800898e:	607b      	str	r3, [r7, #4]
  return(result);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008996:	f3ef 8311 	mrs	r3, BASEPRI
 800899a:	603b      	str	r3, [r7, #0]
  return(result);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d007      	beq.n	80089b2 <osKernelStart+0x3a>
 80089a2:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <osKernelStart+0x68>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d103      	bne.n	80089b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80089aa:	f06f 0305 	mvn.w	r3, #5
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e010      	b.n	80089d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <osKernelStart+0x68>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d109      	bne.n	80089ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ba:	f7ff ffa1 	bl	8008900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089be:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <osKernelStart+0x68>)
 80089c0:	2202      	movs	r2, #2
 80089c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089c4:	f001 fb26 	bl	800a014 <vTaskStartScheduler>
      stat = osOK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e002      	b.n	80089d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200007e8 	.word	0x200007e8

080089e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b090      	sub	sp, #64	; 0x40
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f4:	f3ef 8305 	mrs	r3, IPSR
 80089f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80089fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 808f 	bne.w	8008b20 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a02:	f3ef 8310 	mrs	r3, PRIMASK
 8008a06:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a12:	617b      	str	r3, [r7, #20]
  return(result);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <osThreadNew+0x3e>
 8008a1a:	4b44      	ldr	r3, [pc, #272]	; (8008b2c <osThreadNew+0x148>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d07e      	beq.n	8008b20 <osThreadNew+0x13c>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d07b      	beq.n	8008b20 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a2c:	2318      	movs	r3, #24
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295
 8008a38:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d045      	beq.n	8008acc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <osThreadNew+0x6a>
        name = attr->name;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <osThreadNew+0x90>
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b38      	cmp	r3, #56	; 0x38
 8008a66:	d805      	bhi.n	8008a74 <osThreadNew+0x90>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <osThreadNew+0x94>
        return (NULL);
 8008a74:	2300      	movs	r3, #0
 8008a76:	e054      	b.n	8008b22 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <osThreadNew+0xca>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2ba7      	cmp	r3, #167	; 0xa7
 8008a96:	d90a      	bls.n	8008aae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d006      	beq.n	8008aae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <osThreadNew+0xca>
        mem = 1;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	623b      	str	r3, [r7, #32]
 8008aac:	e010      	b.n	8008ad0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10c      	bne.n	8008ad0 <osThreadNew+0xec>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d108      	bne.n	8008ad0 <osThreadNew+0xec>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <osThreadNew+0xec>
          mem = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	623b      	str	r3, [r7, #32]
 8008aca:	e001      	b.n	8008ad0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d110      	bne.n	8008af8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ade:	9202      	str	r2, [sp, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 ff19 	bl	8009924 <xTaskCreateStatic>
 8008af2:	4603      	mov	r3, r0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	e013      	b.n	8008b20 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d110      	bne.n	8008b20 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	f107 0310 	add.w	r3, r7, #16
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 ff6a 	bl	80099ea <xTaskCreate>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d001      	beq.n	8008b20 <osThreadNew+0x13c>
          hTask = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b20:	693b      	ldr	r3, [r7, #16]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3730      	adds	r7, #48	; 0x30
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200007e8 	.word	0x200007e8

08008b30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b38:	f3ef 8305 	mrs	r3, IPSR
 8008b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10f      	bne.n	8008b64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b44:	f3ef 8310 	mrs	r3, PRIMASK
 8008b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b50:	f3ef 8311 	mrs	r3, BASEPRI
 8008b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <osDelay+0x3c>
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <osDelay+0x58>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d103      	bne.n	8008b6c <osDelay+0x3c>
    stat = osErrorISR;
 8008b64:	f06f 0305 	mvn.w	r3, #5
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	e007      	b.n	8008b7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f894 	bl	8009ca4 <vTaskDelay>
    }
  }

  return (stat);
 8008b7c:	697b      	ldr	r3, [r7, #20]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200007e8 	.word	0x200007e8

08008b8c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f002 fb8f 	bl	800b2b8 <pvTimerGetTimerID>
 8008b9a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <TimerCallback+0x22>
    callb->func (callb->arg);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	6852      	ldr	r2, [r2, #4]
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	; 0x38
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bcc:	f3ef 8305 	mrs	r3, IPSR
 8008bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bd2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d16a      	bne.n	8008cae <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d105      	bne.n	8008bf0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008be4:	f3ef 8311 	mrs	r3, BASEPRI
 8008be8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <osTimerNew+0x40>
 8008bf0:	4b31      	ldr	r3, [pc, #196]	; (8008cb8 <osTimerNew+0x100>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d05a      	beq.n	8008cae <osTimerNew+0xf6>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d057      	beq.n	8008cae <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008bfe:	2008      	movs	r0, #8
 8008c00:	f002 fdb8 	bl	800b774 <pvPortMalloc>
 8008c04:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d050      	beq.n	8008cae <osTimerNew+0xf6>
      callb->func = func;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
 8008c22:	e001      	b.n	8008c28 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008c24:	2301      	movs	r3, #1
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2c:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01c      	beq.n	8008c72 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <osTimerNew+0x8e>
          name = attr->name;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d006      	beq.n	8008c5c <osTimerNew+0xa4>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	2b2b      	cmp	r3, #43	; 0x2b
 8008c54:	d902      	bls.n	8008c5c <osTimerNew+0xa4>
          mem = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	623b      	str	r3, [r7, #32]
 8008c5a:	e00c      	b.n	8008c76 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d108      	bne.n	8008c76 <osTimerNew+0xbe>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d104      	bne.n	8008c76 <osTimerNew+0xbe>
            mem = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	623b      	str	r3, [r7, #32]
 8008c70:	e001      	b.n	8008c76 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d10c      	bne.n	8008c96 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	4b0e      	ldr	r3, [pc, #56]	; (8008cbc <osTimerNew+0x104>)
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c8e:	f001 ff82 	bl	800ab96 <xTimerCreateStatic>
 8008c92:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c94:	e00b      	b.n	8008cae <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d108      	bne.n	8008cae <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008c9c:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <osTimerNew+0x104>)
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ca8:	f001 ff54 	bl	800ab54 <xTimerCreate>
 8008cac:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3730      	adds	r7, #48	; 0x30
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200007e8 	.word	0x200007e8
 8008cbc:	08008b8d 	.word	0x08008b8d

08008cc0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cce:	f3ef 8305 	mrs	r3, IPSR
 8008cd2:	617b      	str	r3, [r7, #20]
  return(result);
 8008cd4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10f      	bne.n	8008cfa <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cda:	f3ef 8310 	mrs	r3, PRIMASK
 8008cde:	613b      	str	r3, [r7, #16]
  return(result);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d105      	bne.n	8008cf2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8008cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <osTimerStart+0x42>
 8008cf2:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <osTimerStart+0x7c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d103      	bne.n	8008d02 <osTimerStart+0x42>
    stat = osErrorISR;
 8008cfa:	f06f 0305 	mvn.w	r3, #5
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e017      	b.n	8008d32 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <osTimerStart+0x50>
    stat = osErrorParameter;
 8008d08:	f06f 0303 	mvn.w	r3, #3
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	e010      	b.n	8008d32 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008d10:	2300      	movs	r3, #0
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	2104      	movs	r1, #4
 8008d1a:	69b8      	ldr	r0, [r7, #24]
 8008d1c:	f001 ffba 	bl	800ac94 <xTimerGenericCommand>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d102      	bne.n	8008d2c <osTimerStart+0x6c>
      stat = osOK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
 8008d2a:	e002      	b.n	8008d32 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8008d2c:	f06f 0302 	mvn.w	r3, #2
 8008d30:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	200007e8 	.word	0x200007e8

08008d40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <vApplicationGetIdleTaskMemory+0x2c>)
 8008d50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	4a06      	ldr	r2, [pc, #24]	; (8008d70 <vApplicationGetIdleTaskMemory+0x30>)
 8008d56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2280      	movs	r2, #128	; 0x80
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	200007ec 	.word	0x200007ec
 8008d70:	20000894 	.word	0x20000894

08008d74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4a07      	ldr	r2, [pc, #28]	; (8008da0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4a06      	ldr	r2, [pc, #24]	; (8008da4 <vApplicationGetTimerTaskMemory+0x30>)
 8008d8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000a94 	.word	0x20000a94
 8008da4:	20000b3c 	.word	0x20000b3c

08008da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 0208 	add.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f103 0208 	add.w	r2, r3, #8
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f103 0208 	add.w	r2, r3, #8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d103      	bne.n	8008e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e00c      	b.n	8008e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e002      	b.n	8008e78 <vListInsert+0x2e>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d2f6      	bcs.n	8008e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
}
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6892      	ldr	r2, [r2, #8]
 8008ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	6852      	ldr	r2, [r2, #4]
 8008edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d103      	bne.n	8008ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	1e5a      	subs	r2, r3, #1
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10c      	bne.n	8008f3e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	b672      	cpsid	i
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	b662      	cpsie	i
 8008f38:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008f3e:	f002 faed 	bl	800b51c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	441a      	add	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	68f9      	ldr	r1, [r7, #12]
 8008f72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f74:	fb01 f303 	mul.w	r3, r1, r3
 8008f78:	441a      	add	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	22ff      	movs	r2, #255	; 0xff
 8008f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d114      	bne.n	8008fbe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01a      	beq.n	8008fd2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3310      	adds	r3, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fadf 	bl	800a564 <xTaskRemoveFromEventList>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d012      	beq.n	8008fd2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <xQueueGenericReset+0xd0>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	e009      	b.n	8008fd2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff fef0 	bl	8008da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff feeb 	bl	8008da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fd2:	f002 fad7 	bl	800b584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fd6:	2301      	movs	r3, #1
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	; 0x38
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10c      	bne.n	8009012 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	b672      	cpsid	i
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	b662      	cpsie	i
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10c      	bne.n	8009032 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	b672      	cpsid	i
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	b662      	cpsie	i
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <xQueueGenericCreateStatic+0x5a>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <xQueueGenericCreateStatic+0x5e>
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <xQueueGenericCreateStatic+0x60>
 8009042:	2300      	movs	r3, #0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10c      	bne.n	8009062 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	b672      	cpsid	i
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	b662      	cpsie	i
 800905c:	623b      	str	r3, [r7, #32]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <xQueueGenericCreateStatic+0x8a>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <xQueueGenericCreateStatic+0x8e>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <xQueueGenericCreateStatic+0x90>
 8009072:	2300      	movs	r3, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10c      	bne.n	8009092 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	b672      	cpsid	i
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	b662      	cpsie	i
 800908c:	61fb      	str	r3, [r7, #28]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009092:	2350      	movs	r3, #80	; 0x50
 8009094:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b50      	cmp	r3, #80	; 0x50
 800909a:	d00c      	beq.n	80090b6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	b672      	cpsid	i
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	b662      	cpsie	i
 80090b0:	61bb      	str	r3, [r7, #24]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f805 	bl	80090e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3730      	adds	r7, #48	; 0x30
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e002      	b.n	800910a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009116:	2101      	movs	r1, #1
 8009118:	69b8      	ldr	r0, [r7, #24]
 800911a:	f7ff fef9 	bl	8008f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08e      	sub	sp, #56	; 0x38
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800913e:	2300      	movs	r3, #0
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10c      	bne.n	8009166 <xQueueGenericSend+0x36>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	b672      	cpsid	i
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	b662      	cpsie	i
 8009160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <xQueueGenericSend+0x44>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <xQueueGenericSend+0x48>
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <xQueueGenericSend+0x4a>
 8009178:	2300      	movs	r3, #0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10c      	bne.n	8009198 <xQueueGenericSend+0x68>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	b672      	cpsid	i
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	b662      	cpsie	i
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSend+0x76>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <xQueueGenericSend+0x7a>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueGenericSend+0x7c>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10c      	bne.n	80091ca <xQueueGenericSend+0x9a>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	b672      	cpsid	i
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	b662      	cpsie	i
 80091c4:	623b      	str	r3, [r7, #32]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091ca:	f001 fb95 	bl	800a8f8 <xTaskGetSchedulerState>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <xQueueGenericSend+0xaa>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <xQueueGenericSend+0xae>
 80091da:	2301      	movs	r3, #1
 80091dc:	e000      	b.n	80091e0 <xQueueGenericSend+0xb0>
 80091de:	2300      	movs	r3, #0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10c      	bne.n	80091fe <xQueueGenericSend+0xce>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	b672      	cpsid	i
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	b662      	cpsie	i
 80091f8:	61fb      	str	r3, [r7, #28]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091fe:	f002 f98d 	bl	800b51c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	429a      	cmp	r2, r3
 800920c:	d302      	bcc.n	8009214 <xQueueGenericSend+0xe4>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d129      	bne.n	8009268 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921a:	f000 fa15 	bl	8009648 <prvCopyDataToQueue>
 800921e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d010      	beq.n	800924a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f999 	bl	800a564 <xTaskRemoveFromEventList>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d013      	beq.n	8009260 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009238:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <xQueueGenericSend+0x208>)
 800923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	e00a      	b.n	8009260 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009250:	4b39      	ldr	r3, [pc, #228]	; (8009338 <xQueueGenericSend+0x208>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009260:	f002 f990 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 8009264:	2301      	movs	r3, #1
 8009266:	e063      	b.n	8009330 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800926e:	f002 f989 	bl	800b584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009272:	2300      	movs	r3, #0
 8009274:	e05c      	b.n	8009330 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800927c:	f107 0314 	add.w	r3, r7, #20
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f9d5 	bl	800a630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009286:	2301      	movs	r3, #1
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800928a:	f002 f97b 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800928e:	f000 ff35 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009292:	f002 f943 	bl	800b51c <vPortEnterCritical>
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929c:	b25b      	sxtb	r3, r3
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d103      	bne.n	80092ac <xQueueGenericSend+0x17c>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <xQueueGenericSend+0x192>
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092c2:	f002 f95f 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092c6:	1d3a      	adds	r2, r7, #4
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	4611      	mov	r1, r2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 f9c4 	bl	800a65c <xTaskCheckForTimeOut>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d124      	bne.n	8009324 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092dc:	f000 faac 	bl	8009838 <prvIsQueueFull>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d018      	beq.n	8009318 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	3310      	adds	r3, #16
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 f8e4 	bl	800a4bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f6:	f000 fa37 	bl	8009768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092fa:	f000 ff0d 	bl	800a118 <xTaskResumeAll>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f af7c 	bne.w	80091fe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <xQueueGenericSend+0x208>)
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	e772      	b.n	80091fe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800931a:	f000 fa25 	bl	8009768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800931e:	f000 fefb 	bl	800a118 <xTaskResumeAll>
 8009322:	e76c      	b.n	80091fe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009326:	f000 fa1f 	bl	8009768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800932a:	f000 fef5 	bl	800a118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800932e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009330:	4618      	mov	r0, r3
 8009332:	3738      	adds	r7, #56	; 0x38
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	b672      	cpsid	i
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	b662      	cpsie	i
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <xQueueGenericSendFromISR+0x40>
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <xQueueGenericSendFromISR+0x44>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <xQueueGenericSendFromISR+0x46>
 8009380:	2300      	movs	r3, #0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	b672      	cpsid	i
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	b662      	cpsie	i
 800939a:	623b      	str	r3, [r7, #32]
}
 800939c:	bf00      	nop
 800939e:	e7fe      	b.n	800939e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d103      	bne.n	80093ae <xQueueGenericSendFromISR+0x72>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d101      	bne.n	80093b2 <xQueueGenericSendFromISR+0x76>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <xQueueGenericSendFromISR+0x78>
 80093b2:	2300      	movs	r3, #0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10c      	bne.n	80093d2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	61fb      	str	r3, [r7, #28]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093d2:	f002 f98b 	bl	800b6ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093d6:	f3ef 8211 	mrs	r2, BASEPRI
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	b672      	cpsid	i
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	b662      	cpsie	i
 80093ee:	61ba      	str	r2, [r7, #24]
 80093f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <xQueueGenericSendFromISR+0xcc>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d12c      	bne.n	8009462 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009418:	f000 f916 	bl	8009648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800941c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d112      	bne.n	800944c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	2b00      	cmp	r3, #0
 800942c:	d016      	beq.n	800945c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	3324      	adds	r3, #36	; 0x24
 8009432:	4618      	mov	r0, r3
 8009434:	f001 f896 	bl	800a564 <xTaskRemoveFromEventList>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00e      	beq.n	800945c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	e007      	b.n	800945c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800944c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009450:	3301      	adds	r3, #1
 8009452:	b2db      	uxtb	r3, r3
 8009454:	b25a      	sxtb	r2, r3
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800945c:	2301      	movs	r3, #1
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009460:	e001      	b.n	8009466 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009474:	4618      	mov	r0, r3
 8009476:	3738      	adds	r7, #56	; 0x38
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08c      	sub	sp, #48	; 0x30
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009488:	2300      	movs	r3, #0
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10c      	bne.n	80094b0 <xQueueReceive+0x34>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	b672      	cpsid	i
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	b662      	cpsie	i
 80094aa:	623b      	str	r3, [r7, #32]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <xQueueReceive+0x42>
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <xQueueReceive+0x46>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <xQueueReceive+0x48>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10c      	bne.n	80094e2 <xQueueReceive+0x66>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	b672      	cpsid	i
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	b662      	cpsie	i
 80094dc:	61fb      	str	r3, [r7, #28]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e2:	f001 fa09 	bl	800a8f8 <xTaskGetSchedulerState>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <xQueueReceive+0x76>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <xQueueReceive+0x7a>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueReceive+0x7c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10c      	bne.n	8009516 <xQueueReceive+0x9a>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	b672      	cpsid	i
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	b662      	cpsie	i
 8009510:	61bb      	str	r3, [r7, #24]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009516:	f002 f801 	bl	800b51c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	2b00      	cmp	r3, #0
 8009524:	d01f      	beq.n	8009566 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952a:	f000 f8f7 	bl	800971c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	3310      	adds	r3, #16
 8009542:	4618      	mov	r0, r3
 8009544:	f001 f80e 	bl	800a564 <xTaskRemoveFromEventList>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800954e:	4b3d      	ldr	r3, [pc, #244]	; (8009644 <xQueueReceive+0x1c8>)
 8009550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800955e:	f002 f811 	bl	800b584 <vPortExitCritical>
				return pdPASS;
 8009562:	2301      	movs	r3, #1
 8009564:	e069      	b.n	800963a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800956c:	f002 f80a 	bl	800b584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009570:	2300      	movs	r3, #0
 8009572:	e062      	b.n	800963a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800957a:	f107 0310 	add.w	r3, r7, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f856 	bl	800a630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009588:	f001 fffc 	bl	800b584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800958c:	f000 fdb6 	bl	800a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009590:	f001 ffc4 	bl	800b51c <vPortEnterCritical>
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800959a:	b25b      	sxtb	r3, r3
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x12e>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	d103      	bne.n	80095c0 <xQueueReceive+0x144>
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095c0:	f001 ffe0 	bl	800b584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095c4:	1d3a      	adds	r2, r7, #4
 80095c6:	f107 0310 	add.w	r3, r7, #16
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 f845 	bl	800a65c <xTaskCheckForTimeOut>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d123      	bne.n	8009620 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095da:	f000 f917 	bl	800980c <prvIsQueueEmpty>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d017      	beq.n	8009614 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 ff65 	bl	800a4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f4:	f000 f8b8 	bl	8009768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095f8:	f000 fd8e 	bl	800a118 <xTaskResumeAll>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d189      	bne.n	8009516 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009602:	4b10      	ldr	r3, [pc, #64]	; (8009644 <xQueueReceive+0x1c8>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	e780      	b.n	8009516 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009616:	f000 f8a7 	bl	8009768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800961a:	f000 fd7d 	bl	800a118 <xTaskResumeAll>
 800961e:	e77a      	b.n	8009516 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009622:	f000 f8a1 	bl	8009768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009626:	f000 fd77 	bl	800a118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800962a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800962c:	f000 f8ee 	bl	800980c <prvIsQueueEmpty>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	f43f af6f 	beq.w	8009516 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800963a:	4618      	mov	r0, r3
 800963c:	3730      	adds	r7, #48	; 0x30
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10d      	bne.n	8009682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d14d      	bne.n	800970a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f001 f95e 	bl	800a934 <xTaskPriorityDisinherit>
 8009678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	609a      	str	r2, [r3, #8]
 8009680:	e043      	b.n	800970a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d119      	bne.n	80096bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6858      	ldr	r0, [r3, #4]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	461a      	mov	r2, r3
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	f002 fc36 	bl	800bf04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	441a      	add	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d32b      	bcc.n	800970a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	605a      	str	r2, [r3, #4]
 80096ba:	e026      	b.n	800970a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68d8      	ldr	r0, [r3, #12]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	461a      	mov	r2, r3
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	f002 fc1c 	bl	800bf04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	425b      	negs	r3, r3
 80096d6:	441a      	add	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d207      	bcs.n	80096f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	425b      	negs	r3, r3
 80096f2:	441a      	add	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d105      	bne.n	800970a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	3b01      	subs	r3, #1
 8009708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009712:	697b      	ldr	r3, [r7, #20]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d018      	beq.n	8009760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	441a      	add	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	429a      	cmp	r2, r3
 8009746:	d303      	bcc.n	8009750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68d9      	ldr	r1, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	461a      	mov	r2, r3
 800975a:	6838      	ldr	r0, [r7, #0]
 800975c:	f002 fbd2 	bl	800bf04 <memcpy>
	}
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009770:	f001 fed4 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800977a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800977c:	e011      	b.n	80097a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	d012      	beq.n	80097ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3324      	adds	r3, #36	; 0x24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 feea 	bl	800a564 <xTaskRemoveFromEventList>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009796:	f000 ffc7 	bl	800a728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	3b01      	subs	r3, #1
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	dce9      	bgt.n	800977e <prvUnlockQueue+0x16>
 80097aa:	e000      	b.n	80097ae <prvUnlockQueue+0x46>
					break;
 80097ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	22ff      	movs	r2, #255	; 0xff
 80097b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097b6:	f001 fee5 	bl	800b584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097ba:	f001 feaf 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097c6:	e011      	b.n	80097ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d012      	beq.n	80097f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3310      	adds	r3, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fec5 	bl	800a564 <xTaskRemoveFromEventList>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097e0:	f000 ffa2 	bl	800a728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dce9      	bgt.n	80097c8 <prvUnlockQueue+0x60>
 80097f4:	e000      	b.n	80097f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	22ff      	movs	r2, #255	; 0xff
 80097fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009800:	f001 fec0 	bl	800b584 <vPortExitCritical>
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009814:	f001 fe82 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e001      	b.n	800982a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800982a:	f001 feab 	bl	800b584 <vPortExitCritical>

	return xReturn;
 800982e:	68fb      	ldr	r3, [r7, #12]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009840:	f001 fe6c 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984c:	429a      	cmp	r2, r3
 800984e:	d102      	bne.n	8009856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e001      	b.n	800985a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800985a:	f001 fe93 	bl	800b584 <vPortExitCritical>

	return xReturn;
 800985e:	68fb      	ldr	r3, [r7, #12]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e014      	b.n	80098a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009878:	4a0f      	ldr	r2, [pc, #60]	; (80098b8 <vQueueAddToRegistry+0x50>)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10b      	bne.n	800989c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009884:	490c      	ldr	r1, [pc, #48]	; (80098b8 <vQueueAddToRegistry+0x50>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800988e:	4a0a      	ldr	r2, [pc, #40]	; (80098b8 <vQueueAddToRegistry+0x50>)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	4413      	add	r3, r2
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800989a:	e006      	b.n	80098aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b07      	cmp	r3, #7
 80098a6:	d9e7      	bls.n	8009878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000f3c 	.word	0x20000f3c

080098bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098cc:	f001 fe26 	bl	800b51c <vPortEnterCritical>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d103      	bne.n	80098e6 <vQueueWaitForMessageRestricted+0x2a>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f2:	d103      	bne.n	80098fc <vQueueWaitForMessageRestricted+0x40>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098fc:	f001 fe42 	bl	800b584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fdf9 	bl	800a508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7ff ff26 	bl	8009768 <prvUnlockQueue>
	}
 800991c:	bf00      	nop
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08e      	sub	sp, #56	; 0x38
 8009928:	af04      	add	r7, sp, #16
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10c      	bne.n	8009952 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	b672      	cpsid	i
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	b662      	cpsie	i
 800994c:	623b      	str	r3, [r7, #32]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	b672      	cpsid	i
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	b662      	cpsie	i
 800996c:	61fb      	str	r3, [r7, #28]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009972:	23a8      	movs	r3, #168	; 0xa8
 8009974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2ba8      	cmp	r3, #168	; 0xa8
 800997a:	d00c      	beq.n	8009996 <xTaskCreateStatic+0x72>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	b672      	cpsid	i
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	b662      	cpsie	i
 8009990:	61bb      	str	r3, [r7, #24]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01e      	beq.n	80099dc <xTaskCreateStatic+0xb8>
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d01b      	beq.n	80099dc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099b6:	2300      	movs	r3, #0
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	9302      	str	r3, [sp, #8]
 80099be:	f107 0314 	add.w	r3, r7, #20
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f850 	bl	8009a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099d6:	f000 f8f5 	bl	8009bc4 <prvAddNewTaskToReadyList>
 80099da:	e001      	b.n	80099e0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099e0:	697b      	ldr	r3, [r7, #20]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3728      	adds	r7, #40	; 0x28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b08c      	sub	sp, #48	; 0x30
 80099ee:	af04      	add	r7, sp, #16
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	603b      	str	r3, [r7, #0]
 80099f6:	4613      	mov	r3, r2
 80099f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 feb8 	bl	800b774 <pvPortMalloc>
 8009a04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00e      	beq.n	8009a2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a0c:	20a8      	movs	r0, #168	; 0xa8
 8009a0e:	f001 feb1 	bl	800b774 <pvPortMalloc>
 8009a12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8009a20:	e005      	b.n	8009a2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a22:	6978      	ldr	r0, [r7, #20]
 8009a24:	f001 ff70 	bl	800b908 <vPortFree>
 8009a28:	e001      	b.n	8009a2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d017      	beq.n	8009a64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a3c:	88fa      	ldrh	r2, [r7, #6]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	9302      	str	r3, [sp, #8]
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f80e 	bl	8009a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a58:	69f8      	ldr	r0, [r7, #28]
 8009a5a:	f000 f8b3 	bl	8009bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e002      	b.n	8009a6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a64:	f04f 33ff 	mov.w	r3, #4294967295
 8009a68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	21a5      	movs	r1, #165	; 0xa5
 8009a8e:	f002 f95a 	bl	800bd46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009a9c:	440b      	add	r3, r1
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00c      	beq.n	8009ad0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	b672      	cpsid	i
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	b662      	cpsie	i
 8009aca:	617b      	str	r3, [r7, #20]
}
 8009acc:	bf00      	nop
 8009ace:	e7fe      	b.n	8009ace <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01f      	beq.n	8009b16 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	e012      	b.n	8009b02 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	7819      	ldrb	r1, [r3, #0]
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	3334      	adds	r3, #52	; 0x34
 8009aec:	460a      	mov	r2, r1
 8009aee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d006      	beq.n	8009b0a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	2b0f      	cmp	r3, #15
 8009b06:	d9e9      	bls.n	8009adc <prvInitialiseNewTask+0x68>
 8009b08:	e000      	b.n	8009b0c <prvInitialiseNewTask+0x98>
			{
				break;
 8009b0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b14:	e003      	b.n	8009b1e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	2b37      	cmp	r3, #55	; 0x37
 8009b22:	d901      	bls.n	8009b28 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b24:	2337      	movs	r3, #55	; 0x37
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	2200      	movs	r2, #0
 8009b38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff f952 	bl	8008de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	3318      	adds	r3, #24
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff f94d 	bl	8008de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	3354      	adds	r3, #84	; 0x54
 8009b78:	224c      	movs	r2, #76	; 0x4c
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 f8e2 	bl	800bd46 <memset>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	4a0c      	ldr	r2, [pc, #48]	; (8009bb8 <prvInitialiseNewTask+0x144>)
 8009b86:	659a      	str	r2, [r3, #88]	; 0x58
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	; (8009bbc <prvInitialiseNewTask+0x148>)
 8009b8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	4a0b      	ldr	r2, [pc, #44]	; (8009bc0 <prvInitialiseNewTask+0x14c>)
 8009b92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	69b8      	ldr	r0, [r7, #24]
 8009b9a:	f001 fbaf 	bl	800b2fc <pxPortInitialiseStack>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bb0:	bf00      	nop
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	200051c8 	.word	0x200051c8
 8009bbc:	20005230 	.word	0x20005230
 8009bc0:	20005298 	.word	0x20005298

08009bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bcc:	f001 fca6 	bl	800b51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a2c      	ldr	r2, [pc, #176]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bda:	4b2c      	ldr	r3, [pc, #176]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009be2:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009be8:	4b27      	ldr	r3, [pc, #156]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d110      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bf0:	f000 fdbe 	bl	800a770 <prvInitialiseTaskLists>
 8009bf4:	e00d      	b.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bf6:	4b26      	ldr	r3, [pc, #152]	; (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bfe:	4b23      	ldr	r3, [pc, #140]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d802      	bhi.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c0c:	4a1f      	ldr	r2, [pc, #124]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c12:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <prvAddNewTaskToReadyList+0x74>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <prvAddNewTaskToReadyList+0xd8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7ff f8d7 	bl	8008e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c54:	f001 fc96 	bl	800b584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c58:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d207      	bcs.n	8009c7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <prvAddNewTaskToReadyList+0xdc>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20001450 	.word	0x20001450
 8009c8c:	20000f7c 	.word	0x20000f7c
 8009c90:	2000145c 	.word	0x2000145c
 8009c94:	2000146c 	.word	0x2000146c
 8009c98:	20001458 	.word	0x20001458
 8009c9c:	20000f80 	.word	0x20000f80
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d019      	beq.n	8009cea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <vTaskDelay+0x64>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <vTaskDelay+0x34>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	b672      	cpsid	i
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	b662      	cpsie	i
 8009cd2:	60bb      	str	r3, [r7, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009cd8:	f000 fa10 	bl	800a0fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fe9a 	bl	800aa18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ce4:	f000 fa18 	bl	800a118 <xTaskResumeAll>
 8009ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009cf0:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <vTaskDelay+0x68>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20001478 	.word	0x20001478
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009d18:	f001 fc00 	bl	800b51c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <vTaskSuspend+0x18>
 8009d22:	4b31      	ldr	r3, [pc, #196]	; (8009de8 <vTaskSuspend+0xd8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	e000      	b.n	8009d2a <vTaskSuspend+0x1a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff f8c3 	bl	8008ebc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d004      	beq.n	8009d48 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3318      	adds	r3, #24
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff f8ba 	bl	8008ebc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4827      	ldr	r0, [pc, #156]	; (8009dec <vTaskSuspend+0xdc>)
 8009d50:	f7ff f857 	bl	8008e02 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d103      	bne.n	8009d68 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009d68:	f001 fc0c 	bl	800b584 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009d6c:	4b20      	ldr	r3, [pc, #128]	; (8009df0 <vTaskSuspend+0xe0>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009d74:	f001 fbd2 	bl	800b51c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009d78:	f000 fd9e 	bl	800a8b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009d7c:	f001 fc02 	bl	800b584 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <vTaskSuspend+0xd8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d129      	bne.n	8009dde <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8009d8a:	4b19      	ldr	r3, [pc, #100]	; (8009df0 <vTaskSuspend+0xe0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d019      	beq.n	8009dc6 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009d92:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <vTaskSuspend+0xe4>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <vTaskSuspend+0xa4>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	b672      	cpsid	i
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	b662      	cpsie	i
 8009dae:	60bb      	str	r3, [r7, #8]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8009db4:	4b10      	ldr	r3, [pc, #64]	; (8009df8 <vTaskSuspend+0xe8>)
 8009db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dc4:	e00b      	b.n	8009dde <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <vTaskSuspend+0xdc>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <vTaskSuspend+0xec>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d103      	bne.n	8009dda <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <vTaskSuspend+0xd8>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]
	}
 8009dd8:	e001      	b.n	8009dde <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8009dda:	f000 fb09 	bl	800a3f0 <vTaskSwitchContext>
	}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20000f7c 	.word	0x20000f7c
 8009dec:	2000143c 	.word	0x2000143c
 8009df0:	2000145c 	.word	0x2000145c
 8009df4:	20001478 	.word	0x20001478
 8009df8:	e000ed04 	.word	0xe000ed04
 8009dfc:	20001450 	.word	0x20001450

08009e00 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10c      	bne.n	8009e30 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	b672      	cpsid	i
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	b662      	cpsie	i
 8009e2a:	60fb      	str	r3, [r7, #12]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <prvTaskIsTaskSuspended+0x60>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d10a      	bne.n	8009e50 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <prvTaskIsTaskSuspended+0x64>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d005      	beq.n	8009e50 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e50:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009e52:	4618      	mov	r0, r3
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	2000143c 	.word	0x2000143c
 8009e64:	20001410 	.word	0x20001410

08009e68 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10c      	bne.n	8009e94 <vTaskResume+0x2c>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	b672      	cpsid	i
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	b662      	cpsie	i
 8009e8e:	60bb      	str	r3, [r7, #8]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009e94:	4b20      	ldr	r3, [pc, #128]	; (8009f18 <vTaskResume+0xb0>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d038      	beq.n	8009f10 <vTaskResume+0xa8>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d035      	beq.n	8009f10 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8009ea4:	f001 fb3a 	bl	800b51c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff ffa9 	bl	8009e00 <prvTaskIsTaskSuspended>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d02b      	beq.n	8009f0c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe ffff 	bl	8008ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <vTaskResume+0xb4>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d903      	bls.n	8009ed2 <vTaskResume+0x6a>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	4a13      	ldr	r2, [pc, #76]	; (8009f1c <vTaskResume+0xb4>)
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4a10      	ldr	r2, [pc, #64]	; (8009f20 <vTaskResume+0xb8>)
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7fe ff8a 	bl	8008e02 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <vTaskResume+0xb0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d307      	bcc.n	8009f0c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009efc:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <vTaskResume+0xbc>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009f0c:	f001 fb3a 	bl	800b584 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20000f7c 	.word	0x20000f7c
 8009f1c:	20001458 	.word	0x20001458
 8009f20:	20000f80 	.word	0x20000f80
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08a      	sub	sp, #40	; 0x28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10c      	bne.n	8009f58 <xTaskResumeFromISR+0x30>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	b672      	cpsid	i
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	b662      	cpsie	i
 8009f52:	61bb      	str	r3, [r7, #24]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f58:	f001 fbc8 	bl	800b6ec <vPortValidateInterruptPriority>
	__asm volatile
 8009f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	b672      	cpsid	i
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	b662      	cpsie	i
 8009f74:	617a      	str	r2, [r7, #20]
 8009f76:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f78:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f7a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009f7c:	6a38      	ldr	r0, [r7, #32]
 8009f7e:	f7ff ff3f 	bl	8009e00 <prvTaskIsTaskSuspended>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d030      	beq.n	8009fea <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <xTaskResumeFromISR+0xd8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d126      	bne.n	8009fde <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <xTaskResumeFromISR+0xdc>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d301      	bcc.n	8009fa2 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe ff88 	bl	8008ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4b15      	ldr	r3, [pc, #84]	; (800a008 <xTaskResumeFromISR+0xe0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d903      	bls.n	8009fc0 <xTaskResumeFromISR+0x98>
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	4a12      	ldr	r2, [pc, #72]	; (800a008 <xTaskResumeFromISR+0xe0>)
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4a0f      	ldr	r2, [pc, #60]	; (800a00c <xTaskResumeFromISR+0xe4>)
 8009fce:	441a      	add	r2, r3
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe ff13 	bl	8008e02 <vListInsertEnd>
 8009fdc:	e005      	b.n	8009fea <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	3318      	adds	r3, #24
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	480a      	ldr	r0, [pc, #40]	; (800a010 <xTaskResumeFromISR+0xe8>)
 8009fe6:	f7fe ff0c 	bl	8008e02 <vListInsertEnd>
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f383 8811 	msr	BASEPRI, r3
}
 8009ff4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3728      	adds	r7, #40	; 0x28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20001478 	.word	0x20001478
 800a004:	20000f7c 	.word	0x20000f7c
 800a008:	20001458 	.word	0x20001458
 800a00c:	20000f80 	.word	0x20000f80
 800a010:	20001410 	.word	0x20001410

0800a014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08a      	sub	sp, #40	; 0x28
 800a018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a022:	463a      	mov	r2, r7
 800a024:	1d39      	adds	r1, r7, #4
 800a026:	f107 0308 	add.w	r3, r7, #8
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fe88 	bl	8008d40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	9202      	str	r2, [sp, #8]
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	2300      	movs	r3, #0
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	2300      	movs	r3, #0
 800a040:	460a      	mov	r2, r1
 800a042:	4926      	ldr	r1, [pc, #152]	; (800a0dc <vTaskStartScheduler+0xc8>)
 800a044:	4826      	ldr	r0, [pc, #152]	; (800a0e0 <vTaskStartScheduler+0xcc>)
 800a046:	f7ff fc6d 	bl	8009924 <xTaskCreateStatic>
 800a04a:	4603      	mov	r3, r0
 800a04c:	4a25      	ldr	r2, [pc, #148]	; (800a0e4 <vTaskStartScheduler+0xd0>)
 800a04e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a050:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <vTaskStartScheduler+0xd0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a058:	2301      	movs	r3, #1
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e001      	b.n	800a062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a05e:	2300      	movs	r3, #0
 800a060:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d102      	bne.n	800a06e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a068:	f000 fd2a 	bl	800aac0 <xTimerCreateTimerTask>
 800a06c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d11d      	bne.n	800a0b0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	b672      	cpsid	i
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	b662      	cpsie	i
 800a088:	613b      	str	r3, [r7, #16]
}
 800a08a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a08c:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <vTaskStartScheduler+0xd4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3354      	adds	r3, #84	; 0x54
 800a092:	4a16      	ldr	r2, [pc, #88]	; (800a0ec <vTaskStartScheduler+0xd8>)
 800a094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a096:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <vTaskStartScheduler+0xdc>)
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a09e:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <vTaskStartScheduler+0xe0>)
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0a4:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <vTaskStartScheduler+0xe4>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0aa:	f001 f9b9 	bl	800b420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0ae:	e010      	b.n	800a0d2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b6:	d10c      	bne.n	800a0d2 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	60fb      	str	r3, [r7, #12]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <vTaskStartScheduler+0xbc>
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800cce8 	.word	0x0800cce8
 800a0e0:	0800a741 	.word	0x0800a741
 800a0e4:	20001474 	.word	0x20001474
 800a0e8:	20000f7c 	.word	0x20000f7c
 800a0ec:	200000bc 	.word	0x200000bc
 800a0f0:	20001470 	.word	0x20001470
 800a0f4:	2000145c 	.word	0x2000145c
 800a0f8:	20001454 	.word	0x20001454

0800a0fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <vTaskSuspendAll+0x18>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a03      	ldr	r2, [pc, #12]	; (800a114 <vTaskSuspendAll+0x18>)
 800a108:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a10a:	bf00      	nop
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	20001478 	.word	0x20001478

0800a118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a126:	4b43      	ldr	r3, [pc, #268]	; (800a234 <xTaskResumeAll+0x11c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10c      	bne.n	800a148 <xTaskResumeAll+0x30>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	b672      	cpsid	i
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	b662      	cpsie	i
 800a142:	603b      	str	r3, [r7, #0]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a148:	f001 f9e8 	bl	800b51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a14c:	4b39      	ldr	r3, [pc, #228]	; (800a234 <xTaskResumeAll+0x11c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3b01      	subs	r3, #1
 800a152:	4a38      	ldr	r2, [pc, #224]	; (800a234 <xTaskResumeAll+0x11c>)
 800a154:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a156:	4b37      	ldr	r3, [pc, #220]	; (800a234 <xTaskResumeAll+0x11c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d162      	bne.n	800a224 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a15e:	4b36      	ldr	r3, [pc, #216]	; (800a238 <xTaskResumeAll+0x120>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d05e      	beq.n	800a224 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a166:	e02f      	b.n	800a1c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a168:	4b34      	ldr	r3, [pc, #208]	; (800a23c <xTaskResumeAll+0x124>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3318      	adds	r3, #24
 800a174:	4618      	mov	r0, r3
 800a176:	f7fe fea1 	bl	8008ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fe9c 	bl	8008ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a188:	4b2d      	ldr	r3, [pc, #180]	; (800a240 <xTaskResumeAll+0x128>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d903      	bls.n	800a198 <xTaskResumeAll+0x80>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <xTaskResumeAll+0x128>)
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4a27      	ldr	r2, [pc, #156]	; (800a244 <xTaskResumeAll+0x12c>)
 800a1a6:	441a      	add	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f7fe fe27 	bl	8008e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4b23      	ldr	r3, [pc, #140]	; (800a248 <xTaskResumeAll+0x130>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d302      	bcc.n	800a1c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a1c2:	4b22      	ldr	r3, [pc, #136]	; (800a24c <xTaskResumeAll+0x134>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1c8:	4b1c      	ldr	r3, [pc, #112]	; (800a23c <xTaskResumeAll+0x124>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1cb      	bne.n	800a168 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1d6:	f000 fb6f 	bl	800a8b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1da:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <xTaskResumeAll+0x138>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d010      	beq.n	800a208 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1e6:	f000 f847 	bl	800a278 <xTaskIncrementTick>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a1f0:	4b16      	ldr	r3, [pc, #88]	; (800a24c <xTaskResumeAll+0x134>)
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f1      	bne.n	800a1e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <xTaskResumeAll+0x138>)
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a208:	4b10      	ldr	r3, [pc, #64]	; (800a24c <xTaskResumeAll+0x134>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <xTaskResumeAll+0x13c>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a224:	f001 f9ae 	bl	800b584 <vPortExitCritical>

	return xAlreadyYielded;
 800a228:	68bb      	ldr	r3, [r7, #8]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20001478 	.word	0x20001478
 800a238:	20001450 	.word	0x20001450
 800a23c:	20001410 	.word	0x20001410
 800a240:	20001458 	.word	0x20001458
 800a244:	20000f80 	.word	0x20000f80
 800a248:	20000f7c 	.word	0x20000f7c
 800a24c:	20001464 	.word	0x20001464
 800a250:	20001460 	.word	0x20001460
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <xTaskGetTickCount+0x1c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a264:	687b      	ldr	r3, [r7, #4]
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	20001454 	.word	0x20001454

0800a278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a282:	4b50      	ldr	r3, [pc, #320]	; (800a3c4 <xTaskIncrementTick+0x14c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 808b 	bne.w	800a3a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a28c:	4b4e      	ldr	r3, [pc, #312]	; (800a3c8 <xTaskIncrementTick+0x150>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3301      	adds	r3, #1
 800a292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a294:	4a4c      	ldr	r2, [pc, #304]	; (800a3c8 <xTaskIncrementTick+0x150>)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d122      	bne.n	800a2e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2a0:	4b4a      	ldr	r3, [pc, #296]	; (800a3cc <xTaskIncrementTick+0x154>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00c      	beq.n	800a2c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	b672      	cpsid	i
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	b662      	cpsie	i
 800a2be:	603b      	str	r3, [r7, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <xTaskIncrementTick+0x4a>
 800a2c4:	4b41      	ldr	r3, [pc, #260]	; (800a3cc <xTaskIncrementTick+0x154>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	4b41      	ldr	r3, [pc, #260]	; (800a3d0 <xTaskIncrementTick+0x158>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a3f      	ldr	r2, [pc, #252]	; (800a3cc <xTaskIncrementTick+0x154>)
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	4a3f      	ldr	r2, [pc, #252]	; (800a3d0 <xTaskIncrementTick+0x158>)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	4b3e      	ldr	r3, [pc, #248]	; (800a3d4 <xTaskIncrementTick+0x15c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	4a3d      	ldr	r2, [pc, #244]	; (800a3d4 <xTaskIncrementTick+0x15c>)
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	f000 fae9 	bl	800a8b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2e6:	4b3c      	ldr	r3, [pc, #240]	; (800a3d8 <xTaskIncrementTick+0x160>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d349      	bcc.n	800a384 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2f0:	4b36      	ldr	r3, [pc, #216]	; (800a3cc <xTaskIncrementTick+0x154>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fa:	4b37      	ldr	r3, [pc, #220]	; (800a3d8 <xTaskIncrementTick+0x160>)
 800a2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a300:	601a      	str	r2, [r3, #0]
					break;
 800a302:	e03f      	b.n	800a384 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a304:	4b31      	ldr	r3, [pc, #196]	; (800a3cc <xTaskIncrementTick+0x154>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d203      	bcs.n	800a324 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a31c:	4a2e      	ldr	r2, [pc, #184]	; (800a3d8 <xTaskIncrementTick+0x160>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a322:	e02f      	b.n	800a384 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fdc7 	bl	8008ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3318      	adds	r3, #24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fdbe 	bl	8008ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4b25      	ldr	r3, [pc, #148]	; (800a3dc <xTaskIncrementTick+0x164>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d903      	bls.n	800a354 <xTaskIncrementTick+0xdc>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a22      	ldr	r2, [pc, #136]	; (800a3dc <xTaskIncrementTick+0x164>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <xTaskIncrementTick+0x168>)
 800a362:	441a      	add	r2, r3
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe fd49 	bl	8008e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <xTaskIncrementTick+0x16c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d3b8      	bcc.n	800a2f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a37e:	2301      	movs	r3, #1
 800a380:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a382:	e7b5      	b.n	800a2f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a384:	4b17      	ldr	r3, [pc, #92]	; (800a3e4 <xTaskIncrementTick+0x16c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	4915      	ldr	r1, [pc, #84]	; (800a3e0 <xTaskIncrementTick+0x168>)
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	440b      	add	r3, r1
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d907      	bls.n	800a3ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e004      	b.n	800a3ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <xTaskIncrementTick+0x170>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	4a0f      	ldr	r2, [pc, #60]	; (800a3e8 <xTaskIncrementTick+0x170>)
 800a3aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <xTaskIncrementTick+0x174>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a3b8:	697b      	ldr	r3, [r7, #20]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20001478 	.word	0x20001478
 800a3c8:	20001454 	.word	0x20001454
 800a3cc:	20001408 	.word	0x20001408
 800a3d0:	2000140c 	.word	0x2000140c
 800a3d4:	20001468 	.word	0x20001468
 800a3d8:	20001470 	.word	0x20001470
 800a3dc:	20001458 	.word	0x20001458
 800a3e0:	20000f80 	.word	0x20000f80
 800a3e4:	20000f7c 	.word	0x20000f7c
 800a3e8:	20001460 	.word	0x20001460
 800a3ec:	20001464 	.word	0x20001464

0800a3f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3f6:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <vTaskSwitchContext+0xb4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3fe:	4b2a      	ldr	r3, [pc, #168]	; (800a4a8 <vTaskSwitchContext+0xb8>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a404:	e048      	b.n	800a498 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a406:	4b28      	ldr	r3, [pc, #160]	; (800a4a8 <vTaskSwitchContext+0xb8>)
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40c:	4b27      	ldr	r3, [pc, #156]	; (800a4ac <vTaskSwitchContext+0xbc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	e012      	b.n	800a43a <vTaskSwitchContext+0x4a>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10c      	bne.n	800a434 <vTaskSwitchContext+0x44>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	b672      	cpsid	i
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	b662      	cpsie	i
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <vTaskSwitchContext+0x42>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3b01      	subs	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	491d      	ldr	r1, [pc, #116]	; (800a4b0 <vTaskSwitchContext+0xc0>)
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0e2      	beq.n	800a414 <vTaskSwitchContext+0x24>
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <vTaskSwitchContext+0xc0>)
 800a45a:	4413      	add	r3, r2
 800a45c:	60bb      	str	r3, [r7, #8]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	605a      	str	r2, [r3, #4]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	3308      	adds	r3, #8
 800a470:	429a      	cmp	r2, r3
 800a472:	d104      	bne.n	800a47e <vTaskSwitchContext+0x8e>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	605a      	str	r2, [r3, #4]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	4a0b      	ldr	r2, [pc, #44]	; (800a4b4 <vTaskSwitchContext+0xc4>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <vTaskSwitchContext+0xbc>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <vTaskSwitchContext+0xc4>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3354      	adds	r3, #84	; 0x54
 800a494:	4a08      	ldr	r2, [pc, #32]	; (800a4b8 <vTaskSwitchContext+0xc8>)
 800a496:	6013      	str	r3, [r2, #0]
}
 800a498:	bf00      	nop
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	20001478 	.word	0x20001478
 800a4a8:	20001464 	.word	0x20001464
 800a4ac:	20001458 	.word	0x20001458
 800a4b0:	20000f80 	.word	0x20000f80
 800a4b4:	20000f7c 	.word	0x20000f7c
 800a4b8:	200000bc 	.word	0x200000bc

0800a4bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	b672      	cpsid	i
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	b662      	cpsie	i
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4e6:	4b07      	ldr	r3, [pc, #28]	; (800a504 <vTaskPlaceOnEventList+0x48>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3318      	adds	r3, #24
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7fe fcab 	bl	8008e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	6838      	ldr	r0, [r7, #0]
 800a4f8:	f000 fa8e 	bl	800aa18 <prvAddCurrentTaskToDelayedList>
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000f7c 	.word	0x20000f7c

0800a508 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10c      	bne.n	800a534 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	b672      	cpsid	i
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	b662      	cpsie	i
 800a52e:	617b      	str	r3, [r7, #20]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <vTaskPlaceOnEventListRestricted+0x58>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3318      	adds	r3, #24
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7fe fc60 	bl	8008e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	68b8      	ldr	r0, [r7, #8]
 800a552:	f000 fa61 	bl	800aa18 <prvAddCurrentTaskToDelayedList>
	}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000f7c 	.word	0x20000f7c

0800a564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10c      	bne.n	800a594 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	b672      	cpsid	i
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	b662      	cpsie	i
 800a58e:	60fb      	str	r3, [r7, #12]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	3318      	adds	r3, #24
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe fc8f 	bl	8008ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a59e:	4b1e      	ldr	r3, [pc, #120]	; (800a618 <xTaskRemoveFromEventList+0xb4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d11d      	bne.n	800a5e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fc86 	bl	8008ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b4:	4b19      	ldr	r3, [pc, #100]	; (800a61c <xTaskRemoveFromEventList+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d903      	bls.n	800a5c4 <xTaskRemoveFromEventList+0x60>
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	4a16      	ldr	r2, [pc, #88]	; (800a61c <xTaskRemoveFromEventList+0xb8>)
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4a13      	ldr	r2, [pc, #76]	; (800a620 <xTaskRemoveFromEventList+0xbc>)
 800a5d2:	441a      	add	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fe fc11 	bl	8008e02 <vListInsertEnd>
 800a5e0:	e005      	b.n	800a5ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3318      	adds	r3, #24
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	480e      	ldr	r0, [pc, #56]	; (800a624 <xTaskRemoveFromEventList+0xc0>)
 800a5ea:	f7fe fc0a 	bl	8008e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <xTaskRemoveFromEventList+0xc4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d905      	bls.n	800a608 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <xTaskRemoveFromEventList+0xc8>)
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e001      	b.n	800a60c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a60c:	697b      	ldr	r3, [r7, #20]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20001478 	.word	0x20001478
 800a61c:	20001458 	.word	0x20001458
 800a620:	20000f80 	.word	0x20000f80
 800a624:	20001410 	.word	0x20001410
 800a628:	20000f7c 	.word	0x20000f7c
 800a62c:	20001464 	.word	0x20001464

0800a630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a638:	4b06      	ldr	r3, [pc, #24]	; (800a654 <vTaskInternalSetTimeOutState+0x24>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a640:	4b05      	ldr	r3, [pc, #20]	; (800a658 <vTaskInternalSetTimeOutState+0x28>)
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	605a      	str	r2, [r3, #4]
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	20001468 	.word	0x20001468
 800a658:	20001454 	.word	0x20001454

0800a65c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10c      	bne.n	800a686 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	b672      	cpsid	i
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	b662      	cpsie	i
 800a680:	613b      	str	r3, [r7, #16]
}
 800a682:	bf00      	nop
 800a684:	e7fe      	b.n	800a684 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10c      	bne.n	800a6a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	b672      	cpsid	i
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	b662      	cpsie	i
 800a6a0:	60fb      	str	r3, [r7, #12]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a6a6:	f000 ff39 	bl	800b51c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6aa:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <xTaskCheckForTimeOut+0xc4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d102      	bne.n	800a6ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	e023      	b.n	800a712 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b15      	ldr	r3, [pc, #84]	; (800a724 <xTaskCheckForTimeOut+0xc8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d007      	beq.n	800a6e6 <xTaskCheckForTimeOut+0x8a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d302      	bcc.n	800a6e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	e015      	b.n	800a712 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d20b      	bcs.n	800a708 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff ff97 	bl	800a630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a702:	2300      	movs	r3, #0
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	e004      	b.n	800a712 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a70e:	2301      	movs	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a712:	f000 ff37 	bl	800b584 <vPortExitCritical>

	return xReturn;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	20001454 	.word	0x20001454
 800a724:	20001468 	.word	0x20001468

0800a728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a72c:	4b03      	ldr	r3, [pc, #12]	; (800a73c <vTaskMissedYield+0x14>)
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20001464 	.word	0x20001464

0800a740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a748:	f000 f852 	bl	800a7f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a74c:	4b06      	ldr	r3, [pc, #24]	; (800a768 <prvIdleTask+0x28>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d9f9      	bls.n	800a748 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <prvIdleTask+0x2c>)
 800a756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a764:	e7f0      	b.n	800a748 <prvIdleTask+0x8>
 800a766:	bf00      	nop
 800a768:	20000f80 	.word	0x20000f80
 800a76c:	e000ed04 	.word	0xe000ed04

0800a770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a776:	2300      	movs	r3, #0
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	e00c      	b.n	800a796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a12      	ldr	r2, [pc, #72]	; (800a7d0 <prvInitialiseTaskLists+0x60>)
 800a788:	4413      	add	r3, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fb0c 	bl	8008da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3301      	adds	r3, #1
 800a794:	607b      	str	r3, [r7, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b37      	cmp	r3, #55	; 0x37
 800a79a:	d9ef      	bls.n	800a77c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a79c:	480d      	ldr	r0, [pc, #52]	; (800a7d4 <prvInitialiseTaskLists+0x64>)
 800a79e:	f7fe fb03 	bl	8008da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7a2:	480d      	ldr	r0, [pc, #52]	; (800a7d8 <prvInitialiseTaskLists+0x68>)
 800a7a4:	f7fe fb00 	bl	8008da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7a8:	480c      	ldr	r0, [pc, #48]	; (800a7dc <prvInitialiseTaskLists+0x6c>)
 800a7aa:	f7fe fafd 	bl	8008da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7ae:	480c      	ldr	r0, [pc, #48]	; (800a7e0 <prvInitialiseTaskLists+0x70>)
 800a7b0:	f7fe fafa 	bl	8008da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7b4:	480b      	ldr	r0, [pc, #44]	; (800a7e4 <prvInitialiseTaskLists+0x74>)
 800a7b6:	f7fe faf7 	bl	8008da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <prvInitialiseTaskLists+0x78>)
 800a7bc:	4a05      	ldr	r2, [pc, #20]	; (800a7d4 <prvInitialiseTaskLists+0x64>)
 800a7be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvInitialiseTaskLists+0x7c>)
 800a7c2:	4a05      	ldr	r2, [pc, #20]	; (800a7d8 <prvInitialiseTaskLists+0x68>)
 800a7c4:	601a      	str	r2, [r3, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000f80 	.word	0x20000f80
 800a7d4:	200013e0 	.word	0x200013e0
 800a7d8:	200013f4 	.word	0x200013f4
 800a7dc:	20001410 	.word	0x20001410
 800a7e0:	20001424 	.word	0x20001424
 800a7e4:	2000143c 	.word	0x2000143c
 800a7e8:	20001408 	.word	0x20001408
 800a7ec:	2000140c 	.word	0x2000140c

0800a7f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7f6:	e019      	b.n	800a82c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7f8:	f000 fe90 	bl	800b51c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7fc:	4b10      	ldr	r3, [pc, #64]	; (800a840 <prvCheckTasksWaitingTermination+0x50>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3304      	adds	r3, #4
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fb57 	bl	8008ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a80e:	4b0d      	ldr	r3, [pc, #52]	; (800a844 <prvCheckTasksWaitingTermination+0x54>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3b01      	subs	r3, #1
 800a814:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <prvCheckTasksWaitingTermination+0x54>)
 800a816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a818:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <prvCheckTasksWaitingTermination+0x58>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	4a0a      	ldr	r2, [pc, #40]	; (800a848 <prvCheckTasksWaitingTermination+0x58>)
 800a820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a822:	f000 feaf 	bl	800b584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f810 	bl	800a84c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a82c:	4b06      	ldr	r3, [pc, #24]	; (800a848 <prvCheckTasksWaitingTermination+0x58>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e1      	bne.n	800a7f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20001424 	.word	0x20001424
 800a844:	20001450 	.word	0x20001450
 800a848:	20001438 	.word	0x20001438

0800a84c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3354      	adds	r3, #84	; 0x54
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 fa9b 	bl	800bd94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a864:	2b00      	cmp	r3, #0
 800a866:	d108      	bne.n	800a87a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f84b 	bl	800b908 <vPortFree>
				vPortFree( pxTCB );
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 f848 	bl	800b908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a878:	e01a      	b.n	800a8b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a880:	2b01      	cmp	r3, #1
 800a882:	d103      	bne.n	800a88c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 f83f 	bl	800b908 <vPortFree>
	}
 800a88a:	e011      	b.n	800a8b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a892:	2b02      	cmp	r3, #2
 800a894:	d00c      	beq.n	800a8b0 <prvDeleteTCB+0x64>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	b672      	cpsid	i
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	b662      	cpsie	i
 800a8aa:	60fb      	str	r3, [r7, #12]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <prvDeleteTCB+0x62>
	}
 800a8b0:	bf00      	nop
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8be:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <prvResetNextTaskUnblockTime+0x38>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d104      	bne.n	800a8d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8d0:	e008      	b.n	800a8e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d2:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <prvResetNextTaskUnblockTime+0x38>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4a04      	ldr	r2, [pc, #16]	; (800a8f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a8e2:	6013      	str	r3, [r2, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	20001408 	.word	0x20001408
 800a8f4:	20001470 	.word	0x20001470

0800a8f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <xTaskGetSchedulerState+0x34>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a906:	2301      	movs	r3, #1
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	e008      	b.n	800a91e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <xTaskGetSchedulerState+0x38>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a914:	2302      	movs	r3, #2
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	e001      	b.n	800a91e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a91a:	2300      	movs	r3, #0
 800a91c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a91e:	687b      	ldr	r3, [r7, #4]
	}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	2000145c 	.word	0x2000145c
 800a930:	20001478 	.word	0x20001478

0800a934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d05a      	beq.n	800aa00 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a94a:	4b30      	ldr	r3, [pc, #192]	; (800aa0c <xTaskPriorityDisinherit+0xd8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	429a      	cmp	r2, r3
 800a952:	d00c      	beq.n	800a96e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	b672      	cpsid	i
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	b662      	cpsie	i
 800a968:	60fb      	str	r3, [r7, #12]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10c      	bne.n	800a990 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	b672      	cpsid	i
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	b662      	cpsie	i
 800a98a:	60bb      	str	r3, [r7, #8]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a994:	1e5a      	subs	r2, r3, #1
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d02c      	beq.n	800aa00 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d128      	bne.n	800aa00 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fa82 	bl	8008ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d0:	4b0f      	ldr	r3, [pc, #60]	; (800aa10 <xTaskPriorityDisinherit+0xdc>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d903      	bls.n	800a9e0 <xTaskPriorityDisinherit+0xac>
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9dc:	4a0c      	ldr	r2, [pc, #48]	; (800aa10 <xTaskPriorityDisinherit+0xdc>)
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <xTaskPriorityDisinherit+0xe0>)
 800a9ee:	441a      	add	r2, r3
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f7fe fa03 	bl	8008e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa00:	697b      	ldr	r3, [r7, #20]
	}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000f7c 	.word	0x20000f7c
 800aa10:	20001458 	.word	0x20001458
 800aa14:	20000f80 	.word	0x20000f80

0800aa18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa22:	4b21      	ldr	r3, [pc, #132]	; (800aaa8 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa28:	4b20      	ldr	r3, [pc, #128]	; (800aaac <prvAddCurrentTaskToDelayedList+0x94>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fa44 	bl	8008ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3a:	d10a      	bne.n	800aa52 <prvAddCurrentTaskToDelayedList+0x3a>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d007      	beq.n	800aa52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa42:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <prvAddCurrentTaskToDelayedList+0x94>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4819      	ldr	r0, [pc, #100]	; (800aab0 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa4c:	f7fe f9d9 	bl	8008e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa50:	e026      	b.n	800aaa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4413      	add	r3, r2
 800aa58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa5a:	4b14      	ldr	r3, [pc, #80]	; (800aaac <prvAddCurrentTaskToDelayedList+0x94>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d209      	bcs.n	800aa7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa6a:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <prvAddCurrentTaskToDelayedList+0x94>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fe f9e7 	bl	8008e4a <vListInsert>
}
 800aa7c:	e010      	b.n	800aaa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa7e:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <prvAddCurrentTaskToDelayedList+0x94>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7fe f9dd 	bl	8008e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa90:	4b0a      	ldr	r3, [pc, #40]	; (800aabc <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d202      	bcs.n	800aaa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa9a:	4a08      	ldr	r2, [pc, #32]	; (800aabc <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	6013      	str	r3, [r2, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	20001454 	.word	0x20001454
 800aaac:	20000f7c 	.word	0x20000f7c
 800aab0:	2000143c 	.word	0x2000143c
 800aab4:	2000140c 	.word	0x2000140c
 800aab8:	20001408 	.word	0x20001408
 800aabc:	20001470 	.word	0x20001470

0800aac0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08a      	sub	sp, #40	; 0x28
 800aac4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaca:	f000 fbb5 	bl	800b238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <xTimerCreateTimerTask+0x84>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d021      	beq.n	800ab1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aade:	1d3a      	adds	r2, r7, #4
 800aae0:	f107 0108 	add.w	r1, r7, #8
 800aae4:	f107 030c 	add.w	r3, r7, #12
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fe f943 	bl	8008d74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	9202      	str	r2, [sp, #8]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	2302      	movs	r3, #2
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	2300      	movs	r3, #0
 800aafe:	460a      	mov	r2, r1
 800ab00:	4911      	ldr	r1, [pc, #68]	; (800ab48 <xTimerCreateTimerTask+0x88>)
 800ab02:	4812      	ldr	r0, [pc, #72]	; (800ab4c <xTimerCreateTimerTask+0x8c>)
 800ab04:	f7fe ff0e 	bl	8009924 <xTaskCreateStatic>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	4a11      	ldr	r2, [pc, #68]	; (800ab50 <xTimerCreateTimerTask+0x90>)
 800ab0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab0e:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <xTimerCreateTimerTask+0x90>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab16:	2301      	movs	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10c      	bne.n	800ab3a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	b672      	cpsid	i
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	b662      	cpsie	i
 800ab34:	613b      	str	r3, [r7, #16]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ab3a:	697b      	ldr	r3, [r7, #20]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	200014ac 	.word	0x200014ac
 800ab48:	0800ccf0 	.word	0x0800ccf0
 800ab4c:	0800add1 	.word	0x0800add1
 800ab50:	200014b0 	.word	0x200014b0

0800ab54 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af02      	add	r7, sp, #8
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ab62:	202c      	movs	r0, #44	; 0x2c
 800ab64:	f000 fe06 	bl	800b774 <pvPortMalloc>
 800ab68:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00d      	beq.n	800ab8c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 f847 	bl	800ac1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ab8c:	697b      	ldr	r3, [r7, #20]
	}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b08a      	sub	sp, #40	; 0x28
 800ab9a:	af02      	add	r7, sp, #8
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800aba4:	232c      	movs	r3, #44	; 0x2c
 800aba6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b2c      	cmp	r3, #44	; 0x2c
 800abac:	d00c      	beq.n	800abc8 <xTimerCreateStatic+0x32>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	b672      	cpsid	i
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	b662      	cpsie	i
 800abc2:	61bb      	str	r3, [r7, #24]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10c      	bne.n	800abea <xTimerCreateStatic+0x54>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	b672      	cpsid	i
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	b662      	cpsie	i
 800abe4:	617b      	str	r3, [r7, #20]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00d      	beq.n	800ac10 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f805 	bl	800ac1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ac10:	69fb      	ldr	r3, [r7, #28]
	}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10c      	bne.n	800ac48 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	b672      	cpsid	i
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	b662      	cpsie	i
 800ac42:	617b      	str	r3, [r7, #20]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01e      	beq.n	800ac8c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ac4e:	f000 faf3 	bl	800b238 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	6a3a      	ldr	r2, [r7, #32]
 800ac68:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe f8ba 	bl	8008de8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d008      	beq.n	800ac8c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac80:	f043 0304 	orr.w	r3, r3, #4
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ac8c:	bf00      	nop
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08a      	sub	sp, #40	; 0x28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10c      	bne.n	800acc6 <xTimerGenericCommand+0x32>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	b672      	cpsid	i
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	b662      	cpsie	i
 800acc0:	623b      	str	r3, [r7, #32]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <xTimerGenericCommand+0x9c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d02a      	beq.n	800ad24 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b05      	cmp	r3, #5
 800acde:	dc18      	bgt.n	800ad12 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ace0:	f7ff fe0a 	bl	800a8f8 <xTaskGetSchedulerState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d109      	bne.n	800acfe <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <xTimerGenericCommand+0x9c>)
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f107 0110 	add.w	r1, r7, #16
 800acf2:	2300      	movs	r3, #0
 800acf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf6:	f7fe fa1b 	bl	8009130 <xQueueGenericSend>
 800acfa:	6278      	str	r0, [r7, #36]	; 0x24
 800acfc:	e012      	b.n	800ad24 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <xTimerGenericCommand+0x9c>)
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	f107 0110 	add.w	r1, r7, #16
 800ad06:	2300      	movs	r3, #0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7fe fa11 	bl	8009130 <xQueueGenericSend>
 800ad0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ad10:	e008      	b.n	800ad24 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <xTimerGenericCommand+0x9c>)
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f107 0110 	add.w	r1, r7, #16
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	f7fe fb0d 	bl	800933c <xQueueGenericSendFromISR>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3728      	adds	r7, #40	; 0x28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	200014ac 	.word	0x200014ac

0800ad34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3e:	4b23      	ldr	r3, [pc, #140]	; (800adcc <prvProcessExpiredTimer+0x98>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe f8b5 	bl	8008ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d024      	beq.n	800adaa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	699a      	ldr	r2, [r3, #24]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	18d1      	adds	r1, r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f000 f8d3 	bl	800af18 <prvInsertTimerInActiveList>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d021      	beq.n	800adbc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	2100      	movs	r1, #0
 800ad82:	6978      	ldr	r0, [r7, #20]
 800ad84:	f7ff ff86 	bl	800ac94 <xTimerGenericCommand>
 800ad88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d115      	bne.n	800adbc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	b672      	cpsid	i
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	b662      	cpsie	i
 800ada4:	60fb      	str	r3, [r7, #12]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb0:	f023 0301 	bic.w	r3, r3, #1
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	6978      	ldr	r0, [r7, #20]
 800adc2:	4798      	blx	r3
}
 800adc4:	bf00      	nop
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200014a4 	.word	0x200014a4

0800add0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f857 	bl	800ae90 <prvGetNextExpireTime>
 800ade2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4619      	mov	r1, r3
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 f803 	bl	800adf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adee:	f000 f8d5 	bl	800af9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adf2:	e7f1      	b.n	800add8 <prvTimerTask+0x8>

0800adf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adfe:	f7ff f97d 	bl	800a0fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 f866 	bl	800aed8 <prvSampleTimeNow>
 800ae0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d130      	bne.n	800ae76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <prvProcessTimerOrBlockTask+0x3c>
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d806      	bhi.n	800ae30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae22:	f7ff f979 	bl	800a118 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff ff83 	bl	800ad34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae2e:	e024      	b.n	800ae7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae36:	4b13      	ldr	r3, [pc, #76]	; (800ae84 <prvProcessTimerOrBlockTask+0x90>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <prvProcessTimerOrBlockTask+0x50>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e000      	b.n	800ae46 <prvProcessTimerOrBlockTask+0x52>
 800ae44:	2300      	movs	r3, #0
 800ae46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae48:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <prvProcessTimerOrBlockTask+0x94>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	f7fe fd31 	bl	80098bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae5a:	f7ff f95d 	bl	800a118 <xTaskResumeAll>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae64:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <prvProcessTimerOrBlockTask+0x98>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
}
 800ae74:	e001      	b.n	800ae7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae76:	f7ff f94f 	bl	800a118 <xTaskResumeAll>
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	200014a8 	.word	0x200014a8
 800ae88:	200014ac 	.word	0x200014ac
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae98:	4b0e      	ldr	r3, [pc, #56]	; (800aed4 <prvGetNextExpireTime+0x44>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <prvGetNextExpireTime+0x16>
 800aea2:	2201      	movs	r2, #1
 800aea4:	e000      	b.n	800aea8 <prvGetNextExpireTime+0x18>
 800aea6:	2200      	movs	r2, #0
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeb4:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <prvGetNextExpireTime+0x44>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e001      	b.n	800aec4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aec4:	68fb      	ldr	r3, [r7, #12]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	200014a4 	.word	0x200014a4

0800aed8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aee0:	f7ff f9ba 	bl	800a258 <xTaskGetTickCount>
 800aee4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <prvSampleTimeNow+0x3c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d205      	bcs.n	800aefc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aef0:	f000 f93c 	bl	800b16c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e002      	b.n	800af02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af02:	4a04      	ldr	r2, [pc, #16]	; (800af14 <prvSampleTimeNow+0x3c>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af08:	68fb      	ldr	r3, [r7, #12]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200014b4 	.word	0x200014b4

0800af18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d812      	bhi.n	800af64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d302      	bcc.n	800af52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	e01b      	b.n	800af8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af52:	4b10      	ldr	r3, [pc, #64]	; (800af94 <prvInsertTimerInActiveList+0x7c>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3304      	adds	r3, #4
 800af5a:	4619      	mov	r1, r3
 800af5c:	4610      	mov	r0, r2
 800af5e:	f7fd ff74 	bl	8008e4a <vListInsert>
 800af62:	e012      	b.n	800af8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d206      	bcs.n	800af7a <prvInsertTimerInActiveList+0x62>
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d302      	bcc.n	800af7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	e007      	b.n	800af8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <prvInsertTimerInActiveList+0x80>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3304      	adds	r3, #4
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7fd ff60 	bl	8008e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af8a:	697b      	ldr	r3, [r7, #20]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3718      	adds	r7, #24
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	200014a8 	.word	0x200014a8
 800af98:	200014a4 	.word	0x200014a4

0800af9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08e      	sub	sp, #56	; 0x38
 800afa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afa2:	e0d0      	b.n	800b146 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da1a      	bge.n	800afe0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afaa:	1d3b      	adds	r3, r7, #4
 800afac:	3304      	adds	r3, #4
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10c      	bne.n	800afd0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	b672      	cpsid	i
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	b662      	cpsie	i
 800afca:	61fb      	str	r3, [r7, #28]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afd6:	6850      	ldr	r0, [r2, #4]
 800afd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afda:	6892      	ldr	r2, [r2, #8]
 800afdc:	4611      	mov	r1, r2
 800afde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f2c0 80af 	blt.w	800b146 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	3304      	adds	r3, #4
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fd ff5f 	bl	8008ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800affe:	463b      	mov	r3, r7
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff ff69 	bl	800aed8 <prvSampleTimeNow>
 800b006:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	f200 809a 	bhi.w	800b144 <prvProcessReceivedCommands+0x1a8>
 800b010:	a201      	add	r2, pc, #4	; (adr r2, 800b018 <prvProcessReceivedCommands+0x7c>)
 800b012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b016:	bf00      	nop
 800b018:	0800b041 	.word	0x0800b041
 800b01c:	0800b041 	.word	0x0800b041
 800b020:	0800b041 	.word	0x0800b041
 800b024:	0800b0b9 	.word	0x0800b0b9
 800b028:	0800b0cd 	.word	0x0800b0cd
 800b02c:	0800b11b 	.word	0x0800b11b
 800b030:	0800b041 	.word	0x0800b041
 800b034:	0800b041 	.word	0x0800b041
 800b038:	0800b0b9 	.word	0x0800b0b9
 800b03c:	0800b0cd 	.word	0x0800b0cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	18d1      	adds	r1, r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b060:	f7ff ff5a 	bl	800af18 <prvInsertTimerInActiveList>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d06d      	beq.n	800b146 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b070:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d062      	beq.n	800b146 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	441a      	add	r2, r3
 800b088:	2300      	movs	r3, #0
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2300      	movs	r3, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b092:	f7ff fdff 	bl	800ac94 <xTimerGenericCommand>
 800b096:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d153      	bne.n	800b146 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	b672      	cpsid	i
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	b662      	cpsie	i
 800b0b2:	61bb      	str	r3, [r7, #24]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0be:	f023 0301 	bic.w	r3, r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0ca:	e03c      	b.n	800b146 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d2:	f043 0301 	orr.w	r3, r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10c      	bne.n	800b106 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	b672      	cpsid	i
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	b662      	cpsie	i
 800b100:	617b      	str	r3, [r7, #20]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	699a      	ldr	r2, [r3, #24]
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	18d1      	adds	r1, r2, r3
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b114:	f7ff ff00 	bl	800af18 <prvInsertTimerInActiveList>
					break;
 800b118:	e015      	b.n	800b146 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b120:	f003 0302 	and.w	r3, r3, #2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12a:	f000 fbed 	bl	800b908 <vPortFree>
 800b12e:	e00a      	b.n	800b146 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b136:	f023 0301 	bic.w	r3, r3, #1
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b142:	e000      	b.n	800b146 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b146:	4b08      	ldr	r3, [pc, #32]	; (800b168 <prvProcessReceivedCommands+0x1cc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	1d39      	adds	r1, r7, #4
 800b14c:	2200      	movs	r2, #0
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe f994 	bl	800947c <xQueueReceive>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	f47f af24 	bne.w	800afa4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	3730      	adds	r7, #48	; 0x30
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	200014ac 	.word	0x200014ac

0800b16c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b172:	e04a      	b.n	800b20a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b174:	4b2e      	ldr	r3, [pc, #184]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17e:	4b2c      	ldr	r3, [pc, #176]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fe95 	bl	8008ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d030      	beq.n	800b20a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d90e      	bls.n	800b1d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1c6:	4b1a      	ldr	r3, [pc, #104]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	f7fd fe3a 	bl	8008e4a <vListInsert>
 800b1d6:	e018      	b.n	800b20a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fd56 	bl	800ac94 <xTimerGenericCommand>
 800b1e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	b672      	cpsid	i
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	b662      	cpsie	i
 800b204:	603b      	str	r3, [r7, #0]
}
 800b206:	bf00      	nop
 800b208:	e7fe      	b.n	800b208 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1af      	bne.n	800b174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b21a:	4b06      	ldr	r3, [pc, #24]	; (800b234 <prvSwitchTimerLists+0xc8>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a04      	ldr	r2, [pc, #16]	; (800b230 <prvSwitchTimerLists+0xc4>)
 800b220:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b222:	4a04      	ldr	r2, [pc, #16]	; (800b234 <prvSwitchTimerLists+0xc8>)
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	6013      	str	r3, [r2, #0]
}
 800b228:	bf00      	nop
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	200014a4 	.word	0x200014a4
 800b234:	200014a8 	.word	0x200014a8

0800b238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b23e:	f000 f96d 	bl	800b51c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d120      	bne.n	800b28c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b24a:	4814      	ldr	r0, [pc, #80]	; (800b29c <prvCheckForValidListAndQueue+0x64>)
 800b24c:	f7fd fdac 	bl	8008da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b250:	4813      	ldr	r0, [pc, #76]	; (800b2a0 <prvCheckForValidListAndQueue+0x68>)
 800b252:	f7fd fda9 	bl	8008da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b256:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <prvCheckForValidListAndQueue+0x6c>)
 800b258:	4a10      	ldr	r2, [pc, #64]	; (800b29c <prvCheckForValidListAndQueue+0x64>)
 800b25a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b25c:	4b12      	ldr	r3, [pc, #72]	; (800b2a8 <prvCheckForValidListAndQueue+0x70>)
 800b25e:	4a10      	ldr	r2, [pc, #64]	; (800b2a0 <prvCheckForValidListAndQueue+0x68>)
 800b260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b262:	2300      	movs	r3, #0
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <prvCheckForValidListAndQueue+0x74>)
 800b268:	4a11      	ldr	r2, [pc, #68]	; (800b2b0 <prvCheckForValidListAndQueue+0x78>)
 800b26a:	2110      	movs	r1, #16
 800b26c:	200a      	movs	r0, #10
 800b26e:	f7fd feb9 	bl	8008fe4 <xQueueGenericCreateStatic>
 800b272:	4603      	mov	r3, r0
 800b274:	4a08      	ldr	r2, [pc, #32]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b276:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b278:	4b07      	ldr	r3, [pc, #28]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <prvCheckForValidListAndQueue+0x60>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	490b      	ldr	r1, [pc, #44]	; (800b2b4 <prvCheckForValidListAndQueue+0x7c>)
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe faee 	bl	8009868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b28c:	f000 f97a 	bl	800b584 <vPortExitCritical>
}
 800b290:	bf00      	nop
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200014ac 	.word	0x200014ac
 800b29c:	2000147c 	.word	0x2000147c
 800b2a0:	20001490 	.word	0x20001490
 800b2a4:	200014a4 	.word	0x200014a4
 800b2a8:	200014a8 	.word	0x200014a8
 800b2ac:	20001558 	.word	0x20001558
 800b2b0:	200014b8 	.word	0x200014b8
 800b2b4:	0800ccf8 	.word	0x0800ccf8

0800b2b8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10c      	bne.n	800b2e4 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	b672      	cpsid	i
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	b662      	cpsie	i
 800b2de:	60fb      	str	r3, [r7, #12]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b2e4:	f000 f91a 	bl	800b51c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b2ee:	f000 f949 	bl	800b584 <vPortExitCritical>

	return pvReturn;
 800b2f2:	693b      	ldr	r3, [r7, #16]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3b04      	subs	r3, #4
 800b30c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3b04      	subs	r3, #4
 800b31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f023 0201 	bic.w	r2, r3, #1
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3b04      	subs	r3, #4
 800b32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b32c:	4a0c      	ldr	r2, [pc, #48]	; (800b360 <pxPortInitialiseStack+0x64>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3b14      	subs	r3, #20
 800b336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3b04      	subs	r3, #4
 800b342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f06f 0202 	mvn.w	r2, #2
 800b34a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3b20      	subs	r3, #32
 800b350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b352:	68fb      	ldr	r3, [r7, #12]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	0800b365 	.word	0x0800b365

0800b364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b36e:	4b14      	ldr	r3, [pc, #80]	; (800b3c0 <prvTaskExitError+0x5c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b376:	d00c      	beq.n	800b392 <prvTaskExitError+0x2e>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	b672      	cpsid	i
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	b662      	cpsie	i
 800b38c:	60fb      	str	r3, [r7, #12]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <prvTaskExitError+0x2c>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	b672      	cpsid	i
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	b662      	cpsie	i
 800b3a6:	60bb      	str	r3, [r7, #8]
}
 800b3a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3aa:	bf00      	nop
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0fc      	beq.n	800b3ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000060 	.word	0x20000060
	...

0800b3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <pxCurrentTCBConst2>)
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	6808      	ldr	r0, [r1, #0]
 800b3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	f380 8809 	msr	PSP, r0
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8811 	msr	BASEPRI, r0
 800b3ea:	4770      	bx	lr
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst2>:
 800b3f0:	20000f7c 	.word	0x20000f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3f8:	4808      	ldr	r0, [pc, #32]	; (800b41c <prvPortStartFirstTask+0x24>)
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	6800      	ldr	r0, [r0, #0]
 800b3fe:	f380 8808 	msr	MSP, r0
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8814 	msr	CONTROL, r0
 800b40a:	b662      	cpsie	i
 800b40c:	b661      	cpsie	f
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	df00      	svc	0
 800b418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b41a:	bf00      	nop
 800b41c:	e000ed08 	.word	0xe000ed08

0800b420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b426:	4b37      	ldr	r3, [pc, #220]	; (800b504 <xPortStartScheduler+0xe4>)
 800b428:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	22ff      	movs	r2, #255	; 0xff
 800b436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <xPortStartScheduler+0xe8>)
 800b44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b44e:	4b2f      	ldr	r3, [pc, #188]	; (800b50c <xPortStartScheduler+0xec>)
 800b450:	2207      	movs	r2, #7
 800b452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b454:	e009      	b.n	800b46a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b456:	4b2d      	ldr	r3, [pc, #180]	; (800b50c <xPortStartScheduler+0xec>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4a2b      	ldr	r2, [pc, #172]	; (800b50c <xPortStartScheduler+0xec>)
 800b45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	b2db      	uxtb	r3, r3
 800b468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b472:	2b80      	cmp	r3, #128	; 0x80
 800b474:	d0ef      	beq.n	800b456 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b476:	4b25      	ldr	r3, [pc, #148]	; (800b50c <xPortStartScheduler+0xec>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1c3 0307 	rsb	r3, r3, #7
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d00c      	beq.n	800b49c <xPortStartScheduler+0x7c>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	b672      	cpsid	i
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	b662      	cpsie	i
 800b496:	60bb      	str	r3, [r7, #8]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b49c:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <xPortStartScheduler+0xec>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	021b      	lsls	r3, r3, #8
 800b4a2:	4a1a      	ldr	r2, [pc, #104]	; (800b50c <xPortStartScheduler+0xec>)
 800b4a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4a6:	4b19      	ldr	r3, [pc, #100]	; (800b50c <xPortStartScheduler+0xec>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ae:	4a17      	ldr	r2, [pc, #92]	; (800b50c <xPortStartScheduler+0xec>)
 800b4b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4ba:	4b15      	ldr	r3, [pc, #84]	; (800b510 <xPortStartScheduler+0xf0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a14      	ldr	r2, [pc, #80]	; (800b510 <xPortStartScheduler+0xf0>)
 800b4c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <xPortStartScheduler+0xf0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a11      	ldr	r2, [pc, #68]	; (800b510 <xPortStartScheduler+0xf0>)
 800b4cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4d2:	f000 f8dd 	bl	800b690 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4d6:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <xPortStartScheduler+0xf4>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4dc:	f000 f8fc 	bl	800b6d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <xPortStartScheduler+0xf8>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a0c      	ldr	r2, [pc, #48]	; (800b518 <xPortStartScheduler+0xf8>)
 800b4e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4ec:	f7ff ff84 	bl	800b3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4f0:	f7fe ff7e 	bl	800a3f0 <vTaskSwitchContext>
	prvTaskExitError();
 800b4f4:	f7ff ff36 	bl	800b364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	e000e400 	.word	0xe000e400
 800b508:	200015a8 	.word	0x200015a8
 800b50c:	200015ac 	.word	0x200015ac
 800b510:	e000ed20 	.word	0xe000ed20
 800b514:	20000060 	.word	0x20000060
 800b518:	e000ef34 	.word	0xe000ef34

0800b51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	b672      	cpsid	i
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	b662      	cpsie	i
 800b536:	607b      	str	r3, [r7, #4]
}
 800b538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b53a:	4b10      	ldr	r3, [pc, #64]	; (800b57c <vPortEnterCritical+0x60>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3301      	adds	r3, #1
 800b540:	4a0e      	ldr	r2, [pc, #56]	; (800b57c <vPortEnterCritical+0x60>)
 800b542:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b544:	4b0d      	ldr	r3, [pc, #52]	; (800b57c <vPortEnterCritical+0x60>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d111      	bne.n	800b570 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b54c:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <vPortEnterCritical+0x64>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00c      	beq.n	800b570 <vPortEnterCritical+0x54>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	b672      	cpsid	i
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	b662      	cpsie	i
 800b56a:	603b      	str	r3, [r7, #0]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <vPortEnterCritical+0x52>
	}
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000060 	.word	0x20000060
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b58a:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <vPortExitCritical+0x54>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10c      	bne.n	800b5ac <vPortExitCritical+0x28>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	b672      	cpsid	i
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	b662      	cpsie	i
 800b5a6:	607b      	str	r3, [r7, #4]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <vPortExitCritical+0x54>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <vPortExitCritical+0x54>)
 800b5b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5b6:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <vPortExitCritical+0x54>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <vPortExitCritical+0x46>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	f383 8811 	msr	BASEPRI, r3
}
 800b5c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20000060 	.word	0x20000060
 800b5dc:	00000000 	.word	0x00000000

0800b5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5e0:	f3ef 8009 	mrs	r0, PSP
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <pxCurrentTCBConst>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	f01e 0f10 	tst.w	lr, #16
 800b5f0:	bf08      	it	eq
 800b5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b604:	b672      	cpsid	i
 800b606:	f380 8811 	msr	BASEPRI, r0
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	b662      	cpsie	i
 800b614:	f7fe feec 	bl	800a3f0 <vTaskSwitchContext>
 800b618:	f04f 0000 	mov.w	r0, #0
 800b61c:	f380 8811 	msr	BASEPRI, r0
 800b620:	bc09      	pop	{r0, r3}
 800b622:	6819      	ldr	r1, [r3, #0]
 800b624:	6808      	ldr	r0, [r1, #0]
 800b626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62a:	f01e 0f10 	tst.w	lr, #16
 800b62e:	bf08      	it	eq
 800b630:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b634:	f380 8809 	msr	PSP, r0
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop

0800b640 <pxCurrentTCBConst>:
 800b640:	20000f7c 	.word	0x20000f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	b672      	cpsid	i
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	b662      	cpsie	i
 800b662:	607b      	str	r3, [r7, #4]
}
 800b664:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b666:	f7fe fe07 	bl	800a278 <xTaskIncrementTick>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <SysTick_Handler+0x44>)
 800b672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	2300      	movs	r3, #0
 800b67a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	f383 8811 	msr	BASEPRI, r3
}
 800b682:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	e000ed04 	.word	0xe000ed04

0800b690 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b694:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <vPortSetupTimerInterrupt+0x34>)
 800b696:	2200      	movs	r2, #0
 800b698:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <vPortSetupTimerInterrupt+0x38>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <vPortSetupTimerInterrupt+0x3c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <vPortSetupTimerInterrupt+0x40>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	099b      	lsrs	r3, r3, #6
 800b6ac:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <vPortSetupTimerInterrupt+0x44>)
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6b2:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <vPortSetupTimerInterrupt+0x34>)
 800b6b4:	2207      	movs	r2, #7
 800b6b6:	601a      	str	r2, [r3, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	e000e010 	.word	0xe000e010
 800b6c8:	e000e018 	.word	0xe000e018
 800b6cc:	20000054 	.word	0x20000054
 800b6d0:	10624dd3 	.word	0x10624dd3
 800b6d4:	e000e014 	.word	0xe000e014

0800b6d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6e8 <vPortEnableVFP+0x10>
 800b6dc:	6801      	ldr	r1, [r0, #0]
 800b6de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6e2:	6001      	str	r1, [r0, #0]
 800b6e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6e6:	bf00      	nop
 800b6e8:	e000ed88 	.word	0xe000ed88

0800b6ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6f2:	f3ef 8305 	mrs	r3, IPSR
 800b6f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b0f      	cmp	r3, #15
 800b6fc:	d916      	bls.n	800b72c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6fe:	4a19      	ldr	r2, [pc, #100]	; (800b764 <vPortValidateInterruptPriority+0x78>)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4413      	add	r3, r2
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b708:	4b17      	ldr	r3, [pc, #92]	; (800b768 <vPortValidateInterruptPriority+0x7c>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	7afa      	ldrb	r2, [r7, #11]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d20c      	bcs.n	800b72c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	b672      	cpsid	i
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	b662      	cpsie	i
 800b726:	607b      	str	r3, [r7, #4]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b72c:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <vPortValidateInterruptPriority+0x80>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b734:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <vPortValidateInterruptPriority+0x84>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d90c      	bls.n	800b756 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	b672      	cpsid	i
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	b662      	cpsie	i
 800b750:	603b      	str	r3, [r7, #0]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <vPortValidateInterruptPriority+0x68>
	}
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	e000e3f0 	.word	0xe000e3f0
 800b768:	200015a8 	.word	0x200015a8
 800b76c:	e000ed0c 	.word	0xe000ed0c
 800b770:	200015ac 	.word	0x200015ac

0800b774 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08a      	sub	sp, #40	; 0x28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b780:	f7fe fcbc 	bl	800a0fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b784:	4b5b      	ldr	r3, [pc, #364]	; (800b8f4 <pvPortMalloc+0x180>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b78c:	f000 f91a 	bl	800b9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b790:	4b59      	ldr	r3, [pc, #356]	; (800b8f8 <pvPortMalloc+0x184>)
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4013      	ands	r3, r2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f040 8092 	bne.w	800b8c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01f      	beq.n	800b7e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b7a4:	2208      	movs	r2, #8
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d016      	beq.n	800b7e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f023 0307 	bic.w	r3, r3, #7
 800b7bc:	3308      	adds	r3, #8
 800b7be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00c      	beq.n	800b7e4 <pvPortMalloc+0x70>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	b672      	cpsid	i
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	b662      	cpsie	i
 800b7de:	617b      	str	r3, [r7, #20]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d06b      	beq.n	800b8c2 <pvPortMalloc+0x14e>
 800b7ea:	4b44      	ldr	r3, [pc, #272]	; (800b8fc <pvPortMalloc+0x188>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d866      	bhi.n	800b8c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7f4:	4b42      	ldr	r3, [pc, #264]	; (800b900 <pvPortMalloc+0x18c>)
 800b7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7f8:	4b41      	ldr	r3, [pc, #260]	; (800b900 <pvPortMalloc+0x18c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fe:	e004      	b.n	800b80a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d903      	bls.n	800b81c <pvPortMalloc+0xa8>
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1f1      	bne.n	800b800 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b81c:	4b35      	ldr	r3, [pc, #212]	; (800b8f4 <pvPortMalloc+0x180>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b822:	429a      	cmp	r2, r3
 800b824:	d04d      	beq.n	800b8c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2208      	movs	r2, #8
 800b82c:	4413      	add	r3, r2
 800b82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	2308      	movs	r3, #8
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	429a      	cmp	r2, r3
 800b846:	d921      	bls.n	800b88c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <pvPortMalloc+0x100>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	b672      	cpsid	i
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	b662      	cpsie	i
 800b86e:	613b      	str	r3, [r7, #16]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b886:	69b8      	ldr	r0, [r7, #24]
 800b888:	f000 f8fe 	bl	800ba88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b88c:	4b1b      	ldr	r3, [pc, #108]	; (800b8fc <pvPortMalloc+0x188>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	4a19      	ldr	r2, [pc, #100]	; (800b8fc <pvPortMalloc+0x188>)
 800b898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b89a:	4b18      	ldr	r3, [pc, #96]	; (800b8fc <pvPortMalloc+0x188>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <pvPortMalloc+0x190>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d203      	bcs.n	800b8ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8a6:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <pvPortMalloc+0x188>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a16      	ldr	r2, [pc, #88]	; (800b904 <pvPortMalloc+0x190>)
 800b8ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <pvPortMalloc+0x184>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8c2:	f7fe fc29 	bl	800a118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00c      	beq.n	800b8ea <pvPortMalloc+0x176>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	b672      	cpsid	i
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	b662      	cpsie	i
 800b8e4:	60fb      	str	r3, [r7, #12]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <pvPortMalloc+0x174>
	return pvReturn;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3728      	adds	r7, #40	; 0x28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	200051b8 	.word	0x200051b8
 800b8f8:	200051c4 	.word	0x200051c4
 800b8fc:	200051bc 	.word	0x200051bc
 800b900:	200051b0 	.word	0x200051b0
 800b904:	200051c0 	.word	0x200051c0

0800b908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d04c      	beq.n	800b9b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b91a:	2308      	movs	r3, #8
 800b91c:	425b      	negs	r3, r3
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <vPortFree+0xb4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4013      	ands	r3, r2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10c      	bne.n	800b950 <vPortFree+0x48>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	b672      	cpsid	i
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	b662      	cpsie	i
 800b94a:	60fb      	str	r3, [r7, #12]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00c      	beq.n	800b972 <vPortFree+0x6a>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	b672      	cpsid	i
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	b662      	cpsie	i
 800b96c:	60bb      	str	r3, [r7, #8]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <vPortFree+0xb4>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d019      	beq.n	800b9b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d115      	bne.n	800b9b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <vPortFree+0xb4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	43db      	mvns	r3, r3
 800b992:	401a      	ands	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b998:	f7fe fbb0 	bl	800a0fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <vPortFree+0xb8>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	4a06      	ldr	r2, [pc, #24]	; (800b9c0 <vPortFree+0xb8>)
 800b9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f000 f86c 	bl	800ba88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b9b0:	f7fe fbb2 	bl	800a118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	200051c4 	.word	0x200051c4
 800b9c0:	200051bc 	.word	0x200051bc

0800b9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9d0:	4b27      	ldr	r3, [pc, #156]	; (800ba70 <prvHeapInit+0xac>)
 800b9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00c      	beq.n	800b9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3307      	adds	r3, #7
 800b9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 0307 	bic.w	r3, r3, #7
 800b9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	4a1f      	ldr	r2, [pc, #124]	; (800ba70 <prvHeapInit+0xac>)
 800b9f4:	4413      	add	r3, r2
 800b9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9fc:	4a1d      	ldr	r2, [pc, #116]	; (800ba74 <prvHeapInit+0xb0>)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba02:	4b1c      	ldr	r3, [pc, #112]	; (800ba74 <prvHeapInit+0xb0>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba10:	2208      	movs	r2, #8
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f023 0307 	bic.w	r3, r3, #7
 800ba1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4a15      	ldr	r2, [pc, #84]	; (800ba78 <prvHeapInit+0xb4>)
 800ba24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba26:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <prvHeapInit+0xb4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba2e:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <prvHeapInit+0xb4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <prvHeapInit+0xb4>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <prvHeapInit+0xb8>)
 800ba52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <prvHeapInit+0xbc>)
 800ba5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba5c:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <prvHeapInit+0xc0>)
 800ba5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	200015b0 	.word	0x200015b0
 800ba74:	200051b0 	.word	0x200051b0
 800ba78:	200051b8 	.word	0x200051b8
 800ba7c:	200051c0 	.word	0x200051c0
 800ba80:	200051bc 	.word	0x200051bc
 800ba84:	200051c4 	.word	0x200051c4

0800ba88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba90:	4b28      	ldr	r3, [pc, #160]	; (800bb34 <prvInsertBlockIntoFreeList+0xac>)
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e002      	b.n	800ba9c <prvInsertBlockIntoFreeList+0x14>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d8f7      	bhi.n	800ba96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	4413      	add	r3, r2
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d108      	bne.n	800baca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	441a      	add	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d118      	bne.n	800bb10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <prvInsertBlockIntoFreeList+0xb0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d00d      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	441a      	add	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e008      	b.n	800bb18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvInsertBlockIntoFreeList+0xb0>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	e003      	b.n	800bb18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d002      	beq.n	800bb26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb26:	bf00      	nop
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	200051b0 	.word	0x200051b0
 800bb38:	200051b8 	.word	0x200051b8

0800bb3c <std>:
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	4604      	mov	r4, r0
 800bb42:	e9c0 3300 	strd	r3, r3, [r0]
 800bb46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb4a:	6083      	str	r3, [r0, #8]
 800bb4c:	8181      	strh	r1, [r0, #12]
 800bb4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb50:	81c2      	strh	r2, [r0, #14]
 800bb52:	6183      	str	r3, [r0, #24]
 800bb54:	4619      	mov	r1, r3
 800bb56:	2208      	movs	r2, #8
 800bb58:	305c      	adds	r0, #92	; 0x5c
 800bb5a:	f000 f8f4 	bl	800bd46 <memset>
 800bb5e:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <std+0x38>)
 800bb60:	6263      	str	r3, [r4, #36]	; 0x24
 800bb62:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <std+0x3c>)
 800bb64:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <std+0x40>)
 800bb68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <std+0x44>)
 800bb6c:	6224      	str	r4, [r4, #32]
 800bb6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	bf00      	nop
 800bb74:	0800bcc1 	.word	0x0800bcc1
 800bb78:	0800bce3 	.word	0x0800bce3
 800bb7c:	0800bd1b 	.word	0x0800bd1b
 800bb80:	0800bd3f 	.word	0x0800bd3f

0800bb84 <stdio_exit_handler>:
 800bb84:	4a02      	ldr	r2, [pc, #8]	; (800bb90 <stdio_exit_handler+0xc>)
 800bb86:	4903      	ldr	r1, [pc, #12]	; (800bb94 <stdio_exit_handler+0x10>)
 800bb88:	4803      	ldr	r0, [pc, #12]	; (800bb98 <stdio_exit_handler+0x14>)
 800bb8a:	f000 b869 	b.w	800bc60 <_fwalk_sglue>
 800bb8e:	bf00      	nop
 800bb90:	20000064 	.word	0x20000064
 800bb94:	0800c7c5 	.word	0x0800c7c5
 800bb98:	20000070 	.word	0x20000070

0800bb9c <cleanup_stdio>:
 800bb9c:	6841      	ldr	r1, [r0, #4]
 800bb9e:	4b0c      	ldr	r3, [pc, #48]	; (800bbd0 <cleanup_stdio+0x34>)
 800bba0:	4299      	cmp	r1, r3
 800bba2:	b510      	push	{r4, lr}
 800bba4:	4604      	mov	r4, r0
 800bba6:	d001      	beq.n	800bbac <cleanup_stdio+0x10>
 800bba8:	f000 fe0c 	bl	800c7c4 <_fflush_r>
 800bbac:	68a1      	ldr	r1, [r4, #8]
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <cleanup_stdio+0x38>)
 800bbb0:	4299      	cmp	r1, r3
 800bbb2:	d002      	beq.n	800bbba <cleanup_stdio+0x1e>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fe05 	bl	800c7c4 <_fflush_r>
 800bbba:	68e1      	ldr	r1, [r4, #12]
 800bbbc:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <cleanup_stdio+0x3c>)
 800bbbe:	4299      	cmp	r1, r3
 800bbc0:	d004      	beq.n	800bbcc <cleanup_stdio+0x30>
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc8:	f000 bdfc 	b.w	800c7c4 <_fflush_r>
 800bbcc:	bd10      	pop	{r4, pc}
 800bbce:	bf00      	nop
 800bbd0:	200051c8 	.word	0x200051c8
 800bbd4:	20005230 	.word	0x20005230
 800bbd8:	20005298 	.word	0x20005298

0800bbdc <global_stdio_init.part.0>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4b0b      	ldr	r3, [pc, #44]	; (800bc0c <global_stdio_init.part.0+0x30>)
 800bbe0:	4c0b      	ldr	r4, [pc, #44]	; (800bc10 <global_stdio_init.part.0+0x34>)
 800bbe2:	4a0c      	ldr	r2, [pc, #48]	; (800bc14 <global_stdio_init.part.0+0x38>)
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2104      	movs	r1, #4
 800bbec:	f7ff ffa6 	bl	800bb3c <std>
 800bbf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	2109      	movs	r1, #9
 800bbf8:	f7ff ffa0 	bl	800bb3c <std>
 800bbfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc00:	2202      	movs	r2, #2
 800bc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc06:	2112      	movs	r1, #18
 800bc08:	f7ff bf98 	b.w	800bb3c <std>
 800bc0c:	20005300 	.word	0x20005300
 800bc10:	200051c8 	.word	0x200051c8
 800bc14:	0800bb85 	.word	0x0800bb85

0800bc18 <__sfp_lock_acquire>:
 800bc18:	4801      	ldr	r0, [pc, #4]	; (800bc20 <__sfp_lock_acquire+0x8>)
 800bc1a:	f000 b971 	b.w	800bf00 <__retarget_lock_acquire_recursive>
 800bc1e:	bf00      	nop
 800bc20:	20005309 	.word	0x20005309

0800bc24 <__sfp_lock_release>:
 800bc24:	4801      	ldr	r0, [pc, #4]	; (800bc2c <__sfp_lock_release+0x8>)
 800bc26:	f000 b96c 	b.w	800bf02 <__retarget_lock_release_recursive>
 800bc2a:	bf00      	nop
 800bc2c:	20005309 	.word	0x20005309

0800bc30 <__sinit>:
 800bc30:	b510      	push	{r4, lr}
 800bc32:	4604      	mov	r4, r0
 800bc34:	f7ff fff0 	bl	800bc18 <__sfp_lock_acquire>
 800bc38:	6a23      	ldr	r3, [r4, #32]
 800bc3a:	b11b      	cbz	r3, 800bc44 <__sinit+0x14>
 800bc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc40:	f7ff bff0 	b.w	800bc24 <__sfp_lock_release>
 800bc44:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <__sinit+0x28>)
 800bc46:	6223      	str	r3, [r4, #32]
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <__sinit+0x2c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1f5      	bne.n	800bc3c <__sinit+0xc>
 800bc50:	f7ff ffc4 	bl	800bbdc <global_stdio_init.part.0>
 800bc54:	e7f2      	b.n	800bc3c <__sinit+0xc>
 800bc56:	bf00      	nop
 800bc58:	0800bb9d 	.word	0x0800bb9d
 800bc5c:	20005300 	.word	0x20005300

0800bc60 <_fwalk_sglue>:
 800bc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc64:	4607      	mov	r7, r0
 800bc66:	4688      	mov	r8, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	2600      	movs	r6, #0
 800bc6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc70:	f1b9 0901 	subs.w	r9, r9, #1
 800bc74:	d505      	bpl.n	800bc82 <_fwalk_sglue+0x22>
 800bc76:	6824      	ldr	r4, [r4, #0]
 800bc78:	2c00      	cmp	r4, #0
 800bc7a:	d1f7      	bne.n	800bc6c <_fwalk_sglue+0xc>
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d907      	bls.n	800bc98 <_fwalk_sglue+0x38>
 800bc88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	d003      	beq.n	800bc98 <_fwalk_sglue+0x38>
 800bc90:	4629      	mov	r1, r5
 800bc92:	4638      	mov	r0, r7
 800bc94:	47c0      	blx	r8
 800bc96:	4306      	orrs	r6, r0
 800bc98:	3568      	adds	r5, #104	; 0x68
 800bc9a:	e7e9      	b.n	800bc70 <_fwalk_sglue+0x10>

0800bc9c <iprintf>:
 800bc9c:	b40f      	push	{r0, r1, r2, r3}
 800bc9e:	b507      	push	{r0, r1, r2, lr}
 800bca0:	4906      	ldr	r1, [pc, #24]	; (800bcbc <iprintf+0x20>)
 800bca2:	ab04      	add	r3, sp, #16
 800bca4:	6808      	ldr	r0, [r1, #0]
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	6881      	ldr	r1, [r0, #8]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	f000 fa59 	bl	800c164 <_vfiprintf_r>
 800bcb2:	b003      	add	sp, #12
 800bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb8:	b004      	add	sp, #16
 800bcba:	4770      	bx	lr
 800bcbc:	200000bc 	.word	0x200000bc

0800bcc0 <__sread>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc8:	f000 f8cc 	bl	800be64 <_read_r>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	bfab      	itete	ge
 800bcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd4:	181b      	addge	r3, r3, r0
 800bcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcda:	bfac      	ite	ge
 800bcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcde:	81a3      	strhlt	r3, [r4, #12]
 800bce0:	bd10      	pop	{r4, pc}

0800bce2 <__swrite>:
 800bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	461f      	mov	r7, r3
 800bce8:	898b      	ldrh	r3, [r1, #12]
 800bcea:	05db      	lsls	r3, r3, #23
 800bcec:	4605      	mov	r5, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	4616      	mov	r6, r2
 800bcf2:	d505      	bpl.n	800bd00 <__swrite+0x1e>
 800bcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f000 f8a0 	bl	800be40 <_lseek_r>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd16:	f000 b8b7 	b.w	800be88 <_write_r>

0800bd1a <__sseek>:
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd22:	f000 f88d 	bl	800be40 <_lseek_r>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	bf15      	itete	ne
 800bd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd36:	81a3      	strheq	r3, [r4, #12]
 800bd38:	bf18      	it	ne
 800bd3a:	81a3      	strhne	r3, [r4, #12]
 800bd3c:	bd10      	pop	{r4, pc}

0800bd3e <__sclose>:
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	f000 b817 	b.w	800bd74 <_close_r>

0800bd46 <memset>:
 800bd46:	4402      	add	r2, r0
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d100      	bne.n	800bd50 <memset+0xa>
 800bd4e:	4770      	bx	lr
 800bd50:	f803 1b01 	strb.w	r1, [r3], #1
 800bd54:	e7f9      	b.n	800bd4a <memset+0x4>

0800bd56 <strcat>:
 800bd56:	b510      	push	{r4, lr}
 800bd58:	4602      	mov	r2, r0
 800bd5a:	7814      	ldrb	r4, [r2, #0]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	3201      	adds	r2, #1
 800bd60:	2c00      	cmp	r4, #0
 800bd62:	d1fa      	bne.n	800bd5a <strcat+0x4>
 800bd64:	3b01      	subs	r3, #1
 800bd66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	d1f9      	bne.n	800bd66 <strcat+0x10>
 800bd72:	bd10      	pop	{r4, pc}

0800bd74 <_close_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d06      	ldr	r5, [pc, #24]	; (800bd90 <_close_r+0x1c>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	602b      	str	r3, [r5, #0]
 800bd80:	f7f6 fa55 	bl	800222e <_close>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	d102      	bne.n	800bd8e <_close_r+0x1a>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	b103      	cbz	r3, 800bd8e <_close_r+0x1a>
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	20005304 	.word	0x20005304

0800bd94 <_reclaim_reent>:
 800bd94:	4b29      	ldr	r3, [pc, #164]	; (800be3c <_reclaim_reent+0xa8>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4283      	cmp	r3, r0
 800bd9a:	b570      	push	{r4, r5, r6, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	d04b      	beq.n	800be38 <_reclaim_reent+0xa4>
 800bda0:	69c3      	ldr	r3, [r0, #28]
 800bda2:	b143      	cbz	r3, 800bdb6 <_reclaim_reent+0x22>
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d144      	bne.n	800be34 <_reclaim_reent+0xa0>
 800bdaa:	69e3      	ldr	r3, [r4, #28]
 800bdac:	6819      	ldr	r1, [r3, #0]
 800bdae:	b111      	cbz	r1, 800bdb6 <_reclaim_reent+0x22>
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 f8b5 	bl	800bf20 <_free_r>
 800bdb6:	6961      	ldr	r1, [r4, #20]
 800bdb8:	b111      	cbz	r1, 800bdc0 <_reclaim_reent+0x2c>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 f8b0 	bl	800bf20 <_free_r>
 800bdc0:	69e1      	ldr	r1, [r4, #28]
 800bdc2:	b111      	cbz	r1, 800bdca <_reclaim_reent+0x36>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 f8ab 	bl	800bf20 <_free_r>
 800bdca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bdcc:	b111      	cbz	r1, 800bdd4 <_reclaim_reent+0x40>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f000 f8a6 	bl	800bf20 <_free_r>
 800bdd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdd6:	b111      	cbz	r1, 800bdde <_reclaim_reent+0x4a>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 f8a1 	bl	800bf20 <_free_r>
 800bdde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bde0:	b111      	cbz	r1, 800bde8 <_reclaim_reent+0x54>
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 f89c 	bl	800bf20 <_free_r>
 800bde8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bdea:	b111      	cbz	r1, 800bdf2 <_reclaim_reent+0x5e>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 f897 	bl	800bf20 <_free_r>
 800bdf2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bdf4:	b111      	cbz	r1, 800bdfc <_reclaim_reent+0x68>
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f892 	bl	800bf20 <_free_r>
 800bdfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bdfe:	b111      	cbz	r1, 800be06 <_reclaim_reent+0x72>
 800be00:	4620      	mov	r0, r4
 800be02:	f000 f88d 	bl	800bf20 <_free_r>
 800be06:	6a23      	ldr	r3, [r4, #32]
 800be08:	b1b3      	cbz	r3, 800be38 <_reclaim_reent+0xa4>
 800be0a:	4620      	mov	r0, r4
 800be0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be10:	4718      	bx	r3
 800be12:	5949      	ldr	r1, [r1, r5]
 800be14:	b941      	cbnz	r1, 800be28 <_reclaim_reent+0x94>
 800be16:	3504      	adds	r5, #4
 800be18:	69e3      	ldr	r3, [r4, #28]
 800be1a:	2d80      	cmp	r5, #128	; 0x80
 800be1c:	68d9      	ldr	r1, [r3, #12]
 800be1e:	d1f8      	bne.n	800be12 <_reclaim_reent+0x7e>
 800be20:	4620      	mov	r0, r4
 800be22:	f000 f87d 	bl	800bf20 <_free_r>
 800be26:	e7c0      	b.n	800bdaa <_reclaim_reent+0x16>
 800be28:	680e      	ldr	r6, [r1, #0]
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f878 	bl	800bf20 <_free_r>
 800be30:	4631      	mov	r1, r6
 800be32:	e7ef      	b.n	800be14 <_reclaim_reent+0x80>
 800be34:	2500      	movs	r5, #0
 800be36:	e7ef      	b.n	800be18 <_reclaim_reent+0x84>
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	bf00      	nop
 800be3c:	200000bc 	.word	0x200000bc

0800be40 <_lseek_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	; (800be60 <_lseek_r+0x20>)
 800be44:	4604      	mov	r4, r0
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	f7f6 fa14 	bl	800227c <_lseek>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_lseek_r+0x1e>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_lseek_r+0x1e>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	20005304 	.word	0x20005304

0800be64 <_read_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d07      	ldr	r5, [pc, #28]	; (800be84 <_read_r+0x20>)
 800be68:	4604      	mov	r4, r0
 800be6a:	4608      	mov	r0, r1
 800be6c:	4611      	mov	r1, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	602a      	str	r2, [r5, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	f7f6 f9a2 	bl	80021bc <_read>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_read_r+0x1e>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_read_r+0x1e>
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	20005304 	.word	0x20005304

0800be88 <_write_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	; (800bea8 <_write_r+0x20>)
 800be8c:	4604      	mov	r4, r0
 800be8e:	4608      	mov	r0, r1
 800be90:	4611      	mov	r1, r2
 800be92:	2200      	movs	r2, #0
 800be94:	602a      	str	r2, [r5, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	f7f6 f9ad 	bl	80021f6 <_write>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d102      	bne.n	800bea6 <_write_r+0x1e>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	b103      	cbz	r3, 800bea6 <_write_r+0x1e>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	20005304 	.word	0x20005304

0800beac <__errno>:
 800beac:	4b01      	ldr	r3, [pc, #4]	; (800beb4 <__errno+0x8>)
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	200000bc 	.word	0x200000bc

0800beb8 <__libc_init_array>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	4d0d      	ldr	r5, [pc, #52]	; (800bef0 <__libc_init_array+0x38>)
 800bebc:	4c0d      	ldr	r4, [pc, #52]	; (800bef4 <__libc_init_array+0x3c>)
 800bebe:	1b64      	subs	r4, r4, r5
 800bec0:	10a4      	asrs	r4, r4, #2
 800bec2:	2600      	movs	r6, #0
 800bec4:	42a6      	cmp	r6, r4
 800bec6:	d109      	bne.n	800bedc <__libc_init_array+0x24>
 800bec8:	4d0b      	ldr	r5, [pc, #44]	; (800bef8 <__libc_init_array+0x40>)
 800beca:	4c0c      	ldr	r4, [pc, #48]	; (800befc <__libc_init_array+0x44>)
 800becc:	f000 fdcc 	bl	800ca68 <_init>
 800bed0:	1b64      	subs	r4, r4, r5
 800bed2:	10a4      	asrs	r4, r4, #2
 800bed4:	2600      	movs	r6, #0
 800bed6:	42a6      	cmp	r6, r4
 800bed8:	d105      	bne.n	800bee6 <__libc_init_array+0x2e>
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee0:	4798      	blx	r3
 800bee2:	3601      	adds	r6, #1
 800bee4:	e7ee      	b.n	800bec4 <__libc_init_array+0xc>
 800bee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beea:	4798      	blx	r3
 800beec:	3601      	adds	r6, #1
 800beee:	e7f2      	b.n	800bed6 <__libc_init_array+0x1e>
 800bef0:	0800e49c 	.word	0x0800e49c
 800bef4:	0800e49c 	.word	0x0800e49c
 800bef8:	0800e49c 	.word	0x0800e49c
 800befc:	0800e4a0 	.word	0x0800e4a0

0800bf00 <__retarget_lock_acquire_recursive>:
 800bf00:	4770      	bx	lr

0800bf02 <__retarget_lock_release_recursive>:
 800bf02:	4770      	bx	lr

0800bf04 <memcpy>:
 800bf04:	440a      	add	r2, r1
 800bf06:	4291      	cmp	r1, r2
 800bf08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf0c:	d100      	bne.n	800bf10 <memcpy+0xc>
 800bf0e:	4770      	bx	lr
 800bf10:	b510      	push	{r4, lr}
 800bf12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf1a:	4291      	cmp	r1, r2
 800bf1c:	d1f9      	bne.n	800bf12 <memcpy+0xe>
 800bf1e:	bd10      	pop	{r4, pc}

0800bf20 <_free_r>:
 800bf20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf22:	2900      	cmp	r1, #0
 800bf24:	d044      	beq.n	800bfb0 <_free_r+0x90>
 800bf26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2a:	9001      	str	r0, [sp, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f1a1 0404 	sub.w	r4, r1, #4
 800bf32:	bfb8      	it	lt
 800bf34:	18e4      	addlt	r4, r4, r3
 800bf36:	f000 f8df 	bl	800c0f8 <__malloc_lock>
 800bf3a:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <_free_r+0x94>)
 800bf3c:	9801      	ldr	r0, [sp, #4]
 800bf3e:	6813      	ldr	r3, [r2, #0]
 800bf40:	b933      	cbnz	r3, 800bf50 <_free_r+0x30>
 800bf42:	6063      	str	r3, [r4, #4]
 800bf44:	6014      	str	r4, [r2, #0]
 800bf46:	b003      	add	sp, #12
 800bf48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf4c:	f000 b8da 	b.w	800c104 <__malloc_unlock>
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	d908      	bls.n	800bf66 <_free_r+0x46>
 800bf54:	6825      	ldr	r5, [r4, #0]
 800bf56:	1961      	adds	r1, r4, r5
 800bf58:	428b      	cmp	r3, r1
 800bf5a:	bf01      	itttt	eq
 800bf5c:	6819      	ldreq	r1, [r3, #0]
 800bf5e:	685b      	ldreq	r3, [r3, #4]
 800bf60:	1949      	addeq	r1, r1, r5
 800bf62:	6021      	streq	r1, [r4, #0]
 800bf64:	e7ed      	b.n	800bf42 <_free_r+0x22>
 800bf66:	461a      	mov	r2, r3
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	b10b      	cbz	r3, 800bf70 <_free_r+0x50>
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	d9fa      	bls.n	800bf66 <_free_r+0x46>
 800bf70:	6811      	ldr	r1, [r2, #0]
 800bf72:	1855      	adds	r5, r2, r1
 800bf74:	42a5      	cmp	r5, r4
 800bf76:	d10b      	bne.n	800bf90 <_free_r+0x70>
 800bf78:	6824      	ldr	r4, [r4, #0]
 800bf7a:	4421      	add	r1, r4
 800bf7c:	1854      	adds	r4, r2, r1
 800bf7e:	42a3      	cmp	r3, r4
 800bf80:	6011      	str	r1, [r2, #0]
 800bf82:	d1e0      	bne.n	800bf46 <_free_r+0x26>
 800bf84:	681c      	ldr	r4, [r3, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	6053      	str	r3, [r2, #4]
 800bf8a:	440c      	add	r4, r1
 800bf8c:	6014      	str	r4, [r2, #0]
 800bf8e:	e7da      	b.n	800bf46 <_free_r+0x26>
 800bf90:	d902      	bls.n	800bf98 <_free_r+0x78>
 800bf92:	230c      	movs	r3, #12
 800bf94:	6003      	str	r3, [r0, #0]
 800bf96:	e7d6      	b.n	800bf46 <_free_r+0x26>
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	1961      	adds	r1, r4, r5
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	bf04      	itt	eq
 800bfa0:	6819      	ldreq	r1, [r3, #0]
 800bfa2:	685b      	ldreq	r3, [r3, #4]
 800bfa4:	6063      	str	r3, [r4, #4]
 800bfa6:	bf04      	itt	eq
 800bfa8:	1949      	addeq	r1, r1, r5
 800bfaa:	6021      	streq	r1, [r4, #0]
 800bfac:	6054      	str	r4, [r2, #4]
 800bfae:	e7ca      	b.n	800bf46 <_free_r+0x26>
 800bfb0:	b003      	add	sp, #12
 800bfb2:	bd30      	pop	{r4, r5, pc}
 800bfb4:	2000530c 	.word	0x2000530c

0800bfb8 <sbrk_aligned>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	4e0e      	ldr	r6, [pc, #56]	; (800bff4 <sbrk_aligned+0x3c>)
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	6831      	ldr	r1, [r6, #0]
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	b911      	cbnz	r1, 800bfca <sbrk_aligned+0x12>
 800bfc4:	f000 fcbc 	bl	800c940 <_sbrk_r>
 800bfc8:	6030      	str	r0, [r6, #0]
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 fcb7 	bl	800c940 <_sbrk_r>
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d00a      	beq.n	800bfec <sbrk_aligned+0x34>
 800bfd6:	1cc4      	adds	r4, r0, #3
 800bfd8:	f024 0403 	bic.w	r4, r4, #3
 800bfdc:	42a0      	cmp	r0, r4
 800bfde:	d007      	beq.n	800bff0 <sbrk_aligned+0x38>
 800bfe0:	1a21      	subs	r1, r4, r0
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f000 fcac 	bl	800c940 <_sbrk_r>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d101      	bne.n	800bff0 <sbrk_aligned+0x38>
 800bfec:	f04f 34ff 	mov.w	r4, #4294967295
 800bff0:	4620      	mov	r0, r4
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	20005310 	.word	0x20005310

0800bff8 <_malloc_r>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	1ccd      	adds	r5, r1, #3
 800bffe:	f025 0503 	bic.w	r5, r5, #3
 800c002:	3508      	adds	r5, #8
 800c004:	2d0c      	cmp	r5, #12
 800c006:	bf38      	it	cc
 800c008:	250c      	movcc	r5, #12
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	4607      	mov	r7, r0
 800c00e:	db01      	blt.n	800c014 <_malloc_r+0x1c>
 800c010:	42a9      	cmp	r1, r5
 800c012:	d905      	bls.n	800c020 <_malloc_r+0x28>
 800c014:	230c      	movs	r3, #12
 800c016:	603b      	str	r3, [r7, #0]
 800c018:	2600      	movs	r6, #0
 800c01a:	4630      	mov	r0, r6
 800c01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c020:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0f4 <_malloc_r+0xfc>
 800c024:	f000 f868 	bl	800c0f8 <__malloc_lock>
 800c028:	f8d8 3000 	ldr.w	r3, [r8]
 800c02c:	461c      	mov	r4, r3
 800c02e:	bb5c      	cbnz	r4, 800c088 <_malloc_r+0x90>
 800c030:	4629      	mov	r1, r5
 800c032:	4638      	mov	r0, r7
 800c034:	f7ff ffc0 	bl	800bfb8 <sbrk_aligned>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	4604      	mov	r4, r0
 800c03c:	d155      	bne.n	800c0ea <_malloc_r+0xf2>
 800c03e:	f8d8 4000 	ldr.w	r4, [r8]
 800c042:	4626      	mov	r6, r4
 800c044:	2e00      	cmp	r6, #0
 800c046:	d145      	bne.n	800c0d4 <_malloc_r+0xdc>
 800c048:	2c00      	cmp	r4, #0
 800c04a:	d048      	beq.n	800c0de <_malloc_r+0xe6>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	4631      	mov	r1, r6
 800c050:	4638      	mov	r0, r7
 800c052:	eb04 0903 	add.w	r9, r4, r3
 800c056:	f000 fc73 	bl	800c940 <_sbrk_r>
 800c05a:	4581      	cmp	r9, r0
 800c05c:	d13f      	bne.n	800c0de <_malloc_r+0xe6>
 800c05e:	6821      	ldr	r1, [r4, #0]
 800c060:	1a6d      	subs	r5, r5, r1
 800c062:	4629      	mov	r1, r5
 800c064:	4638      	mov	r0, r7
 800c066:	f7ff ffa7 	bl	800bfb8 <sbrk_aligned>
 800c06a:	3001      	adds	r0, #1
 800c06c:	d037      	beq.n	800c0de <_malloc_r+0xe6>
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	442b      	add	r3, r5
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	f8d8 3000 	ldr.w	r3, [r8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d038      	beq.n	800c0ee <_malloc_r+0xf6>
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	42a2      	cmp	r2, r4
 800c080:	d12b      	bne.n	800c0da <_malloc_r+0xe2>
 800c082:	2200      	movs	r2, #0
 800c084:	605a      	str	r2, [r3, #4]
 800c086:	e00f      	b.n	800c0a8 <_malloc_r+0xb0>
 800c088:	6822      	ldr	r2, [r4, #0]
 800c08a:	1b52      	subs	r2, r2, r5
 800c08c:	d41f      	bmi.n	800c0ce <_malloc_r+0xd6>
 800c08e:	2a0b      	cmp	r2, #11
 800c090:	d917      	bls.n	800c0c2 <_malloc_r+0xca>
 800c092:	1961      	adds	r1, r4, r5
 800c094:	42a3      	cmp	r3, r4
 800c096:	6025      	str	r5, [r4, #0]
 800c098:	bf18      	it	ne
 800c09a:	6059      	strne	r1, [r3, #4]
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	bf08      	it	eq
 800c0a0:	f8c8 1000 	streq.w	r1, [r8]
 800c0a4:	5162      	str	r2, [r4, r5]
 800c0a6:	604b      	str	r3, [r1, #4]
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f104 060b 	add.w	r6, r4, #11
 800c0ae:	f000 f829 	bl	800c104 <__malloc_unlock>
 800c0b2:	f026 0607 	bic.w	r6, r6, #7
 800c0b6:	1d23      	adds	r3, r4, #4
 800c0b8:	1af2      	subs	r2, r6, r3
 800c0ba:	d0ae      	beq.n	800c01a <_malloc_r+0x22>
 800c0bc:	1b9b      	subs	r3, r3, r6
 800c0be:	50a3      	str	r3, [r4, r2]
 800c0c0:	e7ab      	b.n	800c01a <_malloc_r+0x22>
 800c0c2:	42a3      	cmp	r3, r4
 800c0c4:	6862      	ldr	r2, [r4, #4]
 800c0c6:	d1dd      	bne.n	800c084 <_malloc_r+0x8c>
 800c0c8:	f8c8 2000 	str.w	r2, [r8]
 800c0cc:	e7ec      	b.n	800c0a8 <_malloc_r+0xb0>
 800c0ce:	4623      	mov	r3, r4
 800c0d0:	6864      	ldr	r4, [r4, #4]
 800c0d2:	e7ac      	b.n	800c02e <_malloc_r+0x36>
 800c0d4:	4634      	mov	r4, r6
 800c0d6:	6876      	ldr	r6, [r6, #4]
 800c0d8:	e7b4      	b.n	800c044 <_malloc_r+0x4c>
 800c0da:	4613      	mov	r3, r2
 800c0dc:	e7cc      	b.n	800c078 <_malloc_r+0x80>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	603b      	str	r3, [r7, #0]
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	f000 f80e 	bl	800c104 <__malloc_unlock>
 800c0e8:	e797      	b.n	800c01a <_malloc_r+0x22>
 800c0ea:	6025      	str	r5, [r4, #0]
 800c0ec:	e7dc      	b.n	800c0a8 <_malloc_r+0xb0>
 800c0ee:	605b      	str	r3, [r3, #4]
 800c0f0:	deff      	udf	#255	; 0xff
 800c0f2:	bf00      	nop
 800c0f4:	2000530c 	.word	0x2000530c

0800c0f8 <__malloc_lock>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__malloc_lock+0x8>)
 800c0fa:	f7ff bf01 	b.w	800bf00 <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	20005308 	.word	0x20005308

0800c104 <__malloc_unlock>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__malloc_unlock+0x8>)
 800c106:	f7ff befc 	b.w	800bf02 <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	20005308 	.word	0x20005308

0800c110 <__sfputc_r>:
 800c110:	6893      	ldr	r3, [r2, #8]
 800c112:	3b01      	subs	r3, #1
 800c114:	2b00      	cmp	r3, #0
 800c116:	b410      	push	{r4}
 800c118:	6093      	str	r3, [r2, #8]
 800c11a:	da08      	bge.n	800c12e <__sfputc_r+0x1e>
 800c11c:	6994      	ldr	r4, [r2, #24]
 800c11e:	42a3      	cmp	r3, r4
 800c120:	db01      	blt.n	800c126 <__sfputc_r+0x16>
 800c122:	290a      	cmp	r1, #10
 800c124:	d103      	bne.n	800c12e <__sfputc_r+0x1e>
 800c126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c12a:	f000 bb73 	b.w	800c814 <__swbuf_r>
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	1c58      	adds	r0, r3, #1
 800c132:	6010      	str	r0, [r2, #0]
 800c134:	7019      	strb	r1, [r3, #0]
 800c136:	4608      	mov	r0, r1
 800c138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <__sfputs_r>:
 800c13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	4614      	mov	r4, r2
 800c146:	18d5      	adds	r5, r2, r3
 800c148:	42ac      	cmp	r4, r5
 800c14a:	d101      	bne.n	800c150 <__sfputs_r+0x12>
 800c14c:	2000      	movs	r0, #0
 800c14e:	e007      	b.n	800c160 <__sfputs_r+0x22>
 800c150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c154:	463a      	mov	r2, r7
 800c156:	4630      	mov	r0, r6
 800c158:	f7ff ffda 	bl	800c110 <__sfputc_r>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d1f3      	bne.n	800c148 <__sfputs_r+0xa>
 800c160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c164 <_vfiprintf_r>:
 800c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	460d      	mov	r5, r1
 800c16a:	b09d      	sub	sp, #116	; 0x74
 800c16c:	4614      	mov	r4, r2
 800c16e:	4698      	mov	r8, r3
 800c170:	4606      	mov	r6, r0
 800c172:	b118      	cbz	r0, 800c17c <_vfiprintf_r+0x18>
 800c174:	6a03      	ldr	r3, [r0, #32]
 800c176:	b90b      	cbnz	r3, 800c17c <_vfiprintf_r+0x18>
 800c178:	f7ff fd5a 	bl	800bc30 <__sinit>
 800c17c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c17e:	07d9      	lsls	r1, r3, #31
 800c180:	d405      	bmi.n	800c18e <_vfiprintf_r+0x2a>
 800c182:	89ab      	ldrh	r3, [r5, #12]
 800c184:	059a      	lsls	r2, r3, #22
 800c186:	d402      	bmi.n	800c18e <_vfiprintf_r+0x2a>
 800c188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c18a:	f7ff feb9 	bl	800bf00 <__retarget_lock_acquire_recursive>
 800c18e:	89ab      	ldrh	r3, [r5, #12]
 800c190:	071b      	lsls	r3, r3, #28
 800c192:	d501      	bpl.n	800c198 <_vfiprintf_r+0x34>
 800c194:	692b      	ldr	r3, [r5, #16]
 800c196:	b99b      	cbnz	r3, 800c1c0 <_vfiprintf_r+0x5c>
 800c198:	4629      	mov	r1, r5
 800c19a:	4630      	mov	r0, r6
 800c19c:	f000 fb78 	bl	800c890 <__swsetup_r>
 800c1a0:	b170      	cbz	r0, 800c1c0 <_vfiprintf_r+0x5c>
 800c1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1a4:	07dc      	lsls	r4, r3, #31
 800c1a6:	d504      	bpl.n	800c1b2 <_vfiprintf_r+0x4e>
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	b01d      	add	sp, #116	; 0x74
 800c1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	0598      	lsls	r0, r3, #22
 800c1b6:	d4f7      	bmi.n	800c1a8 <_vfiprintf_r+0x44>
 800c1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ba:	f7ff fea2 	bl	800bf02 <__retarget_lock_release_recursive>
 800c1be:	e7f3      	b.n	800c1a8 <_vfiprintf_r+0x44>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ce:	2330      	movs	r3, #48	; 0x30
 800c1d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c384 <_vfiprintf_r+0x220>
 800c1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d8:	f04f 0901 	mov.w	r9, #1
 800c1dc:	4623      	mov	r3, r4
 800c1de:	469a      	mov	sl, r3
 800c1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e4:	b10a      	cbz	r2, 800c1ea <_vfiprintf_r+0x86>
 800c1e6:	2a25      	cmp	r2, #37	; 0x25
 800c1e8:	d1f9      	bne.n	800c1de <_vfiprintf_r+0x7a>
 800c1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ee:	d00b      	beq.n	800c208 <_vfiprintf_r+0xa4>
 800c1f0:	465b      	mov	r3, fp
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ffa1 	bl	800c13e <__sfputs_r>
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	f000 80a9 	beq.w	800c354 <_vfiprintf_r+0x1f0>
 800c202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c204:	445a      	add	r2, fp
 800c206:	9209      	str	r2, [sp, #36]	; 0x24
 800c208:	f89a 3000 	ldrb.w	r3, [sl]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80a1 	beq.w	800c354 <_vfiprintf_r+0x1f0>
 800c212:	2300      	movs	r3, #0
 800c214:	f04f 32ff 	mov.w	r2, #4294967295
 800c218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21c:	f10a 0a01 	add.w	sl, sl, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	9307      	str	r3, [sp, #28]
 800c224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c228:	931a      	str	r3, [sp, #104]	; 0x68
 800c22a:	4654      	mov	r4, sl
 800c22c:	2205      	movs	r2, #5
 800c22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c232:	4854      	ldr	r0, [pc, #336]	; (800c384 <_vfiprintf_r+0x220>)
 800c234:	f7f4 f804 	bl	8000240 <memchr>
 800c238:	9a04      	ldr	r2, [sp, #16]
 800c23a:	b9d8      	cbnz	r0, 800c274 <_vfiprintf_r+0x110>
 800c23c:	06d1      	lsls	r1, r2, #27
 800c23e:	bf44      	itt	mi
 800c240:	2320      	movmi	r3, #32
 800c242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c246:	0713      	lsls	r3, r2, #28
 800c248:	bf44      	itt	mi
 800c24a:	232b      	movmi	r3, #43	; 0x2b
 800c24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c250:	f89a 3000 	ldrb.w	r3, [sl]
 800c254:	2b2a      	cmp	r3, #42	; 0x2a
 800c256:	d015      	beq.n	800c284 <_vfiprintf_r+0x120>
 800c258:	9a07      	ldr	r2, [sp, #28]
 800c25a:	4654      	mov	r4, sl
 800c25c:	2000      	movs	r0, #0
 800c25e:	f04f 0c0a 	mov.w	ip, #10
 800c262:	4621      	mov	r1, r4
 800c264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c268:	3b30      	subs	r3, #48	; 0x30
 800c26a:	2b09      	cmp	r3, #9
 800c26c:	d94d      	bls.n	800c30a <_vfiprintf_r+0x1a6>
 800c26e:	b1b0      	cbz	r0, 800c29e <_vfiprintf_r+0x13a>
 800c270:	9207      	str	r2, [sp, #28]
 800c272:	e014      	b.n	800c29e <_vfiprintf_r+0x13a>
 800c274:	eba0 0308 	sub.w	r3, r0, r8
 800c278:	fa09 f303 	lsl.w	r3, r9, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	46a2      	mov	sl, r4
 800c282:	e7d2      	b.n	800c22a <_vfiprintf_r+0xc6>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	1d19      	adds	r1, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	9103      	str	r1, [sp, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bfbb      	ittet	lt
 800c290:	425b      	neglt	r3, r3
 800c292:	f042 0202 	orrlt.w	r2, r2, #2
 800c296:	9307      	strge	r3, [sp, #28]
 800c298:	9307      	strlt	r3, [sp, #28]
 800c29a:	bfb8      	it	lt
 800c29c:	9204      	strlt	r2, [sp, #16]
 800c29e:	7823      	ldrb	r3, [r4, #0]
 800c2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a2:	d10c      	bne.n	800c2be <_vfiprintf_r+0x15a>
 800c2a4:	7863      	ldrb	r3, [r4, #1]
 800c2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a8:	d134      	bne.n	800c314 <_vfiprintf_r+0x1b0>
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	1d1a      	adds	r2, r3, #4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	9203      	str	r2, [sp, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	bfb8      	it	lt
 800c2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2ba:	3402      	adds	r4, #2
 800c2bc:	9305      	str	r3, [sp, #20]
 800c2be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c394 <_vfiprintf_r+0x230>
 800c2c2:	7821      	ldrb	r1, [r4, #0]
 800c2c4:	2203      	movs	r2, #3
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	f7f3 ffba 	bl	8000240 <memchr>
 800c2cc:	b138      	cbz	r0, 800c2de <_vfiprintf_r+0x17a>
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	eba0 000a 	sub.w	r0, r0, sl
 800c2d4:	2240      	movs	r2, #64	; 0x40
 800c2d6:	4082      	lsls	r2, r0
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	3401      	adds	r4, #1
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e2:	4829      	ldr	r0, [pc, #164]	; (800c388 <_vfiprintf_r+0x224>)
 800c2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2e8:	2206      	movs	r2, #6
 800c2ea:	f7f3 ffa9 	bl	8000240 <memchr>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d03f      	beq.n	800c372 <_vfiprintf_r+0x20e>
 800c2f2:	4b26      	ldr	r3, [pc, #152]	; (800c38c <_vfiprintf_r+0x228>)
 800c2f4:	bb1b      	cbnz	r3, 800c33e <_vfiprintf_r+0x1da>
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	3307      	adds	r3, #7
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	3308      	adds	r3, #8
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c304:	443b      	add	r3, r7
 800c306:	9309      	str	r3, [sp, #36]	; 0x24
 800c308:	e768      	b.n	800c1dc <_vfiprintf_r+0x78>
 800c30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c30e:	460c      	mov	r4, r1
 800c310:	2001      	movs	r0, #1
 800c312:	e7a6      	b.n	800c262 <_vfiprintf_r+0xfe>
 800c314:	2300      	movs	r3, #0
 800c316:	3401      	adds	r4, #1
 800c318:	9305      	str	r3, [sp, #20]
 800c31a:	4619      	mov	r1, r3
 800c31c:	f04f 0c0a 	mov.w	ip, #10
 800c320:	4620      	mov	r0, r4
 800c322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c326:	3a30      	subs	r2, #48	; 0x30
 800c328:	2a09      	cmp	r2, #9
 800c32a:	d903      	bls.n	800c334 <_vfiprintf_r+0x1d0>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0c6      	beq.n	800c2be <_vfiprintf_r+0x15a>
 800c330:	9105      	str	r1, [sp, #20]
 800c332:	e7c4      	b.n	800c2be <_vfiprintf_r+0x15a>
 800c334:	fb0c 2101 	mla	r1, ip, r1, r2
 800c338:	4604      	mov	r4, r0
 800c33a:	2301      	movs	r3, #1
 800c33c:	e7f0      	b.n	800c320 <_vfiprintf_r+0x1bc>
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	462a      	mov	r2, r5
 800c344:	4b12      	ldr	r3, [pc, #72]	; (800c390 <_vfiprintf_r+0x22c>)
 800c346:	a904      	add	r1, sp, #16
 800c348:	4630      	mov	r0, r6
 800c34a:	f3af 8000 	nop.w
 800c34e:	4607      	mov	r7, r0
 800c350:	1c78      	adds	r0, r7, #1
 800c352:	d1d6      	bne.n	800c302 <_vfiprintf_r+0x19e>
 800c354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c356:	07d9      	lsls	r1, r3, #31
 800c358:	d405      	bmi.n	800c366 <_vfiprintf_r+0x202>
 800c35a:	89ab      	ldrh	r3, [r5, #12]
 800c35c:	059a      	lsls	r2, r3, #22
 800c35e:	d402      	bmi.n	800c366 <_vfiprintf_r+0x202>
 800c360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c362:	f7ff fdce 	bl	800bf02 <__retarget_lock_release_recursive>
 800c366:	89ab      	ldrh	r3, [r5, #12]
 800c368:	065b      	lsls	r3, r3, #25
 800c36a:	f53f af1d 	bmi.w	800c1a8 <_vfiprintf_r+0x44>
 800c36e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c370:	e71c      	b.n	800c1ac <_vfiprintf_r+0x48>
 800c372:	ab03      	add	r3, sp, #12
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	462a      	mov	r2, r5
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <_vfiprintf_r+0x22c>)
 800c37a:	a904      	add	r1, sp, #16
 800c37c:	4630      	mov	r0, r6
 800c37e:	f000 f879 	bl	800c474 <_printf_i>
 800c382:	e7e4      	b.n	800c34e <_vfiprintf_r+0x1ea>
 800c384:	0800e460 	.word	0x0800e460
 800c388:	0800e46a 	.word	0x0800e46a
 800c38c:	00000000 	.word	0x00000000
 800c390:	0800c13f 	.word	0x0800c13f
 800c394:	0800e466 	.word	0x0800e466

0800c398 <_printf_common>:
 800c398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c39c:	4616      	mov	r6, r2
 800c39e:	4699      	mov	r9, r3
 800c3a0:	688a      	ldr	r2, [r1, #8]
 800c3a2:	690b      	ldr	r3, [r1, #16]
 800c3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	bfb8      	it	lt
 800c3ac:	4613      	movlt	r3, r2
 800c3ae:	6033      	str	r3, [r6, #0]
 800c3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	b10a      	cbz	r2, 800c3be <_printf_common+0x26>
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	6033      	str	r3, [r6, #0]
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	0699      	lsls	r1, r3, #26
 800c3c2:	bf42      	ittt	mi
 800c3c4:	6833      	ldrmi	r3, [r6, #0]
 800c3c6:	3302      	addmi	r3, #2
 800c3c8:	6033      	strmi	r3, [r6, #0]
 800c3ca:	6825      	ldr	r5, [r4, #0]
 800c3cc:	f015 0506 	ands.w	r5, r5, #6
 800c3d0:	d106      	bne.n	800c3e0 <_printf_common+0x48>
 800c3d2:	f104 0a19 	add.w	sl, r4, #25
 800c3d6:	68e3      	ldr	r3, [r4, #12]
 800c3d8:	6832      	ldr	r2, [r6, #0]
 800c3da:	1a9b      	subs	r3, r3, r2
 800c3dc:	42ab      	cmp	r3, r5
 800c3de:	dc26      	bgt.n	800c42e <_printf_common+0x96>
 800c3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3e4:	1e13      	subs	r3, r2, #0
 800c3e6:	6822      	ldr	r2, [r4, #0]
 800c3e8:	bf18      	it	ne
 800c3ea:	2301      	movne	r3, #1
 800c3ec:	0692      	lsls	r2, r2, #26
 800c3ee:	d42b      	bmi.n	800c448 <_printf_common+0xb0>
 800c3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	47c0      	blx	r8
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	d01e      	beq.n	800c43c <_printf_common+0xa4>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	6922      	ldr	r2, [r4, #16]
 800c402:	f003 0306 	and.w	r3, r3, #6
 800c406:	2b04      	cmp	r3, #4
 800c408:	bf02      	ittt	eq
 800c40a:	68e5      	ldreq	r5, [r4, #12]
 800c40c:	6833      	ldreq	r3, [r6, #0]
 800c40e:	1aed      	subeq	r5, r5, r3
 800c410:	68a3      	ldr	r3, [r4, #8]
 800c412:	bf0c      	ite	eq
 800c414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c418:	2500      	movne	r5, #0
 800c41a:	4293      	cmp	r3, r2
 800c41c:	bfc4      	itt	gt
 800c41e:	1a9b      	subgt	r3, r3, r2
 800c420:	18ed      	addgt	r5, r5, r3
 800c422:	2600      	movs	r6, #0
 800c424:	341a      	adds	r4, #26
 800c426:	42b5      	cmp	r5, r6
 800c428:	d11a      	bne.n	800c460 <_printf_common+0xc8>
 800c42a:	2000      	movs	r0, #0
 800c42c:	e008      	b.n	800c440 <_printf_common+0xa8>
 800c42e:	2301      	movs	r3, #1
 800c430:	4652      	mov	r2, sl
 800c432:	4649      	mov	r1, r9
 800c434:	4638      	mov	r0, r7
 800c436:	47c0      	blx	r8
 800c438:	3001      	adds	r0, #1
 800c43a:	d103      	bne.n	800c444 <_printf_common+0xac>
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295
 800c440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c444:	3501      	adds	r5, #1
 800c446:	e7c6      	b.n	800c3d6 <_printf_common+0x3e>
 800c448:	18e1      	adds	r1, r4, r3
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	2030      	movs	r0, #48	; 0x30
 800c44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c452:	4422      	add	r2, r4
 800c454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c45c:	3302      	adds	r3, #2
 800c45e:	e7c7      	b.n	800c3f0 <_printf_common+0x58>
 800c460:	2301      	movs	r3, #1
 800c462:	4622      	mov	r2, r4
 800c464:	4649      	mov	r1, r9
 800c466:	4638      	mov	r0, r7
 800c468:	47c0      	blx	r8
 800c46a:	3001      	adds	r0, #1
 800c46c:	d0e6      	beq.n	800c43c <_printf_common+0xa4>
 800c46e:	3601      	adds	r6, #1
 800c470:	e7d9      	b.n	800c426 <_printf_common+0x8e>
	...

0800c474 <_printf_i>:
 800c474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c478:	7e0f      	ldrb	r7, [r1, #24]
 800c47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c47c:	2f78      	cmp	r7, #120	; 0x78
 800c47e:	4691      	mov	r9, r2
 800c480:	4680      	mov	r8, r0
 800c482:	460c      	mov	r4, r1
 800c484:	469a      	mov	sl, r3
 800c486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c48a:	d807      	bhi.n	800c49c <_printf_i+0x28>
 800c48c:	2f62      	cmp	r7, #98	; 0x62
 800c48e:	d80a      	bhi.n	800c4a6 <_printf_i+0x32>
 800c490:	2f00      	cmp	r7, #0
 800c492:	f000 80d4 	beq.w	800c63e <_printf_i+0x1ca>
 800c496:	2f58      	cmp	r7, #88	; 0x58
 800c498:	f000 80c0 	beq.w	800c61c <_printf_i+0x1a8>
 800c49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4a4:	e03a      	b.n	800c51c <_printf_i+0xa8>
 800c4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4aa:	2b15      	cmp	r3, #21
 800c4ac:	d8f6      	bhi.n	800c49c <_printf_i+0x28>
 800c4ae:	a101      	add	r1, pc, #4	; (adr r1, 800c4b4 <_printf_i+0x40>)
 800c4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4b4:	0800c50d 	.word	0x0800c50d
 800c4b8:	0800c521 	.word	0x0800c521
 800c4bc:	0800c49d 	.word	0x0800c49d
 800c4c0:	0800c49d 	.word	0x0800c49d
 800c4c4:	0800c49d 	.word	0x0800c49d
 800c4c8:	0800c49d 	.word	0x0800c49d
 800c4cc:	0800c521 	.word	0x0800c521
 800c4d0:	0800c49d 	.word	0x0800c49d
 800c4d4:	0800c49d 	.word	0x0800c49d
 800c4d8:	0800c49d 	.word	0x0800c49d
 800c4dc:	0800c49d 	.word	0x0800c49d
 800c4e0:	0800c625 	.word	0x0800c625
 800c4e4:	0800c54d 	.word	0x0800c54d
 800c4e8:	0800c5df 	.word	0x0800c5df
 800c4ec:	0800c49d 	.word	0x0800c49d
 800c4f0:	0800c49d 	.word	0x0800c49d
 800c4f4:	0800c647 	.word	0x0800c647
 800c4f8:	0800c49d 	.word	0x0800c49d
 800c4fc:	0800c54d 	.word	0x0800c54d
 800c500:	0800c49d 	.word	0x0800c49d
 800c504:	0800c49d 	.word	0x0800c49d
 800c508:	0800c5e7 	.word	0x0800c5e7
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	602a      	str	r2, [r5, #0]
 800c514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c51c:	2301      	movs	r3, #1
 800c51e:	e09f      	b.n	800c660 <_printf_i+0x1ec>
 800c520:	6820      	ldr	r0, [r4, #0]
 800c522:	682b      	ldr	r3, [r5, #0]
 800c524:	0607      	lsls	r7, r0, #24
 800c526:	f103 0104 	add.w	r1, r3, #4
 800c52a:	6029      	str	r1, [r5, #0]
 800c52c:	d501      	bpl.n	800c532 <_printf_i+0xbe>
 800c52e:	681e      	ldr	r6, [r3, #0]
 800c530:	e003      	b.n	800c53a <_printf_i+0xc6>
 800c532:	0646      	lsls	r6, r0, #25
 800c534:	d5fb      	bpl.n	800c52e <_printf_i+0xba>
 800c536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	da03      	bge.n	800c546 <_printf_i+0xd2>
 800c53e:	232d      	movs	r3, #45	; 0x2d
 800c540:	4276      	negs	r6, r6
 800c542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c546:	485a      	ldr	r0, [pc, #360]	; (800c6b0 <_printf_i+0x23c>)
 800c548:	230a      	movs	r3, #10
 800c54a:	e012      	b.n	800c572 <_printf_i+0xfe>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	1d19      	adds	r1, r3, #4
 800c552:	6029      	str	r1, [r5, #0]
 800c554:	0605      	lsls	r5, r0, #24
 800c556:	d501      	bpl.n	800c55c <_printf_i+0xe8>
 800c558:	681e      	ldr	r6, [r3, #0]
 800c55a:	e002      	b.n	800c562 <_printf_i+0xee>
 800c55c:	0641      	lsls	r1, r0, #25
 800c55e:	d5fb      	bpl.n	800c558 <_printf_i+0xe4>
 800c560:	881e      	ldrh	r6, [r3, #0]
 800c562:	4853      	ldr	r0, [pc, #332]	; (800c6b0 <_printf_i+0x23c>)
 800c564:	2f6f      	cmp	r7, #111	; 0x6f
 800c566:	bf0c      	ite	eq
 800c568:	2308      	moveq	r3, #8
 800c56a:	230a      	movne	r3, #10
 800c56c:	2100      	movs	r1, #0
 800c56e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c572:	6865      	ldr	r5, [r4, #4]
 800c574:	60a5      	str	r5, [r4, #8]
 800c576:	2d00      	cmp	r5, #0
 800c578:	bfa2      	ittt	ge
 800c57a:	6821      	ldrge	r1, [r4, #0]
 800c57c:	f021 0104 	bicge.w	r1, r1, #4
 800c580:	6021      	strge	r1, [r4, #0]
 800c582:	b90e      	cbnz	r6, 800c588 <_printf_i+0x114>
 800c584:	2d00      	cmp	r5, #0
 800c586:	d04b      	beq.n	800c620 <_printf_i+0x1ac>
 800c588:	4615      	mov	r5, r2
 800c58a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c58e:	fb03 6711 	mls	r7, r3, r1, r6
 800c592:	5dc7      	ldrb	r7, [r0, r7]
 800c594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c598:	4637      	mov	r7, r6
 800c59a:	42bb      	cmp	r3, r7
 800c59c:	460e      	mov	r6, r1
 800c59e:	d9f4      	bls.n	800c58a <_printf_i+0x116>
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d10b      	bne.n	800c5bc <_printf_i+0x148>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	07de      	lsls	r6, r3, #31
 800c5a8:	d508      	bpl.n	800c5bc <_printf_i+0x148>
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	4299      	cmp	r1, r3
 800c5b0:	bfde      	ittt	le
 800c5b2:	2330      	movle	r3, #48	; 0x30
 800c5b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5bc:	1b52      	subs	r2, r2, r5
 800c5be:	6122      	str	r2, [r4, #16]
 800c5c0:	f8cd a000 	str.w	sl, [sp]
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	aa03      	add	r2, sp, #12
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	f7ff fee4 	bl	800c398 <_printf_common>
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d14a      	bne.n	800c66a <_printf_i+0x1f6>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	b004      	add	sp, #16
 800c5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	f043 0320 	orr.w	r3, r3, #32
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	4833      	ldr	r0, [pc, #204]	; (800c6b4 <_printf_i+0x240>)
 800c5e8:	2778      	movs	r7, #120	; 0x78
 800c5ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	6829      	ldr	r1, [r5, #0]
 800c5f2:	061f      	lsls	r7, r3, #24
 800c5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5f8:	d402      	bmi.n	800c600 <_printf_i+0x18c>
 800c5fa:	065f      	lsls	r7, r3, #25
 800c5fc:	bf48      	it	mi
 800c5fe:	b2b6      	uxthmi	r6, r6
 800c600:	07df      	lsls	r7, r3, #31
 800c602:	bf48      	it	mi
 800c604:	f043 0320 	orrmi.w	r3, r3, #32
 800c608:	6029      	str	r1, [r5, #0]
 800c60a:	bf48      	it	mi
 800c60c:	6023      	strmi	r3, [r4, #0]
 800c60e:	b91e      	cbnz	r6, 800c618 <_printf_i+0x1a4>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	f023 0320 	bic.w	r3, r3, #32
 800c616:	6023      	str	r3, [r4, #0]
 800c618:	2310      	movs	r3, #16
 800c61a:	e7a7      	b.n	800c56c <_printf_i+0xf8>
 800c61c:	4824      	ldr	r0, [pc, #144]	; (800c6b0 <_printf_i+0x23c>)
 800c61e:	e7e4      	b.n	800c5ea <_printf_i+0x176>
 800c620:	4615      	mov	r5, r2
 800c622:	e7bd      	b.n	800c5a0 <_printf_i+0x12c>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	6826      	ldr	r6, [r4, #0]
 800c628:	6961      	ldr	r1, [r4, #20]
 800c62a:	1d18      	adds	r0, r3, #4
 800c62c:	6028      	str	r0, [r5, #0]
 800c62e:	0635      	lsls	r5, r6, #24
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	d501      	bpl.n	800c638 <_printf_i+0x1c4>
 800c634:	6019      	str	r1, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0x1ca>
 800c638:	0670      	lsls	r0, r6, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0x1c0>
 800c63c:	8019      	strh	r1, [r3, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	4615      	mov	r5, r2
 800c644:	e7bc      	b.n	800c5c0 <_printf_i+0x14c>
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	602a      	str	r2, [r5, #0]
 800c64c:	681d      	ldr	r5, [r3, #0]
 800c64e:	6862      	ldr	r2, [r4, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	4628      	mov	r0, r5
 800c654:	f7f3 fdf4 	bl	8000240 <memchr>
 800c658:	b108      	cbz	r0, 800c65e <_printf_i+0x1ea>
 800c65a:	1b40      	subs	r0, r0, r5
 800c65c:	6060      	str	r0, [r4, #4]
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c668:	e7aa      	b.n	800c5c0 <_printf_i+0x14c>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d0ad      	beq.n	800c5d4 <_printf_i+0x160>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	079b      	lsls	r3, r3, #30
 800c67c:	d413      	bmi.n	800c6a6 <_printf_i+0x232>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e7a6      	b.n	800c5d8 <_printf_i+0x164>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	47d0      	blx	sl
 800c694:	3001      	adds	r0, #1
 800c696:	d09d      	beq.n	800c5d4 <_printf_i+0x160>
 800c698:	3501      	adds	r5, #1
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dcf2      	bgt.n	800c68a <_printf_i+0x216>
 800c6a4:	e7eb      	b.n	800c67e <_printf_i+0x20a>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	f104 0619 	add.w	r6, r4, #25
 800c6ac:	e7f5      	b.n	800c69a <_printf_i+0x226>
 800c6ae:	bf00      	nop
 800c6b0:	0800e471 	.word	0x0800e471
 800c6b4:	0800e482 	.word	0x0800e482

0800c6b8 <__sflush_r>:
 800c6b8:	898a      	ldrh	r2, [r1, #12]
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	4605      	mov	r5, r0
 800c6c0:	0710      	lsls	r0, r2, #28
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	d458      	bmi.n	800c778 <__sflush_r+0xc0>
 800c6c6:	684b      	ldr	r3, [r1, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dc05      	bgt.n	800c6d8 <__sflush_r+0x20>
 800c6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dc02      	bgt.n	800c6d8 <__sflush_r+0x20>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	d0f9      	beq.n	800c6d2 <__sflush_r+0x1a>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6e4:	682f      	ldr	r7, [r5, #0]
 800c6e6:	6a21      	ldr	r1, [r4, #32]
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	d032      	beq.n	800c752 <__sflush_r+0x9a>
 800c6ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	075a      	lsls	r2, r3, #29
 800c6f2:	d505      	bpl.n	800c700 <__sflush_r+0x48>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	1ac0      	subs	r0, r0, r3
 800c6f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6fa:	b10b      	cbz	r3, 800c700 <__sflush_r+0x48>
 800c6fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6fe:	1ac0      	subs	r0, r0, r3
 800c700:	2300      	movs	r3, #0
 800c702:	4602      	mov	r2, r0
 800c704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c706:	6a21      	ldr	r1, [r4, #32]
 800c708:	4628      	mov	r0, r5
 800c70a:	47b0      	blx	r6
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	d106      	bne.n	800c720 <__sflush_r+0x68>
 800c712:	6829      	ldr	r1, [r5, #0]
 800c714:	291d      	cmp	r1, #29
 800c716:	d82b      	bhi.n	800c770 <__sflush_r+0xb8>
 800c718:	4a29      	ldr	r2, [pc, #164]	; (800c7c0 <__sflush_r+0x108>)
 800c71a:	410a      	asrs	r2, r1
 800c71c:	07d6      	lsls	r6, r2, #31
 800c71e:	d427      	bmi.n	800c770 <__sflush_r+0xb8>
 800c720:	2200      	movs	r2, #0
 800c722:	6062      	str	r2, [r4, #4]
 800c724:	04d9      	lsls	r1, r3, #19
 800c726:	6922      	ldr	r2, [r4, #16]
 800c728:	6022      	str	r2, [r4, #0]
 800c72a:	d504      	bpl.n	800c736 <__sflush_r+0x7e>
 800c72c:	1c42      	adds	r2, r0, #1
 800c72e:	d101      	bne.n	800c734 <__sflush_r+0x7c>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b903      	cbnz	r3, 800c736 <__sflush_r+0x7e>
 800c734:	6560      	str	r0, [r4, #84]	; 0x54
 800c736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c738:	602f      	str	r7, [r5, #0]
 800c73a:	2900      	cmp	r1, #0
 800c73c:	d0c9      	beq.n	800c6d2 <__sflush_r+0x1a>
 800c73e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c742:	4299      	cmp	r1, r3
 800c744:	d002      	beq.n	800c74c <__sflush_r+0x94>
 800c746:	4628      	mov	r0, r5
 800c748:	f7ff fbea 	bl	800bf20 <_free_r>
 800c74c:	2000      	movs	r0, #0
 800c74e:	6360      	str	r0, [r4, #52]	; 0x34
 800c750:	e7c0      	b.n	800c6d4 <__sflush_r+0x1c>
 800c752:	2301      	movs	r3, #1
 800c754:	4628      	mov	r0, r5
 800c756:	47b0      	blx	r6
 800c758:	1c41      	adds	r1, r0, #1
 800c75a:	d1c8      	bne.n	800c6ee <__sflush_r+0x36>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0c5      	beq.n	800c6ee <__sflush_r+0x36>
 800c762:	2b1d      	cmp	r3, #29
 800c764:	d001      	beq.n	800c76a <__sflush_r+0xb2>
 800c766:	2b16      	cmp	r3, #22
 800c768:	d101      	bne.n	800c76e <__sflush_r+0xb6>
 800c76a:	602f      	str	r7, [r5, #0]
 800c76c:	e7b1      	b.n	800c6d2 <__sflush_r+0x1a>
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	e7ad      	b.n	800c6d4 <__sflush_r+0x1c>
 800c778:	690f      	ldr	r7, [r1, #16]
 800c77a:	2f00      	cmp	r7, #0
 800c77c:	d0a9      	beq.n	800c6d2 <__sflush_r+0x1a>
 800c77e:	0793      	lsls	r3, r2, #30
 800c780:	680e      	ldr	r6, [r1, #0]
 800c782:	bf08      	it	eq
 800c784:	694b      	ldreq	r3, [r1, #20]
 800c786:	600f      	str	r7, [r1, #0]
 800c788:	bf18      	it	ne
 800c78a:	2300      	movne	r3, #0
 800c78c:	eba6 0807 	sub.w	r8, r6, r7
 800c790:	608b      	str	r3, [r1, #8]
 800c792:	f1b8 0f00 	cmp.w	r8, #0
 800c796:	dd9c      	ble.n	800c6d2 <__sflush_r+0x1a>
 800c798:	6a21      	ldr	r1, [r4, #32]
 800c79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c79c:	4643      	mov	r3, r8
 800c79e:	463a      	mov	r2, r7
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	47b0      	blx	r6
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	dc06      	bgt.n	800c7b6 <__sflush_r+0xfe>
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	e78e      	b.n	800c6d4 <__sflush_r+0x1c>
 800c7b6:	4407      	add	r7, r0
 800c7b8:	eba8 0800 	sub.w	r8, r8, r0
 800c7bc:	e7e9      	b.n	800c792 <__sflush_r+0xda>
 800c7be:	bf00      	nop
 800c7c0:	dfbffffe 	.word	0xdfbffffe

0800c7c4 <_fflush_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	690b      	ldr	r3, [r1, #16]
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b913      	cbnz	r3, 800c7d4 <_fflush_r+0x10>
 800c7ce:	2500      	movs	r5, #0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	b118      	cbz	r0, 800c7de <_fflush_r+0x1a>
 800c7d6:	6a03      	ldr	r3, [r0, #32]
 800c7d8:	b90b      	cbnz	r3, 800c7de <_fflush_r+0x1a>
 800c7da:	f7ff fa29 	bl	800bc30 <__sinit>
 800c7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0f3      	beq.n	800c7ce <_fflush_r+0xa>
 800c7e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7e8:	07d0      	lsls	r0, r2, #31
 800c7ea:	d404      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7ec:	0599      	lsls	r1, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7f2:	f7ff fb85 	bl	800bf00 <__retarget_lock_acquire_recursive>
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	f7ff ff5d 	bl	800c6b8 <__sflush_r>
 800c7fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c800:	07da      	lsls	r2, r3, #31
 800c802:	4605      	mov	r5, r0
 800c804:	d4e4      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	059b      	lsls	r3, r3, #22
 800c80a:	d4e1      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c80e:	f7ff fb78 	bl	800bf02 <__retarget_lock_release_recursive>
 800c812:	e7dd      	b.n	800c7d0 <_fflush_r+0xc>

0800c814 <__swbuf_r>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	460e      	mov	r6, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	4605      	mov	r5, r0
 800c81c:	b118      	cbz	r0, 800c826 <__swbuf_r+0x12>
 800c81e:	6a03      	ldr	r3, [r0, #32]
 800c820:	b90b      	cbnz	r3, 800c826 <__swbuf_r+0x12>
 800c822:	f7ff fa05 	bl	800bc30 <__sinit>
 800c826:	69a3      	ldr	r3, [r4, #24]
 800c828:	60a3      	str	r3, [r4, #8]
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	071a      	lsls	r2, r3, #28
 800c82e:	d525      	bpl.n	800c87c <__swbuf_r+0x68>
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	b31b      	cbz	r3, 800c87c <__swbuf_r+0x68>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	6922      	ldr	r2, [r4, #16]
 800c838:	1a98      	subs	r0, r3, r2
 800c83a:	6963      	ldr	r3, [r4, #20]
 800c83c:	b2f6      	uxtb	r6, r6
 800c83e:	4283      	cmp	r3, r0
 800c840:	4637      	mov	r7, r6
 800c842:	dc04      	bgt.n	800c84e <__swbuf_r+0x3a>
 800c844:	4621      	mov	r1, r4
 800c846:	4628      	mov	r0, r5
 800c848:	f7ff ffbc 	bl	800c7c4 <_fflush_r>
 800c84c:	b9e0      	cbnz	r0, 800c888 <__swbuf_r+0x74>
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	3b01      	subs	r3, #1
 800c852:	60a3      	str	r3, [r4, #8]
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	6022      	str	r2, [r4, #0]
 800c85a:	701e      	strb	r6, [r3, #0]
 800c85c:	6962      	ldr	r2, [r4, #20]
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	429a      	cmp	r2, r3
 800c862:	d004      	beq.n	800c86e <__swbuf_r+0x5a>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	07db      	lsls	r3, r3, #31
 800c868:	d506      	bpl.n	800c878 <__swbuf_r+0x64>
 800c86a:	2e0a      	cmp	r6, #10
 800c86c:	d104      	bne.n	800c878 <__swbuf_r+0x64>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f7ff ffa7 	bl	800c7c4 <_fflush_r>
 800c876:	b938      	cbnz	r0, 800c888 <__swbuf_r+0x74>
 800c878:	4638      	mov	r0, r7
 800c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c87c:	4621      	mov	r1, r4
 800c87e:	4628      	mov	r0, r5
 800c880:	f000 f806 	bl	800c890 <__swsetup_r>
 800c884:	2800      	cmp	r0, #0
 800c886:	d0d5      	beq.n	800c834 <__swbuf_r+0x20>
 800c888:	f04f 37ff 	mov.w	r7, #4294967295
 800c88c:	e7f4      	b.n	800c878 <__swbuf_r+0x64>
	...

0800c890 <__swsetup_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4b2a      	ldr	r3, [pc, #168]	; (800c93c <__swsetup_r+0xac>)
 800c894:	4605      	mov	r5, r0
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	460c      	mov	r4, r1
 800c89a:	b118      	cbz	r0, 800c8a4 <__swsetup_r+0x14>
 800c89c:	6a03      	ldr	r3, [r0, #32]
 800c89e:	b90b      	cbnz	r3, 800c8a4 <__swsetup_r+0x14>
 800c8a0:	f7ff f9c6 	bl	800bc30 <__sinit>
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8aa:	0718      	lsls	r0, r3, #28
 800c8ac:	d422      	bmi.n	800c8f4 <__swsetup_r+0x64>
 800c8ae:	06d9      	lsls	r1, r3, #27
 800c8b0:	d407      	bmi.n	800c8c2 <__swsetup_r+0x32>
 800c8b2:	2309      	movs	r3, #9
 800c8b4:	602b      	str	r3, [r5, #0]
 800c8b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c0:	e034      	b.n	800c92c <__swsetup_r+0x9c>
 800c8c2:	0758      	lsls	r0, r3, #29
 800c8c4:	d512      	bpl.n	800c8ec <__swsetup_r+0x5c>
 800c8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c8:	b141      	cbz	r1, 800c8dc <__swsetup_r+0x4c>
 800c8ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	d002      	beq.n	800c8d8 <__swsetup_r+0x48>
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f7ff fb24 	bl	800bf20 <_free_r>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6363      	str	r3, [r4, #52]	; 0x34
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	6063      	str	r3, [r4, #4]
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	f043 0308 	orr.w	r3, r3, #8
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	6923      	ldr	r3, [r4, #16]
 800c8f6:	b94b      	cbnz	r3, 800c90c <__swsetup_r+0x7c>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c902:	d003      	beq.n	800c90c <__swsetup_r+0x7c>
 800c904:	4621      	mov	r1, r4
 800c906:	4628      	mov	r0, r5
 800c908:	f000 f850 	bl	800c9ac <__smakebuf_r>
 800c90c:	89a0      	ldrh	r0, [r4, #12]
 800c90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c912:	f010 0301 	ands.w	r3, r0, #1
 800c916:	d00a      	beq.n	800c92e <__swsetup_r+0x9e>
 800c918:	2300      	movs	r3, #0
 800c91a:	60a3      	str	r3, [r4, #8]
 800c91c:	6963      	ldr	r3, [r4, #20]
 800c91e:	425b      	negs	r3, r3
 800c920:	61a3      	str	r3, [r4, #24]
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	b943      	cbnz	r3, 800c938 <__swsetup_r+0xa8>
 800c926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c92a:	d1c4      	bne.n	800c8b6 <__swsetup_r+0x26>
 800c92c:	bd38      	pop	{r3, r4, r5, pc}
 800c92e:	0781      	lsls	r1, r0, #30
 800c930:	bf58      	it	pl
 800c932:	6963      	ldrpl	r3, [r4, #20]
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	e7f4      	b.n	800c922 <__swsetup_r+0x92>
 800c938:	2000      	movs	r0, #0
 800c93a:	e7f7      	b.n	800c92c <__swsetup_r+0x9c>
 800c93c:	200000bc 	.word	0x200000bc

0800c940 <_sbrk_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d06      	ldr	r5, [pc, #24]	; (800c95c <_sbrk_r+0x1c>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f5 fca4 	bl	8002298 <_sbrk>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_sbrk_r+0x1a>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_sbrk_r+0x1a>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20005304 	.word	0x20005304

0800c960 <__swhatbuf_r>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	460c      	mov	r4, r1
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2900      	cmp	r1, #0
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	4615      	mov	r5, r2
 800c96e:	461e      	mov	r6, r3
 800c970:	da0d      	bge.n	800c98e <__swhatbuf_r+0x2e>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c978:	f04f 0100 	mov.w	r1, #0
 800c97c:	bf0c      	ite	eq
 800c97e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c982:	2340      	movne	r3, #64	; 0x40
 800c984:	2000      	movs	r0, #0
 800c986:	6031      	str	r1, [r6, #0]
 800c988:	602b      	str	r3, [r5, #0]
 800c98a:	b016      	add	sp, #88	; 0x58
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	466a      	mov	r2, sp
 800c990:	f000 f848 	bl	800ca24 <_fstat_r>
 800c994:	2800      	cmp	r0, #0
 800c996:	dbec      	blt.n	800c972 <__swhatbuf_r+0x12>
 800c998:	9901      	ldr	r1, [sp, #4]
 800c99a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c99e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9a2:	4259      	negs	r1, r3
 800c9a4:	4159      	adcs	r1, r3
 800c9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9aa:	e7eb      	b.n	800c984 <__swhatbuf_r+0x24>

0800c9ac <__smakebuf_r>:
 800c9ac:	898b      	ldrh	r3, [r1, #12]
 800c9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b0:	079d      	lsls	r5, r3, #30
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	d507      	bpl.n	800c9c8 <__smakebuf_r+0x1c>
 800c9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	ab01      	add	r3, sp, #4
 800c9ca:	466a      	mov	r2, sp
 800c9cc:	f7ff ffc8 	bl	800c960 <__swhatbuf_r>
 800c9d0:	9900      	ldr	r1, [sp, #0]
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff fb0f 	bl	800bff8 <_malloc_r>
 800c9da:	b948      	cbnz	r0, 800c9f0 <__smakebuf_r+0x44>
 800c9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e0:	059a      	lsls	r2, r3, #22
 800c9e2:	d4ef      	bmi.n	800c9c4 <__smakebuf_r+0x18>
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	f043 0302 	orr.w	r3, r3, #2
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	e7e3      	b.n	800c9b8 <__smakebuf_r+0xc>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	6020      	str	r0, [r4, #0]
 800c9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	9b00      	ldr	r3, [sp, #0]
 800c9fc:	6163      	str	r3, [r4, #20]
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	6120      	str	r0, [r4, #16]
 800ca02:	b15b      	cbz	r3, 800ca1c <__smakebuf_r+0x70>
 800ca04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f000 f81d 	bl	800ca48 <_isatty_r>
 800ca0e:	b128      	cbz	r0, 800ca1c <__smakebuf_r+0x70>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f023 0303 	bic.w	r3, r3, #3
 800ca16:	f043 0301 	orr.w	r3, r3, #1
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	431d      	orrs	r5, r3
 800ca20:	81a5      	strh	r5, [r4, #12]
 800ca22:	e7cf      	b.n	800c9c4 <__smakebuf_r+0x18>

0800ca24 <_fstat_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_fstat_r+0x20>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	f7f5 fc08 	bl	8002246 <_fstat>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d102      	bne.n	800ca40 <_fstat_r+0x1c>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b103      	cbz	r3, 800ca40 <_fstat_r+0x1c>
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	20005304 	.word	0x20005304

0800ca48 <_isatty_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d06      	ldr	r5, [pc, #24]	; (800ca64 <_isatty_r+0x1c>)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	f7f5 fc07 	bl	8002266 <_isatty>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_isatty_r+0x1a>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_isatty_r+0x1a>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20005304 	.word	0x20005304

0800ca68 <_init>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	bf00      	nop
 800ca6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6e:	bc08      	pop	{r3}
 800ca70:	469e      	mov	lr, r3
 800ca72:	4770      	bx	lr

0800ca74 <_fini>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr
