
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001954  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d708  0800d708  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d708  0800d708  0001d708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d710  0800d710  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d714  0800d714  0001d714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005224  20000098  0800d7b0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052bc  0800d7b0  000252bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026dd9  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057d3  00000000  00000000  00046ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  0004c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179d  00000000  00000000  0004e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da94  00000000  00000000  0004fce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000285e3  00000000  00000000  0007d779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e696  00000000  00000000  000a5d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008614  00000000  00000000  001b43f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000098 	.word	0x20000098
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bd9c 	.word	0x0800bd9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000009c 	.word	0x2000009c
 800023c:	0800bd9c 	.word	0x0800bd9c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_DAC_Init+0x4c>)
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_DAC_Init+0x50>)
 80005fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_DAC_Init+0x4c>)
 8000602:	f002 f901 	bl	8002808 <HAL_DAC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800060c:	f000 fece 	bl	80013ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_DAC_Init+0x4c>)
 8000620:	f002 f978 	bl	8002914 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800062a:	f000 febf 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000b4 	.word	0x200000b4
 800063c:	40007400 	.word	0x40007400

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <HAL_DAC_MspInit+0x84>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d12b      	bne.n	80006ba <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 8000668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_DAC_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <HAL_DAC_MspInit+0x8c>)
 80006a6:	f002 fd99 	bl	80031dc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f002 f880 	bl	80027b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006b4:	2036      	movs	r0, #54	; 0x36
 80006b6:	f002 f899 	bl	80027ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40007400 	.word	0x40007400
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DMA_Init+0x38>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <MX_DMA_Init+0x38>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x38>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2105      	movs	r1, #5
 80006f2:	203b      	movs	r0, #59	; 0x3b
 80006f4:	f002 f85e 	bl	80027b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006f8:	203b      	movs	r0, #59	; 0x3b
 80006fa:	f002 f877 	bl	80027ec <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <setStripesEffect>:
	uint8_t red;
	uint8_t green;
	uint8_t blue;
};

void setStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	3b01      	subs	r3, #1
 800071c:	2b05      	cmp	r3, #5
 800071e:	d84b      	bhi.n	80007b8 <setStripesEffect+0xac>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <setStripesEffect+0x1c>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000741 	.word	0x08000741
 800072c:	08000755 	.word	0x08000755
 8000730:	08000769 	.word	0x08000769
 8000734:	0800077d 	.word	0x0800077d
 8000738:	08000791 	.word	0x08000791
 800073c:	080007a5 	.word	0x080007a5
	case 1:
		desiredStripesColor->red = 0x00;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	709a      	strb	r2, [r3, #2]
		break;
 8000752:	e031      	b.n	80007b8 <setStripesEffect+0xac>
	case 2:
		desiredStripesColor->red = 0x40;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2220      	movs	r2, #32
 800075e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	709a      	strb	r2, [r3, #2]
		break;
 8000766:	e027      	b.n	80007b8 <setStripesEffect+0xac>
	case 3:
		desiredStripesColor->red = 0x40;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2240      	movs	r2, #64	; 0x40
 800076c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2240      	movs	r2, #64	; 0x40
 8000772:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2240      	movs	r2, #64	; 0x40
 8000778:	709a      	strb	r2, [r3, #2]
		break;
 800077a:	e01d      	b.n	80007b8 <setStripesEffect+0xac>
	case 4:
		desiredStripesColor->red = 0x00;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2240      	movs	r2, #64	; 0x40
 800078c:	709a      	strb	r2, [r3, #2]
		break;
 800078e:	e013      	b.n	80007b8 <setStripesEffect+0xac>
	case 5:
		desiredStripesColor->red = 0x00;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2240      	movs	r2, #64	; 0x40
 800079a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	709a      	strb	r2, [r3, #2]
		break;
 80007a2:	e009      	b.n	80007b8 <setStripesEffect+0xac>
	case 6:
		desiredStripesColor->red = 0x40;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2240      	movs	r2, #64	; 0x40
 80007a8:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]
		break;
 80007b6:	bf00      	nop
	}
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80007c8:	4a38      	ldr	r2, [pc, #224]	; (80008ac <MX_FREERTOS_Init+0xe8>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4838      	ldr	r0, [pc, #224]	; (80008b0 <MX_FREERTOS_Init+0xec>)
 80007ce:	f007 fc51 	bl	8008074 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <MX_FREERTOS_Init+0xf0>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 80007d8:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <MX_FREERTOS_Init+0xf4>)
 80007da:	2100      	movs	r1, #0
 80007dc:	4837      	ldr	r0, [pc, #220]	; (80008bc <MX_FREERTOS_Init+0xf8>)
 80007de:	f007 fc49 	bl	8008074 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MX_FREERTOS_Init+0xfc>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 80007e8:	4a36      	ldr	r2, [pc, #216]	; (80008c4 <MX_FREERTOS_Init+0x100>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4836      	ldr	r0, [pc, #216]	; (80008c8 <MX_FREERTOS_Init+0x104>)
 80007ee:	f007 fc41 	bl	8008074 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a35      	ldr	r2, [pc, #212]	; (80008cc <MX_FREERTOS_Init+0x108>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 80007f8:	4a35      	ldr	r2, [pc, #212]	; (80008d0 <MX_FREERTOS_Init+0x10c>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4835      	ldr	r0, [pc, #212]	; (80008d4 <MX_FREERTOS_Init+0x110>)
 80007fe:	f007 fc39 	bl	8008074 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <MX_FREERTOS_Init+0x114>)
 8000806:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000808:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_FREERTOS_Init+0x118>)
 800080a:	2100      	movs	r1, #0
 800080c:	4834      	ldr	r0, [pc, #208]	; (80008e0 <MX_FREERTOS_Init+0x11c>)
 800080e:	f007 fc31 	bl	8008074 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <MX_FREERTOS_Init+0x120>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000818:	4a33      	ldr	r2, [pc, #204]	; (80008e8 <MX_FREERTOS_Init+0x124>)
 800081a:	2100      	movs	r1, #0
 800081c:	4833      	ldr	r0, [pc, #204]	; (80008ec <MX_FREERTOS_Init+0x128>)
 800081e:	f007 fc29 	bl	8008074 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_FREERTOS_Init+0x12c>)
 8000826:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000828:	4a32      	ldr	r2, [pc, #200]	; (80008f4 <MX_FREERTOS_Init+0x130>)
 800082a:	2100      	movs	r1, #0
 800082c:	4832      	ldr	r0, [pc, #200]	; (80008f8 <MX_FREERTOS_Init+0x134>)
 800082e:	f007 fc21 	bl	8008074 <osThreadNew>
 8000832:	4603      	mov	r3, r0
 8000834:	4a31      	ldr	r2, [pc, #196]	; (80008fc <MX_FREERTOS_Init+0x138>)
 8000836:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000838:	4a31      	ldr	r2, [pc, #196]	; (8000900 <MX_FREERTOS_Init+0x13c>)
 800083a:	2100      	movs	r1, #0
 800083c:	4831      	ldr	r0, [pc, #196]	; (8000904 <MX_FREERTOS_Init+0x140>)
 800083e:	f007 fc19 	bl	8008074 <osThreadNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a30      	ldr	r2, [pc, #192]	; (8000908 <MX_FREERTOS_Init+0x144>)
 8000846:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000848:	4a30      	ldr	r2, [pc, #192]	; (800090c <MX_FREERTOS_Init+0x148>)
 800084a:	2100      	movs	r1, #0
 800084c:	4830      	ldr	r0, [pc, #192]	; (8000910 <MX_FREERTOS_Init+0x14c>)
 800084e:	f007 fc11 	bl	8008074 <osThreadNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_FREERTOS_Init+0x150>)
 8000856:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <MX_FREERTOS_Init+0x154>)
 800085a:	2100      	movs	r1, #0
 800085c:	482f      	ldr	r0, [pc, #188]	; (800091c <MX_FREERTOS_Init+0x158>)
 800085e:	f007 fc09 	bl	8008074 <osThreadNew>
 8000862:	4603      	mov	r3, r0
 8000864:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <MX_FREERTOS_Init+0x15c>)
 8000866:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000868:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <MX_FREERTOS_Init+0x160>)
 800086a:	2100      	movs	r1, #0
 800086c:	482e      	ldr	r0, [pc, #184]	; (8000928 <MX_FREERTOS_Init+0x164>)
 800086e:	f007 fc01 	bl	8008074 <osThreadNew>
 8000872:	4603      	mov	r3, r0
 8000874:	4a2d      	ldr	r2, [pc, #180]	; (800092c <MX_FREERTOS_Init+0x168>)
 8000876:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000878:	4a2d      	ldr	r2, [pc, #180]	; (8000930 <MX_FREERTOS_Init+0x16c>)
 800087a:	2100      	movs	r1, #0
 800087c:	482d      	ldr	r0, [pc, #180]	; (8000934 <MX_FREERTOS_Init+0x170>)
 800087e:	f007 fbf9 	bl	8008074 <osThreadNew>
 8000882:	4603      	mov	r3, r0
 8000884:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <MX_FREERTOS_Init+0x174>)
 8000886:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000888:	4a2c      	ldr	r2, [pc, #176]	; (800093c <MX_FREERTOS_Init+0x178>)
 800088a:	2100      	movs	r1, #0
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_FREERTOS_Init+0x17c>)
 800088e:	f007 fbf1 	bl	8008074 <osThreadNew>
 8000892:	4603      	mov	r3, r0
 8000894:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <MX_FREERTOS_Init+0x180>)
 8000896:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000898:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <MX_FREERTOS_Init+0x184>)
 800089a:	2100      	movs	r1, #0
 800089c:	482b      	ldr	r0, [pc, #172]	; (800094c <MX_FREERTOS_Init+0x188>)
 800089e:	f007 fbe9 	bl	8008074 <osThreadNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <MX_FREERTOS_Init+0x18c>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	0800bff4 	.word	0x0800bff4
 80008b0:	08000955 	.word	0x08000955
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	0800c018 	.word	0x0800c018
 80008bc:	080009dd 	.word	0x080009dd
 80008c0:	200000d4 	.word	0x200000d4
 80008c4:	0800c03c 	.word	0x0800c03c
 80008c8:	08000af9 	.word	0x08000af9
 80008cc:	200000d8 	.word	0x200000d8
 80008d0:	0800c060 	.word	0x0800c060
 80008d4:	08000b09 	.word	0x08000b09
 80008d8:	200000dc 	.word	0x200000dc
 80008dc:	0800c084 	.word	0x0800c084
 80008e0:	08000b29 	.word	0x08000b29
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	0800c0a8 	.word	0x0800c0a8
 80008ec:	08000d59 	.word	0x08000d59
 80008f0:	200000e4 	.word	0x200000e4
 80008f4:	0800c0cc 	.word	0x0800c0cc
 80008f8:	08000d91 	.word	0x08000d91
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	0800c0f0 	.word	0x0800c0f0
 8000904:	08000dc9 	.word	0x08000dc9
 8000908:	200000ec 	.word	0x200000ec
 800090c:	0800c114 	.word	0x0800c114
 8000910:	08000dd9 	.word	0x08000dd9
 8000914:	200000f0 	.word	0x200000f0
 8000918:	0800c138 	.word	0x0800c138
 800091c:	08000de9 	.word	0x08000de9
 8000920:	200000f4 	.word	0x200000f4
 8000924:	0800c15c 	.word	0x0800c15c
 8000928:	08000df9 	.word	0x08000df9
 800092c:	200000f8 	.word	0x200000f8
 8000930:	0800c180 	.word	0x0800c180
 8000934:	08000e29 	.word	0x08000e29
 8000938:	200000fc 	.word	0x200000fc
 800093c:	0800c1a4 	.word	0x0800c1a4
 8000940:	08000e39 	.word	0x08000e39
 8000944:	20000100 	.word	0x20000100
 8000948:	0800c1c8 	.word	0x0800c1c8
 800094c:	08000e49 	.word	0x08000e49
 8000950:	20000104 	.word	0x20000104

08000954 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 800095c:	481a      	ldr	r0, [pc, #104]	; (80009c8 <StartOLEDTask+0x74>)
 800095e:	f7ff fc6f 	bl	8000240 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <StartOLEDTask+0x74>)
 8000968:	4413      	add	r3, r2
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <StartOLEDTask+0x78>)
 800096c:	6810      	ldr	r0, [r2, #0]
 800096e:	6018      	str	r0, [r3, #0]

	// Initiate display
	ssd1306_Init();
 8000970:	f000 fe2e 	bl	80015d0 <ssd1306_Init>
	uint8_t y = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fe93 	bl	80016a4 <ssd1306_Fill>

  /* Infinite loop */
  for(;;)
  {
	  // Set header
	  ssd1306_SetCursor(2, y);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4619      	mov	r1, r3
 8000982:	2002      	movs	r0, #2
 8000984:	f000 ffd0 	bl	8001928 <ssd1306_SetCursor>
	  ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <StartOLEDTask+0x7c>)
 800098a:	2301      	movs	r3, #1
 800098c:	ca06      	ldmia	r2, {r1, r2}
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <StartOLEDTask+0x80>)
 8000990:	f000 ffa4 	bl	80018dc <ssd1306_WriteString>
	  y += 30;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	331e      	adds	r3, #30
 8000998:	73fb      	strb	r3, [r7, #15]

	  // Set body
	  ssd1306_SetCursor(2, y);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4619      	mov	r1, r3
 800099e:	2002      	movs	r0, #2
 80009a0:	f000 ffc2 	bl	8001928 <ssd1306_SetCursor>
	  ssd1306_WriteString(bodyVersion, Font_11x18, White);
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <StartOLEDTask+0x84>)
 80009a6:	2301      	movs	r3, #1
 80009a8:	ca06      	ldmia	r2, {r1, r2}
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <StartOLEDTask+0x74>)
 80009ac:	f000 ff96 	bl	80018dc <ssd1306_WriteString>
	  y += 36;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3324      	adds	r3, #36	; 0x24
 80009b4:	73fb      	strb	r3, [r7, #15]

	  ssd1306_UpdateScreen();
 80009b6:	f000 fe8d 	bl	80016d4 <ssd1306_UpdateScreen>
	  y = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 80009be:	2000      	movs	r0, #0
 80009c0:	f008 fc14 	bl	80091ec <vTaskSuspend>
	  ssd1306_SetCursor(2, y);
 80009c4:	e7db      	b.n	800097e <StartOLEDTask+0x2a>
 80009c6:	bf00      	nop
 80009c8:	20000010 	.word	0x20000010
 80009cc:	0800bff0 	.word	0x0800bff0
 80009d0:	2000001c 	.word	0x2000001c
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000024 	.word	0x20000024

080009dc <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f008 fc01 	bl	80091ec <vTaskSuspend>

	  switch(RxBuffer[0]) {
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <StartDispatcherTask+0xe8>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	2b0d      	cmp	r3, #13
 80009f2:	d861      	bhi.n	8000ab8 <StartDispatcherTask+0xdc>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <StartDispatcherTask+0x20>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a35 	.word	0x08000a35
 8000a00:	08000a41 	.word	0x08000a41
 8000a04:	08000a4d 	.word	0x08000a4d
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a65 	.word	0x08000a65
 8000a10:	08000a71 	.word	0x08000a71
 8000a14:	08000a7d 	.word	0x08000a7d
 8000a18:	08000ab9 	.word	0x08000ab9
 8000a1c:	08000ab9 	.word	0x08000ab9
 8000a20:	08000ab9 	.word	0x08000ab9
 8000a24:	08000a89 	.word	0x08000a89
 8000a28:	08000a95 	.word	0x08000a95
 8000a2c:	08000aa1 	.word	0x08000aa1
 8000a30:	08000aad 	.word	0x08000aad
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <StartDispatcherTask+0xec>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 fc83 	bl	8009344 <vTaskResume>
			break;
 8000a3e:	e040      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <StartDispatcherTask+0xf0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fc7d 	bl	8009344 <vTaskResume>
			break;
 8000a4a:	e03a      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <StartDispatcherTask+0xf4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fc77 	bl	8009344 <vTaskResume>
			break;
 8000a56:	e034      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <StartDispatcherTask+0xf8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f008 fc71 	bl	8009344 <vTaskResume>
			break;
 8000a62:	e02e      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <StartDispatcherTask+0xfc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f008 fc6b 	bl	8009344 <vTaskResume>
			break;
 8000a6e:	e028      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <StartDispatcherTask+0x100>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 fc65 	bl	8009344 <vTaskResume>
			break;
 8000a7a:	e022      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <StartDispatcherTask+0x104>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 fc5f 	bl	8009344 <vTaskResume>
			break;
 8000a86:	e01c      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <StartDispatcherTask+0x108>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f008 fc59 	bl	8009344 <vTaskResume>
			break;
 8000a92:	e016      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <StartDispatcherTask+0x10c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 fc53 	bl	8009344 <vTaskResume>
			break;
 8000a9e:	e010      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <StartDispatcherTask+0x110>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f008 fc4d 	bl	8009344 <vTaskResume>
			break;
 8000aaa:	e00a      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <StartDispatcherTask+0x114>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fc47 	bl	8009344 <vTaskResume>
			break;
 8000ab6:	e004      	b.n	8000ac2 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <StartDispatcherTask+0x118>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 fc41 	bl	8009344 <vTaskResume>
	  vTaskSuspend(NULL);
 8000ac2:	e78f      	b.n	80009e4 <StartDispatcherTask+0x8>
 8000ac4:	200000c8 	.word	0x200000c8
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	200000dc 	.word	0x200000dc
 8000ad0:	200000e0 	.word	0x200000e0
 8000ad4:	200000e4 	.word	0x200000e4
 8000ad8:	200000e8 	.word	0x200000e8
 8000adc:	200000ec 	.word	0x200000ec
 8000ae0:	200000f0 	.word	0x200000f0
 8000ae4:	200000f4 	.word	0x200000f4
 8000ae8:	200000f8 	.word	0x200000f8
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	20000100 	.word	0x20000100
 8000af4:	20000104 	.word	0x20000104

08000af8 <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f008 fb73 	bl	80091ec <vTaskSuspend>
 8000b06:	e7fb      	b.n	8000b00 <StartStopTask+0x8>

08000b08 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f008 fb6b 	bl	80091ec <vTaskSuspend>
	  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <StartDrivingLightsTask+0x1c>)
 8000b1c:	f002 fd23 	bl	8003566 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000b20:	e7f6      	b.n	8000b10 <StartDrivingLightsTask+0x8>
 8000b22:	bf00      	nop
 8000b24:	40020800 	.word	0x40020800

08000b28 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8000b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b2c:	b098      	sub	sp, #96	; 0x60
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	bool isOn = false;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// Set StripesEffect enum
	stripesEffect = NONE;
 8000b38:	4b83      	ldr	r3, [pc, #524]	; (8000d48 <StartLEDStripesTask+0x220>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 8000b42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	2204      	movs	r2, #4
 8000b4a:	4880      	ldr	r0, [pc, #512]	; (8000d4c <StartLEDStripesTask+0x224>)
 8000b4c:	f004 fbd1 	bl	80052f2 <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 8000b50:	2301      	movs	r3, #1
 8000b52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8000b56:	233f      	movs	r3, #63	; 0x3f
 8000b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8000b68:	2301      	movs	r3, #1
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setStripesEffect(stripesEffect, &desiredStripesColor);
 8000b76:	4b74      	ldr	r3, [pc, #464]	; (8000d48 <StartLEDStripesTask+0x220>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	f107 020c 	add.w	r2, r7, #12
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fdc3 	bl	800070c <setStripesEffect>
	for(int i=0; i<LED_COUNT; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b8a:	e020      	b.n	8000bce <StartLEDStripesTask+0xa6>
	  leds[i].red = desiredStripesColor.red;
 8000b8c:	7b39      	ldrb	r1, [r7, #12]
 8000b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	3360      	adds	r3, #96	; 0x60
 8000b98:	443b      	add	r3, r7
 8000b9a:	3b50      	subs	r3, #80	; 0x50
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 8000ba0:	7b79      	ldrb	r1, [r7, #13]
 8000ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	3360      	adds	r3, #96	; 0x60
 8000bac:	443b      	add	r3, r7
 8000bae:	3b4f      	subs	r3, #79	; 0x4f
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 8000bb4:	7bb9      	ldrb	r1, [r7, #14]
 8000bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3360      	adds	r3, #96	; 0x60
 8000bc0:	443b      	add	r3, r7
 8000bc2:	3b4e      	subs	r3, #78	; 0x4e
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_COUNT; i++) {
 8000bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bca:	3301      	adds	r3, #1
 8000bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	dddb      	ble.n	8000b8c <StartLEDStripesTask+0x64>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	hws2812b.leds = leds;
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Initialize the driver
	if(ws2812b_init(&hws2812b)){
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f9ca 	bl	8001f7c <ws2812b_init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <StartLEDStripesTask+0xd4>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 8000bee:	4b58      	ldr	r3, [pc, #352]	; (8000d50 <StartLEDStripesTask+0x228>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4857      	ldr	r0, [pc, #348]	; (8000d54 <StartLEDStripesTask+0x22c>)
 8000bf6:	f00a f9f9 	bl	800afec <iprintf>
	  while(1) {;}
 8000bfa:	e7fe      	b.n	8000bfa <StartLEDStripesTask+0xd2>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8000bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fb57 	bl	80022b4 <ws2812b_required_buffer_len>
 8000c06:	4601      	mov	r1, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4688      	mov	r8, r1
 8000c12:	4699      	mov	r9, r3
 8000c14:	f04f 0200 	mov.w	r2, #0
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	00eb      	lsls	r3, r5, #3
 8000c38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c3c:	00e2      	lsls	r2, r4, #3
 8000c3e:	1dcb      	adds	r3, r1, #7
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	ebad 0d03 	sub.w	sp, sp, r3
 8000c48:	466b      	mov	r3, sp
 8000c4a:	3300      	adds	r3, #0
 8000c4c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f008 facc 	bl	80091ec <vTaskSuspend>

	  // Toggle effect
	  if (isOn == false) {
 8000c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d015      	beq.n	8000c8e <StartLEDStripesTask+0x166>
		  isOn = !isOn;
 8000c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  stripesEffect = DEFAULT;
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <StartLEDStripesTask+0x220>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e014      	b.n	8000cb8 <StartLEDStripesTask+0x190>
	  } else {
		  isOn = !isOn;
 8000c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  stripesEffect = NONE;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <StartLEDStripesTask+0x220>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
	  }

	  // Update LED color
	  setStripesEffect(stripesEffect, &desiredStripesColor);
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <StartLEDStripesTask+0x220>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f107 020c 	add.w	r2, r7, #12
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd22 	bl	800070c <setStripesEffect>
	  for(int i=0; i<LED_COUNT; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
 8000ccc:	e020      	b.n	8000d10 <StartLEDStripesTask+0x1e8>
		  leds[i].red = desiredStripesColor.red;
 8000cce:	7b39      	ldrb	r1, [r7, #12]
 8000cd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3360      	adds	r3, #96	; 0x60
 8000cda:	443b      	add	r3, r7
 8000cdc:	3b50      	subs	r3, #80	; 0x50
 8000cde:	460a      	mov	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
		  leds[i].green = desiredStripesColor.green;
 8000ce2:	7b79      	ldrb	r1, [r7, #13]
 8000ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	3360      	adds	r3, #96	; 0x60
 8000cee:	443b      	add	r3, r7
 8000cf0:	3b4f      	subs	r3, #79	; 0x4f
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		  leds[i].blue = desiredStripesColor.blue;
 8000cf6:	7bb9      	ldrb	r1, [r7, #14]
 8000cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	3360      	adds	r3, #96	; 0x60
 8000d02:	443b      	add	r3, r7
 8000d04:	3b4e      	subs	r3, #78	; 0x4e
 8000d06:	460a      	mov	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<LED_COUNT; i++) {
 8000d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8000d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	dddb      	ble.n	8000cce <StartLEDStripesTask+0x1a6>
	  }

	  // Add LEDs to handle
	  hws2812b.leds = leds;
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c

	  // Fill buffer
	  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8000d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fae1 	bl	80022ea <ws2812b_fill_buffer>

	  // Transmit
	  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fac1 	bl	80022b4 <ws2812b_required_buffer_len>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <StartLEDStripesTask+0x224>)
 8000d3c:	f004 fc48 	bl	80055d0 <HAL_SPI_Transmit_DMA>
	  HAL_Delay(10); // 10ms delay
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fc5b 	bl	80025fc <HAL_Delay>
	  vTaskSuspend(NULL);
 8000d46:	e782      	b.n	8000c4e <StartLEDStripesTask+0x126>
 8000d48:	20000019 	.word	0x20000019
 8000d4c:	2000015c 	.word	0x2000015c
 8000d50:	2000074c 	.word	0x2000074c
 8000d54:	0800be8c 	.word	0x0800be8c

08000d58 <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f008 fa43 	bl	80091ec <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e00b      	b.n	8000d84 <StartLeftBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <StartLeftBlinkersTask+0x34>)
 8000d72:	f002 fbf8 	bl	8003566 <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000d76:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d7a:	f007 fa21 	bl	80081c0 <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	ddf0      	ble.n	8000d6c <StartLeftBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000d8a:	e7e9      	b.n	8000d60 <StartLeftBlinkersTask+0x8>
 8000d8c:	40020800 	.word	0x40020800

08000d90 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f008 fa27 	bl	80091ec <vTaskSuspend>
	  for(int i = 0; i < 6; i ++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e00b      	b.n	8000dbc <StartRightBlinkersTask+0x2c>
	  {
		  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <StartRightBlinkersTask+0x34>)
 8000daa:	f002 fbdc 	bl	8003566 <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000dae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000db2:	f007 fa05 	bl	80081c0 <osDelay>
	  for(int i = 0; i < 6; i ++)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	ddf0      	ble.n	8000da4 <StartRightBlinkersTask+0x14>
	  vTaskSuspend(NULL);
 8000dc2:	e7e9      	b.n	8000d98 <StartRightBlinkersTask+0x8>
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f008 fa0b 	bl	80091ec <vTaskSuspend>
 8000dd6:	e7fb      	b.n	8000dd0 <StartParkLeftTask+0x8>

08000dd8 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f008 fa03 	bl	80091ec <vTaskSuspend>
 8000de6:	e7fb      	b.n	8000de0 <StartParkRightTask+0x8>

08000de8 <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f008 f9fb 	bl	80091ec <vTaskSuspend>
 8000df6:	e7fb      	b.n	8000df0 <StartAccelerateTask+0x8>

08000df8 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f008 f9f3 	bl	80091ec <vTaskSuspend>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <StartDecelerateTask+0x2c>)
 8000e0c:	f002 fbab 	bl	8003566 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e14:	f007 f9d4 	bl	80081c0 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 8000e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <StartDecelerateTask+0x2c>)
 8000e1e:	f002 fba2 	bl	8003566 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000e22:	e7ed      	b.n	8000e00 <StartDecelerateTask+0x8>
 8000e24:	40020800 	.word	0x40020800

08000e28 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f008 f9db 	bl	80091ec <vTaskSuspend>
 8000e36:	e7fb      	b.n	8000e30 <StartTurnLeftTask+0x8>

08000e38 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f008 f9d3 	bl	80091ec <vTaskSuspend>
 8000e46:	e7fb      	b.n	8000e40 <StartTurnRightTask+0x8>

08000e48 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f008 f9cb 	bl	80091ec <vTaskSuspend>
 8000e56:	e7fb      	b.n	8000e50 <StartConnectionTask+0x8>

08000e58 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b94      	ldr	r3, [pc, #592]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a93      	ldr	r2, [pc, #588]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b91      	ldr	r3, [pc, #580]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	4b8e      	ldr	r3, [pc, #568]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a8d      	ldr	r2, [pc, #564]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b8b      	ldr	r3, [pc, #556]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b88      	ldr	r3, [pc, #544]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a87      	ldr	r2, [pc, #540]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b85      	ldr	r3, [pc, #532]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a81      	ldr	r2, [pc, #516]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b7f      	ldr	r3, [pc, #508]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b7c      	ldr	r3, [pc, #496]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a7b      	ldr	r2, [pc, #492]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b79      	ldr	r3, [pc, #484]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee6:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a75      	ldr	r2, [pc, #468]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <MX_GPIO_Init+0x268>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f244 0191 	movw	r1, #16529	; 0x4091
 8000f04:	486f      	ldr	r0, [pc, #444]	; (80010c4 <MX_GPIO_Init+0x26c>)
 8000f06:	f002 fb15 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f10:	486d      	ldr	r0, [pc, #436]	; (80010c8 <MX_GPIO_Init+0x270>)
 8000f12:	f002 fb0f 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2140      	movs	r1, #64	; 0x40
 8000f1a:	486c      	ldr	r0, [pc, #432]	; (80010cc <MX_GPIO_Init+0x274>)
 8000f1c:	f002 fb0a 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000f26:	486a      	ldr	r0, [pc, #424]	; (80010d0 <MX_GPIO_Init+0x278>)
 8000f28:	f002 fb04 	bl	8003534 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4863      	ldr	r0, [pc, #396]	; (80010d0 <MX_GPIO_Init+0x278>)
 8000f44:	f002 f94a 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f48:	2332      	movs	r3, #50	; 0x32
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	485b      	ldr	r0, [pc, #364]	; (80010d0 <MX_GPIO_Init+0x278>)
 8000f64:	f002 f93a 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f68:	2386      	movs	r3, #134	; 0x86
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4854      	ldr	r0, [pc, #336]	; (80010d4 <MX_GPIO_Init+0x27c>)
 8000f84:	f002 f92a 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8000f88:	f244 0391 	movw	r3, #16529	; 0x4091
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4848      	ldr	r0, [pc, #288]	; (80010c4 <MX_GPIO_Init+0x26c>)
 8000fa2:	f002 f91b 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb8:	230b      	movs	r3, #11
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4840      	ldr	r0, [pc, #256]	; (80010c4 <MX_GPIO_Init+0x26c>)
 8000fc4:	f002 f90a 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4838      	ldr	r0, [pc, #224]	; (80010c8 <MX_GPIO_Init+0x270>)
 8000fe6:	f002 f8f9 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8000fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4831      	ldr	r0, [pc, #196]	; (80010c8 <MX_GPIO_Init+0x270>)
 8001004:	f002 f8ea 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	482b      	ldr	r0, [pc, #172]	; (80010cc <MX_GPIO_Init+0x274>)
 8001020:	f002 f8dc 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <MX_GPIO_Init+0x274>)
 8001038:	f002 f8d0 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 800103c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001040:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <MX_GPIO_Init+0x278>)
 8001056:	f002 f8c1 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800105a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800106c:	230a      	movs	r3, #10
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_GPIO_Init+0x27c>)
 8001078:	f002 f8b0 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800107c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <MX_GPIO_Init+0x27c>)
 8001092:	f002 f8a3 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001096:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a8:	230b      	movs	r3, #11
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_GPIO_Init+0x274>)
 80010b4:	f002 f892 	bl	80031dc <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020000 	.word	0x40020000

080010d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C1_Init+0x74>)
 8001114:	f002 fa42 	bl	800359c <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 f945 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C1_Init+0x74>)
 8001126:	f002 fe23 	bl	8003d70 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 f93c 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C1_Init+0x74>)
 8001138:	f002 fe65 	bl	8003e06 <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 f933 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000108 	.word	0x20000108
 8001150:	40005400 	.word	0x40005400
 8001154:	20404768 	.word	0x20404768

08001158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ae      	sub	sp, #184	; 0xb8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2290      	movs	r2, #144	; 0x90
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f009 ff8c 	bl	800b096 <memset>
  if(i2cHandle->Instance==I2C1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_I2C_MspInit+0xb4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13c      	bne.n	8001202 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800118e:	2300      	movs	r3, #0
 8001190:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fbd8 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011a2:	f000 f903 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d8:	2304      	movs	r3, #4
 80011da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_I2C_MspInit+0xbc>)
 80011e6:	f001 fff9 	bl	80031dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	37b8      	adds	r7, #184	; 0xb8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020400 	.word	0x40020400

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121c:	f001 f9c1 	bl	80025a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001220:	f000 f81e 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001224:	f7ff fe18 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001228:	f7ff fa52 	bl	80006d0 <MX_DMA_Init>
  MX_SPI1_Init();
 800122c:	f000 f8c4 	bl	80013b8 <MX_SPI1_Init>
  MX_DAC_Init();
 8001230:	f7ff f9dc 	bl	80005ec <MX_DAC_Init>
  MX_I2C1_Init();
 8001234:	f7ff ff50 	bl	80010d8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001238:	f000 fd56 	bl	8001ce8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 800123c:	f000 fe06 	bl	8001e4c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <main+0x40>)
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <main+0x44>)
 8001246:	f005 fc63 	bl	8006b10 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800124a:	f006 fea9 	bl	8007fa0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800124e:	f7ff fab9 	bl	80007c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001252:	f006 fed9 	bl	8008008 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001256:	e7fe      	b.n	8001256 <main+0x3e>
 8001258:	200000c8 	.word	0x200000c8
 800125c:	200006c4 	.word	0x200006c4

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	; 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2234      	movs	r2, #52	; 0x34
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f009 ff11 	bl	800b096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <SystemClock_Config+0xd4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a2a      	ldr	r2, [pc, #168]	; (8001334 <SystemClock_Config+0xd4>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <SystemClock_Config+0xd4>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <SystemClock_Config+0xd8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a25      	ldr	r2, [pc, #148]	; (8001338 <SystemClock_Config+0xd8>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <SystemClock_Config+0xd8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012cc:	23d8      	movs	r3, #216	; 0xd8
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fe2d 	bl	8003f40 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012ec:	f000 f85e 	bl	80013ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f0:	f002 fdd6 	bl	8003ea0 <HAL_PWREx_EnableOverDrive>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012fa:	f000 f857 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2302      	movs	r3, #2
 8001304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2107      	movs	r1, #7
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f8bd 	bl	800449c <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001328:	f000 f840 	bl	80013ac <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	; 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_UART_RxCpltCallback+0x3c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f008 f85b 	bl	8009404 <xTaskResumeFromISR>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_UART_RxCpltCallback+0x28>
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_UART_RxCpltCallback+0x40>)
 8001356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f3bf 8f4f 	dsb	sy
 8001360:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001364:	2201      	movs	r2, #1
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <HAL_UART_RxCpltCallback+0x44>)
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_UART_RxCpltCallback+0x48>)
 800136a:	f005 fbd1 	bl	8006b10 <HAL_UART_Receive_IT>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000d4 	.word	0x200000d4
 800137c:	e000ed04 	.word	0xe000ed04
 8001380:	200000c8 	.word	0x200000c8
 8001384:	200006c4 	.word	0x200006c4

08001388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800139a:	f001 f90f 	bl	80025bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40001000 	.word	0x40001000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_SPI1_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_SPI1_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_SPI1_Init+0x74>)
 80013c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_SPI1_Init+0x74>)
 80013cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_SPI1_Init+0x74>)
 80013d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x74>)
 80013e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI1_Init+0x74>)
 80013f0:	2218      	movs	r2, #24
 80013f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_SPI1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_SPI1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0x74>)
 8001408:	2207      	movs	r2, #7
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_SPI1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0x74>)
 8001414:	2208      	movs	r2, #8
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_SPI1_Init+0x74>)
 800141a:	f003 febf 	bl	800519c <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001424:	f7ff ffc2 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000015c 	.word	0x2000015c
 8001430:	40013000 	.word	0x40013000

08001434 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_SPI_MspInit+0x110>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d171      	bne.n	800153a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_SPI_MspInit+0x114>)
 800145c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_SPI_MspInit+0x114>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_SPI_MspInit+0x114>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_SPI_MspInit+0x114>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800149e:	2320      	movs	r3, #32
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4824      	ldr	r0, [pc, #144]	; (800154c <HAL_SPI_MspInit+0x118>)
 80014ba:	f001 fe8f 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ce:	2305      	movs	r3, #5
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	481d      	ldr	r0, [pc, #116]	; (8001550 <HAL_SPI_MspInit+0x11c>)
 80014da:	f001 fe7f 	bl	80031dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_SPI_MspInit+0x120>)
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_SPI_MspInit+0x124>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_SPI_MspInit+0x120>)
 80014e6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_SPI_MspInit+0x120>)
 80014ee:	2240      	movs	r2, #64	; 0x40
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_SPI_MspInit+0x120>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_SPI_MspInit+0x120>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_SPI_MspInit+0x120>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_SPI_MspInit+0x120>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001520:	f001 fa52 	bl	80029c8 <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800152a:	f7ff ff3f 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_SPI_MspInit+0x120>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013000 	.word	0x40013000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020c00 	.word	0x40020c00
 8001554:	200001c0 	.word	0x200001c0
 8001558:	40026458 	.word	0x40026458

0800155c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af04      	add	r7, sp, #16
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	2200      	movs	r2, #0
 8001588:	2178      	movs	r1, #120	; 0x78
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <ssd1306_WriteCommand+0x2c>)
 800158c:	f002 f896 	bl	80036bc <HAL_I2C_Mem_Write>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000108 	.word	0x20000108

0800159c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	9202      	str	r2, [sp, #8]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	2240      	movs	r2, #64	; 0x40
 80015ba:	2178      	movs	r1, #120	; 0x78
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <ssd1306_WriteData+0x30>)
 80015be:	f002 f87d 	bl	80036bc <HAL_I2C_Mem_Write>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000108 	.word	0x20000108

080015d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015d4:	f7ff ffc2 	bl	800155c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015d8:	2064      	movs	r0, #100	; 0x64
 80015da:	f001 f80f 	bl	80025fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f9ce 	bl	8001980 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015e4:	2020      	movs	r0, #32
 80015e6:	f7ff ffc1 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ffbe 	bl	800156c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015f0:	20b0      	movs	r0, #176	; 0xb0
 80015f2:	f7ff ffbb 	bl	800156c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015f6:	20c8      	movs	r0, #200	; 0xc8
 80015f8:	f7ff ffb8 	bl	800156c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ffb5 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001602:	2010      	movs	r0, #16
 8001604:	f7ff ffb2 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001608:	2040      	movs	r0, #64	; 0x40
 800160a:	f7ff ffaf 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800160e:	20ff      	movs	r0, #255	; 0xff
 8001610:	f000 f9a2 	bl	8001958 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001614:	20a1      	movs	r0, #161	; 0xa1
 8001616:	f7ff ffa9 	bl	800156c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800161a:	20a6      	movs	r0, #166	; 0xa6
 800161c:	f7ff ffa6 	bl	800156c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001620:	20a8      	movs	r0, #168	; 0xa8
 8001622:	f7ff ffa3 	bl	800156c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001626:	203f      	movs	r0, #63	; 0x3f
 8001628:	f7ff ffa0 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800162c:	20a4      	movs	r0, #164	; 0xa4
 800162e:	f7ff ff9d 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001632:	20d3      	movs	r0, #211	; 0xd3
 8001634:	f7ff ff9a 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff ff97 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800163e:	20d5      	movs	r0, #213	; 0xd5
 8001640:	f7ff ff94 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001644:	20f0      	movs	r0, #240	; 0xf0
 8001646:	f7ff ff91 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800164a:	20d9      	movs	r0, #217	; 0xd9
 800164c:	f7ff ff8e 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001650:	2022      	movs	r0, #34	; 0x22
 8001652:	f7ff ff8b 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001656:	20da      	movs	r0, #218	; 0xda
 8001658:	f7ff ff88 	bl	800156c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800165c:	2012      	movs	r0, #18
 800165e:	f7ff ff85 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001662:	20db      	movs	r0, #219	; 0xdb
 8001664:	f7ff ff82 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001668:	2020      	movs	r0, #32
 800166a:	f7ff ff7f 	bl	800156c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800166e:	208d      	movs	r0, #141	; 0x8d
 8001670:	f7ff ff7c 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001674:	2014      	movs	r0, #20
 8001676:	f7ff ff79 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800167a:	2001      	movs	r0, #1
 800167c:	f000 f980 	bl	8001980 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001680:	2000      	movs	r0, #0
 8001682:	f000 f80f 	bl	80016a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001686:	f000 f825 	bl	80016d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <ssd1306_Init+0xd0>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <ssd1306_Init+0xd0>)
 8001692:	2200      	movs	r2, #0
 8001694:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001696:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <ssd1306_Init+0xd0>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000620 	.word	0x20000620

080016a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <ssd1306_Fill+0x14>
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <ssd1306_Fill+0x16>
 80016b8:	23ff      	movs	r3, #255	; 0xff
 80016ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016be:	4619      	mov	r1, r3
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <ssd1306_Fill+0x2c>)
 80016c2:	f009 fce8 	bl	800b096 <memset>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000220 	.word	0x20000220

080016d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e016      	b.n	800170e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3b50      	subs	r3, #80	; 0x50
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff40 	bl	800156c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff3d 	bl	800156c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016f2:	2010      	movs	r0, #16
 80016f4:	f7ff ff3a 	bl	800156c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4a08      	ldr	r2, [pc, #32]	; (8001720 <ssd1306_UpdateScreen+0x4c>)
 80016fe:	4413      	add	r3, r2
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff4a 	bl	800159c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	3301      	adds	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d9e5      	bls.n	80016e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000220 	.word	0x20000220

08001724 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	460b      	mov	r3, r1
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	4613      	mov	r3, r2
 8001734:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db3d      	blt.n	80017ba <ssd1306_DrawPixel+0x96>
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b3f      	cmp	r3, #63	; 0x3f
 8001742:	d83a      	bhi.n	80017ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d11a      	bne.n	8001780 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	b2d8      	uxtb	r0, r3
 8001752:	4603      	mov	r3, r0
 8001754:	01db      	lsls	r3, r3, #7
 8001756:	4413      	add	r3, r2
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <ssd1306_DrawPixel+0xa4>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	b25a      	sxtb	r2, r3
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b259      	sxtb	r1, r3
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4603      	mov	r3, r0
 8001774:	01db      	lsls	r3, r3, #7
 8001776:	4413      	add	r3, r2
 8001778:	b2c9      	uxtb	r1, r1
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <ssd1306_DrawPixel+0xa4>)
 800177c:	54d1      	strb	r1, [r2, r3]
 800177e:	e01d      	b.n	80017bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	b2d8      	uxtb	r0, r3
 8001788:	4603      	mov	r3, r0
 800178a:	01db      	lsls	r3, r3, #7
 800178c:	4413      	add	r3, r2
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <ssd1306_DrawPixel+0xa4>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	b25a      	sxtb	r2, r3
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b259      	sxtb	r1, r3
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	4603      	mov	r3, r0
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	4413      	add	r3, r2
 80017b2:	b2c9      	uxtb	r1, r1
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <ssd1306_DrawPixel+0xa4>)
 80017b6:	54d1      	strb	r1, [r2, r3]
 80017b8:	e000      	b.n	80017bc <ssd1306_DrawPixel+0x98>
        return;
 80017ba:	bf00      	nop
    }
}
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000220 	.word	0x20000220

080017cc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	1d38      	adds	r0, r7, #4
 80017d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80017da:	461a      	mov	r2, r3
 80017dc:	4623      	mov	r3, r4
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	4613      	mov	r3, r2
 80017e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b1f      	cmp	r3, #31
 80017e8:	d902      	bls.n	80017f0 <ssd1306_WriteChar+0x24>
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b7e      	cmp	r3, #126	; 0x7e
 80017ee:	d901      	bls.n	80017f4 <ssd1306_WriteChar+0x28>
        return 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e06d      	b.n	80018d0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	793b      	ldrb	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2b80      	cmp	r3, #128	; 0x80
 8001800:	dc06      	bgt.n	8001810 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 8001804:	885b      	ldrh	r3, [r3, #2]
 8001806:	461a      	mov	r2, r3
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800180c:	2b40      	cmp	r3, #64	; 0x40
 800180e:	dd01      	ble.n	8001814 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001810:	2300      	movs	r3, #0
 8001812:	e05d      	b.n	80018d0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	e04c      	b.n	80018b4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	3b20      	subs	r3, #32
 8001820:	7979      	ldrb	r1, [r7, #5]
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4619      	mov	r1, r3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	440b      	add	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e034      	b.n	80018a4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d012      	beq.n	8001870 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b2db      	uxtb	r3, r3
 8001866:	7bba      	ldrb	r2, [r7, #14]
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff ff5b 	bl	8001724 <ssd1306_DrawPixel>
 800186e:	e016      	b.n	800189e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b2d8      	uxtb	r0, r3
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 8001880:	885b      	ldrh	r3, [r3, #2]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf0c      	ite	eq
 8001892:	2301      	moveq	r3, #1
 8001894:	2300      	movne	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	f7ff ff43 	bl	8001724 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	793b      	ldrb	r3, [r7, #4]
 80018a6:	461a      	mov	r2, r3
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d3c5      	bcc.n	800183a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	797b      	ldrb	r3, [r7, #5]
 80018b6:	461a      	mov	r2, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d3ad      	bcc.n	800181a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	793b      	ldrb	r3, [r7, #4]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <ssd1306_WriteChar+0x10c>)
 80018cc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3724      	adds	r7, #36	; 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	20000620 	.word	0x20000620

080018dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	1d38      	adds	r0, r7, #4
 80018e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80018ec:	e012      	b.n	8001914 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	7818      	ldrb	r0, [r3, #0]
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	1d3a      	adds	r2, r7, #4
 80018f6:	ca06      	ldmia	r2, {r1, r2}
 80018f8:	f7ff ff68 	bl	80017cc <ssd1306_WriteChar>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d002      	beq.n	800190e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	e008      	b.n	8001920 <ssd1306_WriteString+0x44>
        }
        str++;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e8      	bne.n	80018ee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	781b      	ldrb	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <ssd1306_SetCursor+0x2c>)
 800193e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <ssd1306_SetCursor+0x2c>)
 8001946:	805a      	strh	r2, [r3, #2]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20000620 	.word	0x20000620

08001958 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001962:	2381      	movs	r3, #129	; 0x81
 8001964:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fdff 	bl	800156c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fdfb 	bl	800156c <ssd1306_WriteCommand>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001990:	23af      	movs	r3, #175	; 0xaf
 8001992:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <ssd1306_SetDisplayOn+0x38>)
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]
 800199a:	e004      	b.n	80019a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800199c:	23ae      	movs	r3, #174	; 0xae
 800199e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <ssd1306_SetDisplayOn+0x38>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fddf 	bl	800156c <ssd1306_WriteCommand>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000620 	.word	0x20000620

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	210f      	movs	r1, #15
 80019f6:	f06f 0001 	mvn.w	r0, #1
 80019fa:	f000 fedb 	bl	80027b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_InitTick+0xe0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a32      	ldr	r2, [pc, #200]	; (8001aec <HAL_InitTick+0xe0>)
 8001a22:	f043 0310 	orr.w	r3, r3, #16
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b30      	ldr	r3, [pc, #192]	; (8001aec <HAL_InitTick+0xe0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a34:	f107 0210 	add.w	r2, r7, #16
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ff52 	bl	80048e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a4e:	f002 ff23 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8001a52:	6378      	str	r0, [r7, #52]	; 0x34
 8001a54:	e004      	b.n	8001a60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a56:	f002 ff1f 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <HAL_InitTick+0xe4>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <HAL_InitTick+0xec>)
 8001a72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a94:	4817      	ldr	r0, [pc, #92]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a96:	f004 f8b7 	bl	8005c08 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <HAL_InitTick+0xe8>)
 8001aaa:	f004 f90f 	bl	8005ccc <HAL_TIM_Base_Start_IT>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001abc:	2036      	movs	r0, #54	; 0x36
 8001abe:	f000 fe95 	bl	80027ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d808      	bhi.n	8001ada <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	2036      	movs	r0, #54	; 0x36
 8001ace:	f000 fe71 	bl	80027b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_InitTick+0xf0>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e002      	b.n	8001ae0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3738      	adds	r7, #56	; 0x38
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	20000628 	.word	0x20000628
 8001af8:	40001000 	.word	0x40001000
 8001afc:	20000030 	.word	0x20000030

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <TIM6_DAC_IRQHandler+0x20>)
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <TIM6_DAC_IRQHandler+0x20>)
 8001b3c:	f000 fe86 	bl	800284c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001b40:	4803      	ldr	r0, [pc, #12]	; (8001b50 <TIM6_DAC_IRQHandler+0x24>)
 8001b42:	f004 f992 	bl	8005e6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000b4 	.word	0x200000b4
 8001b50:	20000628 	.word	0x20000628

08001b54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA2_Stream3_IRQHandler+0x10>)
 8001b5a:	f001 f8d5 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200001c0 	.word	0x200001c0

08001b68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART6_IRQHandler+0x10>)
 8001b6e:	f005 f813 	bl	8006b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200006c4 	.word	0x200006c4

08001b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
  }

  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
  }
  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f009 faaa 	bl	800b1e0 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20080000 	.word	0x20080000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000674 	.word	0x20000674
 8001cc0:	200052c0 	.word	0x200052c0

08001cc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <MX_TIM4_Init+0xb0>)
 8001d10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d14:	223f      	movs	r2, #63	; 0x3f
 8001d16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d32:	4818      	ldr	r0, [pc, #96]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d34:	f004 f842 	bl	8005dbc <HAL_TIM_PWM_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d3e:	f7ff fb35 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4810      	ldr	r0, [pc, #64]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d52:	f004 fde3 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d5c:	f7ff fb26 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	2360      	movs	r3, #96	; 0x60
 8001d62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	2208      	movs	r2, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d78:	f004 f996 	bl	80060a8 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d82:	f7ff fb13 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <MX_TIM4_Init+0xac>)
 8001d88:	f000 f828 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000678 	.word	0x20000678
 8001d98:	40000800 	.word	0x40000800

08001d9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10b      	bne.n	8001dc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_TIM_MspPostInit+0x64>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11c      	bne.n	8001e38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_TIM_MspPostInit+0x68>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_TIM_MspPostInit+0x68>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_TIM_MspPostInit+0x68>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 8001e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_TIM_MspPostInit+0x6c>)
 8001e34:	f001 f9d2 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020c00 	.word	0x40020c00

08001e4c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <MX_USART6_UART_Init+0x5c>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART6_UART_Init+0x58>)
 8001e90:	f004 fdf0 	bl	8006a74 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001e9a:	f7ff fa87 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200006c4 	.word	0x200006c4
 8001ea8:	40011400 	.word	0x40011400

08001eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ae      	sub	sp, #184	; 0xb8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2290      	movs	r2, #144	; 0x90
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f009 f8e2 	bl	800b096 <memset>
  if(uartHandle->Instance==USART6)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <HAL_UART_MspInit+0xc4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d144      	bne.n	8001f66 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fd2e 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ef6:	f7ff fa59 	bl	80013ac <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_UART_MspInit+0xc8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 8001f2a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f44:	2308      	movs	r3, #8
 8001f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <HAL_UART_MspInit+0xcc>)
 8001f52:	f001 f943 	bl	80031dc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	2047      	movs	r0, #71	; 0x47
 8001f5c:	f000 fc2a 	bl	80027b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f60:	2047      	movs	r0, #71	; 0x47
 8001f62:	f000 fc43 	bl	80027ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	37b8      	adds	r7, #184	; 0xb8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021800 	.word	0x40021800

08001f7c <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <ws2812b_init+0x1f4>)
 8001f86:	4a7b      	ldr	r2, [pc, #492]	; (8002174 <ws2812b_init+0x1f8>)
 8001f88:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <ws2812b_init+0x1f8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d009      	beq.n	8001fac <ws2812b_init+0x30>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <ws2812b_init+0x30>
 8001fa0:	4875      	ldr	r0, [pc, #468]	; (8002178 <ws2812b_init+0x1fc>)
 8001fa2:	f000 f9f5 	bl	8002390 <set_init_error_msg>
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e17f      	b.n	80022ac <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	789b      	ldrb	r3, [r3, #2]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d01d      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d019      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	789b      	ldrb	r3, [r3, #2]
 8001fc0:	2b07      	cmp	r3, #7
 8001fc2:	d015      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d011      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	789b      	ldrb	r3, [r3, #2]
 8001fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001fd2:	d00d      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	2b1f      	cmp	r3, #31
 8001fda:	d009      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fe2:	d005      	beq.n	8001ff0 <ws2812b_init+0x74>
 8001fe4:	4865      	ldr	r0, [pc, #404]	; (800217c <ws2812b_init+0x200>)
 8001fe6:	f000 f9d3 	bl	8002390 <set_init_error_msg>
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e15d      	b.n	80022ac <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d01d      	beq.n	8002034 <ws2812b_init+0xb8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d019      	beq.n	8002034 <ws2812b_init+0xb8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	2b07      	cmp	r3, #7
 8002006:	d015      	beq.n	8002034 <ws2812b_init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d011      	beq.n	8002034 <ws2812b_init+0xb8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	2b3f      	cmp	r3, #63	; 0x3f
 8002016:	d00d      	beq.n	8002034 <ws2812b_init+0xb8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	2b1f      	cmp	r3, #31
 800201e:	d009      	beq.n	8002034 <ws2812b_init+0xb8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	d005      	beq.n	8002034 <ws2812b_init+0xb8>
 8002028:	4855      	ldr	r0, [pc, #340]	; (8002180 <ws2812b_init+0x204>)
 800202a:	f000 f9b1 	bl	8002390 <set_init_error_msg>
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e13b      	b.n	80022ac <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	78db      	ldrb	r3, [r3, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <ws2812b_init+0xd4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	78db      	ldrb	r3, [r3, #3]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <ws2812b_init+0xd4>
 8002044:	484f      	ldr	r0, [pc, #316]	; (8002184 <ws2812b_init+0x208>)
 8002046:	f000 f9a3 	bl	8002390 <set_init_error_msg>
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e12d      	b.n	80022ac <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d009      	beq.n	800206c <ws2812b_init+0xf0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <ws2812b_init+0xf0>
 8002060:	4849      	ldr	r0, [pc, #292]	; (8002188 <ws2812b_init+0x20c>)
 8002062:	f000 f995 	bl	8002390 <set_init_error_msg>
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e11f      	b.n	80022ac <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	789a      	ldrb	r2, [r3, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	429a      	cmp	r2, r3
 8002076:	d805      	bhi.n	8002084 <ws2812b_init+0x108>
 8002078:	4844      	ldr	r0, [pc, #272]	; (800218c <ws2812b_init+0x210>)
 800207a:	f000 f989 	bl	8002390 <set_init_error_msg>
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e113      	b.n	80022ac <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d109      	bne.n	80020a0 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	789b      	ldrb	r3, [r3, #2]
 8002090:	2b0e      	cmp	r3, #14
 8002092:	d905      	bls.n	80020a0 <ws2812b_init+0x124>
 8002094:	483e      	ldr	r0, [pc, #248]	; (8002190 <ws2812b_init+0x214>)
 8002096:	f000 f97b 	bl	8002390 <set_init_error_msg>
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e105      	b.n	80022ac <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	78db      	ldrb	r3, [r3, #3]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	789b      	ldrb	r3, [r3, #2]
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	791b      	ldrb	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 80e9 	bne.w	80022a4 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d15c      	bne.n	8002194 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7e5b      	ldrb	r3, [r3, #25]
 80020de:	10db      	asrs	r3, r3, #3
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	b25a      	sxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	105b      	asrs	r3, r3, #1
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b25a      	sxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e5b      	ldrb	r3, [r3, #25]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	b25b      	sxtb	r3, r3
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	b25b      	sxtb	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b25a      	sxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e5b      	ldrb	r3, [r3, #25]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	b25b      	sxtb	r3, r3
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	b25b      	sxtb	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b25b      	sxtb	r3, r3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
 8002128:	10db      	asrs	r3, r3, #3
 800212a:	b25b      	sxtb	r3, r3
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	b25a      	sxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7e1b      	ldrb	r3, [r3, #24]
 8002136:	105b      	asrs	r3, r3, #1
 8002138:	b25b      	sxtb	r3, r3
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b25a      	sxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7e1b      	ldrb	r3, [r3, #24]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	b25b      	sxtb	r3, r3
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b25a      	sxtb	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7e1b      	ldrb	r3, [r3, #24]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	b25b      	sxtb	r3, r3
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b25b      	sxtb	r3, r3
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	761a      	strb	r2, [r3, #24]
 800216e:	e099      	b.n	80022a4 <ws2812b_init+0x328>
 8002170:	2000074c 	.word	0x2000074c
 8002174:	20000750 	.word	0x20000750
 8002178:	0800beac 	.word	0x0800beac
 800217c:	0800bed0 	.word	0x0800bed0
 8002180:	0800bef8 	.word	0x0800bef8
 8002184:	0800bf20 	.word	0x0800bf20
 8002188:	0800bf48 	.word	0x0800bf48
 800218c:	0800bf74 	.word	0x0800bf74
 8002190:	0800bfa8 	.word	0x0800bfa8
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e5b      	ldrb	r3, [r3, #25]
 8002198:	09db      	lsrs	r3, r3, #7
 800219a:	b2db      	uxtb	r3, r3
 800219c:	b25a      	sxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	115b      	asrs	r3, r3, #5
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7e5b      	ldrb	r3, [r3, #25]
 80021b4:	10db      	asrs	r3, r3, #3
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
 80021c6:	105b      	asrs	r3, r3, #1
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e5b      	ldrb	r3, [r3, #25]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b25a      	sxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e5b      	ldrb	r3, [r3, #25]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e5b      	ldrb	r3, [r3, #25]
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	b25b      	sxtb	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b25a      	sxtb	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e5b      	ldrb	r3, [r3, #25]
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	b25b      	sxtb	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b25b      	sxtb	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	09db      	lsrs	r3, r3, #7
 8002222:	b2db      	uxtb	r3, r3
 8002224:	b25a      	sxtb	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7e1b      	ldrb	r3, [r3, #24]
 800222a:	115b      	asrs	r3, r3, #5
 800222c:	b25b      	sxtb	r3, r3
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	b25b      	sxtb	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b25a      	sxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	10db      	asrs	r3, r3, #3
 800223e:	b25b      	sxtb	r3, r3
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	b25b      	sxtb	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b25a      	sxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7e1b      	ldrb	r3, [r3, #24]
 800224e:	105b      	asrs	r3, r3, #1
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	b25b      	sxtb	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b25a      	sxtb	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e1b      	ldrb	r3, [r3, #24]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b25b      	sxtb	r3, r3
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	b25b      	sxtb	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b25a      	sxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e1b      	ldrb	r3, [r3, #24]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	b25b      	sxtb	r3, r3
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	b25b      	sxtb	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b25a      	sxtb	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e1b      	ldrb	r3, [r3, #24]
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	b25b      	sxtb	r3, r3
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	b25b      	sxtb	r3, r3
 800228e:	4313      	orrs	r3, r2
 8002290:	b25a      	sxtb	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	b25b      	sxtb	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b25b      	sxtb	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]

  return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <ws2812b_required_buffer_len+0x18>
 80022c8:	2318      	movs	r3, #24
 80022ca:	e000      	b.n	80022ce <ws2812b_required_buffer_len+0x1a>
 80022cc:	230c      	movs	r3, #12
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	441a      	add	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e008      	b.n	8002312 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3301      	adds	r3, #1
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d3f1      	bcc.n	8002300 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e01a      	b.n	8002358 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	463a      	mov	r2, r7
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f85a 	bl	80023e4 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	463a      	mov	r2, r7
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f853 	bl	80023e4 <add_byte>
    add_byte(ws, led->blue, &buffer);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	463a      	mov	r2, r7
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f84c 	bl	80023e4 <add_byte>
    led++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3303      	adds	r3, #3
 8002350:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3df      	bcc.n	8002322 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	e008      	b.n	800237a <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    buffer++;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d3f1      	bcc.n	8002368 <ws2812b_fill_buffer+0x7e>
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 800239c:	e00b      	b.n	80023b6 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	7819      	ldrb	r1, [r3, #0]
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <set_init_error_msg+0x50>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	460a      	mov	r2, r1
 80023ae:	701a      	strb	r2, [r3, #0]
    i++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b3a      	cmp	r3, #58	; 0x3a
 80023ba:	dc05      	bgt.n	80023c8 <set_init_error_msg+0x38>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ea      	bne.n	800239e <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <set_init_error_msg+0x50>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000750 	.word	0x20000750

080023e4 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	460b      	mov	r3, r1
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d118      	bne.n	800242c <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e011      	b.n	8002424 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681c      	ldr	r4, [r3, #0]
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	461a      	mov	r2, r3
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f844 	bl	8002498 <construct_double_pulse>
 8002410:	4603      	mov	r3, r0
 8002412:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3302      	adds	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b07      	cmp	r3, #7
 8002428:	d9ea      	bls.n	8002400 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 800242a:	e017      	b.n	800245c <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e011      	b.n	8002456 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681c      	ldr	r4, [r3, #0]
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	461a      	mov	r2, r3
 800243a:	6939      	ldr	r1, [r7, #16]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f811 	bl	8002464 <construct_single_pulse>
 8002442:	4603      	mov	r3, r0
 8002444:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	3301      	adds	r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b07      	cmp	r3, #7
 800245a:	d9ea      	bls.n	8002432 <add_byte+0x4e>
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fa21 f303 	lsr.w	r3, r1, r3
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <construct_single_pulse+0x24>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	7e1b      	ldrb	r3, [r3, #24]
 8002486:	e001      	b.n	800248c <construct_single_pulse+0x28>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	7e5b      	ldrb	r3, [r3, #25]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	7e1b      	ldrb	r3, [r3, #24]
 80024aa:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	7e5b      	ldrb	r3, [r3, #25]
 80024b0:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	791b      	ldrb	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3301      	adds	r3, #1
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	fa21 f303 	lsr.w	r3, r1, r3
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <construct_double_pulse+0x38>
 80024cc:	7dbb      	ldrb	r3, [r7, #22]
 80024ce:	e000      	b.n	80024d2 <construct_double_pulse+0x3a>
 80024d0:	7d7b      	ldrb	r3, [r7, #21]
 80024d2:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	fa21 f303 	lsr.w	r3, r1, r3
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <construct_double_pulse+0x54>
 80024e4:	7dbb      	ldrb	r3, [r7, #22]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	e002      	b.n	80024f2 <construct_double_pulse+0x5a>
 80024ec:	7d7b      	ldrb	r3, [r7, #21]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	75fb      	strb	r3, [r7, #23]
 80024fc:	e020      	b.n	8002540 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <construct_double_pulse+0x7a>
 800250e:	7dbb      	ldrb	r3, [r7, #22]
 8002510:	e000      	b.n	8002514 <construct_double_pulse+0x7c>
 8002512:	7d7b      	ldrb	r3, [r7, #21]
 8002514:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3301      	adds	r3, #1
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	fa21 f303 	lsr.w	r3, r1, r3
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <construct_double_pulse+0x98>
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	b25b      	sxtb	r3, r3
 800252e:	e002      	b.n	8002536 <construct_double_pulse+0x9e>
 8002530:	7d7b      	ldrb	r3, [r7, #21]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800253a:	4313      	orrs	r3, r2
 800253c:	b25b      	sxtb	r3, r3
 800253e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002556:	490e      	ldr	r1, [pc, #56]	; (8002590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002558:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800256c:	4c0b      	ldr	r4, [pc, #44]	; (800259c <LoopFillZerobss+0x26>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257a:	f7ff fba3 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257e:	f008 fe35 	bl	800b1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002582:	f7fe fe49 	bl	8001218 <main>
  bx  lr    
 8002586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800258c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002590:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002594:	0800d718 	.word	0x0800d718
  ldr r2, =_sbss
 8002598:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800259c:	200052bc 	.word	0x200052bc

080025a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC_IRQHandler>

080025a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a6:	2003      	movs	r0, #3
 80025a8:	f000 f8f9 	bl	800279e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ac:	2005      	movs	r0, #5
 80025ae:	f7ff fa2d 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b2:	f7ff fa03 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000034 	.word	0x20000034
 80025e0:	2000078c 	.word	0x2000078c

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000078c 	.word	0x2000078c

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000034 	.word	0x20000034

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	05fa0000 	.word	0x05fa0000

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff4c 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c6:	f7ff ff61 	bl	800268c <__NVIC_GetPriorityGrouping>
 80027ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f7ff ffb1 	bl	8002738 <NVIC_EncodePriority>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff80 	bl	80026e4 <__NVIC_SetPriority>
}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff54 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e014      	b.n	8002844 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	791b      	ldrb	r3, [r3, #4]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd ff08 	bl	8000640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	d120      	bne.n	80028a6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	d118      	bne.n	80028a6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2204      	movs	r2, #4
 8002878:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f82d 	bl	8002900 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b4:	d120      	bne.n	80028f8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c4:	d118      	bne.n	80028f8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f043 0202 	orr.w	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80028f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f85d 	bl	80029b2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_DAC_ConfigChannel+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e03c      	b.n	80029a6 <HAL_DAC_ConfigChannel+0x92>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	f640 72fe 	movw	r2, #4094	; 0xffe
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4013      	ands	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	22c0      	movs	r2, #192	; 0xc0
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fe06 	bl	80025e4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fded 	bl	80025e4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb09 	bl	80030e4 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fac0 	bl	8003078 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	e010803f 	.word	0xe010803f

08002b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Start_IT+0x26>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e048      	b.n	8002bdc <HAL_DMA_Start_IT+0xb8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d137      	bne.n	8002bce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa52 	bl	800301c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0216 	orr.w	r2, r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e005      	b.n	8002bda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bf2:	f7ff fcf7 	bl	80025e4 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e052      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0216 	bic.w	r2, r2, #22
 8002c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_DMA_Abort+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c66:	e013      	b.n	8002c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c68:	f7ff fcbc 	bl	80025e4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d90c      	bls.n	8002c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e015      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e4      	bne.n	8002c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	223f      	movs	r2, #63	; 0x3f
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00c      	b.n	8002cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d14:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_DMA_IRQHandler+0x248>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8e      	ldr	r2, [pc, #568]	; (8002f54 <HAL_DMA_IRQHandler+0x24c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2210      	movs	r2, #16
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d043      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2210      	movs	r2, #16
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e01f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808f 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8087 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d136      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0216 	bic.w	r2, r2, #22
 8002ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	223f      	movs	r2, #63	; 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07e      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
        }
        return;
 8002f1e:	e079      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
 8002f4e:	bf00      	nop
 8002f50:	2000002c 	.word	0x2000002c
 8002f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e01e      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0210 	bic.w	r2, r2, #16
 8002f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d032      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d307      	bcc.n	8002ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x2cc>
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e000      	b.n	8003016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d108      	bne.n	800305c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800305a:	e007      	b.n	800306c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3b10      	subs	r3, #16
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <DMA_CalcBaseAndBitshift+0x60>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <DMA_CalcBaseAndBitshift+0x64>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d908      	bls.n	80030b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <DMA_CalcBaseAndBitshift+0x68>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	1d1a      	adds	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58
 80030b6:	e006      	b.n	80030c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <DMA_CalcBaseAndBitshift+0x68>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	aaaaaaab 	.word	0xaaaaaaab
 80030dc:	0800d6cc 	.word	0x0800d6cc
 80030e0:	fffffc00 	.word	0xfffffc00

080030e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11f      	bne.n	800313e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d856      	bhi.n	80031b2 <DMA_CheckFifoParam+0xce>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <DMA_CheckFifoParam+0x28>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312f 	.word	0x0800312f
 8003114:	0800311d 	.word	0x0800311d
 8003118:	080031b3 	.word	0x080031b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d046      	beq.n	80031b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312c:	e043      	b.n	80031b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003136:	d140      	bne.n	80031ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e03d      	b.n	80031ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d121      	bne.n	800318c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d837      	bhi.n	80031be <DMA_CheckFifoParam+0xda>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <DMA_CheckFifoParam+0x70>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003165 	.word	0x08003165
 8003158:	0800316b 	.word	0x0800316b
 800315c:	08003165 	.word	0x08003165
 8003160:	0800317d 	.word	0x0800317d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e030      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d025      	beq.n	80031c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e022      	b.n	80031c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003184:	d11f      	bne.n	80031c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800318a:	e01c      	b.n	80031c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d903      	bls.n	800319a <DMA_CheckFifoParam+0xb6>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d003      	beq.n	80031a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003198:	e018      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      break;
 800319e:	e015      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e00b      	b.n	80031ca <DMA_CheckFifoParam+0xe6>
      break;
 80031b2:	bf00      	nop
 80031b4:	e00a      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e008      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e006      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;   
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
    }
  } 
  
  return status; 
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e175      	b.n	80034e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 8164 	bne.w	80034e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d005      	beq.n	8003232 <HAL_GPIO_Init+0x56>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d130      	bne.n	8003294 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003268:	2201      	movs	r2, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0201 	and.w	r2, r3, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d017      	beq.n	80032d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80be 	beq.w	80034e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x324>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x328>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_GPIO_Init+0x32c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d037      	beq.n	800341a <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_GPIO_Init+0x330>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_GPIO_Init+0x334>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_GPIO_Init+0x338>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_GPIO_Init+0x33c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_GPIO_Init+0x340>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x22a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_GPIO_Init+0x344>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_GPIO_Init+0x348>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_GPIO_Init+0x34c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_GPIO_Init+0x350>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033f2:	2309      	movs	r3, #9
 80033f4:	e012      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033f6:	230a      	movs	r3, #10
 80033f8:	e010      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00e      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00c      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003402:	2306      	movs	r3, #6
 8003404:	e00a      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x240>
 800341a:	2300      	movs	r3, #0
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_GPIO_Init+0x328>)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	f67f ae86 	bls.w	80031fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	041a      	lsls	r2, r3, #16
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43d9      	mvns	r1, r3
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	400b      	ands	r3, r1
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07f      	b.n	80036ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd fdc8 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e006      	b.n	8003624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d104      	bne.n	8003636 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_I2C_Init+0x11c>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003654:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	02008000 	.word	0x02008000

080036bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 80f9 	bne.w	80038d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x34>
 80036ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0ed      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_I2C_Mem_Write+0x4e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0e6      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003712:	f7fe ff67 	bl	80025e4 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2319      	movs	r3, #25
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f955 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d1      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2221      	movs	r2, #33	; 0x21
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800375c:	88f8      	ldrh	r0, [r7, #6]
 800375e:	893a      	ldrh	r2, [r7, #8]
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4603      	mov	r3, r0
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f8b9 	bl	80038e4 <I2C_RequestMemoryWrite>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0a9      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d90e      	bls.n	80037ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fab1 	bl	8003d0c <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 faa0 	bl	8003d0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f93f 	bl	8003a54 <I2C_WaitOnTXISFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e07b      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d034      	beq.n	8003884 <HAL_I2C_Mem_Write+0x1c8>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d130      	bne.n	8003884 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f8d1 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e04d      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d90e      	bls.n	8003864 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa55 	bl	8003d0c <I2C_TransferConfig>
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	b2da      	uxtb	r2, r3
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fa44 	bl	8003d0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d19e      	bne.n	80037cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f91e 	bl	8003ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01a      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_I2C_Mem_Write+0x224>)
 80038b6:	400b      	ands	r3, r1
 80038b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fe00e800 	.word	0xfe00e800

080038e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <I2C_RequestMemoryWrite+0xa4>)
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f9fd 	bl	8003d0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f89c 	bl	8003a54 <I2C_WaitOnTXISFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e02c      	b.n	8003980 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
 8003936:	e015      	b.n	8003964 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003938:	893b      	ldrh	r3, [r7, #8]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	b29b      	uxth	r3, r3
 800393e:	b2da      	uxtb	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f882 	bl	8003a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e012      	b.n	8003980 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2200      	movs	r2, #0
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f830 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	80002000 	.word	0x80002000

0800398c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d103      	bne.n	80039aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d007      	beq.n	80039c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	619a      	str	r2, [r3, #24]
  }
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	e022      	b.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d01e      	beq.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fe fdf9 	bl	80025e4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d113      	bne.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e00f      	b.n	8003a4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4013      	ands	r3, r2
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d0cd      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a60:	e02c      	b.n	8003abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f870 	bl	8003b4c <I2C_IsErrorOccurred>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02a      	b.n	8003acc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d01e      	beq.n	8003abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fe fdb1 	bl	80025e4 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d113      	bne.n	8003abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d1cb      	bne.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae0:	e028      	b.n	8003b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f830 	bl	8003b4c <I2C_IsErrorOccurred>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e026      	b.n	8003b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fe fd75 	bl	80025e4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f043 0220 	orr.w	r2, r3, #32
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d1cf      	bne.n	8003ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d068      	beq.n	8003c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b80:	e049      	b.n	8003c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d045      	beq.n	8003c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fe fd2b 	bl	80025e4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <I2C_IsErrorOccurred+0x54>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13a      	bne.n	8003c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d121      	bne.n	8003c08 <I2C_IsErrorOccurred+0xbc>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bca:	d01d      	beq.n	8003c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d01a      	beq.n	8003c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003be2:	f7fe fcff 	bl	80025e4 <HAL_GetTick>
 8003be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	e00e      	b.n	8003c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bea:	f7fe fcfb 	bl	80025e4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b19      	cmp	r3, #25
 8003bf6:	d907      	bls.n	8003c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c06:	e006      	b.n	8003c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d1e9      	bne.n	8003bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d003      	beq.n	8003c2c <I2C_IsErrorOccurred+0xe0>
 8003c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0aa      	beq.n	8003b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f043 0302 	orr.w	r3, r3, #2
 8003ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff fe63 	bl	800398c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <I2C_IsErrorOccurred+0x1bc>)
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	fe00e800 	.word	0xfe00e800

08003d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d24:	7a7b      	ldrb	r3, [r7, #9]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	0d5b      	lsrs	r3, r3, #21
 8003d46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <I2C_TransferConfig+0x60>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	ea02 0103 	and.w	r1, r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	03ff63ff 	.word	0x03ff63ff

08003d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d138      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e032      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d139      	bne.n	8003e90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e033      	b.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2224      	movs	r2, #36	; 0x24
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ece:	f7fe fb89 	bl	80025e4 <HAL_GetTick>
 8003ed2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed4:	e009      	b.n	8003eea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ed6:	f7fe fb85 	bl	80025e4 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee4:	d901      	bls.n	8003eea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e022      	b.n	8003f30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d1ee      	bne.n	8003ed6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f04:	f7fe fb6e 	bl	80025e4 <HAL_GetTick>
 8003f08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f0a:	e009      	b.n	8003f20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f0c:	f7fe fb6a 	bl	80025e4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1a:	d901      	bls.n	8003f20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e007      	b.n	8003f30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f2c:	d1ee      	bne.n	8003f0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000

08003f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e29b      	b.n	800448e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8087 	beq.w	8004072 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f64:	4b96      	ldr	r3, [pc, #600]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d00c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f70:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d112      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x62>
 8003f7c:	4b90      	ldr	r3, [pc, #576]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8a:	4b8d      	ldr	r3, [pc, #564]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06c      	beq.n	8004070 <HAL_RCC_OscConfig+0x130>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d168      	bne.n	8004070 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e275      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_OscConfig+0x7a>
 8003fac:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a83      	ldr	r2, [pc, #524]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e02e      	b.n	8004018 <HAL_RCC_OscConfig+0xd8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x9c>
 8003fc2:	4b7f      	ldr	r3, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7e      	ldr	r2, [pc, #504]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7b      	ldr	r2, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xd8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a72      	ldr	r2, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xd8>
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6b      	ldr	r2, [pc, #428]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe fae0 	bl	80025e4 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe fadc 	bl	80025e4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e229      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xe8>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe facc 	bl	80025e4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fac8 	bl	80025e4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e215      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x110>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d069      	beq.n	8004152 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800407e:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b4d      	ldr	r3, [pc, #308]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x190>
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x17a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1e9      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	493d      	ldr	r1, [pc, #244]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e040      	b.n	8004152 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe fa7e 	bl	80025e4 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe fa7a 	bl	80025e4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e1c7      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4929      	ldr	r1, [pc, #164]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
 800411e:	e018      	b.n	8004152 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe fa5a 	bl	80025e4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fe fa56 	bl	80025e4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1a3      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d038      	beq.n	80041d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d019      	beq.n	800419a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fe fa37 	bl	80025e4 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fa33 	bl	80025e4 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e180      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x23a>
 8004198:	e01a      	b.n	80041d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <HAL_RCC_OscConfig+0x280>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fe fa1d 	bl	80025e4 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fe fa19 	bl	80025e4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d903      	bls.n	80041c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e166      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
 80041c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	4b92      	ldr	r3, [pc, #584]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ee      	bne.n	80041ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a4 	beq.w	8004326 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b8c      	ldr	r3, [pc, #560]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	4b89      	ldr	r3, [pc, #548]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a88      	ldr	r2, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b86      	ldr	r3, [pc, #536]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b83      	ldr	r3, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x4d4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004212:	4b80      	ldr	r3, [pc, #512]	; (8004414 <HAL_RCC_OscConfig+0x4d4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7f      	ldr	r2, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x4d4>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fe f9e1 	bl	80025e4 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fe f9dd 	bl	80025e4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	; 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e12a      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004238:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x4d4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x31a>
 800424c:	4b70      	ldr	r3, [pc, #448]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a6f      	ldr	r2, [pc, #444]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	e02d      	b.n	80042b6 <HAL_RCC_OscConfig+0x376>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x33c>
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a67      	ldr	r2, [pc, #412]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	e01c      	b.n	80042b6 <HAL_RCC_OscConfig+0x376>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x35e>
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a61      	ldr	r2, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a5e      	ldr	r2, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x376>
 800429e:	4b5c      	ldr	r3, [pc, #368]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a5b      	ldr	r2, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
 80042aa:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d015      	beq.n	80042ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042be:	f7fe f991 	bl	80025e4 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fe f98d 	bl	80025e4 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0d8      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ee      	beq.n	80042c6 <HAL_RCC_OscConfig+0x386>
 80042e8:	e014      	b.n	8004314 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe f97b 	bl	80025e4 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fe f977 	bl	80025e4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0c2      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ee      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80ae 	beq.w	800448c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004330:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d06d      	beq.n	8004418 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d14b      	bne.n	80043dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b32      	ldr	r3, [pc, #200]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a31      	ldr	r2, [pc, #196]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe f948 	bl	80025e4 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe f944 	bl	80025e4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e091      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	3b01      	subs	r3, #1
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	491b      	ldr	r1, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe f916 	bl	80025e4 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fe f912 	bl	80025e4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e05f      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x47c>
 80043da:	e057      	b.n	800448c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe f8fc 	bl	80025e4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe f8f8 	bl	80025e4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e045      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCC_OscConfig+0x4d0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4b0>
 800440e:	e03d      	b.n	800448c <HAL_RCC_OscConfig+0x54c>
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCC_OscConfig+0x558>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d030      	beq.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d129      	bne.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d122      	bne.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800444e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004450:	4293      	cmp	r3, r2
 8004452:	d119      	bne.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d10f      	bne.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d0      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d910      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 020f 	bic.w	r2, r3, #15
 80044ca:	4965      	ldr	r1, [pc, #404]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b8      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a58      	ldr	r2, [pc, #352]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800451e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	494d      	ldr	r1, [pc, #308]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d040      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d115      	bne.n	800457e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e073      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	4b3d      	ldr	r3, [pc, #244]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06b      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4936      	ldr	r1, [pc, #216]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fe f828 	bl	80025e4 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fe f824 	bl	80025e4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e053      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d210      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	4922      	ldr	r1, [pc, #136]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e032      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4916      	ldr	r1, [pc, #88]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	490e      	ldr	r1, [pc, #56]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800462e:	f000 f821 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004632:	4602      	mov	r2, r0
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <HAL_RCC_ClockConfig+0x1cc>)
 8004640:	5ccb      	ldrb	r3, [r1, r3]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1d0>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1d4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd f9dc 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	40023800 	.word	0x40023800
 8004668:	0800d6b4 	.word	0x0800d6b4
 800466c:	2000002c 	.word	0x2000002c
 8004670:	20000030 	.word	0x20000030

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b094      	sub	sp, #80	; 0x50
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
 8004680:	2300      	movs	r3, #0
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	2300      	movs	r3, #0
 8004686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00d      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004698:	2b08      	cmp	r3, #8
 800469a:	f200 80e1 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x34>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x3a>
 80046a6:	e0db      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b73      	ldr	r3, [pc, #460]	; (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ac:	e0db      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ae:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCC_GetSysClockFreq+0x208>)
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b2:	e0d8      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b4:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
 80046e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0159      	lsls	r1, r3, #5
 80046f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f8:	0150      	lsls	r0, r2, #5
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4621      	mov	r1, r4
 8004700:	1a51      	subs	r1, r2, r1
 8004702:	6139      	str	r1, [r7, #16]
 8004704:	4629      	mov	r1, r5
 8004706:	eb63 0301 	sbc.w	r3, r3, r1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004718:	4659      	mov	r1, fp
 800471a:	018b      	lsls	r3, r1, #6
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004722:	4651      	mov	r1, sl
 8004724:	018a      	lsls	r2, r1, #6
 8004726:	4651      	mov	r1, sl
 8004728:	ebb2 0801 	subs.w	r8, r2, r1
 800472c:	4659      	mov	r1, fp
 800472e:	eb63 0901 	sbc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	462b      	mov	r3, r5
 8004754:	eb49 0303 	adc.w	r3, r9, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004766:	4629      	mov	r1, r5
 8004768:	024b      	lsls	r3, r1, #9
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004770:	4621      	mov	r1, r4
 8004772:	024a      	lsls	r2, r1, #9
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477a:	2200      	movs	r2, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004784:	f7fb fdb4 	bl	80002f0 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004790:	e058      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b38      	ldr	r3, [pc, #224]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	4618      	mov	r0, r3
 800479c:	4611      	mov	r1, r2
 800479e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047be:	0150      	lsls	r0, r2, #5
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4641      	mov	r1, r8
 80047c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e4:	ebb2 040a 	subs.w	r4, r2, sl
 80047e8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	00eb      	lsls	r3, r5, #3
 80047f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	4643      	mov	r3, r8
 8004802:	18e3      	adds	r3, r4, r3
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	464b      	mov	r3, r9
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	61fa      	str	r2, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	f7fb fd5a 	bl	80002f0 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004868:	4618      	mov	r0, r3
 800486a:	3750      	adds	r7, #80	; 0x50
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000002c 	.word	0x2000002c

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0800d6c4 	.word	0x0800d6c4

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffdc 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0b5b      	lsrs	r3, r3, #13
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800d6c4 	.word	0x0800d6c4

080048e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	220f      	movs	r2, #15
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048f8:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0203 	and.w	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	08db      	lsrs	r3, r3, #3
 8004922:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_RCC_GetClockConfig+0x60>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40023c00 	.word	0x40023c00

0800494c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004974:	4b69      	ldr	r3, [pc, #420]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a68      	ldr	r2, [pc, #416]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800497e:	6093      	str	r3, [r2, #8]
 8004980:	4b66      	ldr	r3, [pc, #408]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	4964      	ldr	r1, [pc, #400]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d017      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a6:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	4959      	ldr	r1, [pc, #356]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c4:	d101      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d017      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049e2:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	494a      	ldr	r1, [pc, #296]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a00:	d101      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 808b 	beq.w	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a30:	4b3a      	ldr	r3, [pc, #232]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3c:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a48:	4b35      	ldr	r3, [pc, #212]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a34      	ldr	r2, [pc, #208]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fd fdc6 	bl	80025e4 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5c:	f7fd fdc2 	bl	80025e4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e38f      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a6e:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d035      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d02e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a98:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ac0:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d114      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fd8a 	bl	80025e4 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fd86 	bl	80025e4 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e351      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0ee      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b02:	d111      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	4901      	ldr	r1, [pc, #4]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40007000 	.word	0x40007000
 8004b24:	0ffffcff 	.word	0x0ffffcff
 8004b28:	4bac      	ldr	r3, [pc, #688]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4aab      	ldr	r2, [pc, #684]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b32:	6093      	str	r3, [r2, #8]
 8004b34:	4ba9      	ldr	r3, [pc, #676]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b40:	49a6      	ldr	r1, [pc, #664]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d010      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b52:	4ba2      	ldr	r3, [pc, #648]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b58:	4aa0      	ldr	r2, [pc, #640]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b62:	4b9e      	ldr	r3, [pc, #632]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	499b      	ldr	r1, [pc, #620]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b80:	4b96      	ldr	r3, [pc, #600]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8e:	4993      	ldr	r1, [pc, #588]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba2:	4b8e      	ldr	r3, [pc, #568]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb0:	498a      	ldr	r1, [pc, #552]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc4:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd2:	4982      	ldr	r1, [pc, #520]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004be6:	4b7d      	ldr	r3, [pc, #500]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4979      	ldr	r1, [pc, #484]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c08:	4b74      	ldr	r3, [pc, #464]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f023 0203 	bic.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	4971      	ldr	r1, [pc, #452]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f023 020c 	bic.w	r2, r3, #12
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	4968      	ldr	r1, [pc, #416]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4c:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	4960      	ldr	r1, [pc, #384]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	4957      	ldr	r1, [pc, #348]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c90:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	494f      	ldr	r1, [pc, #316]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4946      	ldr	r1, [pc, #280]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cd4:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	493e      	ldr	r1, [pc, #248]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	4935      	ldr	r1, [pc, #212]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d18:	4b30      	ldr	r3, [pc, #192]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d26:	492d      	ldr	r1, [pc, #180]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d3a:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d48:	4924      	ldr	r1, [pc, #144]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d58:	d101      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7a:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d88:	4914      	ldr	r1, [pc, #80]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dac:	490b      	ldr	r1, [pc, #44]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00f      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd0:	4902      	ldr	r1, [pc, #8]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dec:	4b8a      	ldr	r3, [pc, #552]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	4986      	ldr	r1, [pc, #536]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e10:	4b81      	ldr	r3, [pc, #516]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e20:	497d      	ldr	r1, [pc, #500]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d006      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80d6 	beq.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e3c:	4b76      	ldr	r3, [pc, #472]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a75      	ldr	r2, [pc, #468]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fd fbcc 	bl	80025e4 <HAL_GetTick>
 8004e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e50:	f7fd fbc8 	bl	80025e4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e195      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e62:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d021      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d11d      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e82:	4b65      	ldr	r3, [pc, #404]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e90:	4b61      	ldr	r3, [pc, #388]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e96:	0e1b      	lsrs	r3, r3, #24
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	019a      	lsls	r2, r3, #6
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	071b      	lsls	r3, r3, #28
 8004eb6:	4958      	ldr	r1, [pc, #352]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02e      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee8:	d129      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efe:	0f1b      	lsrs	r3, r3, #28
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	019a      	lsls	r2, r3, #6
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	061b      	lsls	r3, r3, #24
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	071b      	lsls	r3, r3, #28
 8004f1e:	493e      	ldr	r1, [pc, #248]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f26:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2c:	f023 021f 	bic.w	r2, r3, #31
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	3b01      	subs	r3, #1
 8004f36:	4938      	ldr	r1, [pc, #224]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01d      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f4a:	4b33      	ldr	r3, [pc, #204]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f50:	0e1b      	lsrs	r3, r3, #24
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f58:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5e:	0f1b      	lsrs	r3, r3, #28
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	019a      	lsls	r2, r3, #6
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	431a      	orrs	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	4926      	ldr	r1, [pc, #152]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	019a      	lsls	r2, r3, #6
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	061b      	lsls	r3, r3, #24
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	071b      	lsls	r3, r3, #28
 8004fae:	491a      	ldr	r1, [pc, #104]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fd fb0f 	bl	80025e4 <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fca:	f7fd fb0b 	bl	80025e4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	; 0x64
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0d8      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	f040 80ce 	bne.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a08      	ldr	r2, [pc, #32]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fd faf2 	bl	80025e4 <HAL_GetTick>
 8005000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005002:	e00b      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005004:	f7fd faee 	bl	80025e4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d904      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0bb      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800501c:	4b5e      	ldr	r3, [pc, #376]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005028:	d0ec      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02e      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d12a      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005052:	4b51      	ldr	r3, [pc, #324]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005060:	4b4d      	ldr	r3, [pc, #308]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	0f1b      	lsrs	r3, r3, #28
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	019a      	lsls	r2, r3, #6
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	061b      	lsls	r3, r3, #24
 8005080:	431a      	orrs	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	4944      	ldr	r1, [pc, #272]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005094:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	3b01      	subs	r3, #1
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	493d      	ldr	r1, [pc, #244]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d022      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050bc:	d11d      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050be:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050cc:	4b32      	ldr	r3, [pc, #200]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	0f1b      	lsrs	r3, r3, #28
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	019a      	lsls	r2, r3, #6
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	4929      	ldr	r1, [pc, #164]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d028      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	0e1b      	lsrs	r3, r3, #24
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005114:	4b20      	ldr	r3, [pc, #128]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	0c1b      	lsrs	r3, r3, #16
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	019a      	lsls	r2, r3, #6
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	071b      	lsls	r3, r3, #28
 800513a:	4917      	ldr	r1, [pc, #92]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4911      	ldr	r1, [pc, #68]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005164:	f7fd fa3e 	bl	80025e4 <HAL_GetTick>
 8005168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800516c:	f7fd fa3a 	bl	80025e4 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e007      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518a:	d1ef      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e09d      	b.n	80052ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e005      	b.n	80051d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc f920 	bl	8001434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005214:	d902      	bls.n	800521c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e002      	b.n	8005222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800521c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800522a:	d007      	beq.n	800523c <HAL_SPI_Init+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005234:	d002      	beq.n	800523c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	ea42 0103 	orr.w	r1, r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 0204 	and.w	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052b8:	ea42 0103 	orr.w	r1, r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b088      	sub	sp, #32
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_SPI_Transmit+0x22>
 8005310:	2302      	movs	r3, #2
 8005312:	e158      	b.n	80055c6 <HAL_SPI_Transmit+0x2d4>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531c:	f7fd f962 	bl	80025e4 <HAL_GetTick>
 8005320:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005332:	2302      	movs	r3, #2
 8005334:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005336:	e13d      	b.n	80055b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_SPI_Transmit+0x52>
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005348:	e134      	b.n	80055b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2203      	movs	r2, #3
 800534e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	d10f      	bne.n	80053b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d007      	beq.n	80053d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053dc:	d94b      	bls.n	8005476 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Transmit+0xfa>
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d13e      	bne.n	800546a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005410:	e02b      	b.n	800546a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d112      	bne.n	8005446 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	881a      	ldrh	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005444:	e011      	b.n	800546a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005446:	f7fd f8cd 	bl	80025e4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d803      	bhi.n	800545e <HAL_SPI_Transmit+0x16c>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d102      	bne.n	8005464 <HAL_SPI_Transmit+0x172>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005468:	e0a4      	b.n	80055b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ce      	bne.n	8005412 <HAL_SPI_Transmit+0x120>
 8005474:	e07c      	b.n	8005570 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Transmit+0x192>
 800547e:	8afb      	ldrh	r3, [r7, #22]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d170      	bne.n	8005566 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d912      	bls.n	80054b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	1c9a      	adds	r2, r3, #2
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b02      	subs	r3, #2
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b2:	e058      	b.n	8005566 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80054da:	e044      	b.n	8005566 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d12b      	bne.n	8005542 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d912      	bls.n	800551a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b02      	subs	r3, #2
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005518:	e025      	b.n	8005566 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005540:	e011      	b.n	8005566 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005542:	f7fd f84f 	bl	80025e4 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d803      	bhi.n	800555a <HAL_SPI_Transmit+0x268>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d102      	bne.n	8005560 <HAL_SPI_Transmit+0x26e>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005564:	e026      	b.n	80055b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1b5      	bne.n	80054dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fadd 	bl	8005b34 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e000      	b.n	80055b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80055b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_SPI_Transmit_DMA+0x20>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e0d8      	b.n	80057a2 <HAL_SPI_Transmit_DMA+0x1d2>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d002      	beq.n	800560a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005604:	2302      	movs	r3, #2
 8005606:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005608:	e0c6      	b.n	8005798 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_SPI_Transmit_DMA+0x46>
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800561a:	e0bd      	b.n	8005798 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2203      	movs	r2, #3
 8005620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d10f      	bne.n	8005688 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	4a47      	ldr	r2, [pc, #284]	; (80057ac <HAL_SPI_Transmit_DMA+0x1dc>)
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	4a46      	ldr	r2, [pc, #280]	; (80057b0 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	4a45      	ldr	r2, [pc, #276]	; (80057b4 <HAL_SPI_Transmit_DMA+0x1e4>)
 800569e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	2200      	movs	r2, #0
 80056a6:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056b6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c0:	d82d      	bhi.n	800571e <HAL_SPI_Transmit_DMA+0x14e>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056cc:	d127      	bne.n	800571e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ea:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fa:	e010      	b.n	800571e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800570a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005710:	b29b      	uxth	r3, r3
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	3301      	adds	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	4619      	mov	r1, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005734:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005736:	f7fd f9f5 	bl	8002b24 <HAL_DMA_Start_IT>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005744:	f043 0210 	orr.w	r2, r3, #16
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005758:	e01e      	b.n	8005798 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d007      	beq.n	8005778 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0202 	orr.w	r2, r2, #2
 8005796:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	0800589d 	.word	0x0800589d
 80057b0:	080057f5 	.word	0x080057f5
 80057b4:	080058b9 	.word	0x080058b9

080057b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005802:	f7fc feef 	bl	80025e4 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d03b      	beq.n	8005890 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0220 	bic.w	r2, r2, #32
 8005826:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0202 	bic.w	r2, r2, #2
 8005836:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	6978      	ldr	r0, [r7, #20]
 800583e:	f000 f979 	bl	8005b34 <SPI_EndRxTxTransaction>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005888:	6978      	ldr	r0, [r7, #20]
 800588a:	f7ff ffa9 	bl	80057e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800588e:	e002      	b.n	8005896 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f7ff ff91 	bl	80057b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff8e 	bl	80057cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0203 	bic.w	r2, r2, #3
 80058d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff ff78 	bl	80057e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005908:	f7fc fe6c 	bl	80025e4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005918:	f7fc fe64 	bl	80025e4 <HAL_GetTick>
 800591c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	0d1b      	lsrs	r3, r3, #20
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592e:	e054      	b.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d050      	beq.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005938:	f7fc fe54 	bl	80025e4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	429a      	cmp	r2, r3
 8005946:	d902      	bls.n	800594e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d13d      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800595c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d111      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d004      	beq.n	800597c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d107      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005994:	d10f      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e017      	b.n	80059fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d19b      	bne.n	8005930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2000002c 	.word	0x2000002c

08005a08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a1a:	f7fc fde3 	bl	80025e4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	4413      	add	r3, r2
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a2a:	f7fc fddb 	bl	80025e4 <HAL_GetTick>
 8005a2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a38:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	00da      	lsls	r2, r3, #3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	0d1b      	lsrs	r3, r3, #20
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a50:	e060      	b.n	8005b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a58:	d107      	bne.n	8005a6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d050      	beq.n	8005b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a72:	f7fc fdb7 	bl	80025e4 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d902      	bls.n	8005a88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d13d      	bne.n	8005b04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa0:	d111      	bne.n	8005ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aaa:	d004      	beq.n	8005ab6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	d107      	bne.n	8005ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ace:	d10f      	bne.n	8005af0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e010      	b.n	8005b26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d196      	bne.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3728      	adds	r7, #40	; 0x28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	2000002c 	.word	0x2000002c

08005b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff5b 	bl	8005a08 <SPI_WaitFifoStateUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e046      	b.n	8005bf6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <SPI_EndRxTxTransaction+0xcc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <SPI_EndRxTxTransaction+0xd0>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0d5b      	lsrs	r3, r3, #21
 8005b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b86:	d112      	bne.n	8005bae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff feb0 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d016      	beq.n	8005bcc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e023      	b.n	8005bf6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d0f2      	beq.n	8005bae <SPI_EndRxTxTransaction+0x7a>
 8005bc8:	e000      	b.n	8005bcc <SPI_EndRxTxTransaction+0x98>
        break;
 8005bca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ff15 	bl	8005a08 <SPI_WaitFifoStateUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e000      	b.n	8005bf6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000002c 	.word	0x2000002c
 8005c04:	165e9f81 	.word	0x165e9f81

08005c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f841 	bl	8005cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 fb6a 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d001      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e054      	b.n	8005d8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d01d      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	; (8005da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_TIM_Base_Start_IT+0xe0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d115      	bne.n	8005d78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_TIM_Base_Start_IT+0xec>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d015      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d64:	d011      	beq.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	e008      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40001800 	.word	0x40001800
 8005db8:	00010007 	.word	0x00010007

08005dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e049      	b.n	8005e62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb ffda 	bl	8001d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fa90 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d122      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d11b      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f06f 0202 	mvn.w	r2, #2
 8005e96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa19 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005eb2:	e005      	b.n	8005ec0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa0b 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa1c 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d122      	bne.n	8005f1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d11b      	bne.n	8005f1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f06f 0204 	mvn.w	r2, #4
 8005eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f9ef 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005f06:	e005      	b.n	8005f14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f9e1 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9f2 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d122      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d11b      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0208 	mvn.w	r2, #8
 8005f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2204      	movs	r2, #4
 8005f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9c5 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005f5a:	e005      	b.n	8005f68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f9b7 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9c8 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d122      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d11b      	bne.n	8005fc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f06f 0210 	mvn.w	r2, #16
 8005f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2208      	movs	r2, #8
 8005f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f99b 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005fae:	e005      	b.n	8005fbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f98d 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f99e 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d10e      	bne.n	8005fee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0201 	mvn.w	r2, #1
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fb f9cd 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d10e      	bne.n	800601a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fd19 	bl	8006a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fd0c 	bl	8006a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f94c 	bl	800630c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fccc 	bl	8006a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0ff      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b14      	cmp	r3, #20
 80060d2:	f200 80f0 	bhi.w	80062b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080062b7 	.word	0x080062b7
 80060e4:	080062b7 	.word	0x080062b7
 80060e8:	080062b7 	.word	0x080062b7
 80060ec:	08006171 	.word	0x08006171
 80060f0:	080062b7 	.word	0x080062b7
 80060f4:	080062b7 	.word	0x080062b7
 80060f8:	080062b7 	.word	0x080062b7
 80060fc:	080061b3 	.word	0x080061b3
 8006100:	080062b7 	.word	0x080062b7
 8006104:	080062b7 	.word	0x080062b7
 8006108:	080062b7 	.word	0x080062b7
 800610c:	080061f3 	.word	0x080061f3
 8006110:	080062b7 	.word	0x080062b7
 8006114:	080062b7 	.word	0x080062b7
 8006118:	080062b7 	.word	0x080062b7
 800611c:	08006235 	.word	0x08006235
 8006120:	080062b7 	.word	0x080062b7
 8006124:	080062b7 	.word	0x080062b7
 8006128:	080062b7 	.word	0x080062b7
 800612c:	08006275 	.word	0x08006275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f992 	bl	8006460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0208 	orr.w	r2, r2, #8
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0204 	bic.w	r2, r2, #4
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	619a      	str	r2, [r3, #24]
      break;
 800616e:	e0a5      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f9e4 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6999      	ldr	r1, [r3, #24]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	021a      	lsls	r2, r3, #8
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	619a      	str	r2, [r3, #24]
      break;
 80061b0:	e084      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fa3b 	bl	8006634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0208 	orr.w	r2, r2, #8
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0204 	bic.w	r2, r2, #4
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	61da      	str	r2, [r3, #28]
      break;
 80061f0:	e064      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fa91 	bl	8006720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	021a      	lsls	r2, r3, #8
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	61da      	str	r2, [r3, #28]
      break;
 8006232:	e043      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fac8 	bl	80067d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0208 	orr.w	r2, r2, #8
 800624e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0204 	bic.w	r2, r2, #4
 800625e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006272:	e023      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fafa 	bl	8006874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	021a      	lsls	r2, r3, #8
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062b4:	e002      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop

080062d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a40      	ldr	r2, [pc, #256]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3d      	ldr	r2, [pc, #244]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3a      	ldr	r2, [pc, #232]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d027      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d023      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a29      	ldr	r2, [pc, #164]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d017      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_Base_SetConfig+0x128>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <TIM_Base_SetConfig+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <TIM_Base_SetConfig+0x130>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <TIM_Base_SetConfig+0x134>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a24      	ldr	r2, [pc, #144]	; (8006458 <TIM_Base_SetConfig+0x138>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <TIM_Base_SetConfig+0x13c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <TIM_Base_SetConfig+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0c      	ldr	r2, [pc, #48]	; (8006444 <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40001800 	.word	0x40001800
 8006458:	40001c00 	.word	0x40001c00
 800645c:	40002000 	.word	0x40002000

08006460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <TIM_OC1_SetConfig+0xd8>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0302 	bic.w	r3, r3, #2
 80064a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <TIM_OC1_SetConfig+0xdc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC1_SetConfig+0x64>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a20      	ldr	r2, [pc, #128]	; (8006540 <TIM_OC1_SetConfig+0xe0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d10c      	bne.n	80064de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0308 	bic.w	r3, r3, #8
 80064ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a16      	ldr	r2, [pc, #88]	; (800653c <TIM_OC1_SetConfig+0xdc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_OC1_SetConfig+0x8e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <TIM_OC1_SetConfig+0xe0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d111      	bne.n	8006512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	621a      	str	r2, [r3, #32]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	fffeff8f 	.word	0xfffeff8f
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 8006570:	4013      	ands	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0320 	bic.w	r3, r3, #32
 800658e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a23      	ldr	r2, [pc, #140]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC2_SetConfig+0x68>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a22      	ldr	r2, [pc, #136]	; (8006630 <TIM_OC2_SetConfig+0xec>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10d      	bne.n	80065c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x94>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <TIM_OC2_SetConfig+0xec>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d113      	bne.n	8006600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	feff8fff 	.word	0xfeff8fff
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400

08006634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4b2d      	ldr	r3, [pc, #180]	; (8006714 <TIM_OC3_SetConfig+0xe0>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a22      	ldr	r2, [pc, #136]	; (8006718 <TIM_OC3_SetConfig+0xe4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_OC3_SetConfig+0x66>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a21      	ldr	r2, [pc, #132]	; (800671c <TIM_OC3_SetConfig+0xe8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10d      	bne.n	80066b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC3_SetConfig+0xe4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d003      	beq.n	80066c6 <TIM_OC3_SetConfig+0x92>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <TIM_OC3_SetConfig+0xe8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	fffeff8f 	.word	0xfffeff8f
 8006718:	40010000 	.word	0x40010000
 800671c:	40010400 	.word	0x40010400

08006720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <TIM_OC4_SetConfig+0xa4>)
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800676a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <TIM_OC4_SetConfig+0xa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC4_SetConfig+0x68>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <TIM_OC4_SetConfig+0xac>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d109      	bne.n	800679c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	019b      	lsls	r3, r3, #6
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	feff8fff 	.word	0xfeff8fff
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <TIM_OC5_SetConfig+0x98>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a12      	ldr	r2, [pc, #72]	; (800686c <TIM_OC5_SetConfig+0x9c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC5_SetConfig+0x5e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a11      	ldr	r2, [pc, #68]	; (8006870 <TIM_OC5_SetConfig+0xa0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d109      	bne.n	8006842 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	fffeff8f 	.word	0xfffeff8f
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <TIM_OC6_SetConfig+0x9c>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a13      	ldr	r2, [pc, #76]	; (8006914 <TIM_OC6_SetConfig+0xa0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_OC6_SetConfig+0x60>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <TIM_OC6_SetConfig+0xa4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d109      	bne.n	80068e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	feff8fff 	.word	0xfeff8fff
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006930:	2302      	movs	r3, #2
 8006932:	e06d      	b.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d108      	bne.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800696e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d022      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d01d      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d018      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1a      	ldr	r2, [pc, #104]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00e      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10c      	bne.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40010400 	.word	0x40010400
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40001800 	.word	0x40001800

08006a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e040      	b.n	8006b08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb fa08 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2224      	movs	r2, #36	; 0x24
 8006aa0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fb82 	bl	80071bc <UART_SetConfig>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e022      	b.n	8006b08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fdda 	bl	8007684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fe61 	bl	80077c8 <UART_CheckIdleState>
 8006b06:	4603      	mov	r3, r0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d132      	bne.n	8006b8e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <HAL_UART_Receive_IT+0x24>
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e02b      	b.n	8006b90 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d018      	beq.n	8006b7e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	69f9      	ldr	r1, [r7, #28]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	461a      	mov	r2, r3
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 ff33 	bl	80079f0 <UART_Start_Receive_IT>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
  }
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3728      	adds	r7, #40	; 0x28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b0ba      	sub	sp, #232	; 0xe8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d115      	bne.n	8006c00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00f      	beq.n	8006c00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 82ac 	beq.w	800714e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
      }
      return;
 8006bfe:	e2a6      	b.n	800714e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8117 	beq.w	8006e38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c1a:	4b85      	ldr	r3, [pc, #532]	; (8006e30 <HAL_UART_IRQHandler+0x298>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 810a 	beq.w	8006e38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0xbc>
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2201      	movs	r2, #1
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d011      	beq.n	8006c84 <HAL_UART_IRQHandler+0xec>
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2202      	movs	r2, #2
 8006c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d011      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x11c>
 8006c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2208      	movs	r2, #8
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce6:	f043 0208 	orr.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d012      	beq.n	8006d22 <HAL_UART_IRQHandler+0x18a>
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8212 	beq.w	8007152 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d04f      	beq.n	8006e1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fefe 	bl	8007b7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d141      	bne.n	8006e12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1d9      	bne.n	8006d8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d013      	beq.n	8006e0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <HAL_UART_IRQHandler+0x29c>)
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fb ff68 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	e00f      	b.n	8006e2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9b6 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e00b      	b.n	8006e2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9b2 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e007      	b.n	8006e2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9ae 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e28:	e193      	b.n	8007152 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2a:	bf00      	nop
    return;
 8006e2c:	e191      	b.n	8007152 <HAL_UART_IRQHandler+0x5ba>
 8006e2e:	bf00      	nop
 8006e30:	04000120 	.word	0x04000120
 8006e34:	08007c45 	.word	0x08007c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	f040 814c 	bne.w	80070da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8145 	beq.w	80070da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 813e 	beq.w	80070da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2210      	movs	r2, #16
 8006e64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	f040 80b6 	bne.w	8006fe2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8165 	beq.w	8007156 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e96:	429a      	cmp	r2, r3
 8006e98:	f080 815d 	bcs.w	8007156 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb0:	f000 8086 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ee2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1da      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e1      	bne.n	8006efe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e3      	bne.n	8006f3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f90:	f023 0310 	bic.w	r3, r3, #16
 8006f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e4      	bne.n	8006f80 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fb fe12 	bl	8002be4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8d8 	bl	8007190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe0:	e0b9      	b.n	8007156 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80ab 	beq.w	800715a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80a6 	beq.w	800715a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e4      	bne.n	800700e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	623b      	str	r3, [r7, #32]
   return(result);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007068:	633a      	str	r2, [r7, #48]	; 0x30
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e3      	bne.n	8007044 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	60fb      	str	r3, [r7, #12]
   return(result);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 0310 	bic.w	r3, r3, #16
 80070a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	69b9      	ldr	r1, [r7, #24]
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	617b      	str	r3, [r7, #20]
   return(result);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e4      	bne.n	8007090 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f85c 	bl	8007190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d8:	e03f      	b.n	800715a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <HAL_UART_IRQHandler+0x56c>
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f853 	bl	80071a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007102:	e02d      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00e      	beq.n	800712e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01c      	beq.n	800715e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
    }
    return;
 800712c:	e017      	b.n	800715e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d012      	beq.n	8007160 <HAL_UART_IRQHandler+0x5c8>
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fd92 	bl	8007c70 <UART_EndTransmit_IT>
    return;
 800714c:	e008      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
      return;
 800714e:	bf00      	nop
 8007150:	e006      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
      return;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_UART_IRQHandler+0x5c8>
    return;
 800715e:	bf00      	nop
  }

}
 8007160:	37e8      	adds	r7, #232	; 0xe8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4ba6      	ldr	r3, [pc, #664]	; (8007480 <UART_SetConfig+0x2c4>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	6979      	ldr	r1, [r7, #20]
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	430a      	orrs	r2, r1
 800722c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a94      	ldr	r2, [pc, #592]	; (8007484 <UART_SetConfig+0x2c8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d120      	bne.n	800727a <UART_SetConfig+0xbe>
 8007238:	4b93      	ldr	r3, [pc, #588]	; (8007488 <UART_SetConfig+0x2cc>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d816      	bhi.n	8007274 <UART_SetConfig+0xb8>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0x90>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	0800725d 	.word	0x0800725d
 8007250:	08007269 	.word	0x08007269
 8007254:	08007263 	.word	0x08007263
 8007258:	0800726f 	.word	0x0800726f
 800725c:	2301      	movs	r3, #1
 800725e:	77fb      	strb	r3, [r7, #31]
 8007260:	e150      	b.n	8007504 <UART_SetConfig+0x348>
 8007262:	2302      	movs	r3, #2
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e14d      	b.n	8007504 <UART_SetConfig+0x348>
 8007268:	2304      	movs	r3, #4
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e14a      	b.n	8007504 <UART_SetConfig+0x348>
 800726e:	2308      	movs	r3, #8
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e147      	b.n	8007504 <UART_SetConfig+0x348>
 8007274:	2310      	movs	r3, #16
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e144      	b.n	8007504 <UART_SetConfig+0x348>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a83      	ldr	r2, [pc, #524]	; (800748c <UART_SetConfig+0x2d0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d132      	bne.n	80072ea <UART_SetConfig+0x12e>
 8007284:	4b80      	ldr	r3, [pc, #512]	; (8007488 <UART_SetConfig+0x2cc>)
 8007286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d828      	bhi.n	80072e4 <UART_SetConfig+0x128>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0xdc>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072cd 	.word	0x080072cd
 800729c:	080072e5 	.word	0x080072e5
 80072a0:	080072e5 	.word	0x080072e5
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	080072d9 	.word	0x080072d9
 80072ac:	080072e5 	.word	0x080072e5
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080072e5 	.word	0x080072e5
 80072b8:	080072d3 	.word	0x080072d3
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072df 	.word	0x080072df
 80072cc:	2300      	movs	r3, #0
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e118      	b.n	8007504 <UART_SetConfig+0x348>
 80072d2:	2302      	movs	r3, #2
 80072d4:	77fb      	strb	r3, [r7, #31]
 80072d6:	e115      	b.n	8007504 <UART_SetConfig+0x348>
 80072d8:	2304      	movs	r3, #4
 80072da:	77fb      	strb	r3, [r7, #31]
 80072dc:	e112      	b.n	8007504 <UART_SetConfig+0x348>
 80072de:	2308      	movs	r3, #8
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e10f      	b.n	8007504 <UART_SetConfig+0x348>
 80072e4:	2310      	movs	r3, #16
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e10c      	b.n	8007504 <UART_SetConfig+0x348>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a68      	ldr	r2, [pc, #416]	; (8007490 <UART_SetConfig+0x2d4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d120      	bne.n	8007336 <UART_SetConfig+0x17a>
 80072f4:	4b64      	ldr	r3, [pc, #400]	; (8007488 <UART_SetConfig+0x2cc>)
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072fe:	2b30      	cmp	r3, #48	; 0x30
 8007300:	d013      	beq.n	800732a <UART_SetConfig+0x16e>
 8007302:	2b30      	cmp	r3, #48	; 0x30
 8007304:	d814      	bhi.n	8007330 <UART_SetConfig+0x174>
 8007306:	2b20      	cmp	r3, #32
 8007308:	d009      	beq.n	800731e <UART_SetConfig+0x162>
 800730a:	2b20      	cmp	r3, #32
 800730c:	d810      	bhi.n	8007330 <UART_SetConfig+0x174>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <UART_SetConfig+0x15c>
 8007312:	2b10      	cmp	r3, #16
 8007314:	d006      	beq.n	8007324 <UART_SetConfig+0x168>
 8007316:	e00b      	b.n	8007330 <UART_SetConfig+0x174>
 8007318:	2300      	movs	r3, #0
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e0f2      	b.n	8007504 <UART_SetConfig+0x348>
 800731e:	2302      	movs	r3, #2
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e0ef      	b.n	8007504 <UART_SetConfig+0x348>
 8007324:	2304      	movs	r3, #4
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e0ec      	b.n	8007504 <UART_SetConfig+0x348>
 800732a:	2308      	movs	r3, #8
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e0e9      	b.n	8007504 <UART_SetConfig+0x348>
 8007330:	2310      	movs	r3, #16
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e0e6      	b.n	8007504 <UART_SetConfig+0x348>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a56      	ldr	r2, [pc, #344]	; (8007494 <UART_SetConfig+0x2d8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d120      	bne.n	8007382 <UART_SetConfig+0x1c6>
 8007340:	4b51      	ldr	r3, [pc, #324]	; (8007488 <UART_SetConfig+0x2cc>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800734a:	2bc0      	cmp	r3, #192	; 0xc0
 800734c:	d013      	beq.n	8007376 <UART_SetConfig+0x1ba>
 800734e:	2bc0      	cmp	r3, #192	; 0xc0
 8007350:	d814      	bhi.n	800737c <UART_SetConfig+0x1c0>
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d009      	beq.n	800736a <UART_SetConfig+0x1ae>
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d810      	bhi.n	800737c <UART_SetConfig+0x1c0>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <UART_SetConfig+0x1a8>
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d006      	beq.n	8007370 <UART_SetConfig+0x1b4>
 8007362:	e00b      	b.n	800737c <UART_SetConfig+0x1c0>
 8007364:	2300      	movs	r3, #0
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e0cc      	b.n	8007504 <UART_SetConfig+0x348>
 800736a:	2302      	movs	r3, #2
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	e0c9      	b.n	8007504 <UART_SetConfig+0x348>
 8007370:	2304      	movs	r3, #4
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e0c6      	b.n	8007504 <UART_SetConfig+0x348>
 8007376:	2308      	movs	r3, #8
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e0c3      	b.n	8007504 <UART_SetConfig+0x348>
 800737c:	2310      	movs	r3, #16
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e0c0      	b.n	8007504 <UART_SetConfig+0x348>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a44      	ldr	r2, [pc, #272]	; (8007498 <UART_SetConfig+0x2dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d125      	bne.n	80073d8 <UART_SetConfig+0x21c>
 800738c:	4b3e      	ldr	r3, [pc, #248]	; (8007488 <UART_SetConfig+0x2cc>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800739a:	d017      	beq.n	80073cc <UART_SetConfig+0x210>
 800739c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a0:	d817      	bhi.n	80073d2 <UART_SetConfig+0x216>
 80073a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a6:	d00b      	beq.n	80073c0 <UART_SetConfig+0x204>
 80073a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ac:	d811      	bhi.n	80073d2 <UART_SetConfig+0x216>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <UART_SetConfig+0x1fe>
 80073b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b6:	d006      	beq.n	80073c6 <UART_SetConfig+0x20a>
 80073b8:	e00b      	b.n	80073d2 <UART_SetConfig+0x216>
 80073ba:	2300      	movs	r3, #0
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e0a1      	b.n	8007504 <UART_SetConfig+0x348>
 80073c0:	2302      	movs	r3, #2
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e09e      	b.n	8007504 <UART_SetConfig+0x348>
 80073c6:	2304      	movs	r3, #4
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e09b      	b.n	8007504 <UART_SetConfig+0x348>
 80073cc:	2308      	movs	r3, #8
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e098      	b.n	8007504 <UART_SetConfig+0x348>
 80073d2:	2310      	movs	r3, #16
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e095      	b.n	8007504 <UART_SetConfig+0x348>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2f      	ldr	r2, [pc, #188]	; (800749c <UART_SetConfig+0x2e0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d125      	bne.n	800742e <UART_SetConfig+0x272>
 80073e2:	4b29      	ldr	r3, [pc, #164]	; (8007488 <UART_SetConfig+0x2cc>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073f0:	d017      	beq.n	8007422 <UART_SetConfig+0x266>
 80073f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073f6:	d817      	bhi.n	8007428 <UART_SetConfig+0x26c>
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fc:	d00b      	beq.n	8007416 <UART_SetConfig+0x25a>
 80073fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007402:	d811      	bhi.n	8007428 <UART_SetConfig+0x26c>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <UART_SetConfig+0x254>
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d006      	beq.n	800741c <UART_SetConfig+0x260>
 800740e:	e00b      	b.n	8007428 <UART_SetConfig+0x26c>
 8007410:	2301      	movs	r3, #1
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e076      	b.n	8007504 <UART_SetConfig+0x348>
 8007416:	2302      	movs	r3, #2
 8007418:	77fb      	strb	r3, [r7, #31]
 800741a:	e073      	b.n	8007504 <UART_SetConfig+0x348>
 800741c:	2304      	movs	r3, #4
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e070      	b.n	8007504 <UART_SetConfig+0x348>
 8007422:	2308      	movs	r3, #8
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e06d      	b.n	8007504 <UART_SetConfig+0x348>
 8007428:	2310      	movs	r3, #16
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e06a      	b.n	8007504 <UART_SetConfig+0x348>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1b      	ldr	r2, [pc, #108]	; (80074a0 <UART_SetConfig+0x2e4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d138      	bne.n	80074aa <UART_SetConfig+0x2ee>
 8007438:	4b13      	ldr	r3, [pc, #76]	; (8007488 <UART_SetConfig+0x2cc>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007446:	d017      	beq.n	8007478 <UART_SetConfig+0x2bc>
 8007448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800744c:	d82a      	bhi.n	80074a4 <UART_SetConfig+0x2e8>
 800744e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007452:	d00b      	beq.n	800746c <UART_SetConfig+0x2b0>
 8007454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007458:	d824      	bhi.n	80074a4 <UART_SetConfig+0x2e8>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <UART_SetConfig+0x2aa>
 800745e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007462:	d006      	beq.n	8007472 <UART_SetConfig+0x2b6>
 8007464:	e01e      	b.n	80074a4 <UART_SetConfig+0x2e8>
 8007466:	2300      	movs	r3, #0
 8007468:	77fb      	strb	r3, [r7, #31]
 800746a:	e04b      	b.n	8007504 <UART_SetConfig+0x348>
 800746c:	2302      	movs	r3, #2
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e048      	b.n	8007504 <UART_SetConfig+0x348>
 8007472:	2304      	movs	r3, #4
 8007474:	77fb      	strb	r3, [r7, #31]
 8007476:	e045      	b.n	8007504 <UART_SetConfig+0x348>
 8007478:	2308      	movs	r3, #8
 800747a:	77fb      	strb	r3, [r7, #31]
 800747c:	e042      	b.n	8007504 <UART_SetConfig+0x348>
 800747e:	bf00      	nop
 8007480:	efff69f3 	.word	0xefff69f3
 8007484:	40011000 	.word	0x40011000
 8007488:	40023800 	.word	0x40023800
 800748c:	40004400 	.word	0x40004400
 8007490:	40004800 	.word	0x40004800
 8007494:	40004c00 	.word	0x40004c00
 8007498:	40005000 	.word	0x40005000
 800749c:	40011400 	.word	0x40011400
 80074a0:	40007800 	.word	0x40007800
 80074a4:	2310      	movs	r3, #16
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e02c      	b.n	8007504 <UART_SetConfig+0x348>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a72      	ldr	r2, [pc, #456]	; (8007678 <UART_SetConfig+0x4bc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d125      	bne.n	8007500 <UART_SetConfig+0x344>
 80074b4:	4b71      	ldr	r3, [pc, #452]	; (800767c <UART_SetConfig+0x4c0>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074c2:	d017      	beq.n	80074f4 <UART_SetConfig+0x338>
 80074c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074c8:	d817      	bhi.n	80074fa <UART_SetConfig+0x33e>
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d00b      	beq.n	80074e8 <UART_SetConfig+0x32c>
 80074d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d4:	d811      	bhi.n	80074fa <UART_SetConfig+0x33e>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <UART_SetConfig+0x326>
 80074da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074de:	d006      	beq.n	80074ee <UART_SetConfig+0x332>
 80074e0:	e00b      	b.n	80074fa <UART_SetConfig+0x33e>
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e00d      	b.n	8007504 <UART_SetConfig+0x348>
 80074e8:	2302      	movs	r3, #2
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e00a      	b.n	8007504 <UART_SetConfig+0x348>
 80074ee:	2304      	movs	r3, #4
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e007      	b.n	8007504 <UART_SetConfig+0x348>
 80074f4:	2308      	movs	r3, #8
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e004      	b.n	8007504 <UART_SetConfig+0x348>
 80074fa:	2310      	movs	r3, #16
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e001      	b.n	8007504 <UART_SetConfig+0x348>
 8007500:	2310      	movs	r3, #16
 8007502:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	d15b      	bne.n	80075c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800750e:	7ffb      	ldrb	r3, [r7, #31]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d828      	bhi.n	8007566 <UART_SetConfig+0x3aa>
 8007514:	a201      	add	r2, pc, #4	; (adr r2, 800751c <UART_SetConfig+0x360>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	08007541 	.word	0x08007541
 8007520:	08007549 	.word	0x08007549
 8007524:	08007551 	.word	0x08007551
 8007528:	08007567 	.word	0x08007567
 800752c:	08007557 	.word	0x08007557
 8007530:	08007567 	.word	0x08007567
 8007534:	08007567 	.word	0x08007567
 8007538:	08007567 	.word	0x08007567
 800753c:	0800755f 	.word	0x0800755f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007540:	f7fd f9aa 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8007544:	61b8      	str	r0, [r7, #24]
        break;
 8007546:	e013      	b.n	8007570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007548:	f7fd f9ba 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 800754c:	61b8      	str	r0, [r7, #24]
        break;
 800754e:	e00f      	b.n	8007570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007550:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <UART_SetConfig+0x4c4>)
 8007552:	61bb      	str	r3, [r7, #24]
        break;
 8007554:	e00c      	b.n	8007570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007556:	f7fd f88d 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800755a:	61b8      	str	r0, [r7, #24]
        break;
 800755c:	e008      	b.n	8007570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007562:	61bb      	str	r3, [r7, #24]
        break;
 8007564:	e004      	b.n	8007570 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	77bb      	strb	r3, [r7, #30]
        break;
 800756e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d074      	beq.n	8007660 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	005a      	lsls	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	441a      	add	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	d916      	bls.n	80075c0 <UART_SetConfig+0x404>
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007598:	d212      	bcs.n	80075c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f023 030f 	bic.w	r3, r3, #15
 80075a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	89fb      	ldrh	r3, [r7, #14]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	89fa      	ldrh	r2, [r7, #14]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	e04f      	b.n	8007660 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	77bb      	strb	r3, [r7, #30]
 80075c4:	e04c      	b.n	8007660 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075c6:	7ffb      	ldrb	r3, [r7, #31]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d828      	bhi.n	800761e <UART_SetConfig+0x462>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <UART_SetConfig+0x418>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007601 	.word	0x08007601
 80075dc:	08007609 	.word	0x08007609
 80075e0:	0800761f 	.word	0x0800761f
 80075e4:	0800760f 	.word	0x0800760f
 80075e8:	0800761f 	.word	0x0800761f
 80075ec:	0800761f 	.word	0x0800761f
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	08007617 	.word	0x08007617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7fd f94e 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80075fc:	61b8      	str	r0, [r7, #24]
        break;
 80075fe:	e013      	b.n	8007628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007600:	f7fd f95e 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8007604:	61b8      	str	r0, [r7, #24]
        break;
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007608:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <UART_SetConfig+0x4c4>)
 800760a:	61bb      	str	r3, [r7, #24]
        break;
 800760c:	e00c      	b.n	8007628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800760e:	f7fd f831 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8007612:	61b8      	str	r0, [r7, #24]
        break;
 8007614:	e008      	b.n	8007628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	61bb      	str	r3, [r7, #24]
        break;
 800761c:	e004      	b.n	8007628 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	77bb      	strb	r3, [r7, #30]
        break;
 8007626:	bf00      	nop
    }

    if (pclk != 0U)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d018      	beq.n	8007660 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	085a      	lsrs	r2, r3, #1
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	441a      	add	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b0f      	cmp	r3, #15
 8007646:	d909      	bls.n	800765c <UART_SetConfig+0x4a0>
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764e:	d205      	bcs.n	800765c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	b29a      	uxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60da      	str	r2, [r3, #12]
 800765a:	e001      	b.n	8007660 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800766c:	7fbb      	ldrb	r3, [r7, #30]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40007c00 	.word	0x40007c00
 800767c:	40023800 	.word	0x40023800
 8007680:	00f42400 	.word	0x00f42400

08007684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01a      	beq.n	800779a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007782:	d10a      	bne.n	800779a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077d8:	f7fa ff04 	bl	80025e4 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d10e      	bne.n	800780a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f831 	bl	8007862 <UART_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e027      	b.n	800785a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d10e      	bne.n	8007836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f81b 	bl	8007862 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e011      	b.n	800785a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b09c      	sub	sp, #112	; 0x70
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007872:	e0a7      	b.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	f000 80a3 	beq.w	80079c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787e:	f7fa feb1 	bl	80025e4 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800788a:	429a      	cmp	r2, r3
 800788c:	d302      	bcc.n	8007894 <UART_WaitOnFlagUntilTimeout+0x32>
 800788e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13f      	bne.n	8007914 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078a8:	667b      	str	r3, [r7, #100]	; 0x64
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e6      	bne.n	8007894 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3308      	adds	r3, #8
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	f023 0301 	bic.w	r3, r3, #1
 80078dc:	663b      	str	r3, [r7, #96]	; 0x60
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3308      	adds	r3, #8
 80078e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e5      	bne.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e068      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d050      	beq.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007930:	d148      	bne.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800793a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
 800795c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e6      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	66bb      	str	r3, [r7, #104]	; 0x68
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800798e:	623a      	str	r2, [r7, #32]
 8007990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	61bb      	str	r3, [r7, #24]
   return(result);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e5      	bne.n	800796e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e010      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	f43f af48 	beq.w	8007874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3770      	adds	r7, #112	; 0x70
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b097      	sub	sp, #92	; 0x5c
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d10e      	bne.n	8007a42 <UART_Start_Receive_IT+0x52>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <UART_Start_Receive_IT+0x48>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a36:	e02d      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	22ff      	movs	r2, #255	; 0xff
 8007a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a40:	e028      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10d      	bne.n	8007a66 <UART_Start_Receive_IT+0x76>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <UART_Start_Receive_IT+0x6c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a5a:	e01b      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	227f      	movs	r2, #127	; 0x7f
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a64:	e016      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a6e:	d10d      	bne.n	8007a8c <UART_Start_Receive_IT+0x9c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <UART_Start_Receive_IT+0x92>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	227f      	movs	r2, #127	; 0x7f
 8007a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a80:	e008      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	223f      	movs	r2, #63	; 0x3f
 8007a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a8a:	e003      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2222      	movs	r2, #34	; 0x22
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	657b      	str	r3, [r7, #84]	; 0x54
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ac4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ac6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae0:	d107      	bne.n	8007af2 <UART_Start_Receive_IT+0x102>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <UART_Start_Receive_IT+0x184>)
 8007aee:	669a      	str	r2, [r3, #104]	; 0x68
 8007af0:	e002      	b.n	8007af8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a20      	ldr	r2, [pc, #128]	; (8007b78 <UART_Start_Receive_IT+0x188>)
 8007af6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d019      	beq.n	8007b34 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e6      	bne.n	8007b00 <UART_Start_Receive_IT+0x110>
 8007b32:	e018      	b.n	8007b66 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	613b      	str	r3, [r7, #16]
   return(result);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f043 0320 	orr.w	r3, r3, #32
 8007b48:	653b      	str	r3, [r7, #80]	; 0x50
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b52:	623b      	str	r3, [r7, #32]
 8007b54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	69f9      	ldr	r1, [r7, #28]
 8007b58:	6a3a      	ldr	r2, [r7, #32]
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	375c      	adds	r7, #92	; 0x5c
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	08007e2b 	.word	0x08007e2b
 8007b78:	08007cc5 	.word	0x08007cc5

08007b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b095      	sub	sp, #84	; 0x54
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e6      	bne.n	8007b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d118      	bne.n	8007c24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f023 0310 	bic.w	r3, r3, #16
 8007c06:	647b      	str	r3, [r7, #68]	; 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c38:	bf00      	nop
 8007c3a:	3754      	adds	r7, #84	; 0x54
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fa8a 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6979      	ldr	r1, [r7, #20]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e6      	bne.n	8007c78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fa56 	bl	8007168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbc:	bf00      	nop
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b096      	sub	sp, #88	; 0x58
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cd2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cdc:	2b22      	cmp	r3, #34	; 0x22
 8007cde:	f040 8098 	bne.w	8007e12 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007cf0:	b2d9      	uxtb	r1, r3
 8007cf2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	400a      	ands	r2, r1
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d17b      	bne.n	8007e22 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d48:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d12e      	bne.n	8007e0a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d103      	bne.n	8007dfa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2210      	movs	r2, #16
 8007df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff f9c4 	bl	8007190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e08:	e00b      	b.n	8007e22 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7f9 fa96 	bl	800133c <HAL_UART_RxCpltCallback>
}
 8007e10:	e007      	b.n	8007e22 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0208 	orr.w	r2, r2, #8
 8007e20:	619a      	str	r2, [r3, #24]
}
 8007e22:	bf00      	nop
 8007e24:	3758      	adds	r7, #88	; 0x58
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b096      	sub	sp, #88	; 0x58
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e42:	2b22      	cmp	r3, #34	; 0x22
 8007e44:	f040 8098 	bne.w	8007f78 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e58:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007e5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e60:	4013      	ands	r3, r2
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e66:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6c:	1c9a      	adds	r2, r3, #2
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d17b      	bne.n	8007f88 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
 8007eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e6      	bne.n	8007e90 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	f023 0301 	bic.w	r3, r3, #1
 8007ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d12e      	bne.n	8007f70 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0310 	bic.w	r3, r3, #16
 8007f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d103      	bne.n	8007f60 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff f911 	bl	8007190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f6e:	e00b      	b.n	8007f88 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7f9 f9e3 	bl	800133c <HAL_UART_RxCpltCallback>
}
 8007f76:	e007      	b.n	8007f88 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0208 	orr.w	r2, r2, #8
 8007f86:	619a      	str	r2, [r3, #24]
}
 8007f88:	bf00      	nop
 8007f8a:	3758      	adds	r7, #88	; 0x58
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007f94:	bf00      	nop
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa6:	f3ef 8305 	mrs	r3, IPSR
 8007faa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10f      	bne.n	8007fd2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb6:	607b      	str	r3, [r7, #4]
  return(result);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <osKernelInitialize+0x3a>
 8007fca:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <osKernelInitialize+0x64>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d103      	bne.n	8007fda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007fd2:	f06f 0305 	mvn.w	r3, #5
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e00c      	b.n	8007ff4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fda:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <osKernelInitialize+0x64>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <osKernelInitialize+0x64>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e002      	b.n	8007ff4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000790 	.word	0x20000790

08008008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800800e:	f3ef 8305 	mrs	r3, IPSR
 8008012:	60bb      	str	r3, [r7, #8]
  return(result);
 8008014:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10f      	bne.n	800803a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801a:	f3ef 8310 	mrs	r3, PRIMASK
 800801e:	607b      	str	r3, [r7, #4]
  return(result);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008026:	f3ef 8311 	mrs	r3, BASEPRI
 800802a:	603b      	str	r3, [r7, #0]
  return(result);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <osKernelStart+0x3a>
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <osKernelStart+0x68>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <osKernelStart+0x3a>
    stat = osErrorISR;
 800803a:	f06f 0305 	mvn.w	r3, #5
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e010      	b.n	8008064 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <osKernelStart+0x68>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d109      	bne.n	800805e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800804a:	f7ff ffa1 	bl	8007f90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <osKernelStart+0x68>)
 8008050:	2202      	movs	r2, #2
 8008052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008054:	f001 fa4c 	bl	80094f0 <vTaskStartScheduler>
      stat = osOK;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e002      	b.n	8008064 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000790 	.word	0x20000790

08008074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008074:	b580      	push	{r7, lr}
 8008076:	b090      	sub	sp, #64	; 0x40
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008084:	f3ef 8305 	mrs	r3, IPSR
 8008088:	61fb      	str	r3, [r7, #28]
  return(result);
 800808a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 808f 	bne.w	80081b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008092:	f3ef 8310 	mrs	r3, PRIMASK
 8008096:	61bb      	str	r3, [r7, #24]
  return(result);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d105      	bne.n	80080aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800809e:	f3ef 8311 	mrs	r3, BASEPRI
 80080a2:	617b      	str	r3, [r7, #20]
  return(result);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <osThreadNew+0x3e>
 80080aa:	4b44      	ldr	r3, [pc, #272]	; (80081bc <osThreadNew+0x148>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d07e      	beq.n	80081b0 <osThreadNew+0x13c>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d07b      	beq.n	80081b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80080bc:	2318      	movs	r3, #24
 80080be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
 80080c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d045      	beq.n	800815c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <osThreadNew+0x6a>
        name = attr->name;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <osThreadNew+0x90>
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	2b38      	cmp	r3, #56	; 0x38
 80080f6:	d805      	bhi.n	8008104 <osThreadNew+0x90>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <osThreadNew+0x94>
        return (NULL);
 8008104:	2300      	movs	r3, #0
 8008106:	e054      	b.n	80081b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	089b      	lsrs	r3, r3, #2
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00e      	beq.n	800813e <osThreadNew+0xca>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2ba7      	cmp	r3, #167	; 0xa7
 8008126:	d90a      	bls.n	800813e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800812c:	2b00      	cmp	r3, #0
 800812e:	d006      	beq.n	800813e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <osThreadNew+0xca>
        mem = 1;
 8008138:	2301      	movs	r3, #1
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	e010      	b.n	8008160 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10c      	bne.n	8008160 <osThreadNew+0xec>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d108      	bne.n	8008160 <osThreadNew+0xec>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <osThreadNew+0xec>
          mem = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	e001      	b.n	8008160 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d110      	bne.n	8008188 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 fe3f 	bl	8008e00 <xTaskCreateStatic>
 8008182:	4603      	mov	r3, r0
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	e013      	b.n	80081b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d110      	bne.n	80081b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	b29a      	uxth	r2, r3
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fe90 	bl	8008ec6 <xTaskCreate>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d001      	beq.n	80081b0 <osThreadNew+0x13c>
          hTask = NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081b0:	693b      	ldr	r3, [r7, #16]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3730      	adds	r7, #48	; 0x30
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000790 	.word	0x20000790

080081c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c8:	f3ef 8305 	mrs	r3, IPSR
 80081cc:	613b      	str	r3, [r7, #16]
  return(result);
 80081ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10f      	bne.n	80081f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d4:	f3ef 8310 	mrs	r3, PRIMASK
 80081d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081e0:	f3ef 8311 	mrs	r3, BASEPRI
 80081e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <osDelay+0x3c>
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <osDelay+0x58>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d103      	bne.n	80081fc <osDelay+0x3c>
    stat = osErrorISR;
 80081f4:	f06f 0305 	mvn.w	r3, #5
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e007      	b.n	800820c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 ffba 	bl	8009180 <vTaskDelay>
    }
  }

  return (stat);
 800820c:	697b      	ldr	r3, [r7, #20]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000790 	.word	0x20000790

0800821c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a07      	ldr	r2, [pc, #28]	; (8008248 <vApplicationGetIdleTaskMemory+0x2c>)
 800822c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4a06      	ldr	r2, [pc, #24]	; (800824c <vApplicationGetIdleTaskMemory+0x30>)
 8008232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2280      	movs	r2, #128	; 0x80
 8008238:	601a      	str	r2, [r3, #0]
}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000794 	.word	0x20000794
 800824c:	2000083c 	.word	0x2000083c

08008250 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a07      	ldr	r2, [pc, #28]	; (800827c <vApplicationGetTimerTaskMemory+0x2c>)
 8008260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4a06      	ldr	r2, [pc, #24]	; (8008280 <vApplicationGetTimerTaskMemory+0x30>)
 8008266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800826e:	601a      	str	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000a3c 	.word	0x20000a3c
 8008280:	20000ae4 	.word	0x20000ae4

08008284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f103 0208 	add.w	r2, r3, #8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f04f 32ff 	mov.w	r2, #4294967295
 800829c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f103 0208 	add.w	r2, r3, #8
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 0208 	add.w	r2, r3, #8
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d103      	bne.n	8008346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e00c      	b.n	8008360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e002      	b.n	8008354 <vListInsert+0x2e>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d2f6      	bcs.n	800834e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	601a      	str	r2, [r3, #0]
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6892      	ldr	r2, [r2, #8]
 80083ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6852      	ldr	r2, [r2, #4]
 80083b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d103      	bne.n	80083cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10c      	bne.n	800841a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800841a:	f002 fa27 	bl	800a86c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800842a:	fb01 f303 	mul.w	r3, r1, r3
 800842e:	441a      	add	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	3b01      	subs	r3, #1
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008450:	fb01 f303 	mul.w	r3, r1, r3
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	22ff      	movs	r2, #255	; 0xff
 800845e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	22ff      	movs	r2, #255	; 0xff
 8008466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d114      	bne.n	800849a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01a      	beq.n	80084ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3310      	adds	r3, #16
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fadf 	bl	8009a40 <xTaskRemoveFromEventList>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d012      	beq.n	80084ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <xQueueGenericReset+0xd0>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	e009      	b.n	80084ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3310      	adds	r3, #16
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff fef0 	bl	8008284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3324      	adds	r3, #36	; 0x24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff feeb 	bl	8008284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084ae:	f002 fa11 	bl	800a8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084b2:	2301      	movs	r3, #1
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	; 0x38
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10c      	bne.n	80084ee <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	b672      	cpsid	i
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	b662      	cpsie	i
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	b672      	cpsid	i
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	b662      	cpsie	i
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <xQueueGenericCreateStatic+0x5a>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <xQueueGenericCreateStatic+0x5e>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <xQueueGenericCreateStatic+0x60>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10c      	bne.n	800853e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	b672      	cpsid	i
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	b662      	cpsie	i
 8008538:	623b      	str	r3, [r7, #32]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <xQueueGenericCreateStatic+0x8a>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <xQueueGenericCreateStatic+0x8e>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <xQueueGenericCreateStatic+0x90>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	61fb      	str	r3, [r7, #28]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800856e:	2350      	movs	r3, #80	; 0x50
 8008570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b50      	cmp	r3, #80	; 0x50
 8008576:	d00c      	beq.n	8008592 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	b672      	cpsid	i
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	b662      	cpsie	i
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00d      	beq.n	80085ba <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f805 	bl	80085c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085bc:	4618      	mov	r0, r3
 80085be:	3730      	adds	r7, #48	; 0x30
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d103      	bne.n	80085e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085f2:	2101      	movs	r1, #1
 80085f4:	69b8      	ldr	r0, [r7, #24]
 80085f6:	f7ff fef9 	bl	80083ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	78fa      	ldrb	r2, [r7, #3]
 80085fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800861a:	2300      	movs	r3, #0
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10c      	bne.n	8008642 <xQueueGenericSend+0x36>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	b672      	cpsid	i
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	b662      	cpsie	i
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d103      	bne.n	8008650 <xQueueGenericSend+0x44>
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <xQueueGenericSend+0x48>
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <xQueueGenericSend+0x4a>
 8008654:	2300      	movs	r3, #0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10c      	bne.n	8008674 <xQueueGenericSend+0x68>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	b672      	cpsid	i
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	b662      	cpsie	i
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d103      	bne.n	8008682 <xQueueGenericSend+0x76>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <xQueueGenericSend+0x7a>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <xQueueGenericSend+0x7c>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10c      	bne.n	80086a6 <xQueueGenericSend+0x9a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	623b      	str	r3, [r7, #32]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086a6:	f001 fb95 	bl	8009dd4 <xTaskGetSchedulerState>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <xQueueGenericSend+0xaa>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <xQueueGenericSend+0xae>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <xQueueGenericSend+0xb0>
 80086ba:	2300      	movs	r3, #0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10c      	bne.n	80086da <xQueueGenericSend+0xce>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	b672      	cpsid	i
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	b662      	cpsie	i
 80086d4:	61fb      	str	r3, [r7, #28]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086da:	f002 f8c7 	bl	800a86c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d302      	bcc.n	80086f0 <xQueueGenericSend+0xe4>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d129      	bne.n	8008744 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086f6:	f000 fa15 	bl	8008b24 <prvCopyDataToQueue>
 80086fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b00      	cmp	r3, #0
 8008702:	d010      	beq.n	8008726 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	3324      	adds	r3, #36	; 0x24
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f999 	bl	8009a40 <xTaskRemoveFromEventList>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008714:	4b3f      	ldr	r3, [pc, #252]	; (8008814 <xQueueGenericSend+0x208>)
 8008716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	e00a      	b.n	800873c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800872c:	4b39      	ldr	r3, [pc, #228]	; (8008814 <xQueueGenericSend+0x208>)
 800872e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800873c:	f002 f8ca 	bl	800a8d4 <vPortExitCritical>
				return pdPASS;
 8008740:	2301      	movs	r3, #1
 8008742:	e063      	b.n	800880c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800874a:	f002 f8c3 	bl	800a8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800874e:	2300      	movs	r3, #0
 8008750:	e05c      	b.n	800880c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4618      	mov	r0, r3
 800875e:	f001 f9d5 	bl	8009b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008762:	2301      	movs	r3, #1
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008766:	f002 f8b5 	bl	800a8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800876a:	f000 ff35 	bl	80095d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800876e:	f002 f87d 	bl	800a86c <vPortEnterCritical>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008778:	b25b      	sxtb	r3, r3
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877e:	d103      	bne.n	8008788 <xQueueGenericSend+0x17c>
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800878e:	b25b      	sxtb	r3, r3
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d103      	bne.n	800879e <xQueueGenericSend+0x192>
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800879e:	f002 f899 	bl	800a8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087a2:	1d3a      	adds	r2, r7, #4
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	4611      	mov	r1, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 f9c4 	bl	8009b38 <xTaskCheckForTimeOut>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d124      	bne.n	8008800 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b8:	f000 faac 	bl	8008d14 <prvIsQueueFull>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d018      	beq.n	80087f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	3310      	adds	r3, #16
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f8e4 	bl	8009998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d2:	f000 fa37 	bl	8008c44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087d6:	f000 ff0d 	bl	80095f4 <xTaskResumeAll>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f47f af7c 	bne.w	80086da <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <xQueueGenericSend+0x208>)
 80087e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	e772      	b.n	80086da <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f6:	f000 fa25 	bl	8008c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087fa:	f000 fefb 	bl	80095f4 <xTaskResumeAll>
 80087fe:	e76c      	b.n	80086da <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f000 fa1f 	bl	8008c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008806:	f000 fef5 	bl	80095f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800880a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800880c:	4618      	mov	r0, r3
 800880e:	3738      	adds	r7, #56	; 0x38
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	e000ed04 	.word	0xe000ed04

08008818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08e      	sub	sp, #56	; 0x38
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10c      	bne.n	800884a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	b672      	cpsid	i
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	b662      	cpsie	i
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <xQueueGenericSendFromISR+0x40>
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <xQueueGenericSendFromISR+0x44>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <xQueueGenericSendFromISR+0x46>
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10c      	bne.n	800887c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	b672      	cpsid	i
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	b662      	cpsie	i
 8008876:	623b      	str	r3, [r7, #32]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <xQueueGenericSendFromISR+0x72>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <xQueueGenericSendFromISR+0x76>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericSendFromISR+0x78>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10c      	bne.n	80088ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	b672      	cpsid	i
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	b662      	cpsie	i
 80088a8:	61fb      	str	r3, [r7, #28]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088ae:	f002 f8c5 	bl	800aa3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088b2:	f3ef 8211 	mrs	r2, BASEPRI
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	b672      	cpsid	i
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	b662      	cpsie	i
 80088ca:	61ba      	str	r2, [r7, #24]
 80088cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <xQueueGenericSendFromISR+0xcc>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d12c      	bne.n	800893e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f4:	f000 f916 	bl	8008b24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d112      	bne.n	8008928 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	3324      	adds	r3, #36	; 0x24
 800890e:	4618      	mov	r0, r3
 8008910:	f001 f896 	bl	8009a40 <xTaskRemoveFromEventList>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00e      	beq.n	8008938 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e007      	b.n	8008938 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800892c:	3301      	adds	r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	b25a      	sxtb	r2, r3
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008938:	2301      	movs	r3, #1
 800893a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800893c:	e001      	b.n	8008942 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800893e:	2300      	movs	r3, #0
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800894c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008950:	4618      	mov	r0, r3
 8008952:	3738      	adds	r7, #56	; 0x38
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08c      	sub	sp, #48	; 0x30
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008964:	2300      	movs	r3, #0
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10c      	bne.n	800898c <xQueueReceive+0x34>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	b672      	cpsid	i
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	b662      	cpsie	i
 8008986:	623b      	str	r3, [r7, #32]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <xQueueReceive+0x42>
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <xQueueReceive+0x46>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueReceive+0x48>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10c      	bne.n	80089be <xQueueReceive+0x66>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	b672      	cpsid	i
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	b662      	cpsie	i
 80089b8:	61fb      	str	r3, [r7, #28]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089be:	f001 fa09 	bl	8009dd4 <xTaskGetSchedulerState>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <xQueueReceive+0x76>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <xQueueReceive+0x7a>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <xQueueReceive+0x7c>
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10c      	bne.n	80089f2 <xQueueReceive+0x9a>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	b672      	cpsid	i
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	b662      	cpsie	i
 80089ec:	61bb      	str	r3, [r7, #24]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089f2:	f001 ff3b 	bl	800a86c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01f      	beq.n	8008a42 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a06:	f000 f8f7 	bl	8008bf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	1e5a      	subs	r2, r3, #1
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00f      	beq.n	8008a3a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 f80e 	bl	8009a40 <xTaskRemoveFromEventList>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a2a:	4b3d      	ldr	r3, [pc, #244]	; (8008b20 <xQueueReceive+0x1c8>)
 8008a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a3a:	f001 ff4b 	bl	800a8d4 <vPortExitCritical>
				return pdPASS;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e069      	b.n	8008b16 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a48:	f001 ff44 	bl	800a8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e062      	b.n	8008b16 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 f856 	bl	8009b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a64:	f001 ff36 	bl	800a8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a68:	f000 fdb6 	bl	80095d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a6c:	f001 fefe 	bl	800a86c <vPortEnterCritical>
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a76:	b25b      	sxtb	r3, r3
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d103      	bne.n	8008a86 <xQueueReceive+0x12e>
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a92:	d103      	bne.n	8008a9c <xQueueReceive+0x144>
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a9c:	f001 ff1a 	bl	800a8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa0:	1d3a      	adds	r2, r7, #4
 8008aa2:	f107 0310 	add.w	r3, r7, #16
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 f845 	bl	8009b38 <xTaskCheckForTimeOut>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d123      	bne.n	8008afc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab6:	f000 f917 	bl	8008ce8 <prvIsQueueEmpty>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d017      	beq.n	8008af0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	3324      	adds	r3, #36	; 0x24
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 ff65 	bl	8009998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad0:	f000 f8b8 	bl	8008c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ad4:	f000 fd8e 	bl	80095f4 <xTaskResumeAll>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d189      	bne.n	80089f2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <xQueueReceive+0x1c8>)
 8008ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	e780      	b.n	80089f2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af2:	f000 f8a7 	bl	8008c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008af6:	f000 fd7d 	bl	80095f4 <xTaskResumeAll>
 8008afa:	e77a      	b.n	80089f2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afe:	f000 f8a1 	bl	8008c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b02:	f000 fd77 	bl	80095f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b08:	f000 f8ee 	bl	8008ce8 <prvIsQueueEmpty>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f43f af6f 	beq.w	80089f2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3730      	adds	r7, #48	; 0x30
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10d      	bne.n	8008b5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d14d      	bne.n	8008be6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 f95e 	bl	8009e10 <xTaskPriorityDisinherit>
 8008b54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	609a      	str	r2, [r3, #8]
 8008b5c:	e043      	b.n	8008be6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d119      	bne.n	8008b98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6858      	ldr	r0, [r3, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	f002 fb62 	bl	800b238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d32b      	bcc.n	8008be6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	e026      	b.n	8008be6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68d8      	ldr	r0, [r3, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	f002 fb48 	bl	800b238 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	441a      	add	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d207      	bcs.n	8008bd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	425b      	negs	r3, r3
 8008bce:	441a      	add	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d105      	bne.n	8008be6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bee:	697b      	ldr	r3, [r7, #20]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d018      	beq.n	8008c3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	441a      	add	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d303      	bcc.n	8008c2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68d9      	ldr	r1, [r3, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	461a      	mov	r2, r3
 8008c36:	6838      	ldr	r0, [r7, #0]
 8008c38:	f002 fafe 	bl	800b238 <memcpy>
	}
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c4c:	f001 fe0e 	bl	800a86c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c58:	e011      	b.n	8008c7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d012      	beq.n	8008c88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3324      	adds	r3, #36	; 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 feea 	bl	8009a40 <xTaskRemoveFromEventList>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c72:	f000 ffc7 	bl	8009c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dce9      	bgt.n	8008c5a <prvUnlockQueue+0x16>
 8008c86:	e000      	b.n	8008c8a <prvUnlockQueue+0x46>
					break;
 8008c88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c92:	f001 fe1f 	bl	800a8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c96:	f001 fde9 	bl	800a86c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ca2:	e011      	b.n	8008cc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d012      	beq.n	8008cd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3310      	adds	r3, #16
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fec5 	bl	8009a40 <xTaskRemoveFromEventList>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cbc:	f000 ffa2 	bl	8009c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dce9      	bgt.n	8008ca4 <prvUnlockQueue+0x60>
 8008cd0:	e000      	b.n	8008cd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	22ff      	movs	r2, #255	; 0xff
 8008cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cdc:	f001 fdfa 	bl	800a8d4 <vPortExitCritical>
}
 8008ce0:	bf00      	nop
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cf0:	f001 fdbc 	bl	800a86c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e001      	b.n	8008d06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d06:	f001 fde5 	bl	800a8d4 <vPortExitCritical>

	return xReturn;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d1c:	f001 fda6 	bl	800a86c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d102      	bne.n	8008d32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e001      	b.n	8008d36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d36:	f001 fdcd 	bl	800a8d4 <vPortExitCritical>

	return xReturn;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e014      	b.n	8008d7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d54:	4a0f      	ldr	r2, [pc, #60]	; (8008d94 <vQueueAddToRegistry+0x50>)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10b      	bne.n	8008d78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d60:	490c      	ldr	r1, [pc, #48]	; (8008d94 <vQueueAddToRegistry+0x50>)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <vQueueAddToRegistry+0x50>)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4413      	add	r3, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d76:	e006      	b.n	8008d86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b07      	cmp	r3, #7
 8008d82:	d9e7      	bls.n	8008d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20000ee4 	.word	0x20000ee4

08008d98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008da8:	f001 fd60 	bl	800a86c <vPortEnterCritical>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008db2:	b25b      	sxtb	r3, r3
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d103      	bne.n	8008dc2 <vQueueWaitForMessageRestricted+0x2a>
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d103      	bne.n	8008dd8 <vQueueWaitForMessageRestricted+0x40>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dd8:	f001 fd7c 	bl	800a8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	3324      	adds	r3, #36	; 0x24
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	68b9      	ldr	r1, [r7, #8]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fdf9 	bl	80099e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008df2:	6978      	ldr	r0, [r7, #20]
 8008df4:	f7ff ff26 	bl	8008c44 <prvUnlockQueue>
	}
 8008df8:	bf00      	nop
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08e      	sub	sp, #56	; 0x38
 8008e04:	af04      	add	r7, sp, #16
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10c      	bne.n	8008e2e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	b672      	cpsid	i
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	b662      	cpsie	i
 8008e28:	623b      	str	r3, [r7, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10c      	bne.n	8008e4e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	b672      	cpsid	i
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	b662      	cpsie	i
 8008e48:	61fb      	str	r3, [r7, #28]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e4e:	23a8      	movs	r3, #168	; 0xa8
 8008e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2ba8      	cmp	r3, #168	; 0xa8
 8008e56:	d00c      	beq.n	8008e72 <xTaskCreateStatic+0x72>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	b672      	cpsid	i
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	b662      	cpsie	i
 8008e6c:	61bb      	str	r3, [r7, #24]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01e      	beq.n	8008eb8 <xTaskCreateStatic+0xb8>
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01b      	beq.n	8008eb8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e92:	2300      	movs	r3, #0
 8008e94:	9303      	str	r3, [sp, #12]
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	f107 0314 	add.w	r3, r7, #20
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 f850 	bl	8008f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eb2:	f000 f8f5 	bl	80090a0 <prvAddNewTaskToReadyList>
 8008eb6:	e001      	b.n	8008ebc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ebc:	697b      	ldr	r3, [r7, #20]
	}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3728      	adds	r7, #40	; 0x28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b08c      	sub	sp, #48	; 0x30
 8008eca:	af04      	add	r7, sp, #16
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 fdf2 	bl	800aac4 <pvPortMalloc>
 8008ee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00e      	beq.n	8008f06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ee8:	20a8      	movs	r0, #168	; 0xa8
 8008eea:	f001 fdeb 	bl	800aac4 <pvPortMalloc>
 8008eee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	631a      	str	r2, [r3, #48]	; 0x30
 8008efc:	e005      	b.n	8008f0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f001 feaa 	bl	800ac58 <vPortFree>
 8008f04:	e001      	b.n	8008f0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d017      	beq.n	8008f40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f18:	88fa      	ldrh	r2, [r7, #6]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f80e 	bl	8008f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f34:	69f8      	ldr	r0, [r7, #28]
 8008f36:	f000 f8b3 	bl	80090a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	e002      	b.n	8008f46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f40:	f04f 33ff 	mov.w	r3, #4294967295
 8008f44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f46:	69bb      	ldr	r3, [r7, #24]
	}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	461a      	mov	r2, r3
 8008f68:	21a5      	movs	r1, #165	; 0xa5
 8008f6a:	f002 f894 	bl	800b096 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f78:	440b      	add	r3, r1
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f023 0307 	bic.w	r3, r3, #7
 8008f86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00c      	beq.n	8008fac <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	617b      	str	r3, [r7, #20]
}
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01f      	beq.n	8008ff2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61fb      	str	r3, [r7, #28]
 8008fb6:	e012      	b.n	8008fde <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	7819      	ldrb	r1, [r3, #0]
 8008fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3334      	adds	r3, #52	; 0x34
 8008fc8:	460a      	mov	r2, r1
 8008fca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d006      	beq.n	8008fe6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	d9e9      	bls.n	8008fb8 <prvInitialiseNewTask+0x68>
 8008fe4:	e000      	b.n	8008fe8 <prvInitialiseNewTask+0x98>
			{
				break;
 8008fe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ff0:	e003      	b.n	8008ffa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	2b37      	cmp	r3, #55	; 0x37
 8008ffe:	d901      	bls.n	8009004 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009000:	2337      	movs	r3, #55	; 0x37
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009008:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800900e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	2200      	movs	r2, #0
 8009014:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	3304      	adds	r3, #4
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff f952 	bl	80082c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	3318      	adds	r3, #24
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff f94d 	bl	80082c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	3354      	adds	r3, #84	; 0x54
 8009054:	224c      	movs	r2, #76	; 0x4c
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f002 f81c 	bl	800b096 <memset>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <prvInitialiseNewTask+0x144>)
 8009062:	659a      	str	r2, [r3, #88]	; 0x58
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <prvInitialiseNewTask+0x148>)
 8009068:	65da      	str	r2, [r3, #92]	; 0x5c
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	4a0b      	ldr	r2, [pc, #44]	; (800909c <prvInitialiseNewTask+0x14c>)
 800906e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	69b8      	ldr	r0, [r7, #24]
 8009076:	f001 faed 	bl	800a654 <pxPortInitialiseStack>
 800907a:	4602      	mov	r2, r0
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800908c:	bf00      	nop
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20005170 	.word	0x20005170
 8009098:	200051d8 	.word	0x200051d8
 800909c:	20005240 	.word	0x20005240

080090a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090a8:	f001 fbe0 	bl	800a86c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090ac:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <prvAddNewTaskToReadyList+0xc4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	4a2c      	ldr	r2, [pc, #176]	; (8009164 <prvAddNewTaskToReadyList+0xc4>)
 80090b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090b6:	4b2c      	ldr	r3, [pc, #176]	; (8009168 <prvAddNewTaskToReadyList+0xc8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090be:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <prvAddNewTaskToReadyList+0xc8>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090c4:	4b27      	ldr	r3, [pc, #156]	; (8009164 <prvAddNewTaskToReadyList+0xc4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d110      	bne.n	80090ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090cc:	f000 fdbe 	bl	8009c4c <prvInitialiseTaskLists>
 80090d0:	e00d      	b.n	80090ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090d2:	4b26      	ldr	r3, [pc, #152]	; (800916c <prvAddNewTaskToReadyList+0xcc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090da:	4b23      	ldr	r3, [pc, #140]	; (8009168 <prvAddNewTaskToReadyList+0xc8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d802      	bhi.n	80090ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090e8:	4a1f      	ldr	r2, [pc, #124]	; (8009168 <prvAddNewTaskToReadyList+0xc8>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ee:	4b20      	ldr	r3, [pc, #128]	; (8009170 <prvAddNewTaskToReadyList+0xd0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <prvAddNewTaskToReadyList+0xd0>)
 80090f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <prvAddNewTaskToReadyList+0xd0>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	4b1b      	ldr	r3, [pc, #108]	; (8009174 <prvAddNewTaskToReadyList+0xd4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d903      	bls.n	8009114 <prvAddNewTaskToReadyList+0x74>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	4a18      	ldr	r2, [pc, #96]	; (8009174 <prvAddNewTaskToReadyList+0xd4>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4a15      	ldr	r2, [pc, #84]	; (8009178 <prvAddNewTaskToReadyList+0xd8>)
 8009122:	441a      	add	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7ff f8d7 	bl	80082de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009130:	f001 fbd0 	bl	800a8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009134:	4b0d      	ldr	r3, [pc, #52]	; (800916c <prvAddNewTaskToReadyList+0xcc>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00e      	beq.n	800915a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <prvAddNewTaskToReadyList+0xc8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d207      	bcs.n	800915a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <prvAddNewTaskToReadyList+0xdc>)
 800914c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200013f8 	.word	0x200013f8
 8009168:	20000f24 	.word	0x20000f24
 800916c:	20001404 	.word	0x20001404
 8009170:	20001414 	.word	0x20001414
 8009174:	20001400 	.word	0x20001400
 8009178:	20000f28 	.word	0x20000f28
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d019      	beq.n	80091c6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009192:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <vTaskDelay+0x64>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00c      	beq.n	80091b4 <vTaskDelay+0x34>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	b672      	cpsid	i
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	b662      	cpsie	i
 80091ae:	60bb      	str	r3, [r7, #8]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80091b4:	f000 fa10 	bl	80095d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fe9a 	bl	8009ef4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091c0:	f000 fa18 	bl	80095f4 <xTaskResumeAll>
 80091c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <vTaskDelay+0x68>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20001420 	.word	0x20001420
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80091f4:	f001 fb3a 	bl	800a86c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <vTaskSuspend+0x18>
 80091fe:	4b31      	ldr	r3, [pc, #196]	; (80092c4 <vTaskSuspend+0xd8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	e000      	b.n	8009206 <vTaskSuspend+0x1a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3304      	adds	r3, #4
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff f8c3 	bl	8008398 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3318      	adds	r3, #24
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f8ba 	bl	8008398 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4827      	ldr	r0, [pc, #156]	; (80092c8 <vTaskSuspend+0xdc>)
 800922c:	f7ff f857 	bl	80082de <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b01      	cmp	r3, #1
 800923a:	d103      	bne.n	8009244 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009244:	f001 fb46 	bl	800a8d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009248:	4b20      	ldr	r3, [pc, #128]	; (80092cc <vTaskSuspend+0xe0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009250:	f001 fb0c 	bl	800a86c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009254:	f000 fd9e 	bl	8009d94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009258:	f001 fb3c 	bl	800a8d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800925c:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <vTaskSuspend+0xd8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	429a      	cmp	r2, r3
 8009264:	d129      	bne.n	80092ba <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <vTaskSuspend+0xe0>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d019      	beq.n	80092a2 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800926e:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <vTaskSuspend+0xe4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00c      	beq.n	8009290 <vTaskSuspend+0xa4>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	b672      	cpsid	i
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	b662      	cpsie	i
 800928a:	60bb      	str	r3, [r7, #8]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <vTaskSuspend+0xe8>)
 8009292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092a0:	e00b      	b.n	80092ba <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <vTaskSuspend+0xdc>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <vTaskSuspend+0xec>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d103      	bne.n	80092b6 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <vTaskSuspend+0xd8>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
	}
 80092b4:	e001      	b.n	80092ba <vTaskSuspend+0xce>
					vTaskSwitchContext();
 80092b6:	f000 fb09 	bl	80098cc <vTaskSwitchContext>
	}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000f24 	.word	0x20000f24
 80092c8:	200013e4 	.word	0x200013e4
 80092cc:	20001404 	.word	0x20001404
 80092d0:	20001420 	.word	0x20001420
 80092d4:	e000ed04 	.word	0xe000ed04
 80092d8:	200013f8 	.word	0x200013f8

080092dc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10c      	bne.n	800930c <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	60fb      	str	r3, [r7, #12]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <prvTaskIsTaskSuspended+0x60>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d10a      	bne.n	800932c <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	4a09      	ldr	r2, [pc, #36]	; (8009340 <prvTaskIsTaskSuspended+0x64>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d005      	beq.n	800932c <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800932c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	200013e4 	.word	0x200013e4
 8009340:	200013b8 	.word	0x200013b8

08009344 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10c      	bne.n	8009370 <vTaskResume+0x2c>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	b672      	cpsid	i
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	b662      	cpsie	i
 800936a:	60bb      	str	r3, [r7, #8]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009370:	4b20      	ldr	r3, [pc, #128]	; (80093f4 <vTaskResume+0xb0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	429a      	cmp	r2, r3
 8009378:	d038      	beq.n	80093ec <vTaskResume+0xa8>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d035      	beq.n	80093ec <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8009380:	f001 fa74 	bl	800a86c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7ff ffa9 	bl	80092dc <prvTaskIsTaskSuspended>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d02b      	beq.n	80093e8 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3304      	adds	r3, #4
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe ffff 	bl	8008398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939e:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <vTaskResume+0xb4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d903      	bls.n	80093ae <vTaskResume+0x6a>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <vTaskResume+0xb4>)
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4a10      	ldr	r2, [pc, #64]	; (80093fc <vTaskResume+0xb8>)
 80093bc:	441a      	add	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe ff8a 	bl	80082de <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <vTaskResume+0xb0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d307      	bcc.n	80093e8 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80093d8:	4b09      	ldr	r3, [pc, #36]	; (8009400 <vTaskResume+0xbc>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80093e8:	f001 fa74 	bl	800a8d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000f24 	.word	0x20000f24
 80093f8:	20001400 	.word	0x20001400
 80093fc:	20000f28 	.word	0x20000f28
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	; 0x28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10c      	bne.n	8009434 <xTaskResumeFromISR+0x30>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	b672      	cpsid	i
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	b662      	cpsie	i
 800942e:	61bb      	str	r3, [r7, #24]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009434:	f001 fb02 	bl	800aa3c <vPortValidateInterruptPriority>
	__asm volatile
 8009438:	f3ef 8211 	mrs	r2, BASEPRI
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	b672      	cpsid	i
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	b662      	cpsie	i
 8009450:	617a      	str	r2, [r7, #20]
 8009452:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009454:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009456:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009458:	6a38      	ldr	r0, [r7, #32]
 800945a:	f7ff ff3f 	bl	80092dc <prvTaskIsTaskSuspended>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d030      	beq.n	80094c6 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <xTaskResumeFromISR+0xd8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d126      	bne.n	80094ba <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <xTaskResumeFromISR+0xdc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	429a      	cmp	r2, r3
 8009478:	d301      	bcc.n	800947e <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800947a:	2301      	movs	r3, #1
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	3304      	adds	r3, #4
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe ff88 	bl	8008398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948c:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <xTaskResumeFromISR+0xe0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d903      	bls.n	800949c <xTaskResumeFromISR+0x98>
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <xTaskResumeFromISR+0xe0>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4a0f      	ldr	r2, [pc, #60]	; (80094e8 <xTaskResumeFromISR+0xe4>)
 80094aa:	441a      	add	r2, r3
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7fe ff13 	bl	80082de <vListInsertEnd>
 80094b8:	e005      	b.n	80094c6 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	3318      	adds	r3, #24
 80094be:	4619      	mov	r1, r3
 80094c0:	480a      	ldr	r0, [pc, #40]	; (80094ec <xTaskResumeFromISR+0xe8>)
 80094c2:	f7fe ff0c 	bl	80082de <vListInsertEnd>
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f383 8811 	msr	BASEPRI, r3
}
 80094d0:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3728      	adds	r7, #40	; 0x28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20001420 	.word	0x20001420
 80094e0:	20000f24 	.word	0x20000f24
 80094e4:	20001400 	.word	0x20001400
 80094e8:	20000f28 	.word	0x20000f28
 80094ec:	200013b8 	.word	0x200013b8

080094f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094fe:	463a      	mov	r2, r7
 8009500:	1d39      	adds	r1, r7, #4
 8009502:	f107 0308 	add.w	r3, r7, #8
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fe88 	bl	800821c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	9202      	str	r2, [sp, #8]
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	2300      	movs	r3, #0
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	2300      	movs	r3, #0
 800951c:	460a      	mov	r2, r1
 800951e:	4926      	ldr	r1, [pc, #152]	; (80095b8 <vTaskStartScheduler+0xc8>)
 8009520:	4826      	ldr	r0, [pc, #152]	; (80095bc <vTaskStartScheduler+0xcc>)
 8009522:	f7ff fc6d 	bl	8008e00 <xTaskCreateStatic>
 8009526:	4603      	mov	r3, r0
 8009528:	4a25      	ldr	r2, [pc, #148]	; (80095c0 <vTaskStartScheduler+0xd0>)
 800952a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800952c:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <vTaskStartScheduler+0xd0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e001      	b.n	800953e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d102      	bne.n	800954a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009544:	f000 fd2a 	bl	8009f9c <xTimerCreateTimerTask>
 8009548:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d11d      	bne.n	800958c <vTaskStartScheduler+0x9c>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	b672      	cpsid	i
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	b662      	cpsie	i
 8009564:	613b      	str	r3, [r7, #16]
}
 8009566:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009568:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <vTaskStartScheduler+0xd4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3354      	adds	r3, #84	; 0x54
 800956e:	4a16      	ldr	r2, [pc, #88]	; (80095c8 <vTaskStartScheduler+0xd8>)
 8009570:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009572:	4b16      	ldr	r3, [pc, #88]	; (80095cc <vTaskStartScheduler+0xdc>)
 8009574:	f04f 32ff 	mov.w	r2, #4294967295
 8009578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <vTaskStartScheduler+0xe0>)
 800957c:	2201      	movs	r2, #1
 800957e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009580:	4b14      	ldr	r3, [pc, #80]	; (80095d4 <vTaskStartScheduler+0xe4>)
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009586:	f001 f8f3 	bl	800a770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800958a:	e010      	b.n	80095ae <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d10c      	bne.n	80095ae <vTaskStartScheduler+0xbe>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	b672      	cpsid	i
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	b662      	cpsie	i
 80095a8:	60fb      	str	r3, [r7, #12]
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <vTaskStartScheduler+0xbc>
}
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0800bfd8 	.word	0x0800bfd8
 80095bc:	08009c1d 	.word	0x08009c1d
 80095c0:	2000141c 	.word	0x2000141c
 80095c4:	20000f24 	.word	0x20000f24
 80095c8:	20000094 	.word	0x20000094
 80095cc:	20001418 	.word	0x20001418
 80095d0:	20001404 	.word	0x20001404
 80095d4:	200013fc 	.word	0x200013fc

080095d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <vTaskSuspendAll+0x18>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	4a03      	ldr	r2, [pc, #12]	; (80095f0 <vTaskSuspendAll+0x18>)
 80095e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095e6:	bf00      	nop
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20001420 	.word	0x20001420

080095f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009602:	4b43      	ldr	r3, [pc, #268]	; (8009710 <xTaskResumeAll+0x11c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10c      	bne.n	8009624 <xTaskResumeAll+0x30>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	b672      	cpsid	i
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	b662      	cpsie	i
 800961e:	603b      	str	r3, [r7, #0]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009624:	f001 f922 	bl	800a86c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009628:	4b39      	ldr	r3, [pc, #228]	; (8009710 <xTaskResumeAll+0x11c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3b01      	subs	r3, #1
 800962e:	4a38      	ldr	r2, [pc, #224]	; (8009710 <xTaskResumeAll+0x11c>)
 8009630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009632:	4b37      	ldr	r3, [pc, #220]	; (8009710 <xTaskResumeAll+0x11c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d162      	bne.n	8009700 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800963a:	4b36      	ldr	r3, [pc, #216]	; (8009714 <xTaskResumeAll+0x120>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d05e      	beq.n	8009700 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009642:	e02f      	b.n	80096a4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009644:	4b34      	ldr	r3, [pc, #208]	; (8009718 <xTaskResumeAll+0x124>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3318      	adds	r3, #24
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fea1 	bl	8008398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3304      	adds	r3, #4
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fe9c 	bl	8008398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4b2d      	ldr	r3, [pc, #180]	; (800971c <xTaskResumeAll+0x128>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d903      	bls.n	8009674 <xTaskResumeAll+0x80>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	4a2a      	ldr	r2, [pc, #168]	; (800971c <xTaskResumeAll+0x128>)
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4a27      	ldr	r2, [pc, #156]	; (8009720 <xTaskResumeAll+0x12c>)
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f7fe fe27 	bl	80082de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b23      	ldr	r3, [pc, #140]	; (8009724 <xTaskResumeAll+0x130>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800969e:	4b22      	ldr	r3, [pc, #136]	; (8009728 <xTaskResumeAll+0x134>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a4:	4b1c      	ldr	r3, [pc, #112]	; (8009718 <xTaskResumeAll+0x124>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1cb      	bne.n	8009644 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096b2:	f000 fb6f 	bl	8009d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096b6:	4b1d      	ldr	r3, [pc, #116]	; (800972c <xTaskResumeAll+0x138>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d010      	beq.n	80096e4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096c2:	f000 f847 	bl	8009754 <xTaskIncrementTick>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80096cc:	4b16      	ldr	r3, [pc, #88]	; (8009728 <xTaskResumeAll+0x134>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1f1      	bne.n	80096c2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <xTaskResumeAll+0x138>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096e4:	4b10      	ldr	r3, [pc, #64]	; (8009728 <xTaskResumeAll+0x134>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d009      	beq.n	8009700 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <xTaskResumeAll+0x13c>)
 80096f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009700:	f001 f8e8 	bl	800a8d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009704:	68bb      	ldr	r3, [r7, #8]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20001420 	.word	0x20001420
 8009714:	200013f8 	.word	0x200013f8
 8009718:	200013b8 	.word	0x200013b8
 800971c:	20001400 	.word	0x20001400
 8009720:	20000f28 	.word	0x20000f28
 8009724:	20000f24 	.word	0x20000f24
 8009728:	2000140c 	.word	0x2000140c
 800972c:	20001408 	.word	0x20001408
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <xTaskGetTickCount+0x1c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009740:	687b      	ldr	r3, [r7, #4]
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	200013fc 	.word	0x200013fc

08009754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975e:	4b50      	ldr	r3, [pc, #320]	; (80098a0 <xTaskIncrementTick+0x14c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 808b 	bne.w	800987e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009768:	4b4e      	ldr	r3, [pc, #312]	; (80098a4 <xTaskIncrementTick+0x150>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009770:	4a4c      	ldr	r2, [pc, #304]	; (80098a4 <xTaskIncrementTick+0x150>)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d122      	bne.n	80097c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800977c:	4b4a      	ldr	r3, [pc, #296]	; (80098a8 <xTaskIncrementTick+0x154>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <xTaskIncrementTick+0x4a>
 80097a0:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	4b41      	ldr	r3, [pc, #260]	; (80098ac <xTaskIncrementTick+0x158>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a3f      	ldr	r2, [pc, #252]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	4a3f      	ldr	r2, [pc, #252]	; (80098ac <xTaskIncrementTick+0x158>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	4b3e      	ldr	r3, [pc, #248]	; (80098b0 <xTaskIncrementTick+0x15c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a3d      	ldr	r2, [pc, #244]	; (80098b0 <xTaskIncrementTick+0x15c>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f000 fae9 	bl	8009d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c2:	4b3c      	ldr	r3, [pc, #240]	; (80098b4 <xTaskIncrementTick+0x160>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d349      	bcc.n	8009860 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097cc:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d6:	4b37      	ldr	r3, [pc, #220]	; (80098b4 <xTaskIncrementTick+0x160>)
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295
 80097dc:	601a      	str	r2, [r3, #0]
					break;
 80097de:	e03f      	b.n	8009860 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e0:	4b31      	ldr	r3, [pc, #196]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d203      	bcs.n	8009800 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097f8:	4a2e      	ldr	r2, [pc, #184]	; (80098b4 <xTaskIncrementTick+0x160>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097fe:	e02f      	b.n	8009860 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fdc7 	bl	8008398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d004      	beq.n	800981c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	3318      	adds	r3, #24
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fdbe 	bl	8008398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <xTaskIncrementTick+0x164>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	429a      	cmp	r2, r3
 8009826:	d903      	bls.n	8009830 <xTaskIncrementTick+0xdc>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4a22      	ldr	r2, [pc, #136]	; (80098b8 <xTaskIncrementTick+0x164>)
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4a1f      	ldr	r2, [pc, #124]	; (80098bc <xTaskIncrementTick+0x168>)
 800983e:	441a      	add	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fe fd49 	bl	80082de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b1b      	ldr	r3, [pc, #108]	; (80098c0 <xTaskIncrementTick+0x16c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	429a      	cmp	r2, r3
 8009858:	d3b8      	bcc.n	80097cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985e:	e7b5      	b.n	80097cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009860:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <xTaskIncrementTick+0x16c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	4915      	ldr	r1, [pc, #84]	; (80098bc <xTaskIncrementTick+0x168>)
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d907      	bls.n	8009888 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009878:	2301      	movs	r3, #1
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e004      	b.n	8009888 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <xTaskIncrementTick+0x170>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	4a0f      	ldr	r2, [pc, #60]	; (80098c4 <xTaskIncrementTick+0x170>)
 8009886:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <xTaskIncrementTick+0x174>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009890:	2301      	movs	r3, #1
 8009892:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009894:	697b      	ldr	r3, [r7, #20]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20001420 	.word	0x20001420
 80098a4:	200013fc 	.word	0x200013fc
 80098a8:	200013b0 	.word	0x200013b0
 80098ac:	200013b4 	.word	0x200013b4
 80098b0:	20001410 	.word	0x20001410
 80098b4:	20001418 	.word	0x20001418
 80098b8:	20001400 	.word	0x20001400
 80098bc:	20000f28 	.word	0x20000f28
 80098c0:	20000f24 	.word	0x20000f24
 80098c4:	20001408 	.word	0x20001408
 80098c8:	2000140c 	.word	0x2000140c

080098cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098d2:	4b2b      	ldr	r3, [pc, #172]	; (8009980 <vTaskSwitchContext+0xb4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098da:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <vTaskSwitchContext+0xb8>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098e0:	e048      	b.n	8009974 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80098e2:	4b28      	ldr	r3, [pc, #160]	; (8009984 <vTaskSwitchContext+0xb8>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e8:	4b27      	ldr	r3, [pc, #156]	; (8009988 <vTaskSwitchContext+0xbc>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	e012      	b.n	8009916 <vTaskSwitchContext+0x4a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10c      	bne.n	8009910 <vTaskSwitchContext+0x44>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	b672      	cpsid	i
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	b662      	cpsie	i
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <vTaskSwitchContext+0x42>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3b01      	subs	r3, #1
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	491d      	ldr	r1, [pc, #116]	; (800998c <vTaskSwitchContext+0xc0>)
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4613      	mov	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0e2      	beq.n	80098f0 <vTaskSwitchContext+0x24>
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4a15      	ldr	r2, [pc, #84]	; (800998c <vTaskSwitchContext+0xc0>)
 8009936:	4413      	add	r3, r2
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	605a      	str	r2, [r3, #4]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3308      	adds	r3, #8
 800994c:	429a      	cmp	r2, r3
 800994e:	d104      	bne.n	800995a <vTaskSwitchContext+0x8e>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	4a0b      	ldr	r2, [pc, #44]	; (8009990 <vTaskSwitchContext+0xc4>)
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	4a08      	ldr	r2, [pc, #32]	; (8009988 <vTaskSwitchContext+0xbc>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <vTaskSwitchContext+0xc4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3354      	adds	r3, #84	; 0x54
 8009970:	4a08      	ldr	r2, [pc, #32]	; (8009994 <vTaskSwitchContext+0xc8>)
 8009972:	6013      	str	r3, [r2, #0]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	20001420 	.word	0x20001420
 8009984:	2000140c 	.word	0x2000140c
 8009988:	20001400 	.word	0x20001400
 800998c:	20000f28 	.word	0x20000f28
 8009990:	20000f24 	.word	0x20000f24
 8009994:	20000094 	.word	0x20000094

08009998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10c      	bne.n	80099c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	b672      	cpsid	i
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	b662      	cpsie	i
 80099bc:	60fb      	str	r3, [r7, #12]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <vTaskPlaceOnEventList+0x48>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3318      	adds	r3, #24
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe fcab 	bl	8008326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099d0:	2101      	movs	r1, #1
 80099d2:	6838      	ldr	r0, [r7, #0]
 80099d4:	f000 fa8e 	bl	8009ef4 <prvAddCurrentTaskToDelayedList>
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000f24 	.word	0x20000f24

080099e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10c      	bne.n	8009a10 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	b672      	cpsid	i
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	b662      	cpsie	i
 8009a0a:	617b      	str	r3, [r7, #20]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <vTaskPlaceOnEventListRestricted+0x58>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3318      	adds	r3, #24
 8009a16:	4619      	mov	r1, r3
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7fe fc60 	bl	80082de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009a24:	f04f 33ff 	mov.w	r3, #4294967295
 8009a28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68b8      	ldr	r0, [r7, #8]
 8009a2e:	f000 fa61 	bl	8009ef4 <prvAddCurrentTaskToDelayedList>
	}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000f24 	.word	0x20000f24

08009a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10c      	bne.n	8009a70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	b672      	cpsid	i
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	b662      	cpsie	i
 8009a6a:	60fb      	str	r3, [r7, #12]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3318      	adds	r3, #24
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fc8f 	bl	8008398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a7a:	4b1e      	ldr	r3, [pc, #120]	; (8009af4 <xTaskRemoveFromEventList+0xb4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d11d      	bne.n	8009abe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fc86 	bl	8008398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <xTaskRemoveFromEventList+0xb8>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d903      	bls.n	8009aa0 <xTaskRemoveFromEventList+0x60>
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a16      	ldr	r2, [pc, #88]	; (8009af8 <xTaskRemoveFromEventList+0xb8>)
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <xTaskRemoveFromEventList+0xbc>)
 8009aae:	441a      	add	r2, r3
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fe fc11 	bl	80082de <vListInsertEnd>
 8009abc:	e005      	b.n	8009aca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	480e      	ldr	r0, [pc, #56]	; (8009b00 <xTaskRemoveFromEventList+0xc0>)
 8009ac6:	f7fe fc0a 	bl	80082de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <xTaskRemoveFromEventList+0xc4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d905      	bls.n	8009ae4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <xTaskRemoveFromEventList+0xc8>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	e001      	b.n	8009ae8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ae8:	697b      	ldr	r3, [r7, #20]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20001420 	.word	0x20001420
 8009af8:	20001400 	.word	0x20001400
 8009afc:	20000f28 	.word	0x20000f28
 8009b00:	200013b8 	.word	0x200013b8
 8009b04:	20000f24 	.word	0x20000f24
 8009b08:	2000140c 	.word	0x2000140c

08009b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b14:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <vTaskInternalSetTimeOutState+0x24>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <vTaskInternalSetTimeOutState+0x28>)
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	605a      	str	r2, [r3, #4]
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20001410 	.word	0x20001410
 8009b34:	200013fc 	.word	0x200013fc

08009b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	b672      	cpsid	i
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	b662      	cpsie	i
 8009b5c:	613b      	str	r3, [r7, #16]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10c      	bne.n	8009b82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	60fb      	str	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009b82:	f000 fe73 	bl	800a86c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b86:	4b1d      	ldr	r3, [pc, #116]	; (8009bfc <xTaskCheckForTimeOut+0xc4>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d102      	bne.n	8009ba6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e023      	b.n	8009bee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b15      	ldr	r3, [pc, #84]	; (8009c00 <xTaskCheckForTimeOut+0xc8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d007      	beq.n	8009bc2 <xTaskCheckForTimeOut+0x8a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d302      	bcc.n	8009bc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e015      	b.n	8009bee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d20b      	bcs.n	8009be4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff ff97 	bl	8009b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	e004      	b.n	8009bee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bea:	2301      	movs	r3, #1
 8009bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bee:	f000 fe71 	bl	800a8d4 <vPortExitCritical>

	return xReturn;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3720      	adds	r7, #32
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200013fc 	.word	0x200013fc
 8009c00:	20001410 	.word	0x20001410

08009c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c08:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <vTaskMissedYield+0x14>)
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	2000140c 	.word	0x2000140c

08009c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c24:	f000 f852 	bl	8009ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <prvIdleTask+0x28>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d9f9      	bls.n	8009c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <prvIdleTask+0x2c>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c40:	e7f0      	b.n	8009c24 <prvIdleTask+0x8>
 8009c42:	bf00      	nop
 8009c44:	20000f28 	.word	0x20000f28
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c52:	2300      	movs	r3, #0
 8009c54:	607b      	str	r3, [r7, #4]
 8009c56:	e00c      	b.n	8009c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4a12      	ldr	r2, [pc, #72]	; (8009cac <prvInitialiseTaskLists+0x60>)
 8009c64:	4413      	add	r3, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fb0c 	bl	8008284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b37      	cmp	r3, #55	; 0x37
 8009c76:	d9ef      	bls.n	8009c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c78:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <prvInitialiseTaskLists+0x64>)
 8009c7a:	f7fe fb03 	bl	8008284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c7e:	480d      	ldr	r0, [pc, #52]	; (8009cb4 <prvInitialiseTaskLists+0x68>)
 8009c80:	f7fe fb00 	bl	8008284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c84:	480c      	ldr	r0, [pc, #48]	; (8009cb8 <prvInitialiseTaskLists+0x6c>)
 8009c86:	f7fe fafd 	bl	8008284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c8a:	480c      	ldr	r0, [pc, #48]	; (8009cbc <prvInitialiseTaskLists+0x70>)
 8009c8c:	f7fe fafa 	bl	8008284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c90:	480b      	ldr	r0, [pc, #44]	; (8009cc0 <prvInitialiseTaskLists+0x74>)
 8009c92:	f7fe faf7 	bl	8008284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c96:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <prvInitialiseTaskLists+0x78>)
 8009c98:	4a05      	ldr	r2, [pc, #20]	; (8009cb0 <prvInitialiseTaskLists+0x64>)
 8009c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <prvInitialiseTaskLists+0x7c>)
 8009c9e:	4a05      	ldr	r2, [pc, #20]	; (8009cb4 <prvInitialiseTaskLists+0x68>)
 8009ca0:	601a      	str	r2, [r3, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20000f28 	.word	0x20000f28
 8009cb0:	20001388 	.word	0x20001388
 8009cb4:	2000139c 	.word	0x2000139c
 8009cb8:	200013b8 	.word	0x200013b8
 8009cbc:	200013cc 	.word	0x200013cc
 8009cc0:	200013e4 	.word	0x200013e4
 8009cc4:	200013b0 	.word	0x200013b0
 8009cc8:	200013b4 	.word	0x200013b4

08009ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd2:	e019      	b.n	8009d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cd4:	f000 fdca 	bl	800a86c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd8:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <prvCheckTasksWaitingTermination+0x50>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe fb57 	bl	8008398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <prvCheckTasksWaitingTermination+0x54>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	4a0b      	ldr	r2, [pc, #44]	; (8009d20 <prvCheckTasksWaitingTermination+0x54>)
 8009cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <prvCheckTasksWaitingTermination+0x58>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <prvCheckTasksWaitingTermination+0x58>)
 8009cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cfe:	f000 fde9 	bl	800a8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f810 	bl	8009d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d08:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <prvCheckTasksWaitingTermination+0x58>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e1      	bne.n	8009cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200013cc 	.word	0x200013cc
 8009d20:	200013f8 	.word	0x200013f8
 8009d24:	200013e0 	.word	0x200013e0

08009d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3354      	adds	r3, #84	; 0x54
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 f9c7 	bl	800b0c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d108      	bne.n	8009d56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 ff85 	bl	800ac58 <vPortFree>
				vPortFree( pxTCB );
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 ff82 	bl	800ac58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d54:	e01a      	b.n	8009d8c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d103      	bne.n	8009d68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 ff79 	bl	800ac58 <vPortFree>
	}
 8009d66:	e011      	b.n	8009d8c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d00c      	beq.n	8009d8c <prvDeleteTCB+0x64>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	b672      	cpsid	i
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	b662      	cpsie	i
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <prvDeleteTCB+0x62>
	}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <prvResetNextTaskUnblockTime+0x38>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295
 8009daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dac:	e008      	b.n	8009dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <prvResetNextTaskUnblockTime+0x38>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4a04      	ldr	r2, [pc, #16]	; (8009dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009dbe:	6013      	str	r3, [r2, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	200013b0 	.word	0x200013b0
 8009dd0:	20001418 	.word	0x20001418

08009dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dda:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <xTaskGetSchedulerState+0x34>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009de2:	2301      	movs	r3, #1
 8009de4:	607b      	str	r3, [r7, #4]
 8009de6:	e008      	b.n	8009dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de8:	4b08      	ldr	r3, [pc, #32]	; (8009e0c <xTaskGetSchedulerState+0x38>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009df0:	2302      	movs	r3, #2
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	e001      	b.n	8009dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009df6:	2300      	movs	r3, #0
 8009df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dfa:	687b      	ldr	r3, [r7, #4]
	}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	20001404 	.word	0x20001404
 8009e0c:	20001420 	.word	0x20001420

08009e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d05a      	beq.n	8009edc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e26:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <xTaskPriorityDisinherit+0xd8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d00c      	beq.n	8009e4a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	b672      	cpsid	i
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	b662      	cpsie	i
 8009e44:	60fb      	str	r3, [r7, #12]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10c      	bne.n	8009e6c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	b672      	cpsid	i
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	b662      	cpsie	i
 8009e66:	60bb      	str	r3, [r7, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	e7fe      	b.n	8009e6a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e70:	1e5a      	subs	r2, r3, #1
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d02c      	beq.n	8009edc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d128      	bne.n	8009edc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fa82 	bl	8008398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <xTaskPriorityDisinherit+0xdc>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <xTaskPriorityDisinherit+0xac>
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <xTaskPriorityDisinherit+0xdc>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a09      	ldr	r2, [pc, #36]	; (8009ef0 <xTaskPriorityDisinherit+0xe0>)
 8009eca:	441a      	add	r2, r3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fe fa03 	bl	80082de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009edc:	697b      	ldr	r3, [r7, #20]
	}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000f24 	.word	0x20000f24
 8009eec:	20001400 	.word	0x20001400
 8009ef0:	20000f28 	.word	0x20000f28

08009ef4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009efe:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f04:	4b20      	ldr	r3, [pc, #128]	; (8009f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fa44 	bl	8008398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f16:	d10a      	bne.n	8009f2e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d007      	beq.n	8009f2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4619      	mov	r1, r3
 8009f26:	4819      	ldr	r0, [pc, #100]	; (8009f8c <prvAddCurrentTaskToDelayedList+0x98>)
 8009f28:	f7fe f9d9 	bl	80082de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f2c:	e026      	b.n	8009f7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4413      	add	r3, r2
 8009f34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d209      	bcs.n	8009f5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f46:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f7fe f9e7 	bl	8008326 <vListInsert>
}
 8009f58:	e010      	b.n	8009f7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f5a:	4b0e      	ldr	r3, [pc, #56]	; (8009f94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f7fe f9dd 	bl	8008326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d202      	bcs.n	8009f7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f76:	4a08      	ldr	r2, [pc, #32]	; (8009f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6013      	str	r3, [r2, #0]
}
 8009f7c:	bf00      	nop
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	200013fc 	.word	0x200013fc
 8009f88:	20000f24 	.word	0x20000f24
 8009f8c:	200013e4 	.word	0x200013e4
 8009f90:	200013b4 	.word	0x200013b4
 8009f94:	200013b0 	.word	0x200013b0
 8009f98:	20001418 	.word	0x20001418

08009f9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fa6:	f000 fb15 	bl	800a5d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009faa:	4b1d      	ldr	r3, [pc, #116]	; (800a020 <xTimerCreateTimerTask+0x84>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d021      	beq.n	8009ff6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fba:	1d3a      	adds	r2, r7, #4
 8009fbc:	f107 0108 	add.w	r1, r7, #8
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe f943 	bl	8008250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	9202      	str	r2, [sp, #8]
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	460a      	mov	r2, r1
 8009fdc:	4911      	ldr	r1, [pc, #68]	; (800a024 <xTimerCreateTimerTask+0x88>)
 8009fde:	4812      	ldr	r0, [pc, #72]	; (800a028 <xTimerCreateTimerTask+0x8c>)
 8009fe0:	f7fe ff0e 	bl	8008e00 <xTaskCreateStatic>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	4a11      	ldr	r2, [pc, #68]	; (800a02c <xTimerCreateTimerTask+0x90>)
 8009fe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <xTimerCreateTimerTask+0x90>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10c      	bne.n	800a016 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	b672      	cpsid	i
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	b662      	cpsie	i
 800a010:	613b      	str	r3, [r7, #16]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a016:	697b      	ldr	r3, [r7, #20]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20001454 	.word	0x20001454
 800a024:	0800bfe0 	.word	0x0800bfe0
 800a028:	0800a16d 	.word	0x0800a16d
 800a02c:	20001458 	.word	0x20001458

0800a030 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10c      	bne.n	800a062 <xTimerGenericCommand+0x32>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	b672      	cpsid	i
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	b662      	cpsie	i
 800a05c:	623b      	str	r3, [r7, #32]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a062:	4b1a      	ldr	r3, [pc, #104]	; (800a0cc <xTimerGenericCommand+0x9c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d02a      	beq.n	800a0c0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2b05      	cmp	r3, #5
 800a07a:	dc18      	bgt.n	800a0ae <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a07c:	f7ff feaa 	bl	8009dd4 <xTaskGetSchedulerState>
 800a080:	4603      	mov	r3, r0
 800a082:	2b02      	cmp	r3, #2
 800a084:	d109      	bne.n	800a09a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a086:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <xTimerGenericCommand+0x9c>)
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f107 0110 	add.w	r1, r7, #16
 800a08e:	2300      	movs	r3, #0
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	f7fe fabb 	bl	800860c <xQueueGenericSend>
 800a096:	6278      	str	r0, [r7, #36]	; 0x24
 800a098:	e012      	b.n	800a0c0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <xTimerGenericCommand+0x9c>)
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f107 0110 	add.w	r1, r7, #16
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f7fe fab1 	bl	800860c <xQueueGenericSend>
 800a0aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ac:	e008      	b.n	800a0c0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0ae:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <xTimerGenericCommand+0x9c>)
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	f107 0110 	add.w	r1, r7, #16
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	f7fe fbad 	bl	8008818 <xQueueGenericSendFromISR>
 800a0be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3728      	adds	r7, #40	; 0x28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20001454 	.word	0x20001454

0800a0d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0da:	4b23      	ldr	r3, [pc, #140]	; (800a168 <prvProcessExpiredTimer+0x98>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe f955 	bl	8008398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d024      	beq.n	800a146 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	699a      	ldr	r2, [r3, #24]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	18d1      	adds	r1, r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	6978      	ldr	r0, [r7, #20]
 800a10a:	f000 f8d3 	bl	800a2b4 <prvInsertTimerInActiveList>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d021      	beq.n	800a158 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a114:	2300      	movs	r3, #0
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	2300      	movs	r3, #0
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	2100      	movs	r1, #0
 800a11e:	6978      	ldr	r0, [r7, #20]
 800a120:	f7ff ff86 	bl	800a030 <xTimerGenericCommand>
 800a124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d115      	bne.n	800a158 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	b672      	cpsid	i
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	b662      	cpsie	i
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14c:	f023 0301 	bic.w	r3, r3, #1
 800a150:	b2da      	uxtb	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	6978      	ldr	r0, [r7, #20]
 800a15e:	4798      	blx	r3
}
 800a160:	bf00      	nop
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	2000144c 	.word	0x2000144c

0800a16c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f857 	bl	800a22c <prvGetNextExpireTime>
 800a17e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f803 	bl	800a190 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a18a:	f000 f8d5 	bl	800a338 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a18e:	e7f1      	b.n	800a174 <prvTimerTask+0x8>

0800a190 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a19a:	f7ff fa1d 	bl	80095d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f866 	bl	800a274 <prvSampleTimeNow>
 800a1a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d130      	bne.n	800a212 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d806      	bhi.n	800a1cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1be:	f7ff fa19 	bl	80095f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ff83 	bl	800a0d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ca:	e024      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d008      	beq.n	800a1e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <prvProcessTimerOrBlockTask+0x90>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <prvProcessTimerOrBlockTask+0x50>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <prvProcessTimerOrBlockTask+0x52>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1e4:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <prvProcessTimerOrBlockTask+0x94>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f7fe fdd1 	bl	8008d98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1f6:	f7ff f9fd 	bl	80095f4 <xTaskResumeAll>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a200:	4b09      	ldr	r3, [pc, #36]	; (800a228 <prvProcessTimerOrBlockTask+0x98>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
}
 800a210:	e001      	b.n	800a216 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a212:	f7ff f9ef 	bl	80095f4 <xTaskResumeAll>
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001450 	.word	0x20001450
 800a224:	20001454 	.word	0x20001454
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a234:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <prvGetNextExpireTime+0x44>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <prvGetNextExpireTime+0x16>
 800a23e:	2201      	movs	r2, #1
 800a240:	e000      	b.n	800a244 <prvGetNextExpireTime+0x18>
 800a242:	2200      	movs	r2, #0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <prvGetNextExpireTime+0x44>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e001      	b.n	800a260 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a260:	68fb      	ldr	r3, [r7, #12]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	2000144c 	.word	0x2000144c

0800a274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a27c:	f7ff fa5a 	bl	8009734 <xTaskGetTickCount>
 800a280:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <prvSampleTimeNow+0x3c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d205      	bcs.n	800a298 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a28c:	f000 f93c 	bl	800a508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e002      	b.n	800a29e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a29e:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <prvSampleTimeNow+0x3c>)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	2000145c 	.word	0x2000145c

0800a2b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d812      	bhi.n	800a300 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d302      	bcc.n	800a2ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e01b      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b10      	ldr	r3, [pc, #64]	; (800a330 <prvInsertTimerInActiveList+0x7c>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fe f814 	bl	8008326 <vListInsert>
 800a2fe:	e012      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d206      	bcs.n	800a316 <prvInsertTimerInActiveList+0x62>
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e007      	b.n	800a326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a316:	4b07      	ldr	r3, [pc, #28]	; (800a334 <prvInsertTimerInActiveList+0x80>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3304      	adds	r3, #4
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f7fe f800 	bl	8008326 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a326:	697b      	ldr	r3, [r7, #20]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20001450 	.word	0x20001450
 800a334:	2000144c 	.word	0x2000144c

0800a338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08e      	sub	sp, #56	; 0x38
 800a33c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a33e:	e0d0      	b.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da1a      	bge.n	800a37c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a346:	1d3b      	adds	r3, r7, #4
 800a348:	3304      	adds	r3, #4
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10c      	bne.n	800a36c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	b672      	cpsid	i
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	b662      	cpsie	i
 800a366:	61fb      	str	r3, [r7, #28]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a372:	6850      	ldr	r0, [r2, #4]
 800a374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a376:	6892      	ldr	r2, [r2, #8]
 800a378:	4611      	mov	r1, r2
 800a37a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f2c0 80af 	blt.w	800a4e2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd ffff 	bl	8008398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a39a:	463b      	mov	r3, r7
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ff69 	bl	800a274 <prvSampleTimeNow>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	f200 809a 	bhi.w	800a4e0 <prvProcessReceivedCommands+0x1a8>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <prvProcessReceivedCommands+0x7c>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3dd 	.word	0x0800a3dd
 800a3b8:	0800a3dd 	.word	0x0800a3dd
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a455 	.word	0x0800a455
 800a3c4:	0800a469 	.word	0x0800a469
 800a3c8:	0800a4b7 	.word	0x0800a4b7
 800a3cc:	0800a3dd 	.word	0x0800a3dd
 800a3d0:	0800a3dd 	.word	0x0800a3dd
 800a3d4:	0800a455 	.word	0x0800a455
 800a3d8:	0800a469 	.word	0x0800a469
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3e2:	f043 0301 	orr.w	r3, r3, #1
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	18d1      	adds	r1, r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fc:	f7ff ff5a 	bl	800a2b4 <prvInsertTimerInActiveList>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d06d      	beq.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a40c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d062      	beq.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	441a      	add	r2, r3
 800a424:	2300      	movs	r3, #0
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	2100      	movs	r1, #0
 800a42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42e:	f7ff fdff 	bl	800a030 <xTimerGenericCommand>
 800a432:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d153      	bne.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	b672      	cpsid	i
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	b662      	cpsie	i
 800a44e:	61bb      	str	r3, [r7, #24]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a466:	e03c      	b.n	800a4e2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	b2da      	uxtb	r2, r3
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10c      	bne.n	800a4a2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	b672      	cpsid	i
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	b662      	cpsie	i
 800a49c:	617b      	str	r3, [r7, #20]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	18d1      	adds	r1, r2, r3
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b0:	f7ff ff00 	bl	800a2b4 <prvInsertTimerInActiveList>
					break;
 800a4b4:	e015      	b.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c6:	f000 fbc7 	bl	800ac58 <vPortFree>
 800a4ca:	e00a      	b.n	800a4e2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d2:	f023 0301 	bic.w	r3, r3, #1
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4de:	e000      	b.n	800a4e2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a4e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4e2:	4b08      	ldr	r3, [pc, #32]	; (800a504 <prvProcessReceivedCommands+0x1cc>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1d39      	adds	r1, r7, #4
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fa34 	bl	8008958 <xQueueReceive>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f47f af24 	bne.w	800a340 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	3730      	adds	r7, #48	; 0x30
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20001454 	.word	0x20001454

0800a508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a50e:	e04a      	b.n	800a5a6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a510:	4b2e      	ldr	r3, [pc, #184]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51a:	4b2c      	ldr	r3, [pc, #176]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3304      	adds	r3, #4
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd ff35 	bl	8008398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d030      	beq.n	800a5a6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	4413      	add	r3, r2
 800a54c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	429a      	cmp	r2, r3
 800a554:	d90e      	bls.n	800a574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a562:	4b1a      	ldr	r3, [pc, #104]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3304      	adds	r3, #4
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f7fd feda 	bl	8008326 <vListInsert>
 800a572:	e018      	b.n	800a5a6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a574:	2300      	movs	r3, #0
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	2300      	movs	r3, #0
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	2100      	movs	r1, #0
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fd56 	bl	800a030 <xTimerGenericCommand>
 800a584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10c      	bne.n	800a5a6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	b672      	cpsid	i
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	b662      	cpsie	i
 800a5a0:	603b      	str	r3, [r7, #0]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1af      	bne.n	800a510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5b0:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5b6:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <prvSwitchTimerLists+0xc8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvSwitchTimerLists+0xc4>)
 800a5bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5be:	4a04      	ldr	r2, [pc, #16]	; (800a5d0 <prvSwitchTimerLists+0xc8>)
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	6013      	str	r3, [r2, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	2000144c 	.word	0x2000144c
 800a5d0:	20001450 	.word	0x20001450

0800a5d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5da:	f000 f947 	bl	800a86c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d120      	bne.n	800a628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5e6:	4814      	ldr	r0, [pc, #80]	; (800a638 <prvCheckForValidListAndQueue+0x64>)
 800a5e8:	f7fd fe4c 	bl	8008284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5ec:	4813      	ldr	r0, [pc, #76]	; (800a63c <prvCheckForValidListAndQueue+0x68>)
 800a5ee:	f7fd fe49 	bl	8008284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <prvCheckForValidListAndQueue+0x6c>)
 800a5f4:	4a10      	ldr	r2, [pc, #64]	; (800a638 <prvCheckForValidListAndQueue+0x64>)
 800a5f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5f8:	4b12      	ldr	r3, [pc, #72]	; (800a644 <prvCheckForValidListAndQueue+0x70>)
 800a5fa:	4a10      	ldr	r2, [pc, #64]	; (800a63c <prvCheckForValidListAndQueue+0x68>)
 800a5fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5fe:	2300      	movs	r3, #0
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <prvCheckForValidListAndQueue+0x74>)
 800a604:	4a11      	ldr	r2, [pc, #68]	; (800a64c <prvCheckForValidListAndQueue+0x78>)
 800a606:	2110      	movs	r1, #16
 800a608:	200a      	movs	r0, #10
 800a60a:	f7fd ff59 	bl	80084c0 <xQueueGenericCreateStatic>
 800a60e:	4603      	mov	r3, r0
 800a610:	4a08      	ldr	r2, [pc, #32]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a614:	4b07      	ldr	r3, [pc, #28]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <prvCheckForValidListAndQueue+0x60>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	490b      	ldr	r1, [pc, #44]	; (800a650 <prvCheckForValidListAndQueue+0x7c>)
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fb8e 	bl	8008d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a628:	f000 f954 	bl	800a8d4 <vPortExitCritical>
}
 800a62c:	bf00      	nop
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20001454 	.word	0x20001454
 800a638:	20001424 	.word	0x20001424
 800a63c:	20001438 	.word	0x20001438
 800a640:	2000144c 	.word	0x2000144c
 800a644:	20001450 	.word	0x20001450
 800a648:	20001500 	.word	0x20001500
 800a64c:	20001460 	.word	0x20001460
 800a650:	0800bfe8 	.word	0x0800bfe8

0800a654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3b04      	subs	r3, #4
 800a664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b04      	subs	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f023 0201 	bic.w	r2, r3, #1
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3b04      	subs	r3, #4
 800a682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a684:	4a0c      	ldr	r2, [pc, #48]	; (800a6b8 <pxPortInitialiseStack+0x64>)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3b14      	subs	r3, #20
 800a68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3b04      	subs	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f06f 0202 	mvn.w	r2, #2
 800a6a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b20      	subs	r3, #32
 800a6a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	0800a6bd 	.word	0x0800a6bd

0800a6bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <prvTaskExitError+0x5c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d00c      	beq.n	800a6ea <prvTaskExitError+0x2e>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	b672      	cpsid	i
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	b662      	cpsie	i
 800a6e4:	60fb      	str	r3, [r7, #12]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <prvTaskExitError+0x2c>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	b672      	cpsid	i
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	b662      	cpsie	i
 800a6fe:	60bb      	str	r3, [r7, #8]
}
 800a700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a702:	bf00      	nop
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0fc      	beq.n	800a704 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	20000038 	.word	0x20000038
 800a71c:	00000000 	.word	0x00000000

0800a720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <pxCurrentTCBConst2>)
 800a722:	6819      	ldr	r1, [r3, #0]
 800a724:	6808      	ldr	r0, [r1, #0]
 800a726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72a:	f380 8809 	msr	PSP, r0
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f04f 0000 	mov.w	r0, #0
 800a736:	f380 8811 	msr	BASEPRI, r0
 800a73a:	4770      	bx	lr
 800a73c:	f3af 8000 	nop.w

0800a740 <pxCurrentTCBConst2>:
 800a740:	20000f24 	.word	0x20000f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop

0800a748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a748:	4808      	ldr	r0, [pc, #32]	; (800a76c <prvPortStartFirstTask+0x24>)
 800a74a:	6800      	ldr	r0, [r0, #0]
 800a74c:	6800      	ldr	r0, [r0, #0]
 800a74e:	f380 8808 	msr	MSP, r0
 800a752:	f04f 0000 	mov.w	r0, #0
 800a756:	f380 8814 	msr	CONTROL, r0
 800a75a:	b662      	cpsie	i
 800a75c:	b661      	cpsie	f
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	df00      	svc	0
 800a768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a76a:	bf00      	nop
 800a76c:	e000ed08 	.word	0xe000ed08

0800a770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a776:	4b37      	ldr	r3, [pc, #220]	; (800a854 <xPortStartScheduler+0xe4>)
 800a778:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	22ff      	movs	r2, #255	; 0xff
 800a786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	4b2f      	ldr	r3, [pc, #188]	; (800a858 <xPortStartScheduler+0xe8>)
 800a79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a79e:	4b2f      	ldr	r3, [pc, #188]	; (800a85c <xPortStartScheduler+0xec>)
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7a4:	e009      	b.n	800a7ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a7a6:	4b2d      	ldr	r3, [pc, #180]	; (800a85c <xPortStartScheduler+0xec>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	4a2b      	ldr	r2, [pc, #172]	; (800a85c <xPortStartScheduler+0xec>)
 800a7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c2:	2b80      	cmp	r3, #128	; 0x80
 800a7c4:	d0ef      	beq.n	800a7a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7c6:	4b25      	ldr	r3, [pc, #148]	; (800a85c <xPortStartScheduler+0xec>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1c3 0307 	rsb	r3, r3, #7
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d00c      	beq.n	800a7ec <xPortStartScheduler+0x7c>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	b672      	cpsid	i
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	b662      	cpsie	i
 800a7e6:	60bb      	str	r3, [r7, #8]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <xPortStartScheduler+0xec>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	4a1a      	ldr	r2, [pc, #104]	; (800a85c <xPortStartScheduler+0xec>)
 800a7f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <xPortStartScheduler+0xec>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7fe:	4a17      	ldr	r2, [pc, #92]	; (800a85c <xPortStartScheduler+0xec>)
 800a800:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a80a:	4b15      	ldr	r3, [pc, #84]	; (800a860 <xPortStartScheduler+0xf0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a14      	ldr	r2, [pc, #80]	; (800a860 <xPortStartScheduler+0xf0>)
 800a810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a814:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a816:	4b12      	ldr	r3, [pc, #72]	; (800a860 <xPortStartScheduler+0xf0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a11      	ldr	r2, [pc, #68]	; (800a860 <xPortStartScheduler+0xf0>)
 800a81c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a820:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a822:	f000 f8dd 	bl	800a9e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a826:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <xPortStartScheduler+0xf4>)
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a82c:	f000 f8fc 	bl	800aa28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a830:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <xPortStartScheduler+0xf8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a0c      	ldr	r2, [pc, #48]	; (800a868 <xPortStartScheduler+0xf8>)
 800a836:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a83a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a83c:	f7ff ff84 	bl	800a748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a840:	f7ff f844 	bl	80098cc <vTaskSwitchContext>
	prvTaskExitError();
 800a844:	f7ff ff3a 	bl	800a6bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	e000e400 	.word	0xe000e400
 800a858:	20001550 	.word	0x20001550
 800a85c:	20001554 	.word	0x20001554
 800a860:	e000ed20 	.word	0xe000ed20
 800a864:	20000038 	.word	0x20000038
 800a868:	e000ef34 	.word	0xe000ef34

0800a86c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	b672      	cpsid	i
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	b662      	cpsie	i
 800a886:	607b      	str	r3, [r7, #4]
}
 800a888:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <vPortEnterCritical+0x60>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3301      	adds	r3, #1
 800a890:	4a0e      	ldr	r2, [pc, #56]	; (800a8cc <vPortEnterCritical+0x60>)
 800a892:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a894:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <vPortEnterCritical+0x60>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d111      	bne.n	800a8c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <vPortEnterCritical+0x64>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00c      	beq.n	800a8c0 <vPortEnterCritical+0x54>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	b672      	cpsid	i
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	b662      	cpsie	i
 800a8ba:	603b      	str	r3, [r7, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <vPortEnterCritical+0x52>
	}
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20000038 	.word	0x20000038
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8da:	4b13      	ldr	r3, [pc, #76]	; (800a928 <vPortExitCritical+0x54>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10c      	bne.n	800a8fc <vPortExitCritical+0x28>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	b672      	cpsid	i
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	b662      	cpsie	i
 800a8f6:	607b      	str	r3, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <vPortExitCritical+0x54>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3b01      	subs	r3, #1
 800a902:	4a09      	ldr	r2, [pc, #36]	; (800a928 <vPortExitCritical+0x54>)
 800a904:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <vPortExitCritical+0x54>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d105      	bne.n	800a91a <vPortExitCritical+0x46>
 800a90e:	2300      	movs	r3, #0
 800a910:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	f383 8811 	msr	BASEPRI, r3
}
 800a918:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20000038 	.word	0x20000038
 800a92c:	00000000 	.word	0x00000000

0800a930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a930:	f3ef 8009 	mrs	r0, PSP
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	4b15      	ldr	r3, [pc, #84]	; (800a990 <pxCurrentTCBConst>)
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	f01e 0f10 	tst.w	lr, #16
 800a940:	bf08      	it	eq
 800a942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a954:	b672      	cpsid	i
 800a956:	f380 8811 	msr	BASEPRI, r0
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	b662      	cpsie	i
 800a964:	f7fe ffb2 	bl	80098cc <vTaskSwitchContext>
 800a968:	f04f 0000 	mov.w	r0, #0
 800a96c:	f380 8811 	msr	BASEPRI, r0
 800a970:	bc09      	pop	{r0, r3}
 800a972:	6819      	ldr	r1, [r3, #0]
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	f01e 0f10 	tst.w	lr, #16
 800a97e:	bf08      	it	eq
 800a980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a984:	f380 8809 	msr	PSP, r0
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop

0800a990 <pxCurrentTCBConst>:
 800a990:	20000f24 	.word	0x20000f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop

0800a998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	b672      	cpsid	i
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	b662      	cpsie	i
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9b6:	f7fe fecd 	bl	8009754 <xTaskIncrementTick>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <SysTick_Handler+0x44>)
 800a9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	f383 8811 	msr	BASEPRI, r3
}
 800a9d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9d4:	bf00      	nop
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	e000ed04 	.word	0xe000ed04

0800a9e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <vPortSetupTimerInterrupt+0x34>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <vPortSetupTimerInterrupt+0x38>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <vPortSetupTimerInterrupt+0x3c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <vPortSetupTimerInterrupt+0x40>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	099b      	lsrs	r3, r3, #6
 800a9fc:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <vPortSetupTimerInterrupt+0x44>)
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <vPortSetupTimerInterrupt+0x34>)
 800aa04:	2207      	movs	r2, #7
 800aa06:	601a      	str	r2, [r3, #0]
}
 800aa08:	bf00      	nop
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	e000e010 	.word	0xe000e010
 800aa18:	e000e018 	.word	0xe000e018
 800aa1c:	2000002c 	.word	0x2000002c
 800aa20:	10624dd3 	.word	0x10624dd3
 800aa24:	e000e014 	.word	0xe000e014

0800aa28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa38 <vPortEnableVFP+0x10>
 800aa2c:	6801      	ldr	r1, [r0, #0]
 800aa2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa32:	6001      	str	r1, [r0, #0]
 800aa34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa36:	bf00      	nop
 800aa38:	e000ed88 	.word	0xe000ed88

0800aa3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa42:	f3ef 8305 	mrs	r3, IPSR
 800aa46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b0f      	cmp	r3, #15
 800aa4c:	d916      	bls.n	800aa7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa4e:	4a19      	ldr	r2, [pc, #100]	; (800aab4 <vPortValidateInterruptPriority+0x78>)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <vPortValidateInterruptPriority+0x7c>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	7afa      	ldrb	r2, [r7, #11]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d20c      	bcs.n	800aa7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	b672      	cpsid	i
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	b662      	cpsie	i
 800aa76:	607b      	str	r3, [r7, #4]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <vPortValidateInterruptPriority+0x80>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa84:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <vPortValidateInterruptPriority+0x84>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d90c      	bls.n	800aaa6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	b672      	cpsid	i
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	b662      	cpsie	i
 800aaa0:	603b      	str	r3, [r7, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <vPortValidateInterruptPriority+0x68>
	}
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	e000e3f0 	.word	0xe000e3f0
 800aab8:	20001550 	.word	0x20001550
 800aabc:	e000ed0c 	.word	0xe000ed0c
 800aac0:	20001554 	.word	0x20001554

0800aac4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	; 0x28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aad0:	f7fe fd82 	bl	80095d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aad4:	4b5b      	ldr	r3, [pc, #364]	; (800ac44 <pvPortMalloc+0x180>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aadc:	f000 f91a 	bl	800ad14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aae0:	4b59      	ldr	r3, [pc, #356]	; (800ac48 <pvPortMalloc+0x184>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4013      	ands	r3, r2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f040 8092 	bne.w	800ac12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01f      	beq.n	800ab34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aaf4:	2208      	movs	r2, #8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4413      	add	r3, r2
 800aafa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d016      	beq.n	800ab34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f023 0307 	bic.w	r3, r3, #7
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f003 0307 	and.w	r3, r3, #7
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00c      	beq.n	800ab34 <pvPortMalloc+0x70>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	b672      	cpsid	i
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	b662      	cpsie	i
 800ab2e:	617b      	str	r3, [r7, #20]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d06b      	beq.n	800ac12 <pvPortMalloc+0x14e>
 800ab3a:	4b44      	ldr	r3, [pc, #272]	; (800ac4c <pvPortMalloc+0x188>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d866      	bhi.n	800ac12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab44:	4b42      	ldr	r3, [pc, #264]	; (800ac50 <pvPortMalloc+0x18c>)
 800ab46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab48:	4b41      	ldr	r3, [pc, #260]	; (800ac50 <pvPortMalloc+0x18c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab4e:	e004      	b.n	800ab5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d903      	bls.n	800ab6c <pvPortMalloc+0xa8>
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1f1      	bne.n	800ab50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab6c:	4b35      	ldr	r3, [pc, #212]	; (800ac44 <pvPortMalloc+0x180>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d04d      	beq.n	800ac12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2208      	movs	r2, #8
 800ab7c:	4413      	add	r3, r2
 800ab7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	2308      	movs	r3, #8
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d921      	bls.n	800abdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00c      	beq.n	800abc4 <pvPortMalloc+0x100>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	b672      	cpsid	i
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	b662      	cpsie	i
 800abbe:	613b      	str	r3, [r7, #16]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	1ad2      	subs	r2, r2, r3
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f000 f8fe 	bl	800add8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abdc:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <pvPortMalloc+0x188>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	4a19      	ldr	r2, [pc, #100]	; (800ac4c <pvPortMalloc+0x188>)
 800abe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <pvPortMalloc+0x188>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <pvPortMalloc+0x190>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d203      	bcs.n	800abfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abf6:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <pvPortMalloc+0x188>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a16      	ldr	r2, [pc, #88]	; (800ac54 <pvPortMalloc+0x190>)
 800abfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <pvPortMalloc+0x184>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac12:	f7fe fcef 	bl	80095f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00c      	beq.n	800ac3a <pvPortMalloc+0x176>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	b672      	cpsid	i
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	b662      	cpsie	i
 800ac34:	60fb      	str	r3, [r7, #12]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <pvPortMalloc+0x174>
	return pvReturn;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3728      	adds	r7, #40	; 0x28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20005160 	.word	0x20005160
 800ac48:	2000516c 	.word	0x2000516c
 800ac4c:	20005164 	.word	0x20005164
 800ac50:	20005158 	.word	0x20005158
 800ac54:	20005168 	.word	0x20005168

0800ac58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d04c      	beq.n	800ad04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	425b      	negs	r3, r3
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4413      	add	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <vPortFree+0xb4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4013      	ands	r3, r2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10c      	bne.n	800aca0 <vPortFree+0x48>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	b672      	cpsid	i
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	b662      	cpsie	i
 800ac9a:	60fb      	str	r3, [r7, #12]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00c      	beq.n	800acc2 <vPortFree+0x6a>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	b672      	cpsid	i
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	b662      	cpsie	i
 800acbc:	60bb      	str	r3, [r7, #8]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <vPortFree+0xb4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d019      	beq.n	800ad04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d115      	bne.n	800ad04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <vPortFree+0xb4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	43db      	mvns	r3, r3
 800ace2:	401a      	ands	r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ace8:	f7fe fc76 	bl	80095d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <vPortFree+0xb8>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4413      	add	r3, r2
 800acf6:	4a06      	ldr	r2, [pc, #24]	; (800ad10 <vPortFree+0xb8>)
 800acf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acfa:	6938      	ldr	r0, [r7, #16]
 800acfc:	f000 f86c 	bl	800add8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad00:	f7fe fc78 	bl	80095f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad04:	bf00      	nop
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	2000516c 	.word	0x2000516c
 800ad10:	20005164 	.word	0x20005164

0800ad14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad20:	4b27      	ldr	r3, [pc, #156]	; (800adc0 <prvHeapInit+0xac>)
 800ad22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00c      	beq.n	800ad48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3307      	adds	r3, #7
 800ad32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0307 	bic.w	r3, r3, #7
 800ad3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	4a1f      	ldr	r2, [pc, #124]	; (800adc0 <prvHeapInit+0xac>)
 800ad44:	4413      	add	r3, r2
 800ad46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <prvHeapInit+0xb0>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad52:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <prvHeapInit+0xb0>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad60:	2208      	movs	r2, #8
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0307 	bic.w	r3, r3, #7
 800ad6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a15      	ldr	r2, [pc, #84]	; (800adc8 <prvHeapInit+0xb4>)
 800ad74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <prvHeapInit+0xb4>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad7e:	4b12      	ldr	r3, [pc, #72]	; (800adc8 <prvHeapInit+0xb4>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad94:	4b0c      	ldr	r3, [pc, #48]	; (800adc8 <prvHeapInit+0xb4>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4a0a      	ldr	r2, [pc, #40]	; (800adcc <prvHeapInit+0xb8>)
 800ada2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4a09      	ldr	r2, [pc, #36]	; (800add0 <prvHeapInit+0xbc>)
 800adaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adac:	4b09      	ldr	r3, [pc, #36]	; (800add4 <prvHeapInit+0xc0>)
 800adae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adb2:	601a      	str	r2, [r3, #0]
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	20001558 	.word	0x20001558
 800adc4:	20005158 	.word	0x20005158
 800adc8:	20005160 	.word	0x20005160
 800adcc:	20005168 	.word	0x20005168
 800add0:	20005164 	.word	0x20005164
 800add4:	2000516c 	.word	0x2000516c

0800add8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ade0:	4b28      	ldr	r3, [pc, #160]	; (800ae84 <prvInsertBlockIntoFreeList+0xac>)
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	e002      	b.n	800adec <prvInsertBlockIntoFreeList+0x14>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d8f7      	bhi.n	800ade6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	4413      	add	r3, r2
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d108      	bne.n	800ae1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	441a      	add	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	441a      	add	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d118      	bne.n	800ae60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <prvInsertBlockIntoFreeList+0xb0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d00d      	beq.n	800ae56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	441a      	add	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e008      	b.n	800ae68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae56:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <prvInsertBlockIntoFreeList+0xb0>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	e003      	b.n	800ae68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d002      	beq.n	800ae76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20005158 	.word	0x20005158
 800ae88:	20005160 	.word	0x20005160

0800ae8c <std>:
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	e9c0 3300 	strd	r3, r3, [r0]
 800ae96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae9a:	6083      	str	r3, [r0, #8]
 800ae9c:	8181      	strh	r1, [r0, #12]
 800ae9e:	6643      	str	r3, [r0, #100]	; 0x64
 800aea0:	81c2      	strh	r2, [r0, #14]
 800aea2:	6183      	str	r3, [r0, #24]
 800aea4:	4619      	mov	r1, r3
 800aea6:	2208      	movs	r2, #8
 800aea8:	305c      	adds	r0, #92	; 0x5c
 800aeaa:	f000 f8f4 	bl	800b096 <memset>
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <std+0x38>)
 800aeb0:	6263      	str	r3, [r4, #36]	; 0x24
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <std+0x3c>)
 800aeb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <std+0x40>)
 800aeb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeba:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <std+0x44>)
 800aebc:	6224      	str	r4, [r4, #32]
 800aebe:	6323      	str	r3, [r4, #48]	; 0x30
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	bf00      	nop
 800aec4:	0800b011 	.word	0x0800b011
 800aec8:	0800b033 	.word	0x0800b033
 800aecc:	0800b06b 	.word	0x0800b06b
 800aed0:	0800b08f 	.word	0x0800b08f

0800aed4 <stdio_exit_handler>:
 800aed4:	4a02      	ldr	r2, [pc, #8]	; (800aee0 <stdio_exit_handler+0xc>)
 800aed6:	4903      	ldr	r1, [pc, #12]	; (800aee4 <stdio_exit_handler+0x10>)
 800aed8:	4803      	ldr	r0, [pc, #12]	; (800aee8 <stdio_exit_handler+0x14>)
 800aeda:	f000 b869 	b.w	800afb0 <_fwalk_sglue>
 800aede:	bf00      	nop
 800aee0:	2000003c 	.word	0x2000003c
 800aee4:	0800baf9 	.word	0x0800baf9
 800aee8:	20000048 	.word	0x20000048

0800aeec <cleanup_stdio>:
 800aeec:	6841      	ldr	r1, [r0, #4]
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <cleanup_stdio+0x34>)
 800aef0:	4299      	cmp	r1, r3
 800aef2:	b510      	push	{r4, lr}
 800aef4:	4604      	mov	r4, r0
 800aef6:	d001      	beq.n	800aefc <cleanup_stdio+0x10>
 800aef8:	f000 fdfe 	bl	800baf8 <_fflush_r>
 800aefc:	68a1      	ldr	r1, [r4, #8]
 800aefe:	4b09      	ldr	r3, [pc, #36]	; (800af24 <cleanup_stdio+0x38>)
 800af00:	4299      	cmp	r1, r3
 800af02:	d002      	beq.n	800af0a <cleanup_stdio+0x1e>
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fdf7 	bl	800baf8 <_fflush_r>
 800af0a:	68e1      	ldr	r1, [r4, #12]
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <cleanup_stdio+0x3c>)
 800af0e:	4299      	cmp	r1, r3
 800af10:	d004      	beq.n	800af1c <cleanup_stdio+0x30>
 800af12:	4620      	mov	r0, r4
 800af14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af18:	f000 bdee 	b.w	800baf8 <_fflush_r>
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	20005170 	.word	0x20005170
 800af24:	200051d8 	.word	0x200051d8
 800af28:	20005240 	.word	0x20005240

0800af2c <global_stdio_init.part.0>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <global_stdio_init.part.0+0x30>)
 800af30:	4c0b      	ldr	r4, [pc, #44]	; (800af60 <global_stdio_init.part.0+0x34>)
 800af32:	4a0c      	ldr	r2, [pc, #48]	; (800af64 <global_stdio_init.part.0+0x38>)
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	4620      	mov	r0, r4
 800af38:	2200      	movs	r2, #0
 800af3a:	2104      	movs	r1, #4
 800af3c:	f7ff ffa6 	bl	800ae8c <std>
 800af40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af44:	2201      	movs	r2, #1
 800af46:	2109      	movs	r1, #9
 800af48:	f7ff ffa0 	bl	800ae8c <std>
 800af4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af50:	2202      	movs	r2, #2
 800af52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af56:	2112      	movs	r1, #18
 800af58:	f7ff bf98 	b.w	800ae8c <std>
 800af5c:	200052a8 	.word	0x200052a8
 800af60:	20005170 	.word	0x20005170
 800af64:	0800aed5 	.word	0x0800aed5

0800af68 <__sfp_lock_acquire>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__sfp_lock_acquire+0x8>)
 800af6a:	f000 b963 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800af6e:	bf00      	nop
 800af70:	200052b1 	.word	0x200052b1

0800af74 <__sfp_lock_release>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sfp_lock_release+0x8>)
 800af76:	f000 b95e 	b.w	800b236 <__retarget_lock_release_recursive>
 800af7a:	bf00      	nop
 800af7c:	200052b1 	.word	0x200052b1

0800af80 <__sinit>:
 800af80:	b510      	push	{r4, lr}
 800af82:	4604      	mov	r4, r0
 800af84:	f7ff fff0 	bl	800af68 <__sfp_lock_acquire>
 800af88:	6a23      	ldr	r3, [r4, #32]
 800af8a:	b11b      	cbz	r3, 800af94 <__sinit+0x14>
 800af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af90:	f7ff bff0 	b.w	800af74 <__sfp_lock_release>
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <__sinit+0x28>)
 800af96:	6223      	str	r3, [r4, #32]
 800af98:	4b04      	ldr	r3, [pc, #16]	; (800afac <__sinit+0x2c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1f5      	bne.n	800af8c <__sinit+0xc>
 800afa0:	f7ff ffc4 	bl	800af2c <global_stdio_init.part.0>
 800afa4:	e7f2      	b.n	800af8c <__sinit+0xc>
 800afa6:	bf00      	nop
 800afa8:	0800aeed 	.word	0x0800aeed
 800afac:	200052a8 	.word	0x200052a8

0800afb0 <_fwalk_sglue>:
 800afb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb4:	4607      	mov	r7, r0
 800afb6:	4688      	mov	r8, r1
 800afb8:	4614      	mov	r4, r2
 800afba:	2600      	movs	r6, #0
 800afbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afc0:	f1b9 0901 	subs.w	r9, r9, #1
 800afc4:	d505      	bpl.n	800afd2 <_fwalk_sglue+0x22>
 800afc6:	6824      	ldr	r4, [r4, #0]
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d1f7      	bne.n	800afbc <_fwalk_sglue+0xc>
 800afcc:	4630      	mov	r0, r6
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d907      	bls.n	800afe8 <_fwalk_sglue+0x38>
 800afd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afdc:	3301      	adds	r3, #1
 800afde:	d003      	beq.n	800afe8 <_fwalk_sglue+0x38>
 800afe0:	4629      	mov	r1, r5
 800afe2:	4638      	mov	r0, r7
 800afe4:	47c0      	blx	r8
 800afe6:	4306      	orrs	r6, r0
 800afe8:	3568      	adds	r5, #104	; 0x68
 800afea:	e7e9      	b.n	800afc0 <_fwalk_sglue+0x10>

0800afec <iprintf>:
 800afec:	b40f      	push	{r0, r1, r2, r3}
 800afee:	b507      	push	{r0, r1, r2, lr}
 800aff0:	4906      	ldr	r1, [pc, #24]	; (800b00c <iprintf+0x20>)
 800aff2:	ab04      	add	r3, sp, #16
 800aff4:	6808      	ldr	r0, [r1, #0]
 800aff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800affa:	6881      	ldr	r1, [r0, #8]
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	f000 fa4b 	bl	800b498 <_vfiprintf_r>
 800b002:	b003      	add	sp, #12
 800b004:	f85d eb04 	ldr.w	lr, [sp], #4
 800b008:	b004      	add	sp, #16
 800b00a:	4770      	bx	lr
 800b00c:	20000094 	.word	0x20000094

0800b010 <__sread>:
 800b010:	b510      	push	{r4, lr}
 800b012:	460c      	mov	r4, r1
 800b014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b018:	f000 f8be 	bl	800b198 <_read_r>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	bfab      	itete	ge
 800b020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b022:	89a3      	ldrhlt	r3, [r4, #12]
 800b024:	181b      	addge	r3, r3, r0
 800b026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b02a:	bfac      	ite	ge
 800b02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b02e:	81a3      	strhlt	r3, [r4, #12]
 800b030:	bd10      	pop	{r4, pc}

0800b032 <__swrite>:
 800b032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b036:	461f      	mov	r7, r3
 800b038:	898b      	ldrh	r3, [r1, #12]
 800b03a:	05db      	lsls	r3, r3, #23
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	4616      	mov	r6, r2
 800b042:	d505      	bpl.n	800b050 <__swrite+0x1e>
 800b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b048:	2302      	movs	r3, #2
 800b04a:	2200      	movs	r2, #0
 800b04c:	f000 f892 	bl	800b174 <_lseek_r>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	4632      	mov	r2, r6
 800b05e:	463b      	mov	r3, r7
 800b060:	4628      	mov	r0, r5
 800b062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b066:	f000 b8a9 	b.w	800b1bc <_write_r>

0800b06a <__sseek>:
 800b06a:	b510      	push	{r4, lr}
 800b06c:	460c      	mov	r4, r1
 800b06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b072:	f000 f87f 	bl	800b174 <_lseek_r>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	bf15      	itete	ne
 800b07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b086:	81a3      	strheq	r3, [r4, #12]
 800b088:	bf18      	it	ne
 800b08a:	81a3      	strhne	r3, [r4, #12]
 800b08c:	bd10      	pop	{r4, pc}

0800b08e <__sclose>:
 800b08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b092:	f000 b809 	b.w	800b0a8 <_close_r>

0800b096 <memset>:
 800b096:	4402      	add	r2, r0
 800b098:	4603      	mov	r3, r0
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d100      	bne.n	800b0a0 <memset+0xa>
 800b09e:	4770      	bx	lr
 800b0a0:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a4:	e7f9      	b.n	800b09a <memset+0x4>
	...

0800b0a8 <_close_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d06      	ldr	r5, [pc, #24]	; (800b0c4 <_close_r+0x1c>)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	602b      	str	r3, [r5, #0]
 800b0b4:	f7f6 fd9b 	bl	8001bee <_close>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_close_r+0x1a>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_close_r+0x1a>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	200052ac 	.word	0x200052ac

0800b0c8 <_reclaim_reent>:
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <_reclaim_reent+0xa8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4283      	cmp	r3, r0
 800b0ce:	b570      	push	{r4, r5, r6, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	d04b      	beq.n	800b16c <_reclaim_reent+0xa4>
 800b0d4:	69c3      	ldr	r3, [r0, #28]
 800b0d6:	b143      	cbz	r3, 800b0ea <_reclaim_reent+0x22>
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d144      	bne.n	800b168 <_reclaim_reent+0xa0>
 800b0de:	69e3      	ldr	r3, [r4, #28]
 800b0e0:	6819      	ldr	r1, [r3, #0]
 800b0e2:	b111      	cbz	r1, 800b0ea <_reclaim_reent+0x22>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 f8b5 	bl	800b254 <_free_r>
 800b0ea:	6961      	ldr	r1, [r4, #20]
 800b0ec:	b111      	cbz	r1, 800b0f4 <_reclaim_reent+0x2c>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f8b0 	bl	800b254 <_free_r>
 800b0f4:	69e1      	ldr	r1, [r4, #28]
 800b0f6:	b111      	cbz	r1, 800b0fe <_reclaim_reent+0x36>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f8ab 	bl	800b254 <_free_r>
 800b0fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b100:	b111      	cbz	r1, 800b108 <_reclaim_reent+0x40>
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f8a6 	bl	800b254 <_free_r>
 800b108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b10a:	b111      	cbz	r1, 800b112 <_reclaim_reent+0x4a>
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 f8a1 	bl	800b254 <_free_r>
 800b112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b114:	b111      	cbz	r1, 800b11c <_reclaim_reent+0x54>
 800b116:	4620      	mov	r0, r4
 800b118:	f000 f89c 	bl	800b254 <_free_r>
 800b11c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b11e:	b111      	cbz	r1, 800b126 <_reclaim_reent+0x5e>
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f897 	bl	800b254 <_free_r>
 800b126:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b128:	b111      	cbz	r1, 800b130 <_reclaim_reent+0x68>
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f892 	bl	800b254 <_free_r>
 800b130:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b132:	b111      	cbz	r1, 800b13a <_reclaim_reent+0x72>
 800b134:	4620      	mov	r0, r4
 800b136:	f000 f88d 	bl	800b254 <_free_r>
 800b13a:	6a23      	ldr	r3, [r4, #32]
 800b13c:	b1b3      	cbz	r3, 800b16c <_reclaim_reent+0xa4>
 800b13e:	4620      	mov	r0, r4
 800b140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b144:	4718      	bx	r3
 800b146:	5949      	ldr	r1, [r1, r5]
 800b148:	b941      	cbnz	r1, 800b15c <_reclaim_reent+0x94>
 800b14a:	3504      	adds	r5, #4
 800b14c:	69e3      	ldr	r3, [r4, #28]
 800b14e:	2d80      	cmp	r5, #128	; 0x80
 800b150:	68d9      	ldr	r1, [r3, #12]
 800b152:	d1f8      	bne.n	800b146 <_reclaim_reent+0x7e>
 800b154:	4620      	mov	r0, r4
 800b156:	f000 f87d 	bl	800b254 <_free_r>
 800b15a:	e7c0      	b.n	800b0de <_reclaim_reent+0x16>
 800b15c:	680e      	ldr	r6, [r1, #0]
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f878 	bl	800b254 <_free_r>
 800b164:	4631      	mov	r1, r6
 800b166:	e7ef      	b.n	800b148 <_reclaim_reent+0x80>
 800b168:	2500      	movs	r5, #0
 800b16a:	e7ef      	b.n	800b14c <_reclaim_reent+0x84>
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	bf00      	nop
 800b170:	20000094 	.word	0x20000094

0800b174 <_lseek_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	; (800b194 <_lseek_r+0x20>)
 800b178:	4604      	mov	r4, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	f7f6 fd5a 	bl	8001c3c <_lseek>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_lseek_r+0x1e>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_lseek_r+0x1e>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	200052ac 	.word	0x200052ac

0800b198 <_read_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	; (800b1b8 <_read_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f6 fce8 	bl	8001b7c <_read>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_read_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_read_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	200052ac 	.word	0x200052ac

0800b1bc <_write_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	; (800b1dc <_write_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f6 fcf3 	bl	8001bb6 <_write>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_write_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_write_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200052ac 	.word	0x200052ac

0800b1e0 <__errno>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	; (800b1e8 <__errno+0x8>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20000094 	.word	0x20000094

0800b1ec <__libc_init_array>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	4d0d      	ldr	r5, [pc, #52]	; (800b224 <__libc_init_array+0x38>)
 800b1f0:	4c0d      	ldr	r4, [pc, #52]	; (800b228 <__libc_init_array+0x3c>)
 800b1f2:	1b64      	subs	r4, r4, r5
 800b1f4:	10a4      	asrs	r4, r4, #2
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	42a6      	cmp	r6, r4
 800b1fa:	d109      	bne.n	800b210 <__libc_init_array+0x24>
 800b1fc:	4d0b      	ldr	r5, [pc, #44]	; (800b22c <__libc_init_array+0x40>)
 800b1fe:	4c0c      	ldr	r4, [pc, #48]	; (800b230 <__libc_init_array+0x44>)
 800b200:	f000 fdcc 	bl	800bd9c <_init>
 800b204:	1b64      	subs	r4, r4, r5
 800b206:	10a4      	asrs	r4, r4, #2
 800b208:	2600      	movs	r6, #0
 800b20a:	42a6      	cmp	r6, r4
 800b20c:	d105      	bne.n	800b21a <__libc_init_array+0x2e>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	f855 3b04 	ldr.w	r3, [r5], #4
 800b214:	4798      	blx	r3
 800b216:	3601      	adds	r6, #1
 800b218:	e7ee      	b.n	800b1f8 <__libc_init_array+0xc>
 800b21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21e:	4798      	blx	r3
 800b220:	3601      	adds	r6, #1
 800b222:	e7f2      	b.n	800b20a <__libc_init_array+0x1e>
 800b224:	0800d710 	.word	0x0800d710
 800b228:	0800d710 	.word	0x0800d710
 800b22c:	0800d710 	.word	0x0800d710
 800b230:	0800d714 	.word	0x0800d714

0800b234 <__retarget_lock_acquire_recursive>:
 800b234:	4770      	bx	lr

0800b236 <__retarget_lock_release_recursive>:
 800b236:	4770      	bx	lr

0800b238 <memcpy>:
 800b238:	440a      	add	r2, r1
 800b23a:	4291      	cmp	r1, r2
 800b23c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b240:	d100      	bne.n	800b244 <memcpy+0xc>
 800b242:	4770      	bx	lr
 800b244:	b510      	push	{r4, lr}
 800b246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b24e:	4291      	cmp	r1, r2
 800b250:	d1f9      	bne.n	800b246 <memcpy+0xe>
 800b252:	bd10      	pop	{r4, pc}

0800b254 <_free_r>:
 800b254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b256:	2900      	cmp	r1, #0
 800b258:	d044      	beq.n	800b2e4 <_free_r+0x90>
 800b25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25e:	9001      	str	r0, [sp, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f1a1 0404 	sub.w	r4, r1, #4
 800b266:	bfb8      	it	lt
 800b268:	18e4      	addlt	r4, r4, r3
 800b26a:	f000 f8df 	bl	800b42c <__malloc_lock>
 800b26e:	4a1e      	ldr	r2, [pc, #120]	; (800b2e8 <_free_r+0x94>)
 800b270:	9801      	ldr	r0, [sp, #4]
 800b272:	6813      	ldr	r3, [r2, #0]
 800b274:	b933      	cbnz	r3, 800b284 <_free_r+0x30>
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	6014      	str	r4, [r2, #0]
 800b27a:	b003      	add	sp, #12
 800b27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b280:	f000 b8da 	b.w	800b438 <__malloc_unlock>
 800b284:	42a3      	cmp	r3, r4
 800b286:	d908      	bls.n	800b29a <_free_r+0x46>
 800b288:	6825      	ldr	r5, [r4, #0]
 800b28a:	1961      	adds	r1, r4, r5
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf01      	itttt	eq
 800b290:	6819      	ldreq	r1, [r3, #0]
 800b292:	685b      	ldreq	r3, [r3, #4]
 800b294:	1949      	addeq	r1, r1, r5
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	e7ed      	b.n	800b276 <_free_r+0x22>
 800b29a:	461a      	mov	r2, r3
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b10b      	cbz	r3, 800b2a4 <_free_r+0x50>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d9fa      	bls.n	800b29a <_free_r+0x46>
 800b2a4:	6811      	ldr	r1, [r2, #0]
 800b2a6:	1855      	adds	r5, r2, r1
 800b2a8:	42a5      	cmp	r5, r4
 800b2aa:	d10b      	bne.n	800b2c4 <_free_r+0x70>
 800b2ac:	6824      	ldr	r4, [r4, #0]
 800b2ae:	4421      	add	r1, r4
 800b2b0:	1854      	adds	r4, r2, r1
 800b2b2:	42a3      	cmp	r3, r4
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	d1e0      	bne.n	800b27a <_free_r+0x26>
 800b2b8:	681c      	ldr	r4, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	6053      	str	r3, [r2, #4]
 800b2be:	440c      	add	r4, r1
 800b2c0:	6014      	str	r4, [r2, #0]
 800b2c2:	e7da      	b.n	800b27a <_free_r+0x26>
 800b2c4:	d902      	bls.n	800b2cc <_free_r+0x78>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	6003      	str	r3, [r0, #0]
 800b2ca:	e7d6      	b.n	800b27a <_free_r+0x26>
 800b2cc:	6825      	ldr	r5, [r4, #0]
 800b2ce:	1961      	adds	r1, r4, r5
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	bf04      	itt	eq
 800b2d4:	6819      	ldreq	r1, [r3, #0]
 800b2d6:	685b      	ldreq	r3, [r3, #4]
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	bf04      	itt	eq
 800b2dc:	1949      	addeq	r1, r1, r5
 800b2de:	6021      	streq	r1, [r4, #0]
 800b2e0:	6054      	str	r4, [r2, #4]
 800b2e2:	e7ca      	b.n	800b27a <_free_r+0x26>
 800b2e4:	b003      	add	sp, #12
 800b2e6:	bd30      	pop	{r4, r5, pc}
 800b2e8:	200052b4 	.word	0x200052b4

0800b2ec <sbrk_aligned>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	4e0e      	ldr	r6, [pc, #56]	; (800b328 <sbrk_aligned+0x3c>)
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	6831      	ldr	r1, [r6, #0]
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	b911      	cbnz	r1, 800b2fe <sbrk_aligned+0x12>
 800b2f8:	f000 fcbc 	bl	800bc74 <_sbrk_r>
 800b2fc:	6030      	str	r0, [r6, #0]
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f000 fcb7 	bl	800bc74 <_sbrk_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d00a      	beq.n	800b320 <sbrk_aligned+0x34>
 800b30a:	1cc4      	adds	r4, r0, #3
 800b30c:	f024 0403 	bic.w	r4, r4, #3
 800b310:	42a0      	cmp	r0, r4
 800b312:	d007      	beq.n	800b324 <sbrk_aligned+0x38>
 800b314:	1a21      	subs	r1, r4, r0
 800b316:	4628      	mov	r0, r5
 800b318:	f000 fcac 	bl	800bc74 <_sbrk_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	d101      	bne.n	800b324 <sbrk_aligned+0x38>
 800b320:	f04f 34ff 	mov.w	r4, #4294967295
 800b324:	4620      	mov	r0, r4
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	200052b8 	.word	0x200052b8

0800b32c <_malloc_r>:
 800b32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b330:	1ccd      	adds	r5, r1, #3
 800b332:	f025 0503 	bic.w	r5, r5, #3
 800b336:	3508      	adds	r5, #8
 800b338:	2d0c      	cmp	r5, #12
 800b33a:	bf38      	it	cc
 800b33c:	250c      	movcc	r5, #12
 800b33e:	2d00      	cmp	r5, #0
 800b340:	4607      	mov	r7, r0
 800b342:	db01      	blt.n	800b348 <_malloc_r+0x1c>
 800b344:	42a9      	cmp	r1, r5
 800b346:	d905      	bls.n	800b354 <_malloc_r+0x28>
 800b348:	230c      	movs	r3, #12
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	2600      	movs	r6, #0
 800b34e:	4630      	mov	r0, r6
 800b350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b428 <_malloc_r+0xfc>
 800b358:	f000 f868 	bl	800b42c <__malloc_lock>
 800b35c:	f8d8 3000 	ldr.w	r3, [r8]
 800b360:	461c      	mov	r4, r3
 800b362:	bb5c      	cbnz	r4, 800b3bc <_malloc_r+0x90>
 800b364:	4629      	mov	r1, r5
 800b366:	4638      	mov	r0, r7
 800b368:	f7ff ffc0 	bl	800b2ec <sbrk_aligned>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	4604      	mov	r4, r0
 800b370:	d155      	bne.n	800b41e <_malloc_r+0xf2>
 800b372:	f8d8 4000 	ldr.w	r4, [r8]
 800b376:	4626      	mov	r6, r4
 800b378:	2e00      	cmp	r6, #0
 800b37a:	d145      	bne.n	800b408 <_malloc_r+0xdc>
 800b37c:	2c00      	cmp	r4, #0
 800b37e:	d048      	beq.n	800b412 <_malloc_r+0xe6>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	4631      	mov	r1, r6
 800b384:	4638      	mov	r0, r7
 800b386:	eb04 0903 	add.w	r9, r4, r3
 800b38a:	f000 fc73 	bl	800bc74 <_sbrk_r>
 800b38e:	4581      	cmp	r9, r0
 800b390:	d13f      	bne.n	800b412 <_malloc_r+0xe6>
 800b392:	6821      	ldr	r1, [r4, #0]
 800b394:	1a6d      	subs	r5, r5, r1
 800b396:	4629      	mov	r1, r5
 800b398:	4638      	mov	r0, r7
 800b39a:	f7ff ffa7 	bl	800b2ec <sbrk_aligned>
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d037      	beq.n	800b412 <_malloc_r+0xe6>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	442b      	add	r3, r5
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d038      	beq.n	800b422 <_malloc_r+0xf6>
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	d12b      	bne.n	800b40e <_malloc_r+0xe2>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	e00f      	b.n	800b3dc <_malloc_r+0xb0>
 800b3bc:	6822      	ldr	r2, [r4, #0]
 800b3be:	1b52      	subs	r2, r2, r5
 800b3c0:	d41f      	bmi.n	800b402 <_malloc_r+0xd6>
 800b3c2:	2a0b      	cmp	r2, #11
 800b3c4:	d917      	bls.n	800b3f6 <_malloc_r+0xca>
 800b3c6:	1961      	adds	r1, r4, r5
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	6025      	str	r5, [r4, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	6059      	strne	r1, [r3, #4]
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	bf08      	it	eq
 800b3d4:	f8c8 1000 	streq.w	r1, [r8]
 800b3d8:	5162      	str	r2, [r4, r5]
 800b3da:	604b      	str	r3, [r1, #4]
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f104 060b 	add.w	r6, r4, #11
 800b3e2:	f000 f829 	bl	800b438 <__malloc_unlock>
 800b3e6:	f026 0607 	bic.w	r6, r6, #7
 800b3ea:	1d23      	adds	r3, r4, #4
 800b3ec:	1af2      	subs	r2, r6, r3
 800b3ee:	d0ae      	beq.n	800b34e <_malloc_r+0x22>
 800b3f0:	1b9b      	subs	r3, r3, r6
 800b3f2:	50a3      	str	r3, [r4, r2]
 800b3f4:	e7ab      	b.n	800b34e <_malloc_r+0x22>
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	6862      	ldr	r2, [r4, #4]
 800b3fa:	d1dd      	bne.n	800b3b8 <_malloc_r+0x8c>
 800b3fc:	f8c8 2000 	str.w	r2, [r8]
 800b400:	e7ec      	b.n	800b3dc <_malloc_r+0xb0>
 800b402:	4623      	mov	r3, r4
 800b404:	6864      	ldr	r4, [r4, #4]
 800b406:	e7ac      	b.n	800b362 <_malloc_r+0x36>
 800b408:	4634      	mov	r4, r6
 800b40a:	6876      	ldr	r6, [r6, #4]
 800b40c:	e7b4      	b.n	800b378 <_malloc_r+0x4c>
 800b40e:	4613      	mov	r3, r2
 800b410:	e7cc      	b.n	800b3ac <_malloc_r+0x80>
 800b412:	230c      	movs	r3, #12
 800b414:	603b      	str	r3, [r7, #0]
 800b416:	4638      	mov	r0, r7
 800b418:	f000 f80e 	bl	800b438 <__malloc_unlock>
 800b41c:	e797      	b.n	800b34e <_malloc_r+0x22>
 800b41e:	6025      	str	r5, [r4, #0]
 800b420:	e7dc      	b.n	800b3dc <_malloc_r+0xb0>
 800b422:	605b      	str	r3, [r3, #4]
 800b424:	deff      	udf	#255	; 0xff
 800b426:	bf00      	nop
 800b428:	200052b4 	.word	0x200052b4

0800b42c <__malloc_lock>:
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <__malloc_lock+0x8>)
 800b42e:	f7ff bf01 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800b432:	bf00      	nop
 800b434:	200052b0 	.word	0x200052b0

0800b438 <__malloc_unlock>:
 800b438:	4801      	ldr	r0, [pc, #4]	; (800b440 <__malloc_unlock+0x8>)
 800b43a:	f7ff befc 	b.w	800b236 <__retarget_lock_release_recursive>
 800b43e:	bf00      	nop
 800b440:	200052b0 	.word	0x200052b0

0800b444 <__sfputc_r>:
 800b444:	6893      	ldr	r3, [r2, #8]
 800b446:	3b01      	subs	r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	b410      	push	{r4}
 800b44c:	6093      	str	r3, [r2, #8]
 800b44e:	da08      	bge.n	800b462 <__sfputc_r+0x1e>
 800b450:	6994      	ldr	r4, [r2, #24]
 800b452:	42a3      	cmp	r3, r4
 800b454:	db01      	blt.n	800b45a <__sfputc_r+0x16>
 800b456:	290a      	cmp	r1, #10
 800b458:	d103      	bne.n	800b462 <__sfputc_r+0x1e>
 800b45a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45e:	f000 bb73 	b.w	800bb48 <__swbuf_r>
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	1c58      	adds	r0, r3, #1
 800b466:	6010      	str	r0, [r2, #0]
 800b468:	7019      	strb	r1, [r3, #0]
 800b46a:	4608      	mov	r0, r1
 800b46c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <__sfputs_r>:
 800b472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	4614      	mov	r4, r2
 800b47a:	18d5      	adds	r5, r2, r3
 800b47c:	42ac      	cmp	r4, r5
 800b47e:	d101      	bne.n	800b484 <__sfputs_r+0x12>
 800b480:	2000      	movs	r0, #0
 800b482:	e007      	b.n	800b494 <__sfputs_r+0x22>
 800b484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b488:	463a      	mov	r2, r7
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7ff ffda 	bl	800b444 <__sfputc_r>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d1f3      	bne.n	800b47c <__sfputs_r+0xa>
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b498 <_vfiprintf_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	460d      	mov	r5, r1
 800b49e:	b09d      	sub	sp, #116	; 0x74
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	4698      	mov	r8, r3
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	b118      	cbz	r0, 800b4b0 <_vfiprintf_r+0x18>
 800b4a8:	6a03      	ldr	r3, [r0, #32]
 800b4aa:	b90b      	cbnz	r3, 800b4b0 <_vfiprintf_r+0x18>
 800b4ac:	f7ff fd68 	bl	800af80 <__sinit>
 800b4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	d405      	bmi.n	800b4c2 <_vfiprintf_r+0x2a>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	059a      	lsls	r2, r3, #22
 800b4ba:	d402      	bmi.n	800b4c2 <_vfiprintf_r+0x2a>
 800b4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4be:	f7ff feb9 	bl	800b234 <__retarget_lock_acquire_recursive>
 800b4c2:	89ab      	ldrh	r3, [r5, #12]
 800b4c4:	071b      	lsls	r3, r3, #28
 800b4c6:	d501      	bpl.n	800b4cc <_vfiprintf_r+0x34>
 800b4c8:	692b      	ldr	r3, [r5, #16]
 800b4ca:	b99b      	cbnz	r3, 800b4f4 <_vfiprintf_r+0x5c>
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f000 fb78 	bl	800bbc4 <__swsetup_r>
 800b4d4:	b170      	cbz	r0, 800b4f4 <_vfiprintf_r+0x5c>
 800b4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d8:	07dc      	lsls	r4, r3, #31
 800b4da:	d504      	bpl.n	800b4e6 <_vfiprintf_r+0x4e>
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	b01d      	add	sp, #116	; 0x74
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	0598      	lsls	r0, r3, #22
 800b4ea:	d4f7      	bmi.n	800b4dc <_vfiprintf_r+0x44>
 800b4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ee:	f7ff fea2 	bl	800b236 <__retarget_lock_release_recursive>
 800b4f2:	e7f3      	b.n	800b4dc <_vfiprintf_r+0x44>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b502:	2330      	movs	r3, #48	; 0x30
 800b504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6b8 <_vfiprintf_r+0x220>
 800b508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b50c:	f04f 0901 	mov.w	r9, #1
 800b510:	4623      	mov	r3, r4
 800b512:	469a      	mov	sl, r3
 800b514:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b518:	b10a      	cbz	r2, 800b51e <_vfiprintf_r+0x86>
 800b51a:	2a25      	cmp	r2, #37	; 0x25
 800b51c:	d1f9      	bne.n	800b512 <_vfiprintf_r+0x7a>
 800b51e:	ebba 0b04 	subs.w	fp, sl, r4
 800b522:	d00b      	beq.n	800b53c <_vfiprintf_r+0xa4>
 800b524:	465b      	mov	r3, fp
 800b526:	4622      	mov	r2, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	4630      	mov	r0, r6
 800b52c:	f7ff ffa1 	bl	800b472 <__sfputs_r>
 800b530:	3001      	adds	r0, #1
 800b532:	f000 80a9 	beq.w	800b688 <_vfiprintf_r+0x1f0>
 800b536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b538:	445a      	add	r2, fp
 800b53a:	9209      	str	r2, [sp, #36]	; 0x24
 800b53c:	f89a 3000 	ldrb.w	r3, [sl]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 80a1 	beq.w	800b688 <_vfiprintf_r+0x1f0>
 800b546:	2300      	movs	r3, #0
 800b548:	f04f 32ff 	mov.w	r2, #4294967295
 800b54c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b550:	f10a 0a01 	add.w	sl, sl, #1
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	9307      	str	r3, [sp, #28]
 800b558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b55c:	931a      	str	r3, [sp, #104]	; 0x68
 800b55e:	4654      	mov	r4, sl
 800b560:	2205      	movs	r2, #5
 800b562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b566:	4854      	ldr	r0, [pc, #336]	; (800b6b8 <_vfiprintf_r+0x220>)
 800b568:	f7f4 fe72 	bl	8000250 <memchr>
 800b56c:	9a04      	ldr	r2, [sp, #16]
 800b56e:	b9d8      	cbnz	r0, 800b5a8 <_vfiprintf_r+0x110>
 800b570:	06d1      	lsls	r1, r2, #27
 800b572:	bf44      	itt	mi
 800b574:	2320      	movmi	r3, #32
 800b576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b57a:	0713      	lsls	r3, r2, #28
 800b57c:	bf44      	itt	mi
 800b57e:	232b      	movmi	r3, #43	; 0x2b
 800b580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b584:	f89a 3000 	ldrb.w	r3, [sl]
 800b588:	2b2a      	cmp	r3, #42	; 0x2a
 800b58a:	d015      	beq.n	800b5b8 <_vfiprintf_r+0x120>
 800b58c:	9a07      	ldr	r2, [sp, #28]
 800b58e:	4654      	mov	r4, sl
 800b590:	2000      	movs	r0, #0
 800b592:	f04f 0c0a 	mov.w	ip, #10
 800b596:	4621      	mov	r1, r4
 800b598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b59c:	3b30      	subs	r3, #48	; 0x30
 800b59e:	2b09      	cmp	r3, #9
 800b5a0:	d94d      	bls.n	800b63e <_vfiprintf_r+0x1a6>
 800b5a2:	b1b0      	cbz	r0, 800b5d2 <_vfiprintf_r+0x13a>
 800b5a4:	9207      	str	r2, [sp, #28]
 800b5a6:	e014      	b.n	800b5d2 <_vfiprintf_r+0x13a>
 800b5a8:	eba0 0308 	sub.w	r3, r0, r8
 800b5ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	9304      	str	r3, [sp, #16]
 800b5b4:	46a2      	mov	sl, r4
 800b5b6:	e7d2      	b.n	800b55e <_vfiprintf_r+0xc6>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	1d19      	adds	r1, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	9103      	str	r1, [sp, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	bfbb      	ittet	lt
 800b5c4:	425b      	neglt	r3, r3
 800b5c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ca:	9307      	strge	r3, [sp, #28]
 800b5cc:	9307      	strlt	r3, [sp, #28]
 800b5ce:	bfb8      	it	lt
 800b5d0:	9204      	strlt	r2, [sp, #16]
 800b5d2:	7823      	ldrb	r3, [r4, #0]
 800b5d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b5d6:	d10c      	bne.n	800b5f2 <_vfiprintf_r+0x15a>
 800b5d8:	7863      	ldrb	r3, [r4, #1]
 800b5da:	2b2a      	cmp	r3, #42	; 0x2a
 800b5dc:	d134      	bne.n	800b648 <_vfiprintf_r+0x1b0>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	1d1a      	adds	r2, r3, #4
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	9203      	str	r2, [sp, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfb8      	it	lt
 800b5ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ee:	3402      	adds	r4, #2
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6c8 <_vfiprintf_r+0x230>
 800b5f6:	7821      	ldrb	r1, [r4, #0]
 800b5f8:	2203      	movs	r2, #3
 800b5fa:	4650      	mov	r0, sl
 800b5fc:	f7f4 fe28 	bl	8000250 <memchr>
 800b600:	b138      	cbz	r0, 800b612 <_vfiprintf_r+0x17a>
 800b602:	9b04      	ldr	r3, [sp, #16]
 800b604:	eba0 000a 	sub.w	r0, r0, sl
 800b608:	2240      	movs	r2, #64	; 0x40
 800b60a:	4082      	lsls	r2, r0
 800b60c:	4313      	orrs	r3, r2
 800b60e:	3401      	adds	r4, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b616:	4829      	ldr	r0, [pc, #164]	; (800b6bc <_vfiprintf_r+0x224>)
 800b618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b61c:	2206      	movs	r2, #6
 800b61e:	f7f4 fe17 	bl	8000250 <memchr>
 800b622:	2800      	cmp	r0, #0
 800b624:	d03f      	beq.n	800b6a6 <_vfiprintf_r+0x20e>
 800b626:	4b26      	ldr	r3, [pc, #152]	; (800b6c0 <_vfiprintf_r+0x228>)
 800b628:	bb1b      	cbnz	r3, 800b672 <_vfiprintf_r+0x1da>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	3307      	adds	r3, #7
 800b62e:	f023 0307 	bic.w	r3, r3, #7
 800b632:	3308      	adds	r3, #8
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b638:	443b      	add	r3, r7
 800b63a:	9309      	str	r3, [sp, #36]	; 0x24
 800b63c:	e768      	b.n	800b510 <_vfiprintf_r+0x78>
 800b63e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b642:	460c      	mov	r4, r1
 800b644:	2001      	movs	r0, #1
 800b646:	e7a6      	b.n	800b596 <_vfiprintf_r+0xfe>
 800b648:	2300      	movs	r3, #0
 800b64a:	3401      	adds	r4, #1
 800b64c:	9305      	str	r3, [sp, #20]
 800b64e:	4619      	mov	r1, r3
 800b650:	f04f 0c0a 	mov.w	ip, #10
 800b654:	4620      	mov	r0, r4
 800b656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b65a:	3a30      	subs	r2, #48	; 0x30
 800b65c:	2a09      	cmp	r2, #9
 800b65e:	d903      	bls.n	800b668 <_vfiprintf_r+0x1d0>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c6      	beq.n	800b5f2 <_vfiprintf_r+0x15a>
 800b664:	9105      	str	r1, [sp, #20]
 800b666:	e7c4      	b.n	800b5f2 <_vfiprintf_r+0x15a>
 800b668:	fb0c 2101 	mla	r1, ip, r1, r2
 800b66c:	4604      	mov	r4, r0
 800b66e:	2301      	movs	r3, #1
 800b670:	e7f0      	b.n	800b654 <_vfiprintf_r+0x1bc>
 800b672:	ab03      	add	r3, sp, #12
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	462a      	mov	r2, r5
 800b678:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <_vfiprintf_r+0x22c>)
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	4630      	mov	r0, r6
 800b67e:	f3af 8000 	nop.w
 800b682:	4607      	mov	r7, r0
 800b684:	1c78      	adds	r0, r7, #1
 800b686:	d1d6      	bne.n	800b636 <_vfiprintf_r+0x19e>
 800b688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b68a:	07d9      	lsls	r1, r3, #31
 800b68c:	d405      	bmi.n	800b69a <_vfiprintf_r+0x202>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	059a      	lsls	r2, r3, #22
 800b692:	d402      	bmi.n	800b69a <_vfiprintf_r+0x202>
 800b694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b696:	f7ff fdce 	bl	800b236 <__retarget_lock_release_recursive>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	065b      	lsls	r3, r3, #25
 800b69e:	f53f af1d 	bmi.w	800b4dc <_vfiprintf_r+0x44>
 800b6a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6a4:	e71c      	b.n	800b4e0 <_vfiprintf_r+0x48>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <_vfiprintf_r+0x22c>)
 800b6ae:	a904      	add	r1, sp, #16
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f000 f879 	bl	800b7a8 <_printf_i>
 800b6b6:	e7e4      	b.n	800b682 <_vfiprintf_r+0x1ea>
 800b6b8:	0800d6d4 	.word	0x0800d6d4
 800b6bc:	0800d6de 	.word	0x0800d6de
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	0800b473 	.word	0x0800b473
 800b6c8:	0800d6da 	.word	0x0800d6da

0800b6cc <_printf_common>:
 800b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	4616      	mov	r6, r2
 800b6d2:	4699      	mov	r9, r3
 800b6d4:	688a      	ldr	r2, [r1, #8]
 800b6d6:	690b      	ldr	r3, [r1, #16]
 800b6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	bfb8      	it	lt
 800b6e0:	4613      	movlt	r3, r2
 800b6e2:	6033      	str	r3, [r6, #0]
 800b6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	b10a      	cbz	r2, 800b6f2 <_printf_common+0x26>
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	6033      	str	r3, [r6, #0]
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	0699      	lsls	r1, r3, #26
 800b6f6:	bf42      	ittt	mi
 800b6f8:	6833      	ldrmi	r3, [r6, #0]
 800b6fa:	3302      	addmi	r3, #2
 800b6fc:	6033      	strmi	r3, [r6, #0]
 800b6fe:	6825      	ldr	r5, [r4, #0]
 800b700:	f015 0506 	ands.w	r5, r5, #6
 800b704:	d106      	bne.n	800b714 <_printf_common+0x48>
 800b706:	f104 0a19 	add.w	sl, r4, #25
 800b70a:	68e3      	ldr	r3, [r4, #12]
 800b70c:	6832      	ldr	r2, [r6, #0]
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	42ab      	cmp	r3, r5
 800b712:	dc26      	bgt.n	800b762 <_printf_common+0x96>
 800b714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b718:	1e13      	subs	r3, r2, #0
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	bf18      	it	ne
 800b71e:	2301      	movne	r3, #1
 800b720:	0692      	lsls	r2, r2, #26
 800b722:	d42b      	bmi.n	800b77c <_printf_common+0xb0>
 800b724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b728:	4649      	mov	r1, r9
 800b72a:	4638      	mov	r0, r7
 800b72c:	47c0      	blx	r8
 800b72e:	3001      	adds	r0, #1
 800b730:	d01e      	beq.n	800b770 <_printf_common+0xa4>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	6922      	ldr	r2, [r4, #16]
 800b736:	f003 0306 	and.w	r3, r3, #6
 800b73a:	2b04      	cmp	r3, #4
 800b73c:	bf02      	ittt	eq
 800b73e:	68e5      	ldreq	r5, [r4, #12]
 800b740:	6833      	ldreq	r3, [r6, #0]
 800b742:	1aed      	subeq	r5, r5, r3
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	bf0c      	ite	eq
 800b748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b74c:	2500      	movne	r5, #0
 800b74e:	4293      	cmp	r3, r2
 800b750:	bfc4      	itt	gt
 800b752:	1a9b      	subgt	r3, r3, r2
 800b754:	18ed      	addgt	r5, r5, r3
 800b756:	2600      	movs	r6, #0
 800b758:	341a      	adds	r4, #26
 800b75a:	42b5      	cmp	r5, r6
 800b75c:	d11a      	bne.n	800b794 <_printf_common+0xc8>
 800b75e:	2000      	movs	r0, #0
 800b760:	e008      	b.n	800b774 <_printf_common+0xa8>
 800b762:	2301      	movs	r3, #1
 800b764:	4652      	mov	r2, sl
 800b766:	4649      	mov	r1, r9
 800b768:	4638      	mov	r0, r7
 800b76a:	47c0      	blx	r8
 800b76c:	3001      	adds	r0, #1
 800b76e:	d103      	bne.n	800b778 <_printf_common+0xac>
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	3501      	adds	r5, #1
 800b77a:	e7c6      	b.n	800b70a <_printf_common+0x3e>
 800b77c:	18e1      	adds	r1, r4, r3
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	2030      	movs	r0, #48	; 0x30
 800b782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b786:	4422      	add	r2, r4
 800b788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b78c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b790:	3302      	adds	r3, #2
 800b792:	e7c7      	b.n	800b724 <_printf_common+0x58>
 800b794:	2301      	movs	r3, #1
 800b796:	4622      	mov	r2, r4
 800b798:	4649      	mov	r1, r9
 800b79a:	4638      	mov	r0, r7
 800b79c:	47c0      	blx	r8
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d0e6      	beq.n	800b770 <_printf_common+0xa4>
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	e7d9      	b.n	800b75a <_printf_common+0x8e>
	...

0800b7a8 <_printf_i>:
 800b7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ac:	7e0f      	ldrb	r7, [r1, #24]
 800b7ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7b0:	2f78      	cmp	r7, #120	; 0x78
 800b7b2:	4691      	mov	r9, r2
 800b7b4:	4680      	mov	r8, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	469a      	mov	sl, r3
 800b7ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7be:	d807      	bhi.n	800b7d0 <_printf_i+0x28>
 800b7c0:	2f62      	cmp	r7, #98	; 0x62
 800b7c2:	d80a      	bhi.n	800b7da <_printf_i+0x32>
 800b7c4:	2f00      	cmp	r7, #0
 800b7c6:	f000 80d4 	beq.w	800b972 <_printf_i+0x1ca>
 800b7ca:	2f58      	cmp	r7, #88	; 0x58
 800b7cc:	f000 80c0 	beq.w	800b950 <_printf_i+0x1a8>
 800b7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7d8:	e03a      	b.n	800b850 <_printf_i+0xa8>
 800b7da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7de:	2b15      	cmp	r3, #21
 800b7e0:	d8f6      	bhi.n	800b7d0 <_printf_i+0x28>
 800b7e2:	a101      	add	r1, pc, #4	; (adr r1, 800b7e8 <_printf_i+0x40>)
 800b7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e8:	0800b841 	.word	0x0800b841
 800b7ec:	0800b855 	.word	0x0800b855
 800b7f0:	0800b7d1 	.word	0x0800b7d1
 800b7f4:	0800b7d1 	.word	0x0800b7d1
 800b7f8:	0800b7d1 	.word	0x0800b7d1
 800b7fc:	0800b7d1 	.word	0x0800b7d1
 800b800:	0800b855 	.word	0x0800b855
 800b804:	0800b7d1 	.word	0x0800b7d1
 800b808:	0800b7d1 	.word	0x0800b7d1
 800b80c:	0800b7d1 	.word	0x0800b7d1
 800b810:	0800b7d1 	.word	0x0800b7d1
 800b814:	0800b959 	.word	0x0800b959
 800b818:	0800b881 	.word	0x0800b881
 800b81c:	0800b913 	.word	0x0800b913
 800b820:	0800b7d1 	.word	0x0800b7d1
 800b824:	0800b7d1 	.word	0x0800b7d1
 800b828:	0800b97b 	.word	0x0800b97b
 800b82c:	0800b7d1 	.word	0x0800b7d1
 800b830:	0800b881 	.word	0x0800b881
 800b834:	0800b7d1 	.word	0x0800b7d1
 800b838:	0800b7d1 	.word	0x0800b7d1
 800b83c:	0800b91b 	.word	0x0800b91b
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	1d1a      	adds	r2, r3, #4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	602a      	str	r2, [r5, #0]
 800b848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b84c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b850:	2301      	movs	r3, #1
 800b852:	e09f      	b.n	800b994 <_printf_i+0x1ec>
 800b854:	6820      	ldr	r0, [r4, #0]
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	0607      	lsls	r7, r0, #24
 800b85a:	f103 0104 	add.w	r1, r3, #4
 800b85e:	6029      	str	r1, [r5, #0]
 800b860:	d501      	bpl.n	800b866 <_printf_i+0xbe>
 800b862:	681e      	ldr	r6, [r3, #0]
 800b864:	e003      	b.n	800b86e <_printf_i+0xc6>
 800b866:	0646      	lsls	r6, r0, #25
 800b868:	d5fb      	bpl.n	800b862 <_printf_i+0xba>
 800b86a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b86e:	2e00      	cmp	r6, #0
 800b870:	da03      	bge.n	800b87a <_printf_i+0xd2>
 800b872:	232d      	movs	r3, #45	; 0x2d
 800b874:	4276      	negs	r6, r6
 800b876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87a:	485a      	ldr	r0, [pc, #360]	; (800b9e4 <_printf_i+0x23c>)
 800b87c:	230a      	movs	r3, #10
 800b87e:	e012      	b.n	800b8a6 <_printf_i+0xfe>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	6820      	ldr	r0, [r4, #0]
 800b884:	1d19      	adds	r1, r3, #4
 800b886:	6029      	str	r1, [r5, #0]
 800b888:	0605      	lsls	r5, r0, #24
 800b88a:	d501      	bpl.n	800b890 <_printf_i+0xe8>
 800b88c:	681e      	ldr	r6, [r3, #0]
 800b88e:	e002      	b.n	800b896 <_printf_i+0xee>
 800b890:	0641      	lsls	r1, r0, #25
 800b892:	d5fb      	bpl.n	800b88c <_printf_i+0xe4>
 800b894:	881e      	ldrh	r6, [r3, #0]
 800b896:	4853      	ldr	r0, [pc, #332]	; (800b9e4 <_printf_i+0x23c>)
 800b898:	2f6f      	cmp	r7, #111	; 0x6f
 800b89a:	bf0c      	ite	eq
 800b89c:	2308      	moveq	r3, #8
 800b89e:	230a      	movne	r3, #10
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a6:	6865      	ldr	r5, [r4, #4]
 800b8a8:	60a5      	str	r5, [r4, #8]
 800b8aa:	2d00      	cmp	r5, #0
 800b8ac:	bfa2      	ittt	ge
 800b8ae:	6821      	ldrge	r1, [r4, #0]
 800b8b0:	f021 0104 	bicge.w	r1, r1, #4
 800b8b4:	6021      	strge	r1, [r4, #0]
 800b8b6:	b90e      	cbnz	r6, 800b8bc <_printf_i+0x114>
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	d04b      	beq.n	800b954 <_printf_i+0x1ac>
 800b8bc:	4615      	mov	r5, r2
 800b8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800b8c6:	5dc7      	ldrb	r7, [r0, r7]
 800b8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8cc:	4637      	mov	r7, r6
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	460e      	mov	r6, r1
 800b8d2:	d9f4      	bls.n	800b8be <_printf_i+0x116>
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d10b      	bne.n	800b8f0 <_printf_i+0x148>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	07de      	lsls	r6, r3, #31
 800b8dc:	d508      	bpl.n	800b8f0 <_printf_i+0x148>
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	6861      	ldr	r1, [r4, #4]
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	bfde      	ittt	le
 800b8e6:	2330      	movle	r3, #48	; 0x30
 800b8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8f0:	1b52      	subs	r2, r2, r5
 800b8f2:	6122      	str	r2, [r4, #16]
 800b8f4:	f8cd a000 	str.w	sl, [sp]
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	aa03      	add	r2, sp, #12
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7ff fee4 	bl	800b6cc <_printf_common>
 800b904:	3001      	adds	r0, #1
 800b906:	d14a      	bne.n	800b99e <_printf_i+0x1f6>
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	b004      	add	sp, #16
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	f043 0320 	orr.w	r3, r3, #32
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	4833      	ldr	r0, [pc, #204]	; (800b9e8 <_printf_i+0x240>)
 800b91c:	2778      	movs	r7, #120	; 0x78
 800b91e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	6829      	ldr	r1, [r5, #0]
 800b926:	061f      	lsls	r7, r3, #24
 800b928:	f851 6b04 	ldr.w	r6, [r1], #4
 800b92c:	d402      	bmi.n	800b934 <_printf_i+0x18c>
 800b92e:	065f      	lsls	r7, r3, #25
 800b930:	bf48      	it	mi
 800b932:	b2b6      	uxthmi	r6, r6
 800b934:	07df      	lsls	r7, r3, #31
 800b936:	bf48      	it	mi
 800b938:	f043 0320 	orrmi.w	r3, r3, #32
 800b93c:	6029      	str	r1, [r5, #0]
 800b93e:	bf48      	it	mi
 800b940:	6023      	strmi	r3, [r4, #0]
 800b942:	b91e      	cbnz	r6, 800b94c <_printf_i+0x1a4>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	f023 0320 	bic.w	r3, r3, #32
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	2310      	movs	r3, #16
 800b94e:	e7a7      	b.n	800b8a0 <_printf_i+0xf8>
 800b950:	4824      	ldr	r0, [pc, #144]	; (800b9e4 <_printf_i+0x23c>)
 800b952:	e7e4      	b.n	800b91e <_printf_i+0x176>
 800b954:	4615      	mov	r5, r2
 800b956:	e7bd      	b.n	800b8d4 <_printf_i+0x12c>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	6826      	ldr	r6, [r4, #0]
 800b95c:	6961      	ldr	r1, [r4, #20]
 800b95e:	1d18      	adds	r0, r3, #4
 800b960:	6028      	str	r0, [r5, #0]
 800b962:	0635      	lsls	r5, r6, #24
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	d501      	bpl.n	800b96c <_printf_i+0x1c4>
 800b968:	6019      	str	r1, [r3, #0]
 800b96a:	e002      	b.n	800b972 <_printf_i+0x1ca>
 800b96c:	0670      	lsls	r0, r6, #25
 800b96e:	d5fb      	bpl.n	800b968 <_printf_i+0x1c0>
 800b970:	8019      	strh	r1, [r3, #0]
 800b972:	2300      	movs	r3, #0
 800b974:	6123      	str	r3, [r4, #16]
 800b976:	4615      	mov	r5, r2
 800b978:	e7bc      	b.n	800b8f4 <_printf_i+0x14c>
 800b97a:	682b      	ldr	r3, [r5, #0]
 800b97c:	1d1a      	adds	r2, r3, #4
 800b97e:	602a      	str	r2, [r5, #0]
 800b980:	681d      	ldr	r5, [r3, #0]
 800b982:	6862      	ldr	r2, [r4, #4]
 800b984:	2100      	movs	r1, #0
 800b986:	4628      	mov	r0, r5
 800b988:	f7f4 fc62 	bl	8000250 <memchr>
 800b98c:	b108      	cbz	r0, 800b992 <_printf_i+0x1ea>
 800b98e:	1b40      	subs	r0, r0, r5
 800b990:	6060      	str	r0, [r4, #4]
 800b992:	6863      	ldr	r3, [r4, #4]
 800b994:	6123      	str	r3, [r4, #16]
 800b996:	2300      	movs	r3, #0
 800b998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b99c:	e7aa      	b.n	800b8f4 <_printf_i+0x14c>
 800b99e:	6923      	ldr	r3, [r4, #16]
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	47d0      	blx	sl
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d0ad      	beq.n	800b908 <_printf_i+0x160>
 800b9ac:	6823      	ldr	r3, [r4, #0]
 800b9ae:	079b      	lsls	r3, r3, #30
 800b9b0:	d413      	bmi.n	800b9da <_printf_i+0x232>
 800b9b2:	68e0      	ldr	r0, [r4, #12]
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	4298      	cmp	r0, r3
 800b9b8:	bfb8      	it	lt
 800b9ba:	4618      	movlt	r0, r3
 800b9bc:	e7a6      	b.n	800b90c <_printf_i+0x164>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	47d0      	blx	sl
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d09d      	beq.n	800b908 <_printf_i+0x160>
 800b9cc:	3501      	adds	r5, #1
 800b9ce:	68e3      	ldr	r3, [r4, #12]
 800b9d0:	9903      	ldr	r1, [sp, #12]
 800b9d2:	1a5b      	subs	r3, r3, r1
 800b9d4:	42ab      	cmp	r3, r5
 800b9d6:	dcf2      	bgt.n	800b9be <_printf_i+0x216>
 800b9d8:	e7eb      	b.n	800b9b2 <_printf_i+0x20a>
 800b9da:	2500      	movs	r5, #0
 800b9dc:	f104 0619 	add.w	r6, r4, #25
 800b9e0:	e7f5      	b.n	800b9ce <_printf_i+0x226>
 800b9e2:	bf00      	nop
 800b9e4:	0800d6e5 	.word	0x0800d6e5
 800b9e8:	0800d6f6 	.word	0x0800d6f6

0800b9ec <__sflush_r>:
 800b9ec:	898a      	ldrh	r2, [r1, #12]
 800b9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	0710      	lsls	r0, r2, #28
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	d458      	bmi.n	800baac <__sflush_r+0xc0>
 800b9fa:	684b      	ldr	r3, [r1, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dc05      	bgt.n	800ba0c <__sflush_r+0x20>
 800ba00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	dc02      	bgt.n	800ba0c <__sflush_r+0x20>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	d0f9      	beq.n	800ba06 <__sflush_r+0x1a>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba18:	682f      	ldr	r7, [r5, #0]
 800ba1a:	6a21      	ldr	r1, [r4, #32]
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	d032      	beq.n	800ba86 <__sflush_r+0x9a>
 800ba20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	075a      	lsls	r2, r3, #29
 800ba26:	d505      	bpl.n	800ba34 <__sflush_r+0x48>
 800ba28:	6863      	ldr	r3, [r4, #4]
 800ba2a:	1ac0      	subs	r0, r0, r3
 800ba2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba2e:	b10b      	cbz	r3, 800ba34 <__sflush_r+0x48>
 800ba30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba32:	1ac0      	subs	r0, r0, r3
 800ba34:	2300      	movs	r3, #0
 800ba36:	4602      	mov	r2, r0
 800ba38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba3a:	6a21      	ldr	r1, [r4, #32]
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b0      	blx	r6
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	d106      	bne.n	800ba54 <__sflush_r+0x68>
 800ba46:	6829      	ldr	r1, [r5, #0]
 800ba48:	291d      	cmp	r1, #29
 800ba4a:	d82b      	bhi.n	800baa4 <__sflush_r+0xb8>
 800ba4c:	4a29      	ldr	r2, [pc, #164]	; (800baf4 <__sflush_r+0x108>)
 800ba4e:	410a      	asrs	r2, r1
 800ba50:	07d6      	lsls	r6, r2, #31
 800ba52:	d427      	bmi.n	800baa4 <__sflush_r+0xb8>
 800ba54:	2200      	movs	r2, #0
 800ba56:	6062      	str	r2, [r4, #4]
 800ba58:	04d9      	lsls	r1, r3, #19
 800ba5a:	6922      	ldr	r2, [r4, #16]
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	d504      	bpl.n	800ba6a <__sflush_r+0x7e>
 800ba60:	1c42      	adds	r2, r0, #1
 800ba62:	d101      	bne.n	800ba68 <__sflush_r+0x7c>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b903      	cbnz	r3, 800ba6a <__sflush_r+0x7e>
 800ba68:	6560      	str	r0, [r4, #84]	; 0x54
 800ba6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba6c:	602f      	str	r7, [r5, #0]
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	d0c9      	beq.n	800ba06 <__sflush_r+0x1a>
 800ba72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba76:	4299      	cmp	r1, r3
 800ba78:	d002      	beq.n	800ba80 <__sflush_r+0x94>
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f7ff fbea 	bl	800b254 <_free_r>
 800ba80:	2000      	movs	r0, #0
 800ba82:	6360      	str	r0, [r4, #52]	; 0x34
 800ba84:	e7c0      	b.n	800ba08 <__sflush_r+0x1c>
 800ba86:	2301      	movs	r3, #1
 800ba88:	4628      	mov	r0, r5
 800ba8a:	47b0      	blx	r6
 800ba8c:	1c41      	adds	r1, r0, #1
 800ba8e:	d1c8      	bne.n	800ba22 <__sflush_r+0x36>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0c5      	beq.n	800ba22 <__sflush_r+0x36>
 800ba96:	2b1d      	cmp	r3, #29
 800ba98:	d001      	beq.n	800ba9e <__sflush_r+0xb2>
 800ba9a:	2b16      	cmp	r3, #22
 800ba9c:	d101      	bne.n	800baa2 <__sflush_r+0xb6>
 800ba9e:	602f      	str	r7, [r5, #0]
 800baa0:	e7b1      	b.n	800ba06 <__sflush_r+0x1a>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	e7ad      	b.n	800ba08 <__sflush_r+0x1c>
 800baac:	690f      	ldr	r7, [r1, #16]
 800baae:	2f00      	cmp	r7, #0
 800bab0:	d0a9      	beq.n	800ba06 <__sflush_r+0x1a>
 800bab2:	0793      	lsls	r3, r2, #30
 800bab4:	680e      	ldr	r6, [r1, #0]
 800bab6:	bf08      	it	eq
 800bab8:	694b      	ldreq	r3, [r1, #20]
 800baba:	600f      	str	r7, [r1, #0]
 800babc:	bf18      	it	ne
 800babe:	2300      	movne	r3, #0
 800bac0:	eba6 0807 	sub.w	r8, r6, r7
 800bac4:	608b      	str	r3, [r1, #8]
 800bac6:	f1b8 0f00 	cmp.w	r8, #0
 800baca:	dd9c      	ble.n	800ba06 <__sflush_r+0x1a>
 800bacc:	6a21      	ldr	r1, [r4, #32]
 800bace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bad0:	4643      	mov	r3, r8
 800bad2:	463a      	mov	r2, r7
 800bad4:	4628      	mov	r0, r5
 800bad6:	47b0      	blx	r6
 800bad8:	2800      	cmp	r0, #0
 800bada:	dc06      	bgt.n	800baea <__sflush_r+0xfe>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	e78e      	b.n	800ba08 <__sflush_r+0x1c>
 800baea:	4407      	add	r7, r0
 800baec:	eba8 0800 	sub.w	r8, r8, r0
 800baf0:	e7e9      	b.n	800bac6 <__sflush_r+0xda>
 800baf2:	bf00      	nop
 800baf4:	dfbffffe 	.word	0xdfbffffe

0800baf8 <_fflush_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	690b      	ldr	r3, [r1, #16]
 800bafc:	4605      	mov	r5, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	b913      	cbnz	r3, 800bb08 <_fflush_r+0x10>
 800bb02:	2500      	movs	r5, #0
 800bb04:	4628      	mov	r0, r5
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	b118      	cbz	r0, 800bb12 <_fflush_r+0x1a>
 800bb0a:	6a03      	ldr	r3, [r0, #32]
 800bb0c:	b90b      	cbnz	r3, 800bb12 <_fflush_r+0x1a>
 800bb0e:	f7ff fa37 	bl	800af80 <__sinit>
 800bb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d0f3      	beq.n	800bb02 <_fflush_r+0xa>
 800bb1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb1c:	07d0      	lsls	r0, r2, #31
 800bb1e:	d404      	bmi.n	800bb2a <_fflush_r+0x32>
 800bb20:	0599      	lsls	r1, r3, #22
 800bb22:	d402      	bmi.n	800bb2a <_fflush_r+0x32>
 800bb24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb26:	f7ff fb85 	bl	800b234 <__retarget_lock_acquire_recursive>
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	f7ff ff5d 	bl	800b9ec <__sflush_r>
 800bb32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb34:	07da      	lsls	r2, r3, #31
 800bb36:	4605      	mov	r5, r0
 800bb38:	d4e4      	bmi.n	800bb04 <_fflush_r+0xc>
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	059b      	lsls	r3, r3, #22
 800bb3e:	d4e1      	bmi.n	800bb04 <_fflush_r+0xc>
 800bb40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb42:	f7ff fb78 	bl	800b236 <__retarget_lock_release_recursive>
 800bb46:	e7dd      	b.n	800bb04 <_fflush_r+0xc>

0800bb48 <__swbuf_r>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b118      	cbz	r0, 800bb5a <__swbuf_r+0x12>
 800bb52:	6a03      	ldr	r3, [r0, #32]
 800bb54:	b90b      	cbnz	r3, 800bb5a <__swbuf_r+0x12>
 800bb56:	f7ff fa13 	bl	800af80 <__sinit>
 800bb5a:	69a3      	ldr	r3, [r4, #24]
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	071a      	lsls	r2, r3, #28
 800bb62:	d525      	bpl.n	800bbb0 <__swbuf_r+0x68>
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	b31b      	cbz	r3, 800bbb0 <__swbuf_r+0x68>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	6922      	ldr	r2, [r4, #16]
 800bb6c:	1a98      	subs	r0, r3, r2
 800bb6e:	6963      	ldr	r3, [r4, #20]
 800bb70:	b2f6      	uxtb	r6, r6
 800bb72:	4283      	cmp	r3, r0
 800bb74:	4637      	mov	r7, r6
 800bb76:	dc04      	bgt.n	800bb82 <__swbuf_r+0x3a>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f7ff ffbc 	bl	800baf8 <_fflush_r>
 800bb80:	b9e0      	cbnz	r0, 800bbbc <__swbuf_r+0x74>
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	6022      	str	r2, [r4, #0]
 800bb8e:	701e      	strb	r6, [r3, #0]
 800bb90:	6962      	ldr	r2, [r4, #20]
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d004      	beq.n	800bba2 <__swbuf_r+0x5a>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	07db      	lsls	r3, r3, #31
 800bb9c:	d506      	bpl.n	800bbac <__swbuf_r+0x64>
 800bb9e:	2e0a      	cmp	r6, #10
 800bba0:	d104      	bne.n	800bbac <__swbuf_r+0x64>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7ff ffa7 	bl	800baf8 <_fflush_r>
 800bbaa:	b938      	cbnz	r0, 800bbbc <__swbuf_r+0x74>
 800bbac:	4638      	mov	r0, r7
 800bbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f806 	bl	800bbc4 <__swsetup_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d0d5      	beq.n	800bb68 <__swbuf_r+0x20>
 800bbbc:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc0:	e7f4      	b.n	800bbac <__swbuf_r+0x64>
	...

0800bbc4 <__swsetup_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4b2a      	ldr	r3, [pc, #168]	; (800bc70 <__swsetup_r+0xac>)
 800bbc8:	4605      	mov	r5, r0
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	460c      	mov	r4, r1
 800bbce:	b118      	cbz	r0, 800bbd8 <__swsetup_r+0x14>
 800bbd0:	6a03      	ldr	r3, [r0, #32]
 800bbd2:	b90b      	cbnz	r3, 800bbd8 <__swsetup_r+0x14>
 800bbd4:	f7ff f9d4 	bl	800af80 <__sinit>
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbde:	0718      	lsls	r0, r3, #28
 800bbe0:	d422      	bmi.n	800bc28 <__swsetup_r+0x64>
 800bbe2:	06d9      	lsls	r1, r3, #27
 800bbe4:	d407      	bmi.n	800bbf6 <__swsetup_r+0x32>
 800bbe6:	2309      	movs	r3, #9
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	e034      	b.n	800bc60 <__swsetup_r+0x9c>
 800bbf6:	0758      	lsls	r0, r3, #29
 800bbf8:	d512      	bpl.n	800bc20 <__swsetup_r+0x5c>
 800bbfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfc:	b141      	cbz	r1, 800bc10 <__swsetup_r+0x4c>
 800bbfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc02:	4299      	cmp	r1, r3
 800bc04:	d002      	beq.n	800bc0c <__swsetup_r+0x48>
 800bc06:	4628      	mov	r0, r5
 800bc08:	f7ff fb24 	bl	800b254 <_free_r>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	6363      	str	r3, [r4, #52]	; 0x34
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	6063      	str	r3, [r4, #4]
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f043 0308 	orr.w	r3, r3, #8
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b94b      	cbnz	r3, 800bc40 <__swsetup_r+0x7c>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc36:	d003      	beq.n	800bc40 <__swsetup_r+0x7c>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f000 f850 	bl	800bce0 <__smakebuf_r>
 800bc40:	89a0      	ldrh	r0, [r4, #12]
 800bc42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc46:	f010 0301 	ands.w	r3, r0, #1
 800bc4a:	d00a      	beq.n	800bc62 <__swsetup_r+0x9e>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60a3      	str	r3, [r4, #8]
 800bc50:	6963      	ldr	r3, [r4, #20]
 800bc52:	425b      	negs	r3, r3
 800bc54:	61a3      	str	r3, [r4, #24]
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	b943      	cbnz	r3, 800bc6c <__swsetup_r+0xa8>
 800bc5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc5e:	d1c4      	bne.n	800bbea <__swsetup_r+0x26>
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	0781      	lsls	r1, r0, #30
 800bc64:	bf58      	it	pl
 800bc66:	6963      	ldrpl	r3, [r4, #20]
 800bc68:	60a3      	str	r3, [r4, #8]
 800bc6a:	e7f4      	b.n	800bc56 <__swsetup_r+0x92>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7f7      	b.n	800bc60 <__swsetup_r+0x9c>
 800bc70:	20000094 	.word	0x20000094

0800bc74 <_sbrk_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4d06      	ldr	r5, [pc, #24]	; (800bc90 <_sbrk_r+0x1c>)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	602b      	str	r3, [r5, #0]
 800bc80:	f7f5 ffea 	bl	8001c58 <_sbrk>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_sbrk_r+0x1a>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_sbrk_r+0x1a>
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	200052ac 	.word	0x200052ac

0800bc94 <__swhatbuf_r>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	460c      	mov	r4, r1
 800bc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	b096      	sub	sp, #88	; 0x58
 800bca0:	4615      	mov	r5, r2
 800bca2:	461e      	mov	r6, r3
 800bca4:	da0d      	bge.n	800bcc2 <__swhatbuf_r+0x2e>
 800bca6:	89a3      	ldrh	r3, [r4, #12]
 800bca8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcac:	f04f 0100 	mov.w	r1, #0
 800bcb0:	bf0c      	ite	eq
 800bcb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcb6:	2340      	movne	r3, #64	; 0x40
 800bcb8:	2000      	movs	r0, #0
 800bcba:	6031      	str	r1, [r6, #0]
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	b016      	add	sp, #88	; 0x58
 800bcc0:	bd70      	pop	{r4, r5, r6, pc}
 800bcc2:	466a      	mov	r2, sp
 800bcc4:	f000 f848 	bl	800bd58 <_fstat_r>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	dbec      	blt.n	800bca6 <__swhatbuf_r+0x12>
 800bccc:	9901      	ldr	r1, [sp, #4]
 800bcce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcd6:	4259      	negs	r1, r3
 800bcd8:	4159      	adcs	r1, r3
 800bcda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcde:	e7eb      	b.n	800bcb8 <__swhatbuf_r+0x24>

0800bce0 <__smakebuf_r>:
 800bce0:	898b      	ldrh	r3, [r1, #12]
 800bce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bce4:	079d      	lsls	r5, r3, #30
 800bce6:	4606      	mov	r6, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	d507      	bpl.n	800bcfc <__smakebuf_r+0x1c>
 800bcec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	6123      	str	r3, [r4, #16]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	6163      	str	r3, [r4, #20]
 800bcf8:	b002      	add	sp, #8
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	ab01      	add	r3, sp, #4
 800bcfe:	466a      	mov	r2, sp
 800bd00:	f7ff ffc8 	bl	800bc94 <__swhatbuf_r>
 800bd04:	9900      	ldr	r1, [sp, #0]
 800bd06:	4605      	mov	r5, r0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fb0f 	bl	800b32c <_malloc_r>
 800bd0e:	b948      	cbnz	r0, 800bd24 <__smakebuf_r+0x44>
 800bd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd14:	059a      	lsls	r2, r3, #22
 800bd16:	d4ef      	bmi.n	800bcf8 <__smakebuf_r+0x18>
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	f043 0302 	orr.w	r3, r3, #2
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	e7e3      	b.n	800bcec <__smakebuf_r+0xc>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	6020      	str	r0, [r4, #0]
 800bd28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	6163      	str	r3, [r4, #20]
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	6120      	str	r0, [r4, #16]
 800bd36:	b15b      	cbz	r3, 800bd50 <__smakebuf_r+0x70>
 800bd38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f000 f81d 	bl	800bd7c <_isatty_r>
 800bd42:	b128      	cbz	r0, 800bd50 <__smakebuf_r+0x70>
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	f023 0303 	bic.w	r3, r3, #3
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	89a3      	ldrh	r3, [r4, #12]
 800bd52:	431d      	orrs	r5, r3
 800bd54:	81a5      	strh	r5, [r4, #12]
 800bd56:	e7cf      	b.n	800bcf8 <__smakebuf_r+0x18>

0800bd58 <_fstat_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d07      	ldr	r5, [pc, #28]	; (800bd78 <_fstat_r+0x20>)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4604      	mov	r4, r0
 800bd60:	4608      	mov	r0, r1
 800bd62:	4611      	mov	r1, r2
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	f7f5 ff4e 	bl	8001c06 <_fstat>
 800bd6a:	1c43      	adds	r3, r0, #1
 800bd6c:	d102      	bne.n	800bd74 <_fstat_r+0x1c>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b103      	cbz	r3, 800bd74 <_fstat_r+0x1c>
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	bf00      	nop
 800bd78:	200052ac 	.word	0x200052ac

0800bd7c <_isatty_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d06      	ldr	r5, [pc, #24]	; (800bd98 <_isatty_r+0x1c>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	602b      	str	r3, [r5, #0]
 800bd88:	f7f5 ff4d 	bl	8001c26 <_isatty>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d102      	bne.n	800bd96 <_isatty_r+0x1a>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	b103      	cbz	r3, 800bd96 <_isatty_r+0x1a>
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	200052ac 	.word	0x200052ac

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
