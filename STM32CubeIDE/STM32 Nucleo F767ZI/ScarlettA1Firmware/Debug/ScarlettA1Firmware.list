
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a10  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea14  0800ea14  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea1c  0800ea1c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea1c  0800ea1c  0001ea1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea20  0800ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800ea24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  200000c4  0800eae8  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005320  0800eae8  00025320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY
 13 .debug_info   000282ca  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b21  00000000  00000000  000483ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f20  00000000  00000000  0004df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e8  00000000  00000000  0004fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e09d  00000000  00000000  00051628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029a62  00000000  00000000  0007f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea52  00000000  00000000  000a9127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087a4  00000000  00000000  001b7b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001c0320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cfec 	.word	0x0800cfec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	0800cfec 	.word	0x0800cfec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x40;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2220      	movs	r2, #32
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x40;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x00;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84d      	bhi.n	800070a <setBLDCMotorSpeed+0xaa>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
 800067c:	080006b7 	.word	0x080006b7
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006d3 	.word	0x080006d3
 8000688:	080006e7 	.word	0x080006e7
 800068c:	080006f9 	.word	0x080006f9
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000692:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000696:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 800069e:	f003 fd29 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 80006a2:	e032      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006a8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006b0:	f003 fd20 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 80006b4:	e029      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  break;
 80006be:	e024      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	4823      	ldr	r0, [pc, #140]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006cc:	f003 fd12 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 80006d0:	e01b      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006d8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006e0:	f003 fd08 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 80006e4:	e011      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006ea:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4819      	ldr	r0, [pc, #100]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006f2:	f003 fcff 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 80006f6:	e008      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <setBLDCMotorSpeed+0x104>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 8000704:	f003 fcf6 	bl	80040f4 <HAL_GPIO_WritePin>
	  break;
 8000708:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000768 <setBLDCMotorSpeed+0x108>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800071c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000748 <setBLDCMotorSpeed+0xe8>
 8000720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000724:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000728:	ee17 2a90 	vmov	r2, s15
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <setBLDCMotorSpeed+0x10c>)
 800072e:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <setBLDCMotorSpeed+0x110>)
 800073a:	f002 fe9d 	bl	8003478 <HAL_DAC_SetValue>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	f3af 8000 	nop.w
 8000748:	66666666 	.word	0x66666666
 800074c:	400a6666 	.word	0x400a6666
 8000750:	200000ec 	.word	0x200000ec
 8000754:	200000f4 	.word	0x200000f4
 8000758:	40020400 	.word	0x40020400
 800075c:	3ecccccd 	.word	0x3ecccccd
 8000760:	3f19999a 	.word	0x3f19999a
 8000764:	3f333333 	.word	0x3f333333
 8000768:	45800000 	.word	0x45800000
 800076c:	200000f8 	.word	0x200000f8
 8000770:	20000110 	.word	0x20000110

08000774 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <moveStepperMotor+0x60>)
 8000786:	f003 fcb5 	bl	80040f4 <HAL_GPIO_WritePin>

	if(direction == LEFT) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <moveStepperMotor+0x2a>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	4810      	ldr	r0, [pc, #64]	; (80007d8 <moveStepperMotor+0x64>)
 8000798:	f003 fcac 	bl	80040f4 <HAL_GPIO_WritePin>
 800079c:	e005      	b.n	80007aa <moveStepperMotor+0x36>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <moveStepperMotor+0x64>)
 80007a6:	f003 fca5 	bl	80040f4 <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <moveStepperMotor+0x68>)
 80007ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(35);
 80007b2:	2023      	movs	r0, #35	; 0x23
 80007b4:	f008 fc06 	bl	8008fc4 <osDelay>
	TIM4->CCR3 = 0;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <moveStepperMotor+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <moveStepperMotor+0x60>)
 80007c6:	f003 fc95 	bl	80040f4 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021400 	.word	0x40021400
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40000800 	.word	0x40000800

080007e0 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d02f      	beq.n	8000852 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da15      	bge.n	8000828 <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <moveStepperMotorUntil+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	e00c      	b.n	800081c <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ffb6 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f008 fbdb 	bl	8008fc4 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000816:	600a      	str	r2, [r1, #0]
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <moveStepperMotorUntil+0x80>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <moveStepperMotorUntil+0x7c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	d1ed      	bne.n	8000802 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 8000826:	e014      	b.n	8000852 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <moveStepperMotorUntil+0x7c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	e00c      	b.n	8000848 <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ffa0 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000834:	2032      	movs	r0, #50	; 0x32
 8000836:	f008 fbc5 	bl	8008fc4 <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <moveStepperMotorUntil+0x7c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <moveStepperMotorUntil+0x7c>)
 8000842:	600a      	str	r2, [r1, #0]
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <moveStepperMotorUntil+0x80>)
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <moveStepperMotorUntil+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d1ed      	bne.n	800082e <moveStepperMotorUntil+0x4e>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000100 	.word	0x20000100
 8000860:	200000fc 	.word	0x200000fc

08000864 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000872:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <park+0x10c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <park+0x110>)
 8000878:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <park+0x10c>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000880:	f7ff feee 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <park+0x114>)
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <park+0x118>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <park+0x11c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <park+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f009 fda2 	bl	800a3e4 <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d108      	bne.n	80008b8 <park+0x54>
		internalFunctionCall = true;
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <park+0x11c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
		vTaskResume(LeftBlinkersTasHandle);
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <park+0x124>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f009 fd97 	bl	800a3e4 <vTaskResume>
 80008b6:	e007      	b.n	80008c8 <park+0x64>
	} else {
		internalFunctionCall = true;
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <park+0x11c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
		vTaskResume(RightBlinkersTaHandle);
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <park+0x128>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 fd8e 	bl	800a3e4 <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <park+0x72>
		targetLeftRightPosition = -3;
 80008ce:	f06f 0302 	mvn.w	r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	e001      	b.n	80008da <park+0x76>
	} else {
		targetLeftRightPosition = 3;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff ff80 	bl	80007e0 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <park+0x11c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <park+0x12c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 fd7a 	bl	800a3e4 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f008 fb66 	bl	8008fc4 <osDelay>
	internalFunctionCall = true;
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <park+0x11c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <park+0x130>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f009 fd6e 	bl	800a3e4 <vTaskResume>

	// Turn left/right from the destination
	targetLeftRightPosition = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff ff67 	bl	80007e0 <moveStepperMotorUntil>

	// Drive forward a little bit
	internalFunctionCall = true;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <park+0x11c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <park+0x130>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f009 fd61 	bl	800a3e4 <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION / 2);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f008 fb4d 	bl	8008fc4 <osDelay>
	internalFunctionCall = true;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <park+0x11c>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <park+0x12c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f009 fd55 	bl	800a3e4 <vTaskResume>

	// Set LED stripes
	if(isOn) {
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <park+0x134>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <park+0xe8>
		stripesEffect = DEFAULT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <park+0x114>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e002      	b.n	8000952 <park+0xee>
	} else {
		stripesEffect = NONE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <park+0x114>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <park+0x118>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <park+0x11c>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <park+0x120>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f009 fd3e 	bl	800a3e4 <vTaskResume>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000ec 	.word	0x200000ec
 8000974:	200000e8 	.word	0x200000e8
 8000978:	200000e2 	.word	0x200000e2
 800097c:	200000e4 	.word	0x200000e4
 8000980:	200000e0 	.word	0x200000e0
 8000984:	20000134 	.word	0x20000134
 8000988:	20000138 	.word	0x20000138
 800098c:	2000013c 	.word	0x2000013c
 8000990:	2000014c 	.word	0x2000014c
 8000994:	20000148 	.word	0x20000148
 8000998:	200000e3 	.word	0x200000e3

0800099c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <MX_DAC_Init+0x50>)
 80009ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009b2:	f002 fc93 	bl	80032dc <HAL_DAC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009bc:	f001 fa40 	bl	8001e40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_DAC_Init+0x4c>)
 80009d0:	f002 fd81 	bl	80034d6 <HAL_DAC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009da:	f001 fa31 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000110 	.word	0x20000110
 80009ec:	40007400 	.word	0x40007400

080009f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_DAC_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_DAC_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000a42:	2310      	movs	r3, #16
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_DAC_MspInit+0x8c>)
 8000a56:	f003 f9a1 	bl	8003d9c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f002 fc12 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a64:	2036      	movs	r0, #54	; 0x36
 8000a66:	f002 fc2b 	bl	80032c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40007400 	.word	0x40007400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	203b      	movs	r0, #59	; 0x3b
 8000aa4:	f002 fbf0 	bl	8003288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa8:	203b      	movs	r0, #59	; 0x3b
 8000aaa:	f002 fc09 	bl	80032c0 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <MX_FREERTOS_Init+0x12c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4849      	ldr	r0, [pc, #292]	; (8000bec <MX_FREERTOS_Init+0x130>)
 8000ac8:	f008 fac0 	bl	800904c <osTimerNew>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <MX_FREERTOS_Init+0x134>)
 8000ad0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000ad2:	4a48      	ldr	r2, [pc, #288]	; (8000bf4 <MX_FREERTOS_Init+0x138>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4848      	ldr	r0, [pc, #288]	; (8000bf8 <MX_FREERTOS_Init+0x13c>)
 8000ad8:	f008 f9ce 	bl	8008e78 <osThreadNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a47      	ldr	r2, [pc, #284]	; (8000bfc <MX_FREERTOS_Init+0x140>)
 8000ae0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <MX_FREERTOS_Init+0x144>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4847      	ldr	r0, [pc, #284]	; (8000c04 <MX_FREERTOS_Init+0x148>)
 8000ae8:	f008 f9c6 	bl	8008e78 <osThreadNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <MX_FREERTOS_Init+0x14c>)
 8000af0:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <MX_FREERTOS_Init+0x150>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4846      	ldr	r0, [pc, #280]	; (8000c10 <MX_FREERTOS_Init+0x154>)
 8000af8:	f008 f9be 	bl	8008e78 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <MX_FREERTOS_Init+0x158>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000b02:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <MX_FREERTOS_Init+0x15c>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4845      	ldr	r0, [pc, #276]	; (8000c1c <MX_FREERTOS_Init+0x160>)
 8000b08:	f008 f9b6 	bl	8008e78 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a44      	ldr	r2, [pc, #272]	; (8000c20 <MX_FREERTOS_Init+0x164>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000b12:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <MX_FREERTOS_Init+0x168>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4844      	ldr	r0, [pc, #272]	; (8000c28 <MX_FREERTOS_Init+0x16c>)
 8000b18:	f008 f9ae 	bl	8008e78 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a43      	ldr	r2, [pc, #268]	; (8000c2c <MX_FREERTOS_Init+0x170>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <MX_FREERTOS_Init+0x174>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4843      	ldr	r0, [pc, #268]	; (8000c34 <MX_FREERTOS_Init+0x178>)
 8000b28:	f008 f9a6 	bl	8008e78 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <MX_FREERTOS_Init+0x17c>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <MX_FREERTOS_Init+0x180>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <MX_FREERTOS_Init+0x184>)
 8000b38:	f008 f99e 	bl	8008e78 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a41      	ldr	r2, [pc, #260]	; (8000c44 <MX_FREERTOS_Init+0x188>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000b42:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <MX_FREERTOS_Init+0x18c>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4841      	ldr	r0, [pc, #260]	; (8000c4c <MX_FREERTOS_Init+0x190>)
 8000b48:	f008 f996 	bl	8008e78 <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a40      	ldr	r2, [pc, #256]	; (8000c50 <MX_FREERTOS_Init+0x194>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <MX_FREERTOS_Init+0x198>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4840      	ldr	r0, [pc, #256]	; (8000c58 <MX_FREERTOS_Init+0x19c>)
 8000b58:	f008 f98e 	bl	8008e78 <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <MX_FREERTOS_Init+0x1a0>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <MX_FREERTOS_Init+0x1a4>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	483f      	ldr	r0, [pc, #252]	; (8000c64 <MX_FREERTOS_Init+0x1a8>)
 8000b68:	f008 f986 	bl	8008e78 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a3e      	ldr	r2, [pc, #248]	; (8000c68 <MX_FREERTOS_Init+0x1ac>)
 8000b70:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b72:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <MX_FREERTOS_Init+0x1b0>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	483e      	ldr	r0, [pc, #248]	; (8000c70 <MX_FREERTOS_Init+0x1b4>)
 8000b78:	f008 f97e 	bl	8008e78 <osThreadNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <MX_FREERTOS_Init+0x1b8>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <MX_FREERTOS_Init+0x1bc>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	483d      	ldr	r0, [pc, #244]	; (8000c7c <MX_FREERTOS_Init+0x1c0>)
 8000b88:	f008 f976 	bl	8008e78 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a3c      	ldr	r2, [pc, #240]	; (8000c80 <MX_FREERTOS_Init+0x1c4>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000b92:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <MX_FREERTOS_Init+0x1c8>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	483c      	ldr	r0, [pc, #240]	; (8000c88 <MX_FREERTOS_Init+0x1cc>)
 8000b98:	f008 f96e 	bl	8008e78 <osThreadNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <MX_FREERTOS_Init+0x1d0>)
 8000ba0:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	; (8000c90 <MX_FREERTOS_Init+0x1d4>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	483b      	ldr	r0, [pc, #236]	; (8000c94 <MX_FREERTOS_Init+0x1d8>)
 8000ba8:	f008 f966 	bl	8008e78 <osThreadNew>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <MX_FREERTOS_Init+0x1dc>)
 8000bb0:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <MX_FREERTOS_Init+0x1e0>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <MX_FREERTOS_Init+0x1e4>)
 8000bb8:	f008 f95e 	bl	8008e78 <osThreadNew>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <MX_FREERTOS_Init+0x1e8>)
 8000bc0:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000bc2:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <MX_FREERTOS_Init+0x1ec>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4839      	ldr	r0, [pc, #228]	; (8000cac <MX_FREERTOS_Init+0x1f0>)
 8000bc8:	f008 f956 	bl	8008e78 <osThreadNew>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a38      	ldr	r2, [pc, #224]	; (8000cb0 <MX_FREERTOS_Init+0x1f4>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <MX_FREERTOS_Init+0x1f8>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <MX_FREERTOS_Init+0x1fc>)
 8000bd8:	f008 f94e 	bl	8008e78 <osThreadNew>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <MX_FREERTOS_Init+0x200>)
 8000be0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	0800d4e8 	.word	0x0800d4e8
 8000bec:	080017e5 	.word	0x080017e5
 8000bf0:	20000168 	.word	0x20000168
 8000bf4:	0800d284 	.word	0x0800d284
 8000bf8:	08000cc1 	.word	0x08000cc1
 8000bfc:	20000124 	.word	0x20000124
 8000c00:	0800d2a8 	.word	0x0800d2a8
 8000c04:	08000de1 	.word	0x08000de1
 8000c08:	20000128 	.word	0x20000128
 8000c0c:	0800d2cc 	.word	0x0800d2cc
 8000c10:	08000efd 	.word	0x08000efd
 8000c14:	2000012c 	.word	0x2000012c
 8000c18:	0800d2f0 	.word	0x0800d2f0
 8000c1c:	08000ff5 	.word	0x08000ff5
 8000c20:	20000130 	.word	0x20000130
 8000c24:	0800d314 	.word	0x0800d314
 8000c28:	08001059 	.word	0x08001059
 8000c2c:	20000134 	.word	0x20000134
 8000c30:	0800d338 	.word	0x0800d338
 8000c34:	080012bd 	.word	0x080012bd
 8000c38:	20000138 	.word	0x20000138
 8000c3c:	0800d35c 	.word	0x0800d35c
 8000c40:	08001339 	.word	0x08001339
 8000c44:	2000013c 	.word	0x2000013c
 8000c48:	0800d380 	.word	0x0800d380
 8000c4c:	080013b5 	.word	0x080013b5
 8000c50:	20000140 	.word	0x20000140
 8000c54:	0800d3a4 	.word	0x0800d3a4
 8000c58:	08001409 	.word	0x08001409
 8000c5c:	20000144 	.word	0x20000144
 8000c60:	0800d3c8 	.word	0x0800d3c8
 8000c64:	0800145d 	.word	0x0800145d
 8000c68:	20000148 	.word	0x20000148
 8000c6c:	0800d3ec 	.word	0x0800d3ec
 8000c70:	08001509 	.word	0x08001509
 8000c74:	2000014c 	.word	0x2000014c
 8000c78:	0800d410 	.word	0x0800d410
 8000c7c:	080015c5 	.word	0x080015c5
 8000c80:	20000150 	.word	0x20000150
 8000c84:	0800d434 	.word	0x0800d434
 8000c88:	08001655 	.word	0x08001655
 8000c8c:	20000154 	.word	0x20000154
 8000c90:	0800d458 	.word	0x0800d458
 8000c94:	080016e1 	.word	0x080016e1
 8000c98:	20000158 	.word	0x20000158
 8000c9c:	0800d47c 	.word	0x0800d47c
 8000ca0:	0800171d 	.word	0x0800171d
 8000ca4:	2000015c 	.word	0x2000015c
 8000ca8:	0800d4a0 	.word	0x0800d4a0
 8000cac:	0800174d 	.word	0x0800174d
 8000cb0:	20000160 	.word	0x20000160
 8000cb4:	0800d4c4 	.word	0x0800d4c4
 8000cb8:	08001789 	.word	0x08001789
 8000cbc:	20000164 	.word	0x20000164

08000cc0 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Initiate display
	ssd1306_Init();
 8000cc8:	f001 f9e0 	bl	800208c <ssd1306_Init>
	uint8_t y = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f001 fa45 	bl	8002160 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f001 fb82 	bl	80023e4 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000ce0:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <StartOLEDTask+0xfc>)
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	ca06      	ldmia	r2, {r1, r2}
 8000ce6:	4836      	ldr	r0, [pc, #216]	; (8000dc0 <StartOLEDTask+0x100>)
 8000ce8:	f001 fb56 	bl	8002398 <ssd1306_WriteString>
	y += 30;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	331e      	adds	r3, #30
 8000cf0:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f001 fb74 	bl	80023e4 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <StartOLEDTask+0x104>)
 8000cfe:	2301      	movs	r3, #1
 8000d00:	ca06      	ldmia	r2, {r1, r2}
 8000d02:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <StartOLEDTask+0x108>)
 8000d04:	f001 fb48 	bl	8002398 <ssd1306_WriteString>
	ssd1306_WriteString(versionName, Font_11x18, White);
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <StartOLEDTask+0x104>)
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	ca06      	ldmia	r2, {r1, r2}
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <StartOLEDTask+0x10c>)
 8000d10:	f001 fb42 	bl	8002398 <ssd1306_WriteString>
	y += 36;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	3324      	adds	r3, #36	; 0x24
 8000d18:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000d1a:	f001 fa39 	bl	8002190 <ssd1306_UpdateScreen>
	y = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000d22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d26:	f008 f94d 	bl	8008fc4 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f001 fa18 	bl	8002160 <ssd1306_Fill>

	  if(isConnected) {
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <StartOLEDTask+0x110>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d01c      	beq.n	8000d74 <StartOLEDTask+0xb4>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f001 fb50 	bl	80023e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <StartOLEDTask+0xfc>)
 8000d46:	2301      	movs	r3, #1
 8000d48:	ca06      	ldmia	r2, {r1, r2}
 8000d4a:	4822      	ldr	r0, [pc, #136]	; (8000dd4 <StartOLEDTask+0x114>)
 8000d4c:	f001 fb24 	bl	8002398 <ssd1306_WriteString>
		  y += 30;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	331e      	adds	r3, #30
 8000d54:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 fb42 	bl	80023e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d60:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <StartOLEDTask+0x104>)
 8000d62:	2301      	movs	r3, #1
 8000d64:	ca06      	ldmia	r2, {r1, r2}
 8000d66:	481c      	ldr	r0, [pc, #112]	; (8000dd8 <StartOLEDTask+0x118>)
 8000d68:	f001 fb16 	bl	8002398 <ssd1306_WriteString>
		  y += 36;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	3324      	adds	r3, #36	; 0x24
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e01b      	b.n	8000dac <StartOLEDTask+0xec>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4619      	mov	r1, r3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f001 fb33 	bl	80023e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <StartOLEDTask+0xfc>)
 8000d80:	2301      	movs	r3, #1
 8000d82:	ca06      	ldmia	r2, {r1, r2}
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <StartOLEDTask+0x11c>)
 8000d86:	f001 fb07 	bl	8002398 <ssd1306_WriteString>
		  y += 30;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	331e      	adds	r3, #30
 8000d8e:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4619      	mov	r1, r3
 8000d94:	2002      	movs	r0, #2
 8000d96:	f001 fb25 	bl	80023e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <StartOLEDTask+0x104>)
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	ca06      	ldmia	r2, {r1, r2}
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <StartOLEDTask+0x118>)
 8000da2:	f001 faf9 	bl	8002398 <ssd1306_WriteString>
		  y += 36;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	3324      	adds	r3, #36	; 0x24
 8000daa:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000dac:	f001 f9f0 	bl	8002190 <ssd1306_UpdateScreen>
	  y = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f009 fa69 	bl	800a28c <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000dba:	e7b6      	b.n	8000d2a <StartOLEDTask+0x6a>
 8000dbc:	20000048 	.word	0x20000048
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000050 	.word	0x20000050
 8000dc8:	20000030 	.word	0x20000030
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	200000e1 	.word	0x200000e1
 8000dd4:	20000024 	.word	0x20000024
 8000dd8:	2000003c 	.word	0x2000003c
 8000ddc:	20000014 	.word	0x20000014

08000de0 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f009 fa4f 	bl	800a28c <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <StartDispatcherTask+0xe8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3b01      	subs	r3, #1
 8000df6:	2b0d      	cmp	r3, #13
 8000df8:	d860      	bhi.n	8000ebc <StartDispatcherTask+0xdc>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <StartDispatcherTask+0x20>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e39 	.word	0x08000e39
 8000e04:	08000e45 	.word	0x08000e45
 8000e08:	08000e51 	.word	0x08000e51
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e69 	.word	0x08000e69
 8000e14:	08000e75 	.word	0x08000e75
 8000e18:	08000e81 	.word	0x08000e81
 8000e1c:	08000ebd 	.word	0x08000ebd
 8000e20:	08000ebd 	.word	0x08000ebd
 8000e24:	08000ebd 	.word	0x08000ebd
 8000e28:	08000e8d 	.word	0x08000e8d
 8000e2c:	08000e99 	.word	0x08000e99
 8000e30:	08000ea5 	.word	0x08000ea5
 8000e34:	08000eb1 	.word	0x08000eb1
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <StartDispatcherTask+0xec>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fad1 	bl	800a3e4 <vTaskResume>
			break;
 8000e42:	e040      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <StartDispatcherTask+0xf0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f009 facb 	bl	800a3e4 <vTaskResume>
			break;
 8000e4e:	e03a      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <StartDispatcherTask+0xf4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f009 fac5 	bl	800a3e4 <vTaskResume>
			break;
 8000e5a:	e034      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <StartDispatcherTask+0xf8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f009 fabf 	bl	800a3e4 <vTaskResume>
			break;
 8000e66:	e02e      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <StartDispatcherTask+0xfc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f009 fab9 	bl	800a3e4 <vTaskResume>
			break;
 8000e72:	e028      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <StartDispatcherTask+0x100>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f009 fab3 	bl	800a3e4 <vTaskResume>
			break;
 8000e7e:	e022      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <StartDispatcherTask+0x104>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f009 faad 	bl	800a3e4 <vTaskResume>
			break;
 8000e8a:	e01c      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <StartDispatcherTask+0x108>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f009 faa7 	bl	800a3e4 <vTaskResume>
			break;
 8000e96:	e016      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <StartDispatcherTask+0x10c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f009 faa1 	bl	800a3e4 <vTaskResume>
			break;
 8000ea2:	e010      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <StartDispatcherTask+0x110>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f009 fa9b 	bl	800a3e4 <vTaskResume>
			break;
 8000eae:	e00a      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <StartDispatcherTask+0x114>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 fa95 	bl	800a3e4 <vTaskResume>
			break;
 8000eba:	e004      	b.n	8000ec6 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <StartDispatcherTask+0x118>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f009 fa8f 	bl	800a3e4 <vTaskResume>
	  vTaskSuspend(NULL);
 8000ec6:	e78f      	b.n	8000de8 <StartDispatcherTask+0x8>
 8000ec8:	20000108 	.word	0x20000108
 8000ecc:	2000012c 	.word	0x2000012c
 8000ed0:	20000130 	.word	0x20000130
 8000ed4:	20000134 	.word	0x20000134
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	2000013c 	.word	0x2000013c
 8000ee0:	20000140 	.word	0x20000140
 8000ee4:	20000144 	.word	0x20000144
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	20000150 	.word	0x20000150
 8000ef4:	20000154 	.word	0x20000154
 8000ef8:	20000158 	.word	0x20000158

08000efc <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f009 f9c1 	bl	800a28c <vTaskSuspend>

	  // Stop parking if applicable
	  vTaskSuspend(ParkLeftTaskHandle);
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <StartStopTask+0xbc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f009 f9bc 	bl	800a28c <vTaskSuspend>
	  vTaskSuspend(ParkRightTaskHandle);
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <StartStopTask+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f009 f9b7 	bl	800a28c <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <StartStopTask+0xc4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <StartStopTask+0xc8>)
 8000f24:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <StartStopTask+0xc4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000f2c:	f7ff fb98 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <StartStopTask+0xcc>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <StartStopTask+0xd0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <StartStopTask+0xd4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
	  internalFunctionCall = true;
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <StartStopTask+0xd8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <StartStopTask+0xdc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 fa49 	bl	800a3e4 <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fc44 	bl	80007e0 <moveStepperMotorUntil>

	  // Reset parking state
	  isParking = false;
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <StartStopTask+0xe0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
	  vTaskDelete(ParkLeftTaskHandle);
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <StartStopTask+0xbc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f009 f8e8 	bl	800a138 <vTaskDelete>
	  vTaskDelete(ParkRightTaskHandle);
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <StartStopTask+0xc0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 f8e3 	bl	800a138 <vTaskDelete>
	  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <StartStopTask+0xe4>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <StartStopTask+0xe8>)
 8000f78:	f007 ff7e 	bl	8008e78 <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <StartStopTask+0xbc>)
 8000f80:	6013      	str	r3, [r2, #0]
	  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <StartStopTask+0xec>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <StartStopTask+0xf0>)
 8000f88:	f007 ff76 	bl	8008e78 <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <StartStopTask+0xc0>)
 8000f90:	6013      	str	r3, [r2, #0]

	  // Turn off all the lights
	  HAL_GPIO_WritePin(DrivingLights_GPIO_Port, DrivingLights_Pin, RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <StartStopTask+0xf4>)
 8000f9a:	f003 f8ab 	bl	80040f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <StartStopTask+0xf4>)
 8000fa6:	f003 f8a5 	bl	80040f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <StartStopTask+0xf4>)
 8000fb2:	f003 f89f 	bl	80040f4 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000fb6:	e7a5      	b.n	8000f04 <StartStopTask+0x8>
 8000fb8:	20000140 	.word	0x20000140
 8000fbc:	20000144 	.word	0x20000144
 8000fc0:	200000ec 	.word	0x200000ec
 8000fc4:	200000e8 	.word	0x200000e8
 8000fc8:	200000e5 	.word	0x200000e5
 8000fcc:	200000e2 	.word	0x200000e2
 8000fd0:	200000e4 	.word	0x200000e4
 8000fd4:	200000e0 	.word	0x200000e0
 8000fd8:	20000134 	.word	0x20000134
 8000fdc:	20000104 	.word	0x20000104
 8000fe0:	0800d380 	.word	0x0800d380
 8000fe4:	080013b5 	.word	0x080013b5
 8000fe8:	0800d3a4 	.word	0x0800d3a4
 8000fec:	08001409 	.word	0x08001409
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f009 f945 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <StartDrivingLightsTask+0x50>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <StartDrivingLightsTask+0x28>
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <StartDrivingLightsTask+0x54>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ef      	beq.n	8000ffc <StartDrivingLightsTask+0x8>
		  internalFunctionCall = false;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <StartDrivingLightsTask+0x54>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <StartDrivingLightsTask+0x58>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <StartDrivingLightsTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <StartDrivingLightsTask+0x5c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f009 f9d7 	bl	800a3e4 <vTaskResume>
		  }

		  // Driving lights effect
		  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <StartDrivingLightsTask+0x60>)
 800103c:	f003 f873 	bl	8004126 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001040:	e7dc      	b.n	8000ffc <StartDrivingLightsTask+0x8>
 8001042:	bf00      	nop
 8001044:	20000104 	.word	0x20000104
 8001048:	200000e0 	.word	0x200000e0
 800104c:	200000e5 	.word	0x200000e5
 8001050:	20000164 	.word	0x20000164
 8001054:	40020800 	.word	0x40020800

08001058 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8001058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800105c:	b096      	sub	sp, #88	; 0x58
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8001062:	4b8e      	ldr	r3, [pc, #568]	; (800129c <StartLEDStripesTask+0x244>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8001068:	2300      	movs	r3, #0
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 800106c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2204      	movs	r2, #4
 8001074:	488a      	ldr	r0, [pc, #552]	; (80012a0 <StartLEDStripesTask+0x248>)
 8001076:	f004 ff1c 	bl	8005eb2 <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8001080:	233f      	movs	r3, #63	; 0x3f
 8001082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8001086:	2303      	movs	r3, #3
 8001088:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 800108c:	2301      	movs	r3, #1
 800108e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8001092:	2301      	movs	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8001096:	2304      	movs	r3, #4
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 80010a0:	4b7e      	ldr	r3, [pc, #504]	; (800129c <StartLEDStripesTask+0x244>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f107 0208 	add.w	r2, r7, #8
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa95 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	657b      	str	r3, [r7, #84]	; 0x54
 80010b6:	e020      	b.n	80010fa <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 80010b8:	7a39      	ldrb	r1, [r7, #8]
 80010ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3358      	adds	r3, #88	; 0x58
 80010c4:	443b      	add	r3, r7
 80010c6:	3b4c      	subs	r3, #76	; 0x4c
 80010c8:	460a      	mov	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 80010cc:	7a79      	ldrb	r1, [r7, #9]
 80010ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	3358      	adds	r3, #88	; 0x58
 80010d8:	443b      	add	r3, r7
 80010da:	3b4b      	subs	r3, #75	; 0x4b
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 80010e0:	7ab9      	ldrb	r1, [r7, #10]
 80010e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3358      	adds	r3, #88	; 0x58
 80010ec:	443b      	add	r3, r7
 80010ee:	3b4a      	subs	r3, #74	; 0x4a
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 80010f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f6:	3301      	adds	r3, #1
 80010f8:	657b      	str	r3, [r7, #84]	; 0x54
 80010fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	dddb      	ble.n	80010b8 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 8001100:	2307      	movs	r3, #7
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fc9e 	bl	8002a50 <ws2812b_init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <StartLEDStripesTask+0x24c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	4861      	ldr	r0, [pc, #388]	; (80012a8 <StartLEDStripesTask+0x250>)
 8001122:	f00b f873 	bl	800c20c <iprintf>
	  while(1) {;}
 8001126:	e7fe      	b.n	8001126 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fe2b 	bl	8002d88 <ws2812b_required_buffer_len>
 8001132:	4601      	mov	r1, r0
 8001134:	460b      	mov	r3, r1
 8001136:	3b01      	subs	r3, #1
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800113a:	2300      	movs	r3, #0
 800113c:	4688      	mov	r8, r1
 800113e:	4699      	mov	r9, r3
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800114c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001154:	2300      	movs	r3, #0
 8001156:	460c      	mov	r4, r1
 8001158:	461d      	mov	r5, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	00eb      	lsls	r3, r5, #3
 8001164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001168:	00e2      	lsls	r2, r4, #3
 800116a:	1dcb      	adds	r3, r1, #7
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	ebad 0d03 	sub.w	sp, sp, r3
 8001174:	466b      	mov	r3, sp
 8001176:	3300      	adds	r3, #0
 8001178:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fe1c 	bl	8002dbe <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fdfc 	bl	8002d88 <ws2812b_required_buffer_len>
 8001190:	4603      	mov	r3, r0
 8001192:	b29b      	uxth	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001198:	4841      	ldr	r0, [pc, #260]	; (80012a0 <StartLEDStripesTask+0x248>)
 800119a:	f004 fff9 	bl	8006190 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 800119e:	200a      	movs	r0, #10
 80011a0:	f001 ff96 	bl	80030d0 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f009 f871 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80011aa:	4b40      	ldr	r3, [pc, #256]	; (80012ac <StartLEDStripesTask+0x254>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d104      	bne.n	80011c4 <StartLEDStripesTask+0x16c>
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <StartLEDStripesTask+0x258>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ef      	beq.n	80011a4 <StartLEDStripesTask+0x14c>
		  internalFunctionCall = false;
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <StartLEDStripesTask+0x258>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

		  // LED stripes effect
		  if(ommitToggle == false) {
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <StartLEDStripesTask+0x25c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d014      	beq.n	8001204 <StartLEDStripesTask+0x1ac>
			  if(isOn == false) {
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <StartLEDStripesTask+0x260>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f083 0301 	eor.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <StartLEDStripesTask+0x1a0>
				  isOn = true;
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <StartLEDStripesTask+0x260>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
				  stripesEffect = DEFAULT;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <StartLEDStripesTask+0x244>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e005      	b.n	8001204 <StartLEDStripesTask+0x1ac>
			  } else {
				  isOn = false;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <StartLEDStripesTask+0x260>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
				  stripesEffect = NONE;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <StartLEDStripesTask+0x244>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  ommitToggle = false;
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <StartLEDStripesTask+0x25c>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]

		  // Update LED color
		  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <StartLEDStripesTask+0x244>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9e0 	bl	80005dc <setLEDStripesEffect>
		  for(int i = 0; i < LED_COUNT; i ++) {
 800121c:	2300      	movs	r3, #0
 800121e:	653b      	str	r3, [r7, #80]	; 0x50
 8001220:	e020      	b.n	8001264 <StartLEDStripesTask+0x20c>
			  leds[i].red = desiredStripesColor.red;
 8001222:	7a39      	ldrb	r1, [r7, #8]
 8001224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	3358      	adds	r3, #88	; 0x58
 800122e:	443b      	add	r3, r7
 8001230:	3b4c      	subs	r3, #76	; 0x4c
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
			  leds[i].green = desiredStripesColor.green;
 8001236:	7a79      	ldrb	r1, [r7, #9]
 8001238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3358      	adds	r3, #88	; 0x58
 8001242:	443b      	add	r3, r7
 8001244:	3b4b      	subs	r3, #75	; 0x4b
 8001246:	460a      	mov	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
			  leds[i].blue = desiredStripesColor.blue;
 800124a:	7ab9      	ldrb	r1, [r7, #10]
 800124c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3358      	adds	r3, #88	; 0x58
 8001256:	443b      	add	r3, r7
 8001258:	3b4a      	subs	r3, #74	; 0x4a
 800125a:	460a      	mov	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < LED_COUNT; i ++) {
 800125e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001260:	3301      	adds	r3, #1
 8001262:	653b      	str	r3, [r7, #80]	; 0x50
 8001264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001266:	2b06      	cmp	r3, #6
 8001268:	dddb      	ble.n	8001222 <StartLEDStripesTask+0x1ca>
		  }

		  // Add LEDs to handle
		  hws2812b.leds = leds;
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38

		  // Fill buffer
		  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fda1 	bl	8002dbe <ws2812b_fill_buffer>

		  // Transmit
		  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4618      	mov	r0, r3
 8001282:	f001 fd81 	bl	8002d88 <ws2812b_required_buffer_len>
 8001286:	4603      	mov	r3, r0
 8001288:	b29b      	uxth	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <StartLEDStripesTask+0x248>)
 8001290:	f004 ff7e 	bl	8006190 <HAL_SPI_Transmit_DMA>
		  HAL_Delay(10); // 10ms delay
 8001294:	200a      	movs	r0, #10
 8001296:	f001 ff1b 	bl	80030d0 <HAL_Delay>
	  vTaskSuspend(NULL);
 800129a:	e783      	b.n	80011a4 <StartLEDStripesTask+0x14c>
 800129c:	200000e2 	.word	0x200000e2
 80012a0:	200001c0 	.word	0x200001c0
 80012a4:	200007b0 	.word	0x200007b0
 80012a8:	0800d120 	.word	0x0800d120
 80012ac:	20000104 	.word	0x20000104
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	200000e4 	.word	0x200000e4
 80012b8:	200000e3 	.word	0x200000e3

080012bc <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f008 ffe1 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <StartLeftBlinkersTask+0x68>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f083 0301 	eor.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <StartLeftBlinkersTask+0x28>
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <StartLeftBlinkersTask+0x6c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ef      	beq.n	80012c4 <StartLeftBlinkersTask+0x8>
		  internalFunctionCall = false;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <StartLeftBlinkersTask+0x6c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <StartLeftBlinkersTask+0x70>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <StartLeftBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <StartLeftBlinkersTask+0x74>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 f873 	bl	800a3e4 <vTaskResume>
		  }

		  // Left blinkers effect
		  for(int i = 0; i < 6; i ++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e00b      	b.n	800131c <StartLeftBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <StartLeftBlinkersTask+0x78>)
 800130a:	f002 ff0c 	bl	8004126 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800130e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001312:	f007 fe57 	bl	8008fc4 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b05      	cmp	r3, #5
 8001320:	ddf0      	ble.n	8001304 <StartLeftBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 8001322:	e7cf      	b.n	80012c4 <StartLeftBlinkersTask+0x8>
 8001324:	20000104 	.word	0x20000104
 8001328:	200000e0 	.word	0x200000e0
 800132c:	200000e5 	.word	0x200000e5
 8001330:	20000164 	.word	0x20000164
 8001334:	40020800 	.word	0x40020800

08001338 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001340:	2000      	movs	r0, #0
 8001342:	f008 ffa3 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <StartRightBlinkersTask+0x68>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d104      	bne.n	8001360 <StartRightBlinkersTask+0x28>
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <StartRightBlinkersTask+0x6c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ef      	beq.n	8001340 <StartRightBlinkersTask+0x8>
		  internalFunctionCall = false;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <StartRightBlinkersTask+0x6c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <StartRightBlinkersTask+0x70>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <StartRightBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <StartRightBlinkersTask+0x74>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f009 f835 	bl	800a3e4 <vTaskResume>
		  }

		  // Right blinkers effect
		  for(int i = 0; i < 6; i ++) {
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e00b      	b.n	8001398 <StartRightBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <StartRightBlinkersTask+0x78>)
 8001386:	f002 fece 	bl	8004126 <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800138a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800138e:	f007 fe19 	bl	8008fc4 <osDelay>
		  for(int i = 0; i < 6; i ++) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3301      	adds	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b05      	cmp	r3, #5
 800139c:	ddf0      	ble.n	8001380 <StartRightBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 800139e:	e7cf      	b.n	8001340 <StartRightBlinkersTask+0x8>
 80013a0:	20000104 	.word	0x20000104
 80013a4:	200000e0 	.word	0x200000e0
 80013a8:	200000e5 	.word	0x200000e5
 80013ac:	20000164 	.word	0x20000164
 80013b0:	40020800 	.word	0x40020800

080013b4 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013bc:	2000      	movs	r0, #0
 80013be:	f008 ff65 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <StartParkLeftTask+0x48>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f4      	beq.n	80013bc <StartParkLeftTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <StartParkLeftTask+0x4c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <StartParkLeftTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <StartParkLeftTask+0x50>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 ffff 	bl	800a3e4 <vTaskResume>
		  }

		  // Park to the left
		  isParking = true;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <StartParkLeftTask+0x48>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
		  park(LEFT);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fa39 	bl	8000864 <park>
		  isParking = false;
 80013f2:	4b02      	ldr	r3, [pc, #8]	; (80013fc <StartParkLeftTask+0x48>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 80013f8:	e7e0      	b.n	80013bc <StartParkLeftTask+0x8>
 80013fa:	bf00      	nop
 80013fc:	20000104 	.word	0x20000104
 8001400:	200000e5 	.word	0x200000e5
 8001404:	20000164 	.word	0x20000164

08001408 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001410:	2000      	movs	r0, #0
 8001412:	f008 ff3b 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <StartParkRightTask+0x48>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f083 0301 	eor.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f4      	beq.n	8001410 <StartParkRightTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <StartParkRightTask+0x4c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <StartParkRightTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <StartParkRightTask+0x50>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f008 ffd5 	bl	800a3e4 <vTaskResume>
		  }

		  // Park to the right
		  isParking = true;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <StartParkRightTask+0x48>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
		  park(RIGHT);
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff fa0f 	bl	8000864 <park>
		  isParking = false;
 8001446:	4b02      	ldr	r3, [pc, #8]	; (8001450 <StartParkRightTask+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 800144c:	e7e0      	b.n	8001410 <StartParkRightTask+0x8>
 800144e:	bf00      	nop
 8001450:	20000104 	.word	0x20000104
 8001454:	200000e5 	.word	0x200000e5
 8001458:	20000164 	.word	0x20000164

0800145c <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001464:	2300      	movs	r3, #0
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <StartAccelerateTask+0x88>)
 800146c:	f002 f804 	bl	8003478 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001470:	2000      	movs	r0, #0
 8001472:	f008 ff0b 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <StartAccelerateTask+0x8c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f083 0301 	eor.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <StartAccelerateTask+0x34>
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <StartAccelerateTask+0x90>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ef      	beq.n	8001470 <StartAccelerateTask+0x14>
		  internalFunctionCall = false;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <StartAccelerateTask+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <StartAccelerateTask+0x94>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <StartAccelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <StartAccelerateTask+0x98>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 ff9d 	bl	800a3e4 <vTaskResume>
		  }

		  // Accelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue < 4) {
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <StartAccelerateTask+0x9c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	dc08      	bgt.n	80014c4 <StartAccelerateTask+0x68>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <StartAccelerateTask+0x9c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <StartAccelerateTask+0xa0>)
 80014b8:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue ++;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <StartAccelerateTask+0x9c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <StartAccelerateTask+0x9c>)
 80014c2:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 80014c4:	f7ff f8cc 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <StartAccelerateTask+0x9c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dbcf      	blt.n	8001470 <StartAccelerateTask+0x14>
			  isWithdrawing = false;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <StartAccelerateTask+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <StartAccelerateTask+0xa8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 ff82 	bl	800a3e4 <vTaskResume>
	  vTaskSuspend(NULL);
 80014e0:	e7c6      	b.n	8001470 <StartAccelerateTask+0x14>
 80014e2:	bf00      	nop
 80014e4:	20000110 	.word	0x20000110
 80014e8:	20000104 	.word	0x20000104
 80014ec:	200000e0 	.word	0x200000e0
 80014f0:	200000e5 	.word	0x200000e5
 80014f4:	20000164 	.word	0x20000164
 80014f8:	200000ec 	.word	0x200000ec
 80014fc:	200000e8 	.word	0x200000e8
 8001500:	200000f0 	.word	0x200000f0
 8001504:	20000160 	.word	0x20000160

08001508 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001510:	2300      	movs	r3, #0
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	4821      	ldr	r0, [pc, #132]	; (800159c <StartDecelerateTask+0x94>)
 8001518:	f001 ffae 	bl	8003478 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800151c:	2000      	movs	r0, #0
 800151e:	f008 feb5 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <StartDecelerateTask+0x98>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <StartDecelerateTask+0x34>
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <StartDecelerateTask+0x9c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ef      	beq.n	800151c <StartDecelerateTask+0x14>
		  internalFunctionCall = false;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <StartDecelerateTask+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <StartDecelerateTask+0xa0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <StartDecelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <StartDecelerateTask+0xa4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f008 ff47 	bl	800a3e4 <vTaskResume>
		  }

		  // Decelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue > -2) {
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <StartDecelerateTask+0xa8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	db08      	blt.n	8001572 <StartDecelerateTask+0x6a>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <StartDecelerateTask+0xa8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <StartDecelerateTask+0xac>)
 8001566:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue --;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <StartDecelerateTask+0xa8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <StartDecelerateTask+0xa8>)
 8001570:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 8001572:	f7ff f875 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <StartDecelerateTask+0xa8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db05      	blt.n	800158a <StartDecelerateTask+0x82>
			  vTaskResume(BrakeLightsTaskHandle);
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <StartDecelerateTask+0xb0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f008 ff2e 	bl	800a3e4 <vTaskResume>
 8001588:	e7c8      	b.n	800151c <StartDecelerateTask+0x14>
		  } else {
			  isWithdrawing = true;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <StartDecelerateTask+0xb4>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <StartDecelerateTask+0xb8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f008 ff25 	bl	800a3e4 <vTaskResume>
	  vTaskSuspend(NULL);
 800159a:	e7bf      	b.n	800151c <StartDecelerateTask+0x14>
 800159c:	20000110 	.word	0x20000110
 80015a0:	20000104 	.word	0x20000104
 80015a4:	200000e0 	.word	0x200000e0
 80015a8:	200000e5 	.word	0x200000e5
 80015ac:	20000164 	.word	0x20000164
 80015b0:	200000ec 	.word	0x200000ec
 80015b4:	200000e8 	.word	0x200000e8
 80015b8:	2000015c 	.word	0x2000015c
 80015bc:	200000f0 	.word	0x200000f0
 80015c0:	20000160 	.word	0x20000160

080015c4 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	4819      	ldr	r0, [pc, #100]	; (8001638 <StartTurnLeftTask+0x74>)
 80015d4:	f002 fd8e 	bl	80040f4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80015d8:	2000      	movs	r0, #0
 80015da:	f008 fe57 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <StartTurnLeftTask+0x78>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <StartTurnLeftTask+0x34>
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <StartTurnLeftTask+0x7c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <StartTurnLeftTask+0x14>
		  internalFunctionCall = false;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <StartTurnLeftTask+0x7c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <StartTurnLeftTask+0x80>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <StartTurnLeftTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <StartTurnLeftTask+0x84>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f008 fee9 	bl	800a3e4 <vTaskResume>
		  }

		  // Turn left if possible
		  if(sliderLeftRightCurrentValue > -3) {
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <StartTurnLeftTask+0x88>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f113 0f02 	cmn.w	r3, #2
 800161a:	dbdd      	blt.n	80015d8 <StartTurnLeftTask+0x14>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <StartTurnLeftTask+0x88>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <StartTurnLeftTask+0x8c>)
 8001622:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue --;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <StartTurnLeftTask+0x88>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <StartTurnLeftTask+0x88>)
 800162c:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(LEFT);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff f8a0 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001634:	e7d0      	b.n	80015d8 <StartTurnLeftTask+0x14>
 8001636:	bf00      	nop
 8001638:	40021400 	.word	0x40021400
 800163c:	20000104 	.word	0x20000104
 8001640:	200000e0 	.word	0x200000e0
 8001644:	200000e5 	.word	0x200000e5
 8001648:	20000164 	.word	0x20000164
 800164c:	20000100 	.word	0x20000100
 8001650:	200000fc 	.word	0x200000fc

08001654 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
	HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <StartTurnRightTask+0x70>)
 8001664:	f002 fd46 	bl	80040f4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001668:	2000      	movs	r0, #0
 800166a:	f008 fe0f 	bl	800a28c <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <StartTurnRightTask+0x74>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <StartTurnRightTask+0x34>
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <StartTurnRightTask+0x78>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ef      	beq.n	8001668 <StartTurnRightTask+0x14>
		  internalFunctionCall = false;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <StartTurnRightTask+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <StartTurnRightTask+0x7c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <StartTurnRightTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <StartTurnRightTask+0x80>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fea1 	bl	800a3e4 <vTaskResume>
		  }

		  // Turn right if possible
		  if(sliderLeftRightCurrentValue < 3) {
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <StartTurnRightTask+0x84>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	dcde      	bgt.n	8001668 <StartTurnRightTask+0x14>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <StartTurnRightTask+0x84>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <StartTurnRightTask+0x88>)
 80016b0:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue ++;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <StartTurnRightTask+0x84>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <StartTurnRightTask+0x84>)
 80016ba:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(RIGHT);
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff f859 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 80016c2:	e7d1      	b.n	8001668 <StartTurnRightTask+0x14>
 80016c4:	40021400 	.word	0x40021400
 80016c8:	20000104 	.word	0x20000104
 80016cc:	200000e0 	.word	0x200000e0
 80016d0:	200000e5 	.word	0x200000e5
 80016d4:	20000164 	.word	0x20000164
 80016d8:	20000100 	.word	0x20000100
 80016dc:	200000fc 	.word	0x200000fc

080016e0 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f008 fdcf 	bl	800a28c <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <StartConnectionTask+0x30>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f241 517c 	movw	r1, #5500	; 0x157c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fd2c 	bl	8009154 <osTimerStart>
	  isConnected = true;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <StartConnectionTask+0x34>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <StartConnectionTask+0x38>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f008 fe6c 	bl	800a3e4 <vTaskResume>
	  vTaskSuspend(NULL);
 800170c:	e7ec      	b.n	80016e8 <StartConnectionTask+0x8>
 800170e:	bf00      	nop
 8001710:	20000168 	.word	0x20000168
 8001714:	200000e1 	.word	0x200000e1
 8001718:	20000124 	.word	0x20000124

0800171c <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001724:	2000      	movs	r0, #0
 8001726:	f008 fdb1 	bl	800a28c <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800172a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <StartBrakeLightsTask+0x2c>)
 8001730:	f002 fcf9 	bl	8004126 <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 8001734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001738:	f007 fc44 	bl	8008fc4 <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 800173c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <StartBrakeLightsTask+0x2c>)
 8001742:	f002 fcf0 	bl	8004126 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001746:	e7ed      	b.n	8001724 <StartBrakeLightsTask+0x8>
 8001748:	40020800 	.word	0x40020800

0800174c <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001754:	2000      	movs	r0, #0
 8001756:	f008 fd99 	bl	800a28c <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <StartWithdrawLightsTask+0x34>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <StartWithdrawLightsTask+0x38>)
 800176c:	f002 fcc2 	bl	80040f4 <HAL_GPIO_WritePin>
 8001770:	e7f0      	b.n	8001754 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <StartWithdrawLightsTask+0x38>)
 800177a:	f002 fcbb 	bl	80040f4 <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 800177e:	e7e9      	b.n	8001754 <StartWithdrawLightsTask+0x8>
 8001780:	200000f0 	.word	0x200000f0
 8001784:	40020800 	.word	0x40020800

08001788 <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001790:	2000      	movs	r0, #0
 8001792:	f008 fd7b 	bl	800a28c <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <StartResumeFromStopTask+0x48>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f7      	beq.n	8001790 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <StartResumeFromStopTask+0x48>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <StartResumeFromStopTask+0x4c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <StartResumeFromStopTask+0x50>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e002      	b.n	80017be <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <StartResumeFromStopTask+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <StartResumeFromStopTask+0x54>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <StartResumeFromStopTask+0x58>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f008 fe0b 	bl	800a3e4 <vTaskResume>
	  vTaskSuspend(NULL);
 80017ce:	e7df      	b.n	8001790 <StartResumeFromStopTask+0x8>
 80017d0:	200000e5 	.word	0x200000e5
 80017d4:	200000e3 	.word	0x200000e3
 80017d8:	200000e2 	.word	0x200000e2
 80017dc:	200000e4 	.word	0x200000e4
 80017e0:	20000134 	.word	0x20000134

080017e4 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <CallbackConnectionTaskTimer+0x2c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f008 fdf7 	bl	800a3e4 <vTaskResume>
	isConnected = false;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <CallbackConnectionTaskTimer+0x30>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <CallbackConnectionTaskTimer+0x34>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f008 fdef 	bl	800a3e4 <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000012c 	.word	0x2000012c
 8001814:	200000e1 	.word	0x200000e1
 8001818:	20000124 	.word	0x20000124

0800181c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4bae      	ldr	r3, [pc, #696]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aad      	ldr	r2, [pc, #692]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4bab      	ldr	r3, [pc, #684]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	4ba8      	ldr	r3, [pc, #672]	; (8001aec <MX_GPIO_Init+0x2d0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4aa7      	ldr	r2, [pc, #668]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4ba5      	ldr	r3, [pc, #660]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4ba2      	ldr	r3, [pc, #648]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4aa1      	ldr	r2, [pc, #644]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b9f      	ldr	r3, [pc, #636]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <MX_GPIO_Init+0x2d0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b99      	ldr	r3, [pc, #612]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001892:	4b96      	ldr	r3, [pc, #600]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a95      	ldr	r2, [pc, #596]	; (8001aec <MX_GPIO_Init+0x2d0>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b93      	ldr	r3, [pc, #588]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	4b90      	ldr	r3, [pc, #576]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b8d      	ldr	r3, [pc, #564]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c2:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a89      	ldr	r2, [pc, #548]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b87      	ldr	r3, [pc, #540]	; (8001aec <MX_GPIO_Init+0x2d0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STM32Reset_GPIO_Port, STM32Reset_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2140      	movs	r1, #64	; 0x40
 80018de:	4884      	ldr	r0, [pc, #528]	; (8001af0 <MX_GPIO_Init+0x2d4>)
 80018e0:	f002 fc08 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f244 0191 	movw	r1, #16529	; 0x4091
 80018ea:	4882      	ldr	r0, [pc, #520]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80018ec:	f002 fc02 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorEn_GPIO_Port, StepperMotorEn_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4880      	ldr	r0, [pc, #512]	; (8001af8 <MX_GPIO_Init+0x2dc>)
 80018f8:	f002 fbfc 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001902:	487e      	ldr	r0, [pc, #504]	; (8001afc <MX_GPIO_Init+0x2e0>)
 8001904:	f002 fbf6 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	487c      	ldr	r0, [pc, #496]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 800190e:	f002 fbf1 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001918:	487a      	ldr	r0, [pc, #488]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 800191a:	f002 fbeb 	bl	80040f4 <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4873      	ldr	r0, [pc, #460]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 8001936:	f002 fa31 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800193a:	2332      	movs	r3, #50	; 0x32
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194a:	230b      	movs	r3, #11
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	486b      	ldr	r0, [pc, #428]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 8001956:	f002 fa21 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800195a:	2386      	movs	r3, #134	; 0x86
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800196a:	230b      	movs	r3, #11
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	485e      	ldr	r0, [pc, #376]	; (8001af0 <MX_GPIO_Init+0x2d4>)
 8001976:	f002 fa11 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM32Reset_Pin;
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(STM32Reset_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4857      	ldr	r0, [pc, #348]	; (8001af0 <MX_GPIO_Init+0x2d4>)
 8001992:	f002 fa03 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 8001996:	f244 0391 	movw	r3, #16529	; 0x4091
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4851      	ldr	r0, [pc, #324]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80019b0:	f002 f9f4 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorEn_Pin;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorEn_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	484a      	ldr	r0, [pc, #296]	; (8001af8 <MX_GPIO_Init+0x2dc>)
 80019ce:	f002 f9e5 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e4:	230b      	movs	r3, #11
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4841      	ldr	r0, [pc, #260]	; (8001af4 <MX_GPIO_Init+0x2d8>)
 80019f0:	f002 f9d4 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a06:	2307      	movs	r3, #7
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483a      	ldr	r0, [pc, #232]	; (8001afc <MX_GPIO_Init+0x2e0>)
 8001a12:	f002 f9c3 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 8001a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4833      	ldr	r0, [pc, #204]	; (8001afc <MX_GPIO_Init+0x2e0>)
 8001a30:	f002 f9b4 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a34:	2340      	movs	r3, #64	; 0x40
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	482d      	ldr	r0, [pc, #180]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001a4c:	f002 f9a6 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4827      	ldr	r0, [pc, #156]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001a64:	f002 f99a 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 8001a68:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a6c:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_GPIO_Init+0x2e8>)
 8001a82:	f002 f98b 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a98:	230a      	movs	r3, #10
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_GPIO_Init+0x2d4>)
 8001aa4:	f002 f97a 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_GPIO_Init+0x2d4>)
 8001abe:	f002 f96d 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ac2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <MX_GPIO_Init+0x2e4>)
 8001ae0:	f002 f95c 	bl	8003d9c <HAL_GPIO_Init>

}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	; 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021800 	.word	0x40021800
 8001b04:	40020800 	.word	0x40020800

08001b08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MX_I2C1_Init+0x78>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <MX_I2C1_Init+0x7c>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b42:	480e      	ldr	r0, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b44:	f002 fb0a 	bl	800415c <HAL_I2C_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b4e:	f000 f977 	bl	8001e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b56:	f002 feeb 	bl	8004930 <HAL_I2CEx_ConfigAnalogFilter>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b60:	f000 f96e 	bl	8001e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b68:	f002 ff2d 	bl	80049c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b72:	f000 f965 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000016c 	.word	0x2000016c
 8001b80:	40005400 	.word	0x40005400
 8001b84:	20404768 	.word	0x20404768

08001b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0ae      	sub	sp, #184	; 0xb8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2290      	movs	r2, #144	; 0x90
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00a fb84 	bl	800c2b6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_I2C_MspInit+0xb4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d13c      	bne.n	8001c32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fca0 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bd2:	f000 f935 	bl	8001e40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf6:	2312      	movs	r3, #18
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c12:	4619      	mov	r1, r3
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <HAL_I2C_MspInit+0xbc>)
 8001c16:	f002 f8c1 	bl	8003d9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_I2C_MspInit+0xb8>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	37b8      	adds	r7, #184	; 0xb8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4c:	f001 fa13 	bl	8003076 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(STM32Reset_GPIO_Port, STM32Reset_Pin, SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <main+0x5c>)
 8001c56:	f002 fa4d 	bl	80040f4 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5a:	f000 f82d 	bl	8001cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5e:	f7ff fddd 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c62:	f7fe ff0d 	bl	8000a80 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c66:	f000 f905 	bl	8001e74 <MX_SPI1_Init>
  MX_DAC_Init();
 8001c6a:	f7fe fe97 	bl	800099c <MX_DAC_Init>
  MX_I2C1_Init();
 8001c6e:	f7ff ff4b 	bl	8001b08 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001c72:	f000 fda3 	bl	80027bc <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001c76:	f000 fe53 	bl	8002920 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <main+0x60>)
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <main+0x64>)
 8001c80:	f005 fe48 	bl	8007914 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001c84:	2100      	movs	r1, #0
 8001c86:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <main+0x68>)
 8001c88:	f001 fb4a 	bl	8003320 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <main+0x6c>)
 8001c90:	f004 fecc 	bl	8006a2c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c94:	f007 f886 	bl	8008da4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c98:	f7fe ff10 	bl	8000abc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c9c:	f007 f8b6 	bl	8008e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <main+0x58>
 8001ca2:	bf00      	nop
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	20000108 	.word	0x20000108
 8001cac:	20000728 	.word	0x20000728
 8001cb0:	20000110 	.word	0x20000110
 8001cb4:	200006dc 	.word	0x200006dc

08001cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b094      	sub	sp, #80	; 0x50
 8001cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	2234      	movs	r2, #52	; 0x34
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00a faf5 	bl	800c2b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <SystemClock_Config+0xd4>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <SystemClock_Config+0xd4>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <SystemClock_Config+0xd8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <SystemClock_Config+0xd8>)
 8001cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <SystemClock_Config+0xd8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d16:	2302      	movs	r3, #2
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d20:	2304      	movs	r3, #4
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d24:	23d8      	movs	r3, #216	; 0xd8
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fee1 	bl	8004b00 <HAL_RCC_OscConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d44:	f000 f87c 	bl	8001e40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d48:	f002 fe8a 	bl	8004a60 <HAL_PWREx_EnableOverDrive>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d52:	f000 f875 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d56:	230f      	movs	r3, #15
 8001d58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	2107      	movs	r1, #7
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f971 	bl	800505c <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d80:	f000 f85e 	bl	8001e40 <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3750      	adds	r7, #80	; 0x50
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_UART_RxCpltCallback+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f008 fb7f 	bl	800a4a4 <xTaskResumeFromISR>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_UART_RxCpltCallback+0x28>
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_UART_RxCpltCallback+0x40>)
 8001dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4906      	ldr	r1, [pc, #24]	; (8001dd8 <HAL_UART_RxCpltCallback+0x44>)
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_UART_RxCpltCallback+0x48>)
 8001dc2:	f005 fda7 	bl	8007914 <HAL_UART_Receive_IT>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000128 	.word	0x20000128
 8001dd4:	e000ed04 	.word	0xe000ed04
 8001dd8:	20000108 	.word	0x20000108
 8001ddc:	20000728 	.word	0x20000728

08001de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001df2:	f001 f94d 	bl	8003090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40001000 	.word	0x40001000

08001e04 <delay.0>:
  while (1)
  {
	  HAL_GPIO_WritePin(STM32Reset_GPIO_Port, STM32Reset_Pin, RESET);

	  void delay(int number_of_seconds)
	  {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	f8c7 c000 	str.w	ip, [r7]
		// Converting time into milli_seconds
		int milli_seconds = 1000 * number_of_seconds;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]

		// Storing start time
		clock_t start_time = clock();
 8001e1c:	f00a fa54 	bl	800c2c8 <clock>
 8001e20:	60b8      	str	r0, [r7, #8]

		// looping till required time is not achieved
		while (clock() < start_time + milli_seconds)
 8001e22:	bf00      	nop
 8001e24:	f00a fa50 	bl	800c2c8 <clock>
 8001e28:	4601      	mov	r1, r0
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4299      	cmp	r1, r3
 8001e32:	d3f7      	bcc.n	8001e24 <delay.0+0x20>
			;
	  }
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <Error_Handler>:
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
void Error_Handler(void)
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
	  HAL_GPIO_WritePin(STM32Reset_GPIO_Port, STM32Reset_Pin, RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4806      	ldr	r0, [pc, #24]	; (8001e70 <Error_Handler+0x30>)
 8001e56:	f002 f94d 	bl	80040f4 <HAL_GPIO_WritePin>

	  delay(1);
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	469c      	mov	ip, r3
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f7ff ffd0 	bl	8001e04 <delay.0>

	  HAL_GPIO_WritePin(STM32Reset_GPIO_Port, STM32Reset_Pin, SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <Error_Handler+0x30>)
 8001e6a:	f002 f943 	bl	80040f4 <HAL_GPIO_WritePin>
  {
 8001e6e:	e7ef      	b.n	8001e50 <Error_Handler+0x10>
 8001e70:	40020000 	.word	0x40020000

08001e74 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <MX_SPI1_Init+0x78>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e8c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001eac:	2218      	movs	r2, #24
 8001eae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI1_Init+0x74>)
 8001ed6:	f003 ff41 	bl	8005d5c <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001ee0:	f7ff ffae 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001c0 	.word	0x200001c0
 8001eec:	40013000 	.word	0x40013000

08001ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_SPI_MspInit+0x110>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d171      	bne.n	8001ff6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a35      	ldr	r2, [pc, #212]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_SPI_MspInit+0x114>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <HAL_SPI_MspInit+0x118>)
 8001f76:	f001 ff11 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	481d      	ldr	r0, [pc, #116]	; (800200c <HAL_SPI_MspInit+0x11c>)
 8001f96:	f001 ff01 	bl	8003d9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_SPI_MspInit+0x124>)
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fa2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fa6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fdc:	f001 fad4 	bl	8003588 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001fe6:	f7ff ff2b 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_SPI_MspInit+0x120>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020c00 	.word	0x40020c00
 8002010:	20000224 	.word	0x20000224
 8002014:	40026458 	.word	0x40026458

08002018 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af04      	add	r7, sp, #16
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2301      	movs	r3, #1
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2301      	movs	r3, #1
 8002042:	2200      	movs	r2, #0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <ssd1306_WriteCommand+0x2c>)
 8002048:	f002 f918 	bl	800427c <HAL_I2C_Mem_Write>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000016c 	.word	0x2000016c

08002058 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af04      	add	r7, sp, #16
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f04f 32ff 	mov.w	r2, #4294967295
 800206a:	9202      	str	r2, [sp, #8]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2178      	movs	r1, #120	; 0x78
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <ssd1306_WriteData+0x30>)
 800207a:	f002 f8ff 	bl	800427c <HAL_I2C_Mem_Write>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000016c 	.word	0x2000016c

0800208c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002090:	f7ff ffc2 	bl	8002018 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002094:	2064      	movs	r0, #100	; 0x64
 8002096:	f001 f81b 	bl	80030d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f9ce 	bl	800243c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80020a0:	2020      	movs	r0, #32
 80020a2:	f7ff ffc1 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ffbe 	bl	8002028 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020ac:	20b0      	movs	r0, #176	; 0xb0
 80020ae:	f7ff ffbb 	bl	8002028 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020b2:	20c8      	movs	r0, #200	; 0xc8
 80020b4:	f7ff ffb8 	bl	8002028 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff ffb5 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020be:	2010      	movs	r0, #16
 80020c0:	f7ff ffb2 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020c4:	2040      	movs	r0, #64	; 0x40
 80020c6:	f7ff ffaf 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020ca:	20ff      	movs	r0, #255	; 0xff
 80020cc:	f000 f9a2 	bl	8002414 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020d0:	20a1      	movs	r0, #161	; 0xa1
 80020d2:	f7ff ffa9 	bl	8002028 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020d6:	20a6      	movs	r0, #166	; 0xa6
 80020d8:	f7ff ffa6 	bl	8002028 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020dc:	20a8      	movs	r0, #168	; 0xa8
 80020de:	f7ff ffa3 	bl	8002028 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020e2:	203f      	movs	r0, #63	; 0x3f
 80020e4:	f7ff ffa0 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020e8:	20a4      	movs	r0, #164	; 0xa4
 80020ea:	f7ff ff9d 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020ee:	20d3      	movs	r0, #211	; 0xd3
 80020f0:	f7ff ff9a 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff ff97 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020fa:	20d5      	movs	r0, #213	; 0xd5
 80020fc:	f7ff ff94 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002100:	20f0      	movs	r0, #240	; 0xf0
 8002102:	f7ff ff91 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002106:	20d9      	movs	r0, #217	; 0xd9
 8002108:	f7ff ff8e 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800210c:	2022      	movs	r0, #34	; 0x22
 800210e:	f7ff ff8b 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002112:	20da      	movs	r0, #218	; 0xda
 8002114:	f7ff ff88 	bl	8002028 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002118:	2012      	movs	r0, #18
 800211a:	f7ff ff85 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800211e:	20db      	movs	r0, #219	; 0xdb
 8002120:	f7ff ff82 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002124:	2020      	movs	r0, #32
 8002126:	f7ff ff7f 	bl	8002028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800212a:	208d      	movs	r0, #141	; 0x8d
 800212c:	f7ff ff7c 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002130:	2014      	movs	r0, #20
 8002132:	f7ff ff79 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002136:	2001      	movs	r0, #1
 8002138:	f000 f980 	bl	800243c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800213c:	2000      	movs	r0, #0
 800213e:	f000 f80f 	bl	8002160 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002142:	f000 f825 	bl	8002190 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <ssd1306_Init+0xd0>)
 8002148:	2200      	movs	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <ssd1306_Init+0xd0>)
 800214e:	2200      	movs	r2, #0
 8002150:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002152:	4b02      	ldr	r3, [pc, #8]	; (800215c <ssd1306_Init+0xd0>)
 8002154:	2201      	movs	r2, #1
 8002156:	711a      	strb	r2, [r3, #4]
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000684 	.word	0x20000684

08002160 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <ssd1306_Fill+0x14>
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <ssd1306_Fill+0x16>
 8002174:	23ff      	movs	r3, #255	; 0xff
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	4619      	mov	r1, r3
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <ssd1306_Fill+0x2c>)
 800217e:	f00a f89a 	bl	800c2b6 <memset>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000284 	.word	0x20000284

08002190 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	e016      	b.n	80021ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3b50      	subs	r3, #80	; 0x50
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff40 	bl	8002028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff ff3d 	bl	8002028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021ae:	2010      	movs	r0, #16
 80021b0:	f7ff ff3a 	bl	8002028 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	4a08      	ldr	r2, [pc, #32]	; (80021dc <ssd1306_UpdateScreen+0x4c>)
 80021ba:	4413      	add	r3, r2
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff4a 	bl	8002058 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	3301      	adds	r3, #1
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d9e5      	bls.n	800219c <ssd1306_UpdateScreen+0xc>
    }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000284 	.word	0x20000284

080021e0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	460b      	mov	r3, r1
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db3d      	blt.n	8002276 <ssd1306_DrawPixel+0x96>
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b3f      	cmp	r3, #63	; 0x3f
 80021fe:	d83a      	bhi.n	8002276 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d11a      	bne.n	800223c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002206:	79fa      	ldrb	r2, [r7, #7]
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	b2d8      	uxtb	r0, r3
 800220e:	4603      	mov	r3, r0
 8002210:	01db      	lsls	r3, r3, #7
 8002212:	4413      	add	r3, r2
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <ssd1306_DrawPixel+0xa4>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	b25a      	sxtb	r2, r3
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	b25b      	sxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b259      	sxtb	r1, r3
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	4603      	mov	r3, r0
 8002230:	01db      	lsls	r3, r3, #7
 8002232:	4413      	add	r3, r2
 8002234:	b2c9      	uxtb	r1, r1
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <ssd1306_DrawPixel+0xa4>)
 8002238:	54d1      	strb	r1, [r2, r3]
 800223a:	e01d      	b.n	8002278 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800223c:	79fa      	ldrb	r2, [r7, #7]
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	4603      	mov	r3, r0
 8002246:	01db      	lsls	r3, r3, #7
 8002248:	4413      	add	r3, r2
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <ssd1306_DrawPixel+0xa4>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	b25a      	sxtb	r2, r3
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	b25b      	sxtb	r3, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	b25b      	sxtb	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	b259      	sxtb	r1, r3
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	4603      	mov	r3, r0
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4413      	add	r3, r2
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <ssd1306_DrawPixel+0xa4>)
 8002272:	54d1      	strb	r1, [r2, r3]
 8002274:	e000      	b.n	8002278 <ssd1306_DrawPixel+0x98>
        return;
 8002276:	bf00      	nop
    }
}
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000284 	.word	0x20000284

08002288 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	4604      	mov	r4, r0
 8002290:	1d38      	adds	r0, r7, #4
 8002292:	e880 0006 	stmia.w	r0, {r1, r2}
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	4613      	mov	r3, r2
 800229e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b1f      	cmp	r3, #31
 80022a4:	d902      	bls.n	80022ac <ssd1306_WriteChar+0x24>
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b7e      	cmp	r3, #126	; 0x7e
 80022aa:	d901      	bls.n	80022b0 <ssd1306_WriteChar+0x28>
        return 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e06d      	b.n	800238c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <ssd1306_WriteChar+0x10c>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	793b      	ldrb	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	dc06      	bgt.n	80022cc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <ssd1306_WriteChar+0x10c>)
 80022c0:	885b      	ldrh	r3, [r3, #2]
 80022c2:	461a      	mov	r2, r3
 80022c4:	797b      	ldrb	r3, [r7, #5]
 80022c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	dd01      	ble.n	80022d0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e05d      	b.n	800238c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	e04c      	b.n	8002370 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	3b20      	subs	r3, #32
 80022dc:	7979      	ldrb	r1, [r7, #5]
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	440b      	add	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e034      	b.n	8002360 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <ssd1306_WriteChar+0x10c>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b2d8      	uxtb	r0, r3
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <ssd1306_WriteChar+0x10c>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	7bba      	ldrb	r2, [r7, #14]
 8002324:	4619      	mov	r1, r3
 8002326:	f7ff ff5b 	bl	80021e0 <ssd1306_DrawPixel>
 800232a:	e016      	b.n	800235a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <ssd1306_WriteChar+0x10c>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b2d8      	uxtb	r0, r3
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <ssd1306_WriteChar+0x10c>)
 800233c:	885b      	ldrh	r3, [r3, #2]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4413      	add	r3, r2
 8002346:	b2d9      	uxtb	r1, r3
 8002348:	7bbb      	ldrb	r3, [r7, #14]
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	f7ff ff43 	bl	80021e0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3301      	adds	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	793b      	ldrb	r3, [r7, #4]
 8002362:	461a      	mov	r2, r3
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4293      	cmp	r3, r2
 8002368:	d3c5      	bcc.n	80022f6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	797b      	ldrb	r3, [r7, #5]
 8002372:	461a      	mov	r2, r3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4293      	cmp	r3, r2
 8002378:	d3ad      	bcc.n	80022d6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <ssd1306_WriteChar+0x10c>)
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	793b      	ldrb	r3, [r7, #4]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4413      	add	r3, r2
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b03      	ldr	r3, [pc, #12]	; (8002394 <ssd1306_WriteChar+0x10c>)
 8002388:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3724      	adds	r7, #36	; 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	20000684 	.word	0x20000684

08002398 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	1d38      	adds	r0, r7, #4
 80023a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80023a6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80023a8:	e012      	b.n	80023d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	7818      	ldrb	r0, [r3, #0]
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	1d3a      	adds	r2, r7, #4
 80023b2:	ca06      	ldmia	r2, {r1, r2}
 80023b4:	f7ff ff68 	bl	8002288 <ssd1306_WriteChar>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d002      	beq.n	80023ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	e008      	b.n	80023dc <ssd1306_WriteString+0x44>
        }
        str++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e8      	bne.n	80023aa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	781b      	ldrb	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	460a      	mov	r2, r1
 80023ee:	71fb      	strb	r3, [r7, #7]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <ssd1306_SetCursor+0x2c>)
 80023fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80023fc:	79bb      	ldrb	r3, [r7, #6]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <ssd1306_SetCursor+0x2c>)
 8002402:	805a      	strh	r2, [r3, #2]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000684 	.word	0x20000684

08002414 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800241e:	2381      	movs	r3, #129	; 0x81
 8002420:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fdff 	bl	8002028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fdfb 	bl	8002028 <ssd1306_WriteCommand>
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800244c:	23af      	movs	r3, #175	; 0xaf
 800244e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <ssd1306_SetDisplayOn+0x38>)
 8002452:	2201      	movs	r2, #1
 8002454:	715a      	strb	r2, [r3, #5]
 8002456:	e004      	b.n	8002462 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002458:	23ae      	movs	r3, #174	; 0xae
 800245a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <ssd1306_SetDisplayOn+0x38>)
 800245e:	2200      	movs	r2, #0
 8002460:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fddf 	bl	8002028 <ssd1306_WriteCommand>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000684 	.word	0x20000684

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <HAL_MspInit+0x4c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_MspInit+0x4c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_MspInit+0x4c>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	210f      	movs	r1, #15
 80024b2:	f06f 0001 	mvn.w	r0, #1
 80024b6:	f000 fee7 	bl	8003288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_InitTick+0xe0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_InitTick+0xe0>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_InitTick+0xe0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024f0:	f107 0210 	add.w	r2, r7, #16
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 ffd4 	bl	80054a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800250a:	f002 ffa5 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 800250e:	6378      	str	r0, [r7, #52]	; 0x34
 8002510:	e004      	b.n	800251c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002512:	f002 ffa1 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 8002516:	4603      	mov	r3, r0
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_InitTick+0xe4>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	3b01      	subs	r3, #1
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_InitTick+0xe8>)
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_InitTick+0xec>)
 800252e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_InitTick+0xe8>)
 8002532:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002536:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_InitTick+0xe8>)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_InitTick+0xe8>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_InitTick+0xe8>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_InitTick+0xe8>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002550:	4817      	ldr	r0, [pc, #92]	; (80025b0 <HAL_InitTick+0xe8>)
 8002552:	f004 f939 	bl	80067c8 <HAL_TIM_Base_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800255c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11b      	bne.n	800259c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002564:	4812      	ldr	r0, [pc, #72]	; (80025b0 <HAL_InitTick+0xe8>)
 8002566:	f004 f991 	bl	800688c <HAL_TIM_Base_Start_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002578:	2036      	movs	r0, #54	; 0x36
 800257a:	f000 fea1 	bl	80032c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d808      	bhi.n	8002596 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	2036      	movs	r0, #54	; 0x36
 800258a:	f000 fe7d 	bl	8003288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_InitTick+0xf0>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e002      	b.n	800259c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800259c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3738      	adds	r7, #56	; 0x38
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	2000068c 	.word	0x2000068c
 80025b4:	40001000 	.word	0x40001000
 80025b8:	2000005c 	.word	0x2000005c

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <TIM6_DAC_IRQHandler+0x20>)
 80025ee:	791b      	ldrb	r3, [r3, #4]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <TIM6_DAC_IRQHandler+0x20>)
 80025f8:	f000 fee4 	bl	80033c4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80025fc:	4803      	ldr	r0, [pc, #12]	; (800260c <TIM6_DAC_IRQHandler+0x24>)
 80025fe:	f004 fb0f 	bl	8006c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000110 	.word	0x20000110
 800260c:	2000068c 	.word	0x2000068c

08002610 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA2_Stream3_IRQHandler+0x10>)
 8002616:	f001 f957 	bl	80038c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000224 	.word	0x20000224

08002624 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <USART6_IRQHandler+0x10>)
 800262a:	f005 f9b7 	bl	800799c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000728 	.word	0x20000728

08002638 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e00a      	b.n	8002660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800264a:	f3af 8000 	nop.w
 800264e:	4601      	mov	r1, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf0      	blt.n	800264a <_read+0x12>
  }

  return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e009      	b.n	8002698 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	60ba      	str	r2, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf1      	blt.n	8002684 <_write+0x12>
  }
  return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_close>:

int _close(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d2:	605a      	str	r2, [r3, #4]
  return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_isatty>:

int _isatty(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_times>:
  errno = ENOENT;
  return -1;
}

int _times(struct tms *buf)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f009 fe68 	bl	800c430 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20080000 	.word	0x20080000
 800278c:	00000400 	.word	0x00000400
 8002790:	200006d8 	.word	0x200006d8
 8002794:	20005320 	.word	0x20005320

08002798 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ce:	463b      	mov	r3, r7
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <MX_TIM4_Init+0xac>)
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <MX_TIM4_Init+0xb0>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <MX_TIM4_Init+0xac>)
 80027e8:	221f      	movs	r2, #31
 80027ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <MX_TIM4_Init+0xac>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <MX_TIM4_Init+0xac>)
 80027f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_TIM4_Init+0xac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM4_Init+0xac>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002806:	4818      	ldr	r0, [pc, #96]	; (8002868 <MX_TIM4_Init+0xac>)
 8002808:	f004 f8b8 	bl	800697c <HAL_TIM_PWM_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002812:	f7ff fb15 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <MX_TIM4_Init+0xac>)
 8002826:	f004 ff7b 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002830:	f7ff fb06 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002834:	2360      	movs	r3, #96	; 0x60
 8002836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	2208      	movs	r2, #8
 8002848:	4619      	mov	r1, r3
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM4_Init+0xac>)
 800284c:	f004 fb08 	bl	8006e60 <HAL_TIM_PWM_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002856:	f7ff faf3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800285a:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM4_Init+0xac>)
 800285c:	f000 f828 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 8002860:	bf00      	nop
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200006dc 	.word	0x200006dc
 800286c:	40000800 	.word	0x40000800

08002870 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_TIM_PWM_MspInit+0x38>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10b      	bne.n	800289a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_TIM_MspPostInit+0x64>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11c      	bne.n	800290c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028d8:	f043 0308 	orr.w	r3, r3, #8
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 80028ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 8002908:	f001 fa48 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40000800 	.word	0x40000800
 8002918:	40023800 	.word	0x40023800
 800291c:	40020c00 	.word	0x40020c00

08002920 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <MX_USART6_UART_Init+0x5c>)
 8002928:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <MX_USART6_UART_Init+0x58>)
 800292c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002930:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <MX_USART6_UART_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <MX_USART6_UART_Init+0x58>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_USART6_UART_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	; (8002978 <MX_USART6_UART_Init+0x58>)
 8002964:	f004 ff88 	bl	8007878 <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800296e:	f7ff fa67 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000728 	.word	0x20000728
 800297c:	40011400 	.word	0x40011400

08002980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0ae      	sub	sp, #184	; 0xb8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2290      	movs	r2, #144	; 0x90
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f009 fc88 	bl	800c2b6 <memset>
  if(uartHandle->Instance==USART6)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <HAL_UART_MspInit+0xc4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d144      	bne.n	8002a3a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80029b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80029b6:	2300      	movs	r3, #0
 80029b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fda4 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029ca:	f7ff fa39 	bl	8001e40 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_UART_MspInit+0xc8>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 80029fe:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a18:	2308      	movs	r3, #8
 8002a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <HAL_UART_MspInit+0xcc>)
 8002a26:	f001 f9b9 	bl	8003d9c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	2047      	movs	r0, #71	; 0x47
 8002a30:	f000 fc2a 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a34:	2047      	movs	r0, #71	; 0x47
 8002a36:	f000 fc43 	bl	80032c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	37b8      	adds	r7, #184	; 0xb8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40011400 	.word	0x40011400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40021800 	.word	0x40021800

08002a50 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8002a58:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <ws2812b_init+0x1f4>)
 8002a5a:	4a7b      	ldr	r2, [pc, #492]	; (8002c48 <ws2812b_init+0x1f8>)
 8002a5c:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <ws2812b_init+0x1f8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d009      	beq.n	8002a80 <ws2812b_init+0x30>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d005      	beq.n	8002a80 <ws2812b_init+0x30>
 8002a74:	4875      	ldr	r0, [pc, #468]	; (8002c4c <ws2812b_init+0x1fc>)
 8002a76:	f000 f9f5 	bl	8002e64 <set_init_error_msg>
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e17f      	b.n	8002d80 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d01d      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	789b      	ldrb	r3, [r3, #2]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d019      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	789b      	ldrb	r3, [r3, #2]
 8002a94:	2b07      	cmp	r3, #7
 8002a96:	d015      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	789b      	ldrb	r3, [r3, #2]
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d011      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	789b      	ldrb	r3, [r3, #2]
 8002aa4:	2b3f      	cmp	r3, #63	; 0x3f
 8002aa6:	d00d      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	789b      	ldrb	r3, [r3, #2]
 8002aac:	2b1f      	cmp	r3, #31
 8002aae:	d009      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab6:	d005      	beq.n	8002ac4 <ws2812b_init+0x74>
 8002ab8:	4865      	ldr	r0, [pc, #404]	; (8002c50 <ws2812b_init+0x200>)
 8002aba:	f000 f9d3 	bl	8002e64 <set_init_error_msg>
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e15d      	b.n	8002d80 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d01d      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d019      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	d015      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d011      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8002aea:	d00d      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b1f      	cmp	r3, #31
 8002af2:	d009      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	785b      	ldrb	r3, [r3, #1]
 8002af8:	2b7f      	cmp	r3, #127	; 0x7f
 8002afa:	d005      	beq.n	8002b08 <ws2812b_init+0xb8>
 8002afc:	4855      	ldr	r0, [pc, #340]	; (8002c54 <ws2812b_init+0x204>)
 8002afe:	f000 f9b1 	bl	8002e64 <set_init_error_msg>
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e13b      	b.n	8002d80 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	78db      	ldrb	r3, [r3, #3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <ws2812b_init+0xd4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	78db      	ldrb	r3, [r3, #3]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <ws2812b_init+0xd4>
 8002b18:	484f      	ldr	r0, [pc, #316]	; (8002c58 <ws2812b_init+0x208>)
 8002b1a:	f000 f9a3 	bl	8002e64 <set_init_error_msg>
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e12d      	b.n	8002d80 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d009      	beq.n	8002b40 <ws2812b_init+0xf0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	791b      	ldrb	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <ws2812b_init+0xf0>
 8002b34:	4849      	ldr	r0, [pc, #292]	; (8002c5c <ws2812b_init+0x20c>)
 8002b36:	f000 f995 	bl	8002e64 <set_init_error_msg>
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e11f      	b.n	8002d80 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	789a      	ldrb	r2, [r3, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d805      	bhi.n	8002b58 <ws2812b_init+0x108>
 8002b4c:	4844      	ldr	r0, [pc, #272]	; (8002c60 <ws2812b_init+0x210>)
 8002b4e:	f000 f989 	bl	8002e64 <set_init_error_msg>
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e113      	b.n	8002d80 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d109      	bne.n	8002b74 <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	789b      	ldrb	r3, [r3, #2]
 8002b64:	2b0e      	cmp	r3, #14
 8002b66:	d905      	bls.n	8002b74 <ws2812b_init+0x124>
 8002b68:	483e      	ldr	r0, [pc, #248]	; (8002c64 <ws2812b_init+0x214>)
 8002b6a:	f000 f97b 	bl	8002e64 <set_init_error_msg>
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e105      	b.n	8002d80 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	78db      	ldrb	r3, [r3, #3]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	789b      	ldrb	r3, [r3, #2]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	791b      	ldrb	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 80e9 	bne.w	8002d78 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d15c      	bne.n	8002c68 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e5b      	ldrb	r3, [r3, #25]
 8002bb2:	10db      	asrs	r3, r3, #3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	b25a      	sxtb	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e5b      	ldrb	r3, [r3, #25]
 8002bc0:	105b      	asrs	r3, r3, #1
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7e5b      	ldrb	r3, [r3, #25]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b25a      	sxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7e5b      	ldrb	r3, [r3, #25]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	b25b      	sxtb	r3, r3
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	10db      	asrs	r3, r3, #3
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	b25a      	sxtb	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7e1b      	ldrb	r3, [r3, #24]
 8002c0a:	105b      	asrs	r3, r3, #1
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7e1b      	ldrb	r3, [r3, #24]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b25a      	sxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7e1b      	ldrb	r3, [r3, #24]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	761a      	strb	r2, [r3, #24]
 8002c42:	e099      	b.n	8002d78 <ws2812b_init+0x328>
 8002c44:	200007b0 	.word	0x200007b0
 8002c48:	200007b4 	.word	0x200007b4
 8002c4c:	0800d140 	.word	0x0800d140
 8002c50:	0800d164 	.word	0x0800d164
 8002c54:	0800d18c 	.word	0x0800d18c
 8002c58:	0800d1b4 	.word	0x0800d1b4
 8002c5c:	0800d1dc 	.word	0x0800d1dc
 8002c60:	0800d208 	.word	0x0800d208
 8002c64:	0800d23c 	.word	0x0800d23c
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e5b      	ldrb	r3, [r3, #25]
 8002c6c:	09db      	lsrs	r3, r3, #7
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	b25a      	sxtb	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e5b      	ldrb	r3, [r3, #25]
 8002c76:	115b      	asrs	r3, r3, #5
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e5b      	ldrb	r3, [r3, #25]
 8002c88:	10db      	asrs	r3, r3, #3
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b25a      	sxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7e5b      	ldrb	r3, [r3, #25]
 8002c9a:	105b      	asrs	r3, r3, #1
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b25a      	sxtb	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e5b      	ldrb	r3, [r3, #25]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	b25b      	sxtb	r3, r3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7e5b      	ldrb	r3, [r3, #25]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e5b      	ldrb	r3, [r3, #25]
 8002cd0:	015b      	lsls	r3, r3, #5
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b25a      	sxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7e5b      	ldrb	r3, [r3, #25]
 8002ce2:	01db      	lsls	r3, r3, #7
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e1b      	ldrb	r3, [r3, #24]
 8002cf4:	09db      	lsrs	r3, r3, #7
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7e1b      	ldrb	r3, [r3, #24]
 8002cfe:	115b      	asrs	r3, r3, #5
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b25a      	sxtb	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e1b      	ldrb	r3, [r3, #24]
 8002d10:	10db      	asrs	r3, r3, #3
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25a      	sxtb	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e1b      	ldrb	r3, [r3, #24]
 8002d22:	105b      	asrs	r3, r3, #1
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7e1b      	ldrb	r3, [r3, #24]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b25a      	sxtb	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7e1b      	ldrb	r3, [r3, #24]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b25a      	sxtb	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b25a      	sxtb	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7e1b      	ldrb	r3, [r3, #24]
 8002d6a:	01db      	lsls	r3, r3, #7
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]

  return 0;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <ws2812b_required_buffer_len+0x18>
 8002d9c:	2318      	movs	r3, #24
 8002d9e:	e000      	b.n	8002da2 <ws2812b_required_buffer_len+0x1a>
 8002da0:	230c      	movs	r3, #12
 8002da2:	fb03 f202 	mul.w	r2, r3, r2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	e008      	b.n	8002de6 <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	3301      	adds	r3, #1
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3f1      	bcc.n	8002dd4 <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e01a      	b.n	8002e2c <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	463a      	mov	r2, r7
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f85a 	bl	8002eb8 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	463a      	mov	r2, r7
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f853 	bl	8002eb8 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	789b      	ldrb	r3, [r3, #2]
 8002e16:	463a      	mov	r2, r7
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f84c 	bl	8002eb8 <add_byte>
    led++;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3303      	adds	r3, #3
 8002e24:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3df      	bcc.n	8002df6 <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	e008      	b.n	8002e4e <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3f1      	bcc.n	8002e3c <ws2812b_fill_buffer+0x7e>
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002e70:	e00b      	b.n	8002e8a <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	7819      	ldrb	r1, [r3, #0]
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <set_init_error_msg+0x50>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	460a      	mov	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
    i++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b3a      	cmp	r3, #58	; 0x3a
 8002e8e:	dc05      	bgt.n	8002e9c <set_init_error_msg+0x38>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002e9c:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <set_init_error_msg+0x50>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200007b4 	.word	0x200007b4

08002eb8 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d118      	bne.n	8002f00 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e011      	b.n	8002ef8 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681c      	ldr	r4, [r3, #0]
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f844 	bl	8002f6c <construct_double_pulse>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d9ea      	bls.n	8002ed4 <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002efe:	e017      	b.n	8002f30 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e011      	b.n	8002f2a <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6939      	ldr	r1, [r7, #16]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f811 	bl	8002f38 <construct_single_pulse>
 8002f16:	4603      	mov	r3, r0
 8002f18:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3301      	adds	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	d9ea      	bls.n	8002f06 <add_byte+0x4e>
}
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002f46:	79fa      	ldrb	r2, [r7, #7]
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <construct_single_pulse+0x24>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	7e1b      	ldrb	r3, [r3, #24]
 8002f5a:	e001      	b.n	8002f60 <construct_single_pulse+0x28>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	7e1b      	ldrb	r3, [r3, #24]
 8002f7e:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	7e5b      	ldrb	r3, [r3, #25]
 8002f84:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d121      	bne.n	8002fd2 <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3301      	adds	r3, #1
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	fa21 f303 	lsr.w	r3, r1, r3
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <construct_double_pulse+0x38>
 8002fa0:	7dbb      	ldrb	r3, [r7, #22]
 8002fa2:	e000      	b.n	8002fa6 <construct_double_pulse+0x3a>
 8002fa4:	7d7b      	ldrb	r3, [r7, #21]
 8002fa6:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	fa21 f303 	lsr.w	r3, r1, r3
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <construct_double_pulse+0x54>
 8002fb8:	7dbb      	ldrb	r3, [r7, #22]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	e002      	b.n	8002fc6 <construct_double_pulse+0x5a>
 8002fc0:	7d7b      	ldrb	r3, [r7, #21]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	75fb      	strb	r3, [r7, #23]
 8002fd0:	e020      	b.n	8003014 <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002fd2:	79fa      	ldrb	r2, [r7, #7]
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	fa21 f303 	lsr.w	r3, r1, r3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <construct_double_pulse+0x7a>
 8002fe2:	7dbb      	ldrb	r3, [r7, #22]
 8002fe4:	e000      	b.n	8002fe8 <construct_double_pulse+0x7c>
 8002fe6:	7d7b      	ldrb	r3, [r7, #21]
 8002fe8:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <construct_double_pulse+0x98>
 8002ffc:	7dbb      	ldrb	r3, [r7, #22]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	b25b      	sxtb	r3, r3
 8003002:	e002      	b.n	800300a <construct_double_pulse+0x9e>
 8003004:	7d7b      	ldrb	r3, [r7, #21]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	b25b      	sxtb	r3, r3
 800300a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800300e:	4313      	orrs	r3, r2
 8003010:	b25b      	sxtb	r3, r3
 8003012:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800302a:	490e      	ldr	r1, [pc, #56]	; (8003064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003040:	4c0b      	ldr	r4, [pc, #44]	; (8003070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304e:	f7ff fba3 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f009 f9f3 	bl	800c43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7fe fdf7 	bl	8001c48 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800305c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8003068:	0800ea24 	.word	0x0800ea24
  ldr r2, =_sbss
 800306c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8003070:	20005320 	.word	0x20005320

08003074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC_IRQHandler>

08003076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800307a:	2003      	movs	r0, #3
 800307c:	f000 f8f9 	bl	8003272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003080:	2005      	movs	r0, #5
 8003082:	f7ff fa21 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003086:	f7ff f9f7 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x20>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x24>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_IncTick+0x24>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000060 	.word	0x20000060
 80030b4:	200007f0 	.word	0x200007f0

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_GetTick+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	200007f0 	.word	0x200007f0

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff ffee 	bl	80030b8 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000060 	.word	0x20000060

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <__NVIC_SetPriorityGrouping+0x40>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	4313      	orrs	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x40>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00
 800315c:	05fa0000 	.word	0x05fa0000

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <__NVIC_EnableIRQ+0x38>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ff4c 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329a:	f7ff ff61 	bl	8003160 <__NVIC_GetPriorityGrouping>
 800329e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f7ff ffb1 	bl	800320c <NVIC_EncodePriority>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff80 	bl	80031b8 <__NVIC_SetPriority>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff54 	bl	800317c <__NVIC_EnableIRQ>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e014      	b.n	8003318 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	791b      	ldrb	r3, [r3, #4]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fb76 	bl	80009f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	795b      	ldrb	r3, [r3, #5]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DAC_Start+0x16>
 8003332:	2302      	movs	r3, #2
 8003334:	e040      	b.n	80033b8 <HAL_DAC_Start+0x98>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2201      	movs	r2, #1
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800336a:	2b3c      	cmp	r3, #60	; 0x3c
 800336c:	d11d      	bne.n	80033aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e014      	b.n	80033aa <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	213c      	movs	r1, #60	; 0x3c
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	429a      	cmp	r2, r3
 8003398:	d107      	bne.n	80033aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0202 	orr.w	r2, r2, #2
 80033a8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	d120      	bne.n	800341e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ea:	d118      	bne.n	800341e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2204      	movs	r2, #4
 80033f0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003416:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f852 	bl	80034c2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d120      	bne.n	8003470 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343c:	d118      	bne.n	8003470 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2204      	movs	r2, #4
 8003442:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f043 0202 	orr.w	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003458:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003468:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f882 	bl	8003574 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	3308      	adds	r3, #8
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e004      	b.n	80034ac <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3314      	adds	r3, #20
 80034aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	461a      	mov	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b087      	sub	sp, #28
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	795b      	ldrb	r3, [r3, #5]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_DAC_ConfigChannel+0x18>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e03c      	b.n	8003568 <HAL_DAC_ConfigChannel+0x92>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2202      	movs	r2, #2
 80034f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	f640 72fe 	movw	r2, #4094	; 0xffe
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4013      	ands	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	22c0      	movs	r2, #192	; 0xc0
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43da      	mvns	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	400a      	ands	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff fd90 	bl	80030b8 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e099      	b.n	80036d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c4:	e00f      	b.n	80035e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c6:	f7ff fd77 	bl	80030b8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d908      	bls.n	80035e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e078      	b.n	80036d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e8      	bne.n	80035c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_DMA_Init+0x158>)
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	2b04      	cmp	r3, #4
 800363e:	d107      	bne.n	8003650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4313      	orrs	r3, r2
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b04      	cmp	r3, #4
 8003678:	d117      	bne.n	80036aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fb09 	bl	8003ca4 <DMA_CheckFifoParam>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036a6:	2301      	movs	r3, #1
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fac0 	bl	8003c38 <DMA_CalcBaseAndBitshift>
 80036b8:	4603      	mov	r3, r0
 80036ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	223f      	movs	r2, #63	; 0x3f
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	e010803f 	.word	0xe010803f

080036e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_DMA_Start_IT+0x26>
 8003706:	2302      	movs	r3, #2
 8003708:	e048      	b.n	800379c <HAL_DMA_Start_IT+0xb8>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d137      	bne.n	800378e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fa52 	bl	8003bdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	223f      	movs	r2, #63	; 0x3f
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0216 	orr.w	r2, r2, #22
 8003752:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003762:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e005      	b.n	800379a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037b2:	f7ff fc81 	bl	80030b8 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d008      	beq.n	80037d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e052      	b.n	800387c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_Abort+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003826:	e013      	b.n	8003850 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003828:	f7ff fc46 	bl	80030b8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b05      	cmp	r3, #5
 8003834:	d90c      	bls.n	8003850 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e015      	b.n	800387c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	223f      	movs	r2, #63	; 0x3f
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d004      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e00c      	b.n	80038bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2205      	movs	r2, #5
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80038d4:	4b8e      	ldr	r3, [pc, #568]	; (8003b10 <HAL_DMA_IRQHandler+0x248>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a8e      	ldr	r2, [pc, #568]	; (8003b14 <HAL_DMA_IRQHandler+0x24c>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2208      	movs	r2, #8
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2208      	movs	r2, #8
 8003922:	409a      	lsls	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d012      	beq.n	800396a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	2201      	movs	r2, #1
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2204      	movs	r2, #4
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	2210      	movs	r2, #16
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d043      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03c      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c2:	2210      	movs	r2, #16
 80039c4:	409a      	lsls	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d018      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d024      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
 80039f6:	e01f      	b.n	8003a38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e016      	b.n	8003a38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0208 	bic.w	r2, r2, #8
 8003a26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 808f 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8087 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	2220      	movs	r2, #32
 8003a60:	409a      	lsls	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d136      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0216 	bic.w	r2, r2, #22
 8003a80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x1da>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0208 	bic.w	r2, r2, #8
 8003ab0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	223f      	movs	r2, #63	; 0x3f
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d07e      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
        }
        return;
 8003ade:	e079      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d031      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e02c      	b.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b0e:	bf00      	nop
 8003b10:	20000058 	.word	0x20000058
 8003b14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e01e      	b.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10f      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0210 	bic.w	r2, r2, #16
 8003b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2205      	movs	r2, #5
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d307      	bcc.n	8003bb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f2      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x2cc>
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bd4:	bf00      	nop
    }
  }
}
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d108      	bne.n	8003c1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c1a:	e007      	b.n	8003c2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3b10      	subs	r3, #16
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <DMA_CalcBaseAndBitshift+0x60>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <DMA_CalcBaseAndBitshift+0x64>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d908      	bls.n	8003c78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	1d1a      	adds	r2, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58
 8003c76:	e006      	b.n	8003c86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	aaaaaaab 	.word	0xaaaaaaab
 8003c9c:	0800e9d8 	.word	0x0800e9d8
 8003ca0:	fffffc00 	.word	0xfffffc00

08003ca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11f      	bne.n	8003cfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d856      	bhi.n	8003d72 <DMA_CheckFifoParam+0xce>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <DMA_CheckFifoParam+0x28>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	08003d73 	.word	0x08003d73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d046      	beq.n	8003d76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cec:	e043      	b.n	8003d76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf6:	d140      	bne.n	8003d7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfc:	e03d      	b.n	8003d7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d06:	d121      	bne.n	8003d4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d837      	bhi.n	8003d7e <DMA_CheckFifoParam+0xda>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <DMA_CheckFifoParam+0x70>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d2b 	.word	0x08003d2b
 8003d1c:	08003d25 	.word	0x08003d25
 8003d20:	08003d3d 	.word	0x08003d3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e030      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d025      	beq.n	8003d82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3a:	e022      	b.n	8003d82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d44:	d11f      	bne.n	8003d86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d4a:	e01c      	b.n	8003d86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d903      	bls.n	8003d5a <DMA_CheckFifoParam+0xb6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d58:	e018      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5e:	e015      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e00b      	b.n	8003d8a <DMA_CheckFifoParam+0xe6>
      break;
 8003d72:	bf00      	nop
 8003d74:	e00a      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e008      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e006      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e175      	b.n	80040a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	f040 8164 	bne.w	80040a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d005      	beq.n	8003df2 <HAL_GPIO_Init+0x56>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d130      	bne.n	8003e54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e28:	2201      	movs	r2, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 0201 	and.w	r2, r3, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d017      	beq.n	8003e90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d123      	bne.n	8003ee4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80be 	beq.w	80040a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f26:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a65      	ldr	r2, [pc, #404]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f3e:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_GPIO_Init+0x32c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d037      	beq.n	8003fda <HAL_GPIO_Init+0x23e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_GPIO_Init+0x330>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d031      	beq.n	8003fd6 <HAL_GPIO_Init+0x23a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02b      	beq.n	8003fd2 <HAL_GPIO_Init+0x236>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_GPIO_Init+0x338>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d025      	beq.n	8003fce <HAL_GPIO_Init+0x232>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a54      	ldr	r2, [pc, #336]	; (80040d8 <HAL_GPIO_Init+0x33c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <HAL_GPIO_Init+0x22e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a53      	ldr	r2, [pc, #332]	; (80040dc <HAL_GPIO_Init+0x340>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d019      	beq.n	8003fc6 <HAL_GPIO_Init+0x22a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_GPIO_Init+0x344>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_GPIO_Init+0x226>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <HAL_GPIO_Init+0x348>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00d      	beq.n	8003fbe <HAL_GPIO_Init+0x222>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_GPIO_Init+0x34c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <HAL_GPIO_Init+0x21e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4f      	ldr	r2, [pc, #316]	; (80040ec <HAL_GPIO_Init+0x350>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_GPIO_Init+0x21a>
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	e012      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e010      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	e00e      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	e00c      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fc2:	2306      	movs	r3, #6
 8003fc4:	e00a      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	e008      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e004      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e002      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f002 0203 	and.w	r2, r2, #3
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fec:	4935      	ldr	r1, [pc, #212]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffa:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004024:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	f67f ae86 	bls.w	8003dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40020000 	.word	0x40020000
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40020800 	.word	0x40020800
 80040d4:	40020c00 	.word	0x40020c00
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40021400 	.word	0x40021400
 80040e0:	40021800 	.word	0x40021800
 80040e4:	40021c00 	.word	0x40021c00
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40022400 	.word	0x40022400
 80040f0:	40013c00 	.word	0x40013c00

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004110:	e003      	b.n	800411a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	041a      	lsls	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	619a      	str	r2, [r3, #24]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	041a      	lsls	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43d9      	mvns	r1, r3
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	400b      	ands	r3, r1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd fd00 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	e006      	b.n	80041e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d104      	bne.n	80041f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_I2C_Init+0x11c>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	02008000 	.word	0x02008000

0800427c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f040 80f9 	bne.w	8004496 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x34>
 80042aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0ed      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Mem_Write+0x4e>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e0e6      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042d2:	f7fe fef1 	bl	80030b8 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2319      	movs	r3, #25
 80042de:	2201      	movs	r2, #1
 80042e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f955 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d1      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2221      	movs	r2, #33	; 0x21
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800431c:	88f8      	ldrh	r0, [r7, #6]
 800431e:	893a      	ldrh	r2, [r7, #8]
 8004320:	8979      	ldrh	r1, [r7, #10]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4603      	mov	r3, r0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8b9 	bl	80044a4 <I2C_RequestMemoryWrite>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0a9      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2bff      	cmp	r3, #255	; 0xff
 800434c:	d90e      	bls.n	800436c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	22ff      	movs	r2, #255	; 0xff
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	b2da      	uxtb	r2, r3
 800435a:	8979      	ldrh	r1, [r7, #10]
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fab1 	bl	80048cc <I2C_TransferConfig>
 800436a:	e00f      	b.n	800438c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	b2da      	uxtb	r2, r3
 800437c:	8979      	ldrh	r1, [r7, #10]
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 faa0 	bl	80048cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f93f 	bl	8004614 <I2C_WaitOnTXISFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e07b      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d034      	beq.n	8004444 <HAL_I2C_Mem_Write+0x1c8>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d130      	bne.n	8004444 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f8d1 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04d      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d90e      	bls.n	8004424 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	b2da      	uxtb	r2, r3
 8004412:	8979      	ldrh	r1, [r7, #10]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fa55 	bl	80048cc <I2C_TransferConfig>
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	b2da      	uxtb	r2, r3
 8004434:	8979      	ldrh	r1, [r7, #10]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fa44 	bl	80048cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d19e      	bne.n	800438c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f91e 	bl	8004694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01a      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2220      	movs	r2, #32
 8004468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_I2C_Mem_Write+0x224>)
 8004476:	400b      	ands	r3, r1
 8004478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	8979      	ldrh	r1, [r7, #10]
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <I2C_RequestMemoryWrite+0xa4>)
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f9fd 	bl	80048cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f89c 	bl	8004614 <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02c      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
 80044f6:	e015      	b.n	8004524 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f882 	bl	8004614 <I2C_WaitOnTXISFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e012      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f830 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	80002000 	.word	0x80002000

0800454c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d103      	bne.n	800456a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d007      	beq.n	8004588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	619a      	str	r2, [r3, #24]
  }
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a4:	e022      	b.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d01e      	beq.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe fd83 	bl	80030b8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e00f      	b.n	800460c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d0cd      	beq.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004620:	e02c      	b.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f870 	bl	800470c <I2C_IsErrorOccurred>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e02a      	b.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d01e      	beq.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fe fd3b 	bl	80030b8 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d113      	bne.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e007      	b.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d1cb      	bne.n	8004622 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a0:	e028      	b.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f830 	bl	800470c <I2C_IsErrorOccurred>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e026      	b.n	8004704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe fcff 	bl	80030b8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d113      	bne.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e007      	b.n	8004704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d1cf      	bne.n	80046a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d068      	beq.n	800480a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004740:	e049      	b.n	80047d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d045      	beq.n	80047d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe fcb5 	bl	80030b8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_IsErrorOccurred+0x54>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d13a      	bne.n	80047d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004772:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004782:	d121      	bne.n	80047c8 <I2C_IsErrorOccurred+0xbc>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478a:	d01d      	beq.n	80047c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b20      	cmp	r3, #32
 8004790:	d01a      	beq.n	80047c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047a2:	f7fe fc89 	bl	80030b8 <HAL_GetTick>
 80047a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a8:	e00e      	b.n	80047c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047aa:	f7fe fc85 	bl	80030b8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b19      	cmp	r3, #25
 80047b6:	d907      	bls.n	80047c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80047c6:	e006      	b.n	80047d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d1e9      	bne.n	80047aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d003      	beq.n	80047ec <I2C_IsErrorOccurred+0xe0>
 80047e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0aa      	beq.n	8004742 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2220      	movs	r2, #32
 80047fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800482c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff fe63 	bl	800454c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <I2C_IsErrorOccurred+0x1bc>)
 8004892:	400b      	ands	r3, r1
 8004894:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80048ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3728      	adds	r7, #40	; 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	fe00e800 	.word	0xfe00e800

080048cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	817b      	strh	r3, [r7, #10]
 80048da:	4613      	mov	r3, r2
 80048dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e4:	7a7b      	ldrb	r3, [r7, #9]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	0d5b      	lsrs	r3, r3, #21
 8004906:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <I2C_TransferConfig+0x60>)
 800490c:	430b      	orrs	r3, r1
 800490e:	43db      	mvns	r3, r3
 8004910:	ea02 0103 	and.w	r1, r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	03ff63ff 	.word	0x03ff63ff

08004930 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	d138      	bne.n	80049b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004950:	2302      	movs	r3, #2
 8004952:	e032      	b.n	80049ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004982:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d139      	bne.n	8004a50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e033      	b.n	8004a52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2224      	movs	r2, #36	; 0x24
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a8e:	f7fe fb13 	bl	80030b8 <HAL_GetTick>
 8004a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a94:	e009      	b.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a96:	f7fe fb0f 	bl	80030b8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa4:	d901      	bls.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e022      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac4:	f7fe faf8 	bl	80030b8 <HAL_GetTick>
 8004ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aca:	e009      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004acc:	f7fe faf4 	bl	80030b8 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e007      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aec:	d1ee      	bne.n	8004acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e29b      	b.n	800504e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8087 	beq.w	8004c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b24:	4b96      	ldr	r3, [pc, #600]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d00c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b30:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d112      	bne.n	8004b62 <HAL_RCC_OscConfig+0x62>
 8004b3c:	4b90      	ldr	r3, [pc, #576]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	4b8d      	ldr	r3, [pc, #564]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d06c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x130>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d168      	bne.n	8004c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e275      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x7a>
 8004b6c:	4b84      	ldr	r3, [pc, #528]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a83      	ldr	r2, [pc, #524]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e02e      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x9c>
 8004b82:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7e      	ldr	r2, [pc, #504]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e01d      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a75      	ldr	r2, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a72      	ldr	r2, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004bc0:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6e      	ldr	r2, [pc, #440]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6b      	ldr	r2, [pc, #428]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe fa6a 	bl	80030b8 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fe fa66 	bl	80030b8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e229      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe fa56 	bl	80030b8 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe fa52 	bl	80030b8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e215      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x110>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d069      	beq.n	8004d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3e:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1e9      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	493d      	ldr	r1, [pc, #244]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e040      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d023      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe fa08 	bl	80030b8 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fe fa04 	bl	80030b8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1c7      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cca:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4929      	ldr	r1, [pc, #164]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
 8004cde:	e018      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fe f9e4 	bl	80030b8 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fe f9e0 	bl	80030b8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1a3      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d038      	beq.n	8004d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d019      	beq.n	8004d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fe f9c1 	bl	80030b8 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fe f9bd 	bl	80030b8 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e180      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x23a>
 8004d58:	e01a      	b.n	8004d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fe f9a7 	bl	80030b8 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6e:	f7fe f9a3 	bl	80030b8 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d903      	bls.n	8004d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e166      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
 8004d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d84:	4b92      	ldr	r3, [pc, #584]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ee      	bne.n	8004d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80a4 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9e:	4b8c      	ldr	r3, [pc, #560]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a88      	ldr	r2, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b86      	ldr	r3, [pc, #536]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc6:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dd2:	4b80      	ldr	r3, [pc, #512]	; (8004fd4 <HAL_RCC_OscConfig+0x4d4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7f      	ldr	r2, [pc, #508]	; (8004fd4 <HAL_RCC_OscConfig+0x4d4>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fe f96b 	bl	80030b8 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fe f967 	bl	80030b8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b64      	cmp	r3, #100	; 0x64
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e12a      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b76      	ldr	r3, [pc, #472]	; (8004fd4 <HAL_RCC_OscConfig+0x4d4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x31a>
 8004e0c:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a6f      	ldr	r2, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	e02d      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x33c>
 8004e22:	4b6b      	ldr	r3, [pc, #428]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a6a      	ldr	r2, [pc, #424]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	e01c      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	d10c      	bne.n	8004e5e <HAL_RCC_OscConfig+0x35e>
 8004e44:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	4a61      	ldr	r2, [pc, #388]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e4a:	f043 0304 	orr.w	r3, r3, #4
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e50:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a5e      	ldr	r2, [pc, #376]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	e00b      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e5e:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a5b      	ldr	r2, [pc, #364]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6a:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d015      	beq.n	8004eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fe f91b 	bl	80030b8 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fe f917 	bl	80030b8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0d8      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ee      	beq.n	8004e86 <HAL_RCC_OscConfig+0x386>
 8004ea8:	e014      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fe f905 	bl	80030b8 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fe f901 	bl	80030b8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0c2      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ee      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d105      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80ae 	beq.w	800504c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef0:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d06d      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d14b      	bne.n	8004f9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe f8d2 	bl	80030b8 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe f8ce 	bl	80030b8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e091      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	491b      	ldr	r1, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f68:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fe f8a0 	bl	80030b8 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fe f89c 	bl	80030b8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e05f      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x47c>
 8004f9a:	e057      	b.n	800504c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fe f886 	bl	80030b8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe f882 	bl	80030b8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e045      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4b0>
 8004fce:	e03d      	b.n	800504c <HAL_RCC_OscConfig+0x54c>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_RCC_OscConfig+0x558>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d030      	beq.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d129      	bne.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d122      	bne.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800500e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005010:	4293      	cmp	r3, r2
 8005012:	d119      	bne.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	3b01      	subs	r3, #1
 8005022:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d10f      	bne.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d107      	bne.n	8005048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800

0800505c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0d0      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d910      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b67      	ldr	r3, [pc, #412]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020f 	bic.w	r2, r3, #15
 800508a:	4965      	ldr	r1, [pc, #404]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b63      	ldr	r3, [pc, #396]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0b8      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050bc:	4b59      	ldr	r3, [pc, #356]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a58      	ldr	r2, [pc, #352]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d4:	4b53      	ldr	r3, [pc, #332]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a52      	ldr	r2, [pc, #328]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e0:	4b50      	ldr	r3, [pc, #320]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	494d      	ldr	r1, [pc, #308]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d040      	beq.n	8005180 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005106:	4b47      	ldr	r3, [pc, #284]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d115      	bne.n	800513e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e07f      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	4b41      	ldr	r3, [pc, #260]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e073      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512e:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e06b      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4936      	ldr	r1, [pc, #216]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fd ffb2 	bl	80030b8 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fd ffae 	bl	80030b8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e053      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 020c 	and.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	429a      	cmp	r2, r3
 800517e:	d1eb      	bne.n	8005158 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d210      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 020f 	bic.w	r2, r3, #15
 8005196:	4922      	ldr	r1, [pc, #136]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e032      	b.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4916      	ldr	r1, [pc, #88]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	490e      	ldr	r1, [pc, #56]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ee:	f000 f821 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 80051f2:	4602      	mov	r2, r0
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	490a      	ldr	r1, [pc, #40]	; (8005228 <HAL_RCC_ClockConfig+0x1cc>)
 8005200:	5ccb      	ldrb	r3, [r1, r3]
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x1d0>)
 8005208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_ClockConfig+0x1d4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd f95a 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023c00 	.word	0x40023c00
 8005224:	40023800 	.word	0x40023800
 8005228:	0800e9c0 	.word	0x0800e9c0
 800522c:	20000058 	.word	0x20000058
 8005230:	2000005c 	.word	0x2000005c

08005234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005238:	b094      	sub	sp, #80	; 0x50
 800523a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
 8005240:	2300      	movs	r3, #0
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	2300      	movs	r3, #0
 8005246:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524c:	4b79      	ldr	r3, [pc, #484]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d00d      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x40>
 8005258:	2b08      	cmp	r3, #8
 800525a:	f200 80e1 	bhi.w	8005420 <HAL_RCC_GetSysClockFreq+0x1ec>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x34>
 8005262:	2b04      	cmp	r3, #4
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x3a>
 8005266:	e0db      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b73      	ldr	r3, [pc, #460]	; (8005438 <HAL_RCC_GetSysClockFreq+0x204>)
 800526a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800526c:	e0db      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800526e:	4b73      	ldr	r3, [pc, #460]	; (800543c <HAL_RCC_GetSysClockFreq+0x208>)
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005272:	e0d8      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005274:	4b6f      	ldr	r3, [pc, #444]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800527c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800527e:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d063      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	2200      	movs	r2, #0
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
 8005294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
 80052a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052a6:	4622      	mov	r2, r4
 80052a8:	462b      	mov	r3, r5
 80052aa:	f04f 0000 	mov.w	r0, #0
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	0159      	lsls	r1, r3, #5
 80052b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b8:	0150      	lsls	r0, r2, #5
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4621      	mov	r1, r4
 80052c0:	1a51      	subs	r1, r2, r1
 80052c2:	6139      	str	r1, [r7, #16]
 80052c4:	4629      	mov	r1, r5
 80052c6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d8:	4659      	mov	r1, fp
 80052da:	018b      	lsls	r3, r1, #6
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052e2:	4651      	mov	r1, sl
 80052e4:	018a      	lsls	r2, r1, #6
 80052e6:	4651      	mov	r1, sl
 80052e8:	ebb2 0801 	subs.w	r8, r2, r1
 80052ec:	4659      	mov	r1, fp
 80052ee:	eb63 0901 	sbc.w	r9, r3, r1
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005306:	4690      	mov	r8, r2
 8005308:	4699      	mov	r9, r3
 800530a:	4623      	mov	r3, r4
 800530c:	eb18 0303 	adds.w	r3, r8, r3
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	462b      	mov	r3, r5
 8005314:	eb49 0303 	adc.w	r3, r9, r3
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005326:	4629      	mov	r1, r5
 8005328:	024b      	lsls	r3, r1, #9
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005330:	4621      	mov	r1, r4
 8005332:	024a      	lsls	r2, r1, #9
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	2200      	movs	r2, #0
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
 800533e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005344:	f7fa ffcc 	bl	80002e0 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005350:	e058      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005352:	4b38      	ldr	r3, [pc, #224]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	2200      	movs	r2, #0
 800535a:	4618      	mov	r0, r3
 800535c:	4611      	mov	r1, r2
 800535e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	2300      	movs	r3, #0
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	f04f 0000 	mov.w	r0, #0
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800537e:	0150      	lsls	r0, r2, #5
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4641      	mov	r1, r8
 8005386:	ebb2 0a01 	subs.w	sl, r2, r1
 800538a:	4649      	mov	r1, r9
 800538c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800539c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053a4:	ebb2 040a 	subs.w	r4, r2, sl
 80053a8:	eb63 050b 	sbc.w	r5, r3, fp
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	00eb      	lsls	r3, r5, #3
 80053b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ba:	00e2      	lsls	r2, r4, #3
 80053bc:	4614      	mov	r4, r2
 80053be:	461d      	mov	r5, r3
 80053c0:	4643      	mov	r3, r8
 80053c2:	18e3      	adds	r3, r4, r3
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	464b      	mov	r3, r9
 80053c8:	eb45 0303 	adc.w	r3, r5, r3
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053da:	4629      	mov	r1, r5
 80053dc:	028b      	lsls	r3, r1, #10
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e4:	4621      	mov	r1, r4
 80053e6:	028a      	lsls	r2, r1, #10
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	2200      	movs	r2, #0
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	61fa      	str	r2, [r7, #28]
 80053f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f8:	f7fa ff72 	bl	80002e0 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_GetSysClockFreq+0x200>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	3301      	adds	r3, #1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800541e:	e002      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetSysClockFreq+0x204>)
 8005422:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005428:	4618      	mov	r0, r3
 800542a:	3750      	adds	r7, #80	; 0x50
 800542c:	46bd      	mov	sp, r7
 800542e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	00f42400 	.word	0x00f42400
 800543c:	007a1200 	.word	0x007a1200

08005440 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_RCC_GetHCLKFreq+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000058 	.word	0x20000058

08005458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800545c:	f7ff fff0 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0a9b      	lsrs	r3, r3, #10
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4903      	ldr	r1, [pc, #12]	; (800547c <HAL_RCC_GetPCLK1Freq+0x24>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	0800e9d0 	.word	0x0800e9d0

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005484:	f7ff ffdc 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	0b5b      	lsrs	r3, r3, #13
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4903      	ldr	r1, [pc, #12]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40023800 	.word	0x40023800
 80054a4:	0800e9d0 	.word	0x0800e9d0

080054a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	220f      	movs	r2, #15
 80054b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_RCC_GetClockConfig+0x5c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0203 	and.w	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_RCC_GetClockConfig+0x5c>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_GetClockConfig+0x5c>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	08db      	lsrs	r3, r3, #3
 80054e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <HAL_RCC_GetClockConfig+0x60>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 020f 	and.w	r2, r3, #15
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	601a      	str	r2, [r3, #0]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	40023c00 	.word	0x40023c00

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005534:	4b69      	ldr	r3, [pc, #420]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a68      	ldr	r2, [pc, #416]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800553e:	6093      	str	r3, [r2, #8]
 8005540:	4b66      	ldr	r3, [pc, #408]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	4964      	ldr	r1, [pc, #400]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d017      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005566:	4b5d      	ldr	r3, [pc, #372]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	4959      	ldr	r1, [pc, #356]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005584:	d101      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005592:	2301      	movs	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055a2:	4b4e      	ldr	r3, [pc, #312]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	494a      	ldr	r1, [pc, #296]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c0:	d101      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 808b 	beq.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	4a39      	ldr	r2, [pc, #228]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fd fd50 	bl	80030b8 <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fd fd4c 	bl	80030b8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e38f      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800562e:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d035      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	429a      	cmp	r2, r3
 8005656:	d02e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d114      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fd fd14 	bl	80030b8 <HAL_GetTick>
 8005690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005692:	e00a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fd fd10 	bl	80030b8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e351      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ee      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c2:	d111      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
 80056da:	e00b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	0ffffcff 	.word	0x0ffffcff
 80056e8:	4bac      	ldr	r3, [pc, #688]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4aab      	ldr	r2, [pc, #684]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	4ba9      	ldr	r3, [pc, #676]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	49a6      	ldr	r1, [pc, #664]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	4313      	orrs	r3, r2
 8005704:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d010      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005712:	4ba2      	ldr	r3, [pc, #648]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005718:	4aa0      	ldr	r2, [pc, #640]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005722:	4b9e      	ldr	r3, [pc, #632]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	499b      	ldr	r1, [pc, #620]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005740:	4b96      	ldr	r3, [pc, #600]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800574e:	4993      	ldr	r1, [pc, #588]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005762:	4b8e      	ldr	r3, [pc, #568]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	498a      	ldr	r1, [pc, #552]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005784:	4b85      	ldr	r3, [pc, #532]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005792:	4982      	ldr	r1, [pc, #520]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057a6:	4b7d      	ldr	r3, [pc, #500]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	4979      	ldr	r1, [pc, #484]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c8:	4b74      	ldr	r3, [pc, #464]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4971      	ldr	r1, [pc, #452]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ea:	4b6c      	ldr	r3, [pc, #432]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	f023 020c 	bic.w	r2, r3, #12
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f8:	4968      	ldr	r1, [pc, #416]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580c:	4b63      	ldr	r3, [pc, #396]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	4960      	ldr	r1, [pc, #384]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800582e:	4b5b      	ldr	r3, [pc, #364]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	4957      	ldr	r1, [pc, #348]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005850:	4b52      	ldr	r3, [pc, #328]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	494f      	ldr	r1, [pc, #316]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005872:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005880:	4946      	ldr	r1, [pc, #280]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005894:	4b41      	ldr	r3, [pc, #260]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a2:	493e      	ldr	r1, [pc, #248]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058b6:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	4935      	ldr	r1, [pc, #212]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e6:	492d      	ldr	r1, [pc, #180]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005908:	4924      	ldr	r1, [pc, #144]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593a:	4b18      	ldr	r3, [pc, #96]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005948:	4914      	ldr	r1, [pc, #80]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00b      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596c:	490b      	ldr	r1, [pc, #44]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	4902      	ldr	r1, [pc, #8]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ac:	4b8a      	ldr	r3, [pc, #552]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	4986      	ldr	r1, [pc, #536]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059d0:	4b81      	ldr	r3, [pc, #516]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e0:	497d      	ldr	r1, [pc, #500]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d006      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80d6 	beq.w	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059fc:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a75      	ldr	r2, [pc, #468]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fd fb56 	bl	80030b8 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a10:	f7fd fb52 	bl	80030b8 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	; 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e195      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d021      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11d      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a50:	4b61      	ldr	r3, [pc, #388]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	0e1b      	lsrs	r3, r3, #24
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4958      	ldr	r1, [pc, #352]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d02e      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa8:	d129      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005aaa:	4b4b      	ldr	r3, [pc, #300]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ab8:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abe:	0f1b      	lsrs	r3, r3, #28
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	493e      	ldr	r1, [pc, #248]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ae6:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aec:	f023 021f 	bic.w	r2, r3, #31
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4938      	ldr	r1, [pc, #224]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01d      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b0a:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b18:	4b2f      	ldr	r3, [pc, #188]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1e:	0f1b      	lsrs	r3, r3, #28
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	019a      	lsls	r2, r3, #6
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	431a      	orrs	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	061b      	lsls	r3, r3, #24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	071b      	lsls	r3, r3, #28
 8005b3e:	4926      	ldr	r1, [pc, #152]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	019a      	lsls	r2, r3, #6
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	071b      	lsls	r3, r3, #28
 8005b6e:	491a      	ldr	r1, [pc, #104]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b82:	f7fd fa99 	bl	80030b8 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b8a:	f7fd fa95 	bl	80030b8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b64      	cmp	r3, #100	; 0x64
 8005b96:	d901      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0d8      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b9c:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	f040 80ce 	bne.w	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bbc:	f7fd fa7c 	bl	80030b8 <HAL_GetTick>
 8005bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bc4:	f7fd fa78 	bl	80030b8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	; 0x64
 8005bd0:	d904      	bls.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e0bb      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005bd6:	bf00      	nop
 8005bd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bdc:	4b5e      	ldr	r3, [pc, #376]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be8:	d0ec      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02e      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d12a      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c12:	4b51      	ldr	r3, [pc, #324]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c20:	4b4d      	ldr	r3, [pc, #308]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	0f1b      	lsrs	r3, r3, #28
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	019a      	lsls	r2, r3, #6
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	071b      	lsls	r3, r3, #28
 8005c46:	4944      	ldr	r1, [pc, #272]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c4e:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	493d      	ldr	r1, [pc, #244]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d022      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7c:	d11d      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c7e:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	0e1b      	lsrs	r3, r3, #24
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c8c:	4b32      	ldr	r3, [pc, #200]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	0f1b      	lsrs	r3, r3, #28
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	019a      	lsls	r2, r3, #6
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	071b      	lsls	r3, r3, #28
 8005cb2:	4929      	ldr	r1, [pc, #164]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d028      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	0e1b      	lsrs	r3, r3, #24
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cd4:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	019a      	lsls	r2, r3, #6
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	431a      	orrs	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	071b      	lsls	r3, r3, #28
 8005cfa:	4917      	ldr	r1, [pc, #92]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	4911      	ldr	r1, [pc, #68]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0e      	ldr	r2, [pc, #56]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d24:	f7fd f9c8 	bl	80030b8 <HAL_GetTick>
 8005d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d2c:	f7fd f9c4 	bl	80030b8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e007      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d1ef      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800

08005d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e09d      	b.n	8005eaa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7e:	d009      	beq.n	8005d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
 8005d86:	e005      	b.n	8005d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fc f89e 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd4:	d902      	bls.n	8005ddc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e002      	b.n	8005de2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dea:	d007      	beq.n	8005dfc <HAL_SPI_Init+0xa0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	ea42 0103 	orr.w	r1, r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	f003 0204 	and.w	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e78:	ea42 0103 	orr.w	r1, r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b088      	sub	sp, #32
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_SPI_Transmit+0x22>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e158      	b.n	8006186 <HAL_SPI_Transmit+0x2d4>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005edc:	f7fd f8ec 	bl	80030b8 <HAL_GetTick>
 8005ee0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d002      	beq.n	8005ef8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ef6:	e13d      	b.n	8006174 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x52>
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f08:	e134      	b.n	8006174 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	88fa      	ldrh	r2, [r7, #6]
 8005f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	d10f      	bne.n	8005f76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d007      	beq.n	8005f94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f9c:	d94b      	bls.n	8006036 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_SPI_Transmit+0xfa>
 8005fa6:	8afb      	ldrh	r3, [r7, #22]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d13e      	bne.n	800602a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fd0:	e02b      	b.n	800602a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d112      	bne.n	8006006 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006004:	e011      	b.n	800602a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006006:	f7fd f857 	bl	80030b8 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d803      	bhi.n	800601e <HAL_SPI_Transmit+0x16c>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d102      	bne.n	8006024 <HAL_SPI_Transmit+0x172>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006028:	e0a4      	b.n	8006174 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ce      	bne.n	8005fd2 <HAL_SPI_Transmit+0x120>
 8006034:	e07c      	b.n	8006130 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Transmit+0x192>
 800603e:	8afb      	ldrh	r3, [r7, #22]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d170      	bne.n	8006126 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	d912      	bls.n	8006074 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	1c9a      	adds	r2, r3, #2
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b02      	subs	r3, #2
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006072:	e058      	b.n	8006126 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	7812      	ldrb	r2, [r2, #0]
 8006080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800609a:	e044      	b.n	8006126 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d12b      	bne.n	8006102 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d912      	bls.n	80060da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	881a      	ldrh	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	1c9a      	adds	r2, r3, #2
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b02      	subs	r3, #2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060d8:	e025      	b.n	8006126 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006100:	e011      	b.n	8006126 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006102:	f7fc ffd9 	bl	80030b8 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d803      	bhi.n	800611a <HAL_SPI_Transmit+0x268>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d102      	bne.n	8006120 <HAL_SPI_Transmit+0x26e>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006124:	e026      	b.n	8006174 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1b5      	bne.n	800609c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fadd 	bl	80066f4 <SPI_EndRxTxTransaction>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e000      	b.n	8006174 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006184:	7ffb      	ldrb	r3, [r7, #31]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_SPI_Transmit_DMA+0x20>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e0d8      	b.n	8006362 <HAL_SPI_Transmit_DMA+0x1d2>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
 80061c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061c8:	e0c6      	b.n	8006358 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_Transmit_DMA+0x46>
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061da:	e0bd      	b.n	8006358 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2203      	movs	r2, #3
 80061e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006226:	d10f      	bne.n	8006248 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	4a47      	ldr	r2, [pc, #284]	; (800636c <HAL_SPI_Transmit_DMA+0x1dc>)
 800624e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	4a46      	ldr	r2, [pc, #280]	; (8006370 <HAL_SPI_Transmit_DMA+0x1e0>)
 8006256:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625c:	4a45      	ldr	r2, [pc, #276]	; (8006374 <HAL_SPI_Transmit_DMA+0x1e4>)
 800625e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	2200      	movs	r2, #0
 8006266:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006276:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006280:	d82d      	bhi.n	80062de <HAL_SPI_Transmit_DMA+0x14e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628c:	d127      	bne.n	80062de <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062aa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062ba:	e010      	b.n	80062de <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ca:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	4619      	mov	r1, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062f6:	f7fd f9f5 	bl	80036e4 <HAL_DMA_Start_IT>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006304:	f043 0210 	orr.w	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006318:	e01e      	b.n	8006358 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d007      	beq.n	8006338 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006336:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0220 	orr.w	r2, r2, #32
 8006346:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0202 	orr.w	r2, r2, #2
 8006356:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	0800645d 	.word	0x0800645d
 8006370:	080063b5 	.word	0x080063b5
 8006374:	08006479 	.word	0x08006479

08006378 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c2:	f7fc fe79 	bl	80030b8 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	d03b      	beq.n	8006450 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0220 	bic.w	r2, r2, #32
 80063e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0202 	bic.w	r2, r2, #2
 80063f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	2164      	movs	r1, #100	; 0x64
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f000 f979 	bl	80066f4 <SPI_EndRxTxTransaction>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006448:	6978      	ldr	r0, [r7, #20]
 800644a:	f7ff ffa9 	bl	80063a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800644e:	e002      	b.n	8006456 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006450:	6978      	ldr	r0, [r7, #20]
 8006452:	f7ff ff91 	bl	8006378 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff ff8e 	bl	800638c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0203 	bic.w	r2, r2, #3
 8006494:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649a:	f043 0210 	orr.w	r2, r3, #16
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff ff78 	bl	80063a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064c8:	f7fc fdf6 	bl	80030b8 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4413      	add	r3, r2
 80064d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064d8:	f7fc fdee 	bl	80030b8 <HAL_GetTick>
 80064dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064de:	4b39      	ldr	r3, [pc, #228]	; (80065c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	015b      	lsls	r3, r3, #5
 80064e4:	0d1b      	lsrs	r3, r3, #20
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ee:	e054      	b.n	800659a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d050      	beq.n	800659a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064f8:	f7fc fdde 	bl	80030b8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	429a      	cmp	r2, r3
 8006506:	d902      	bls.n	800650e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d13d      	bne.n	800658a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800651c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006526:	d111      	bne.n	800654c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	d004      	beq.n	800653c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	d107      	bne.n	800654c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006554:	d10f      	bne.n	8006576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e017      	b.n	80065ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3b01      	subs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4013      	ands	r3, r2
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d19b      	bne.n	80064f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000058 	.word	0x20000058

080065c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065da:	f7fc fd6d 	bl	80030b8 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	4413      	add	r3, r2
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80065ea:	f7fc fd65 	bl	80030b8 <HAL_GetTick>
 80065ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065f8:	4b3d      	ldr	r3, [pc, #244]	; (80066f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	00da      	lsls	r2, r3, #3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	0d1b      	lsrs	r3, r3, #20
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006610:	e060      	b.n	80066d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006618:	d107      	bne.n	800662a <SPI_WaitFifoStateUntilTimeout+0x62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006628:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d050      	beq.n	80066d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006632:	f7fc fd41 	bl	80030b8 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	429a      	cmp	r2, r3
 8006640:	d902      	bls.n	8006648 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d13d      	bne.n	80066c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006660:	d111      	bne.n	8006686 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666a:	d004      	beq.n	8006676 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006674:	d107      	bne.n	8006686 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006684:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668e:	d10f      	bne.n	80066b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e010      	b.n	80066e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4013      	ands	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d196      	bne.n	8006612 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3728      	adds	r7, #40	; 0x28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000058 	.word	0x20000058

080066f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff ff5b 	bl	80065c8 <SPI_WaitFifoStateUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671c:	f043 0220 	orr.w	r2, r3, #32
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e046      	b.n	80067b6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <SPI_EndRxTxTransaction+0xcc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <SPI_EndRxTxTransaction+0xd0>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0d5b      	lsrs	r3, r3, #21
 8006734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006746:	d112      	bne.n	800676e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff feb0 	bl	80064b8 <SPI_WaitFlagStateUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e023      	b.n	80067b6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3b01      	subs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d0f2      	beq.n	800676e <SPI_EndRxTxTransaction+0x7a>
 8006788:	e000      	b.n	800678c <SPI_EndRxTxTransaction+0x98>
        break;
 800678a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff ff15 	bl	80065c8 <SPI_WaitFifoStateUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e000      	b.n	80067b6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000058 	.word	0x20000058
 80067c4:	165e9f81 	.word	0x165e9f81

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e049      	b.n	800686e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f841 	bl	8006876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fc66 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e054      	b.n	800694e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a26      	ldr	r2, [pc, #152]	; (800695c <HAL_TIM_Base_Start_IT+0xd0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d01d      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_TIM_Base_Start_IT+0xd4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a21      	ldr	r2, [pc, #132]	; (8006964 <HAL_TIM_Base_Start_IT+0xd8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_TIM_Base_Start_IT+0xdc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <HAL_TIM_Base_Start_IT+0xe0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <HAL_TIM_Base_Start_IT+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_TIM_Base_Start_IT+0xe8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d115      	bne.n	8006938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	4b19      	ldr	r3, [pc, #100]	; (8006978 <HAL_TIM_Base_Start_IT+0xec>)
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d015      	beq.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d011      	beq.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0201 	orr.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	e008      	b.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e000      	b.n	800694c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40010400 	.word	0x40010400
 8006970:	40014000 	.word	0x40014000
 8006974:	40001800 	.word	0x40001800
 8006978:	00010007 	.word	0x00010007

0800697c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e049      	b.n	8006a22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fb ff64 	bl	8002870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f000 fb8c 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <HAL_TIM_PWM_Start+0x24>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e03c      	b.n	8006aca <HAL_TIM_PWM_Start+0x9e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d109      	bne.n	8006a6a <HAL_TIM_PWM_Start+0x3e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e02f      	b.n	8006aca <HAL_TIM_PWM_Start+0x9e>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d109      	bne.n	8006a84 <HAL_TIM_PWM_Start+0x58>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	e022      	b.n	8006aca <HAL_TIM_PWM_Start+0x9e>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b0c      	cmp	r3, #12
 8006a88:	d109      	bne.n	8006a9e <HAL_TIM_PWM_Start+0x72>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	bf14      	ite	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	2300      	moveq	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	e015      	b.n	8006aca <HAL_TIM_PWM_Start+0x9e>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d109      	bne.n	8006ab8 <HAL_TIM_PWM_Start+0x8c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	bf14      	ite	ne
 8006ab0:	2301      	movne	r3, #1
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e008      	b.n	8006aca <HAL_TIM_PWM_Start+0x9e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e092      	b.n	8006bf8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_PWM_Start+0xb6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	e023      	b.n	8006b2a <HAL_TIM_PWM_Start+0xfe>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Start+0xc6>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af0:	e01b      	b.n	8006b2a <HAL_TIM_PWM_Start+0xfe>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Start+0xd6>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	e013      	b.n	8006b2a <HAL_TIM_PWM_Start+0xfe>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0xe6>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b10:	e00b      	b.n	8006b2a <HAL_TIM_PWM_Start+0xfe>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b10      	cmp	r3, #16
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_PWM_Start+0xf6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b20:	e003      	b.n	8006b2a <HAL_TIM_PWM_Start+0xfe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fdce 	bl	80076d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	; (8006c00 <HAL_TIM_PWM_Start+0x1d4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x120>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <HAL_TIM_PWM_Start+0x1d8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIM_PWM_Start+0x124>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <HAL_TIM_PWM_Start+0x126>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a25      	ldr	r2, [pc, #148]	; (8006c00 <HAL_TIM_PWM_Start+0x1d4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d01d      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a22      	ldr	r2, [pc, #136]	; (8006c08 <HAL_TIM_PWM_Start+0x1dc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a20      	ldr	r2, [pc, #128]	; (8006c0c <HAL_TIM_PWM_Start+0x1e0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1f      	ldr	r2, [pc, #124]	; (8006c10 <HAL_TIM_PWM_Start+0x1e4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <HAL_TIM_PWM_Start+0x1d8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	; (8006c14 <HAL_TIM_PWM_Start+0x1e8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x18a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <HAL_TIM_PWM_Start+0x1ec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d115      	bne.n	8006be2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <HAL_TIM_PWM_Start+0x1f0>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	d015      	beq.n	8006bf4 <HAL_TIM_PWM_Start+0x1c8>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bce:	d011      	beq.n	8006bf4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be0:	e008      	b.n	8006bf4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e000      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	00010007 	.word	0x00010007

08006c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d122      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0202 	mvn.w	r2, #2
 8006c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa1a 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa0c 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa1d 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0204 	mvn.w	r2, #4
 8006ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9f0 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9e2 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9f3 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d122      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d11b      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0208 	mvn.w	r2, #8
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9c6 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9b8 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9c9 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f99c 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f98e 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f99f 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0201 	mvn.w	r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb f81e 	bl	8001de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dae:	2b80      	cmp	r3, #128	; 0x80
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fd40 	bl	8007850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d10e      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d107      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fd33 	bl	8007864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d10e      	bne.n	8006e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d107      	bne.n	8006e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f94d 	bl	80070c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d10e      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f06f 0220 	mvn.w	r2, #32
 8006e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fcf3 	bl	800783c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e0ff      	b.n	800707e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b14      	cmp	r3, #20
 8006e8a:	f200 80f0 	bhi.w	800706e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	0800706f 	.word	0x0800706f
 8006e9c:	0800706f 	.word	0x0800706f
 8006ea0:	0800706f 	.word	0x0800706f
 8006ea4:	08006f29 	.word	0x08006f29
 8006ea8:	0800706f 	.word	0x0800706f
 8006eac:	0800706f 	.word	0x0800706f
 8006eb0:	0800706f 	.word	0x0800706f
 8006eb4:	08006f6b 	.word	0x08006f6b
 8006eb8:	0800706f 	.word	0x0800706f
 8006ebc:	0800706f 	.word	0x0800706f
 8006ec0:	0800706f 	.word	0x0800706f
 8006ec4:	08006fab 	.word	0x08006fab
 8006ec8:	0800706f 	.word	0x0800706f
 8006ecc:	0800706f 	.word	0x0800706f
 8006ed0:	0800706f 	.word	0x0800706f
 8006ed4:	08006fed 	.word	0x08006fed
 8006ed8:	0800706f 	.word	0x0800706f
 8006edc:	0800706f 	.word	0x0800706f
 8006ee0:	0800706f 	.word	0x0800706f
 8006ee4:	0800702d 	.word	0x0800702d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 f992 	bl	8007218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0208 	orr.w	r2, r2, #8
 8006f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0204 	bic.w	r2, r2, #4
 8006f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6999      	ldr	r1, [r3, #24]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	619a      	str	r2, [r3, #24]
      break;
 8006f26:	e0a5      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f9e4 	bl	80072fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6999      	ldr	r1, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	021a      	lsls	r2, r3, #8
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	619a      	str	r2, [r3, #24]
      break;
 8006f68:	e084      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fa3b 	bl	80073ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0208 	orr.w	r2, r2, #8
 8006f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0204 	bic.w	r2, r2, #4
 8006f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69d9      	ldr	r1, [r3, #28]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	61da      	str	r2, [r3, #28]
      break;
 8006fa8:	e064      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fa91 	bl	80074d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69d9      	ldr	r1, [r3, #28]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	021a      	lsls	r2, r3, #8
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	61da      	str	r2, [r3, #28]
      break;
 8006fea:	e043      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fac8 	bl	8007588 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0208 	orr.w	r2, r2, #8
 8007006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0204 	bic.w	r2, r2, #4
 8007016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800702a:	e023      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fafa 	bl	800762c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	021a      	lsls	r2, r3, #8
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800706c:	e002      	b.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
      break;
 8007072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop

08007088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a40      	ldr	r2, [pc, #256]	; (80071ec <TIM_Base_SetConfig+0x114>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d00f      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3d      	ldr	r2, [pc, #244]	; (80071f0 <TIM_Base_SetConfig+0x118>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00b      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3c      	ldr	r2, [pc, #240]	; (80071f4 <TIM_Base_SetConfig+0x11c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d007      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a3b      	ldr	r2, [pc, #236]	; (80071f8 <TIM_Base_SetConfig+0x120>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3a      	ldr	r2, [pc, #232]	; (80071fc <TIM_Base_SetConfig+0x124>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2f      	ldr	r2, [pc, #188]	; (80071ec <TIM_Base_SetConfig+0x114>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d02b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d027      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <TIM_Base_SetConfig+0x118>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d023      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2b      	ldr	r2, [pc, #172]	; (80071f4 <TIM_Base_SetConfig+0x11c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d01f      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a2a      	ldr	r2, [pc, #168]	; (80071f8 <TIM_Base_SetConfig+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a29      	ldr	r2, [pc, #164]	; (80071fc <TIM_Base_SetConfig+0x124>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d017      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <TIM_Base_SetConfig+0x128>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a27      	ldr	r2, [pc, #156]	; (8007204 <TIM_Base_SetConfig+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00f      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a26      	ldr	r2, [pc, #152]	; (8007208 <TIM_Base_SetConfig+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a25      	ldr	r2, [pc, #148]	; (800720c <TIM_Base_SetConfig+0x134>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a24      	ldr	r2, [pc, #144]	; (8007210 <TIM_Base_SetConfig+0x138>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d003      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a23      	ldr	r2, [pc, #140]	; (8007214 <TIM_Base_SetConfig+0x13c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d108      	bne.n	800719c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <TIM_Base_SetConfig+0x114>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_Base_SetConfig+0xf8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <TIM_Base_SetConfig+0x124>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d103      	bne.n	80071d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	615a      	str	r2, [r3, #20]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40010400 	.word	0x40010400
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800
 800720c:	40001800 	.word	0x40001800
 8007210:	40001c00 	.word	0x40001c00
 8007214:	40002000 	.word	0x40002000

08007218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <TIM_OC1_SetConfig+0xd8>)
 8007244:	4013      	ands	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0302 	bic.w	r3, r3, #2
 8007260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a21      	ldr	r2, [pc, #132]	; (80072f4 <TIM_OC1_SetConfig+0xdc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC1_SetConfig+0x64>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <TIM_OC1_SetConfig+0xe0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d10c      	bne.n	8007296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0308 	bic.w	r3, r3, #8
 8007282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a16      	ldr	r2, [pc, #88]	; (80072f4 <TIM_OC1_SetConfig+0xdc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_OC1_SetConfig+0x8e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <TIM_OC1_SetConfig+0xe0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d111      	bne.n	80072ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	fffeff8f 	.word	0xfffeff8f
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <TIM_OC2_SetConfig+0xe4>)
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a23      	ldr	r2, [pc, #140]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC2_SetConfig+0x68>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <TIM_OC2_SetConfig+0xec>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10d      	bne.n	8007380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC2_SetConfig+0x94>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <TIM_OC2_SetConfig+0xec>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d113      	bne.n	80073b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	feff8fff 	.word	0xfeff8fff
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a22      	ldr	r2, [pc, #136]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <TIM_OC3_SetConfig+0xe8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x92>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <TIM_OC3_SetConfig+0xe8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	fffeff8f 	.word	0xfffeff8f
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40010400 	.word	0x40010400

080074d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4b1e      	ldr	r3, [pc, #120]	; (800757c <TIM_OC4_SetConfig+0xa4>)
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a13      	ldr	r2, [pc, #76]	; (8007580 <TIM_OC4_SetConfig+0xa8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC4_SetConfig+0x68>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <TIM_OC4_SetConfig+0xac>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d109      	bne.n	8007554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	019b      	lsls	r3, r3, #6
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	feff8fff 	.word	0xfeff8fff
 8007580:	40010000 	.word	0x40010000
 8007584:	40010400 	.word	0x40010400

08007588 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <TIM_OC5_SetConfig+0x98>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a12      	ldr	r2, [pc, #72]	; (8007624 <TIM_OC5_SetConfig+0x9c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC5_SetConfig+0x5e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a11      	ldr	r2, [pc, #68]	; (8007628 <TIM_OC5_SetConfig+0xa0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d109      	bne.n	80075fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	fffeff8f 	.word	0xfffeff8f
 8007624:	40010000 	.word	0x40010000
 8007628:	40010400 	.word	0x40010400

0800762c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <TIM_OC6_SetConfig+0x9c>)
 8007658:	4013      	ands	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800766e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	051b      	lsls	r3, r3, #20
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a13      	ldr	r2, [pc, #76]	; (80076cc <TIM_OC6_SetConfig+0xa0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC6_SetConfig+0x60>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <TIM_OC6_SetConfig+0xa4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	feff8fff 	.word	0xfeff8fff
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2201      	movs	r2, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	43db      	mvns	r3, r3
 80076f6:	401a      	ands	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007734:	2302      	movs	r3, #2
 8007736:	e06d      	b.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a30      	ldr	r2, [pc, #192]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2f      	ldr	r2, [pc, #188]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d108      	bne.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a20      	ldr	r2, [pc, #128]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077aa:	d01d      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1c      	ldr	r2, [pc, #112]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a16      	ldr	r2, [pc, #88]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10c      	bne.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40014000 	.word	0x40014000
 8007838:	40001800 	.word	0x40001800

0800783c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e040      	b.n	800790c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fb f870 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2224      	movs	r2, #36	; 0x24
 80078a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb82 	bl	8007fc0 <UART_SetConfig>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e022      	b.n	800790c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fdda 	bl	8008488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fe61 	bl	80085cc <UART_CheckIdleState>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007928:	2b20      	cmp	r3, #32
 800792a:	d132      	bne.n	8007992 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_UART_Receive_IT+0x24>
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e02b      	b.n	8007994 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d018      	beq.n	8007982 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	623b      	str	r3, [r7, #32]
 8007970:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	69f9      	ldr	r1, [r7, #28]
 8007974:	6a3a      	ldr	r2, [r7, #32]
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	61bb      	str	r3, [r7, #24]
   return(result);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	461a      	mov	r2, r3
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 ff33 	bl	80087f4 <UART_Start_Receive_IT>
 800798e:	4603      	mov	r3, r0
 8007990:	e000      	b.n	8007994 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3728      	adds	r7, #40	; 0x28
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b0ba      	sub	sp, #232	; 0xe8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80079ca:	4013      	ands	r3, r2
 80079cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d115      	bne.n	8007a04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00f      	beq.n	8007a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 82ac 	beq.w	8007f52 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
      }
      return;
 8007a02:	e2a6      	b.n	8007f52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8117 	beq.w	8007c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a1e:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_UART_IRQHandler+0x298>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 810a 	beq.w	8007c3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d011      	beq.n	8007a58 <HAL_UART_IRQHandler+0xbc>
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d011      	beq.n	8007a88 <HAL_UART_IRQHandler+0xec>
 8007a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2202      	movs	r2, #2
 8007a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7e:	f043 0204 	orr.w	r2, r3, #4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d011      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x11c>
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aae:	f043 0202 	orr.w	r2, r3, #2
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aea:	f043 0208 	orr.w	r2, r3, #8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d012      	beq.n	8007b26 <HAL_UART_IRQHandler+0x18a>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1c:	f043 0220 	orr.w	r2, r3, #32
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8212 	beq.w	8007f56 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d005      	beq.n	8007b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d04f      	beq.n	8007c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fefe 	bl	8008980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d141      	bne.n	8007c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1d9      	bne.n	8007b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d013      	beq.n	8007c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <HAL_UART_IRQHandler+0x29c>)
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fb fe46 	bl	8003884 <HAL_DMA_Abort_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d017      	beq.n	8007c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	e00f      	b.n	8007c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9b6 	bl	8007f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	e00b      	b.n	8007c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f9b2 	bl	8007f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1c:	e007      	b.n	8007c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9ae 	bl	8007f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c2c:	e193      	b.n	8007f56 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2e:	bf00      	nop
    return;
 8007c30:	e191      	b.n	8007f56 <HAL_UART_IRQHandler+0x5ba>
 8007c32:	bf00      	nop
 8007c34:	04000120 	.word	0x04000120
 8007c38:	08008a49 	.word	0x08008a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f040 814c 	bne.w	8007ede <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8145 	beq.w	8007ede <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 813e 	beq.w	8007ede <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2210      	movs	r2, #16
 8007c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b40      	cmp	r3, #64	; 0x40
 8007c76:	f040 80b6 	bne.w	8007de6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8165 	beq.w	8007f5a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	f080 815d 	bcs.w	8007f5a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb4:	f000 8086 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ce6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1da      	bne.n	8007cb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d14:	f023 0301 	bic.w	r3, r3, #1
 8007d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e1      	bne.n	8007d02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e3      	bne.n	8007d3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d94:	f023 0310 	bic.w	r3, r3, #16
 8007d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007da8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e4      	bne.n	8007d84 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fb fcf0 	bl	80037a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8d8 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007de4:	e0b9      	b.n	8007f5a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80ab 	beq.w	8007f5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80a6 	beq.w	8007f5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e4      	bne.n	8007e12 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	623b      	str	r3, [r7, #32]
   return(result);
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e3      	bne.n	8007e48 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f023 0310 	bic.w	r3, r3, #16
 8007ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	69b9      	ldr	r1, [r7, #24]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e4      	bne.n	8007e94 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f85c 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007edc:	e03f      	b.n	8007f5e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <HAL_UART_IRQHandler+0x56c>
 8007eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f853 	bl	8007fac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f06:	e02d      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01c      	beq.n	8007f62 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	4798      	blx	r3
    }
    return;
 8007f30:	e017      	b.n	8007f62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d012      	beq.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fd92 	bl	8008a74 <UART_EndTransmit_IT>
    return;
 8007f50:	e008      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f52:	bf00      	nop
 8007f54:	e006      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007f56:	bf00      	nop
 8007f58:	e004      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f5a:	bf00      	nop
 8007f5c:	e002      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f5e:	bf00      	nop
 8007f60:	e000      	b.n	8007f64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007f62:	bf00      	nop
  }

}
 8007f64:	37e8      	adds	r7, #232	; 0xe8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop

08007f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4ba6      	ldr	r3, [pc, #664]	; (8008284 <UART_SetConfig+0x2c4>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a94      	ldr	r2, [pc, #592]	; (8008288 <UART_SetConfig+0x2c8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d120      	bne.n	800807e <UART_SetConfig+0xbe>
 800803c:	4b93      	ldr	r3, [pc, #588]	; (800828c <UART_SetConfig+0x2cc>)
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d816      	bhi.n	8008078 <UART_SetConfig+0xb8>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x90>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008061 	.word	0x08008061
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008067 	.word	0x08008067
 800805c:	08008073 	.word	0x08008073
 8008060:	2301      	movs	r3, #1
 8008062:	77fb      	strb	r3, [r7, #31]
 8008064:	e150      	b.n	8008308 <UART_SetConfig+0x348>
 8008066:	2302      	movs	r3, #2
 8008068:	77fb      	strb	r3, [r7, #31]
 800806a:	e14d      	b.n	8008308 <UART_SetConfig+0x348>
 800806c:	2304      	movs	r3, #4
 800806e:	77fb      	strb	r3, [r7, #31]
 8008070:	e14a      	b.n	8008308 <UART_SetConfig+0x348>
 8008072:	2308      	movs	r3, #8
 8008074:	77fb      	strb	r3, [r7, #31]
 8008076:	e147      	b.n	8008308 <UART_SetConfig+0x348>
 8008078:	2310      	movs	r3, #16
 800807a:	77fb      	strb	r3, [r7, #31]
 800807c:	e144      	b.n	8008308 <UART_SetConfig+0x348>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a83      	ldr	r2, [pc, #524]	; (8008290 <UART_SetConfig+0x2d0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d132      	bne.n	80080ee <UART_SetConfig+0x12e>
 8008088:	4b80      	ldr	r3, [pc, #512]	; (800828c <UART_SetConfig+0x2cc>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	2b0c      	cmp	r3, #12
 8008094:	d828      	bhi.n	80080e8 <UART_SetConfig+0x128>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <UART_SetConfig+0xdc>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080d1 	.word	0x080080d1
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	080080e9 	.word	0x080080e9
 80080a8:	080080e9 	.word	0x080080e9
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	080080e9 	.word	0x080080e9
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	080080d7 	.word	0x080080d7
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080e3 	.word	0x080080e3
 80080d0:	2300      	movs	r3, #0
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e118      	b.n	8008308 <UART_SetConfig+0x348>
 80080d6:	2302      	movs	r3, #2
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e115      	b.n	8008308 <UART_SetConfig+0x348>
 80080dc:	2304      	movs	r3, #4
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e112      	b.n	8008308 <UART_SetConfig+0x348>
 80080e2:	2308      	movs	r3, #8
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e10f      	b.n	8008308 <UART_SetConfig+0x348>
 80080e8:	2310      	movs	r3, #16
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e10c      	b.n	8008308 <UART_SetConfig+0x348>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a68      	ldr	r2, [pc, #416]	; (8008294 <UART_SetConfig+0x2d4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d120      	bne.n	800813a <UART_SetConfig+0x17a>
 80080f8:	4b64      	ldr	r3, [pc, #400]	; (800828c <UART_SetConfig+0x2cc>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008102:	2b30      	cmp	r3, #48	; 0x30
 8008104:	d013      	beq.n	800812e <UART_SetConfig+0x16e>
 8008106:	2b30      	cmp	r3, #48	; 0x30
 8008108:	d814      	bhi.n	8008134 <UART_SetConfig+0x174>
 800810a:	2b20      	cmp	r3, #32
 800810c:	d009      	beq.n	8008122 <UART_SetConfig+0x162>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d810      	bhi.n	8008134 <UART_SetConfig+0x174>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <UART_SetConfig+0x15c>
 8008116:	2b10      	cmp	r3, #16
 8008118:	d006      	beq.n	8008128 <UART_SetConfig+0x168>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x174>
 800811c:	2300      	movs	r3, #0
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e0f2      	b.n	8008308 <UART_SetConfig+0x348>
 8008122:	2302      	movs	r3, #2
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e0ef      	b.n	8008308 <UART_SetConfig+0x348>
 8008128:	2304      	movs	r3, #4
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e0ec      	b.n	8008308 <UART_SetConfig+0x348>
 800812e:	2308      	movs	r3, #8
 8008130:	77fb      	strb	r3, [r7, #31]
 8008132:	e0e9      	b.n	8008308 <UART_SetConfig+0x348>
 8008134:	2310      	movs	r3, #16
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e0e6      	b.n	8008308 <UART_SetConfig+0x348>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a56      	ldr	r2, [pc, #344]	; (8008298 <UART_SetConfig+0x2d8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d120      	bne.n	8008186 <UART_SetConfig+0x1c6>
 8008144:	4b51      	ldr	r3, [pc, #324]	; (800828c <UART_SetConfig+0x2cc>)
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800814e:	2bc0      	cmp	r3, #192	; 0xc0
 8008150:	d013      	beq.n	800817a <UART_SetConfig+0x1ba>
 8008152:	2bc0      	cmp	r3, #192	; 0xc0
 8008154:	d814      	bhi.n	8008180 <UART_SetConfig+0x1c0>
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d009      	beq.n	800816e <UART_SetConfig+0x1ae>
 800815a:	2b80      	cmp	r3, #128	; 0x80
 800815c:	d810      	bhi.n	8008180 <UART_SetConfig+0x1c0>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <UART_SetConfig+0x1a8>
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d006      	beq.n	8008174 <UART_SetConfig+0x1b4>
 8008166:	e00b      	b.n	8008180 <UART_SetConfig+0x1c0>
 8008168:	2300      	movs	r3, #0
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	e0cc      	b.n	8008308 <UART_SetConfig+0x348>
 800816e:	2302      	movs	r3, #2
 8008170:	77fb      	strb	r3, [r7, #31]
 8008172:	e0c9      	b.n	8008308 <UART_SetConfig+0x348>
 8008174:	2304      	movs	r3, #4
 8008176:	77fb      	strb	r3, [r7, #31]
 8008178:	e0c6      	b.n	8008308 <UART_SetConfig+0x348>
 800817a:	2308      	movs	r3, #8
 800817c:	77fb      	strb	r3, [r7, #31]
 800817e:	e0c3      	b.n	8008308 <UART_SetConfig+0x348>
 8008180:	2310      	movs	r3, #16
 8008182:	77fb      	strb	r3, [r7, #31]
 8008184:	e0c0      	b.n	8008308 <UART_SetConfig+0x348>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a44      	ldr	r2, [pc, #272]	; (800829c <UART_SetConfig+0x2dc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d125      	bne.n	80081dc <UART_SetConfig+0x21c>
 8008190:	4b3e      	ldr	r3, [pc, #248]	; (800828c <UART_SetConfig+0x2cc>)
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800819e:	d017      	beq.n	80081d0 <UART_SetConfig+0x210>
 80081a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a4:	d817      	bhi.n	80081d6 <UART_SetConfig+0x216>
 80081a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081aa:	d00b      	beq.n	80081c4 <UART_SetConfig+0x204>
 80081ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b0:	d811      	bhi.n	80081d6 <UART_SetConfig+0x216>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <UART_SetConfig+0x1fe>
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d006      	beq.n	80081ca <UART_SetConfig+0x20a>
 80081bc:	e00b      	b.n	80081d6 <UART_SetConfig+0x216>
 80081be:	2300      	movs	r3, #0
 80081c0:	77fb      	strb	r3, [r7, #31]
 80081c2:	e0a1      	b.n	8008308 <UART_SetConfig+0x348>
 80081c4:	2302      	movs	r3, #2
 80081c6:	77fb      	strb	r3, [r7, #31]
 80081c8:	e09e      	b.n	8008308 <UART_SetConfig+0x348>
 80081ca:	2304      	movs	r3, #4
 80081cc:	77fb      	strb	r3, [r7, #31]
 80081ce:	e09b      	b.n	8008308 <UART_SetConfig+0x348>
 80081d0:	2308      	movs	r3, #8
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e098      	b.n	8008308 <UART_SetConfig+0x348>
 80081d6:	2310      	movs	r3, #16
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e095      	b.n	8008308 <UART_SetConfig+0x348>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <UART_SetConfig+0x2e0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d125      	bne.n	8008232 <UART_SetConfig+0x272>
 80081e6:	4b29      	ldr	r3, [pc, #164]	; (800828c <UART_SetConfig+0x2cc>)
 80081e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081f4:	d017      	beq.n	8008226 <UART_SetConfig+0x266>
 80081f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081fa:	d817      	bhi.n	800822c <UART_SetConfig+0x26c>
 80081fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008200:	d00b      	beq.n	800821a <UART_SetConfig+0x25a>
 8008202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008206:	d811      	bhi.n	800822c <UART_SetConfig+0x26c>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <UART_SetConfig+0x254>
 800820c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008210:	d006      	beq.n	8008220 <UART_SetConfig+0x260>
 8008212:	e00b      	b.n	800822c <UART_SetConfig+0x26c>
 8008214:	2301      	movs	r3, #1
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e076      	b.n	8008308 <UART_SetConfig+0x348>
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
 800821e:	e073      	b.n	8008308 <UART_SetConfig+0x348>
 8008220:	2304      	movs	r3, #4
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e070      	b.n	8008308 <UART_SetConfig+0x348>
 8008226:	2308      	movs	r3, #8
 8008228:	77fb      	strb	r3, [r7, #31]
 800822a:	e06d      	b.n	8008308 <UART_SetConfig+0x348>
 800822c:	2310      	movs	r3, #16
 800822e:	77fb      	strb	r3, [r7, #31]
 8008230:	e06a      	b.n	8008308 <UART_SetConfig+0x348>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1b      	ldr	r2, [pc, #108]	; (80082a4 <UART_SetConfig+0x2e4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d138      	bne.n	80082ae <UART_SetConfig+0x2ee>
 800823c:	4b13      	ldr	r3, [pc, #76]	; (800828c <UART_SetConfig+0x2cc>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800824a:	d017      	beq.n	800827c <UART_SetConfig+0x2bc>
 800824c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008250:	d82a      	bhi.n	80082a8 <UART_SetConfig+0x2e8>
 8008252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008256:	d00b      	beq.n	8008270 <UART_SetConfig+0x2b0>
 8008258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800825c:	d824      	bhi.n	80082a8 <UART_SetConfig+0x2e8>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <UART_SetConfig+0x2aa>
 8008262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008266:	d006      	beq.n	8008276 <UART_SetConfig+0x2b6>
 8008268:	e01e      	b.n	80082a8 <UART_SetConfig+0x2e8>
 800826a:	2300      	movs	r3, #0
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e04b      	b.n	8008308 <UART_SetConfig+0x348>
 8008270:	2302      	movs	r3, #2
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e048      	b.n	8008308 <UART_SetConfig+0x348>
 8008276:	2304      	movs	r3, #4
 8008278:	77fb      	strb	r3, [r7, #31]
 800827a:	e045      	b.n	8008308 <UART_SetConfig+0x348>
 800827c:	2308      	movs	r3, #8
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e042      	b.n	8008308 <UART_SetConfig+0x348>
 8008282:	bf00      	nop
 8008284:	efff69f3 	.word	0xefff69f3
 8008288:	40011000 	.word	0x40011000
 800828c:	40023800 	.word	0x40023800
 8008290:	40004400 	.word	0x40004400
 8008294:	40004800 	.word	0x40004800
 8008298:	40004c00 	.word	0x40004c00
 800829c:	40005000 	.word	0x40005000
 80082a0:	40011400 	.word	0x40011400
 80082a4:	40007800 	.word	0x40007800
 80082a8:	2310      	movs	r3, #16
 80082aa:	77fb      	strb	r3, [r7, #31]
 80082ac:	e02c      	b.n	8008308 <UART_SetConfig+0x348>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a72      	ldr	r2, [pc, #456]	; (800847c <UART_SetConfig+0x4bc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d125      	bne.n	8008304 <UART_SetConfig+0x344>
 80082b8:	4b71      	ldr	r3, [pc, #452]	; (8008480 <UART_SetConfig+0x4c0>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082c6:	d017      	beq.n	80082f8 <UART_SetConfig+0x338>
 80082c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082cc:	d817      	bhi.n	80082fe <UART_SetConfig+0x33e>
 80082ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d2:	d00b      	beq.n	80082ec <UART_SetConfig+0x32c>
 80082d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d8:	d811      	bhi.n	80082fe <UART_SetConfig+0x33e>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <UART_SetConfig+0x326>
 80082de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082e2:	d006      	beq.n	80082f2 <UART_SetConfig+0x332>
 80082e4:	e00b      	b.n	80082fe <UART_SetConfig+0x33e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	77fb      	strb	r3, [r7, #31]
 80082ea:	e00d      	b.n	8008308 <UART_SetConfig+0x348>
 80082ec:	2302      	movs	r3, #2
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e00a      	b.n	8008308 <UART_SetConfig+0x348>
 80082f2:	2304      	movs	r3, #4
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e007      	b.n	8008308 <UART_SetConfig+0x348>
 80082f8:	2308      	movs	r3, #8
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e004      	b.n	8008308 <UART_SetConfig+0x348>
 80082fe:	2310      	movs	r3, #16
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e001      	b.n	8008308 <UART_SetConfig+0x348>
 8008304:	2310      	movs	r3, #16
 8008306:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008310:	d15b      	bne.n	80083ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008312:	7ffb      	ldrb	r3, [r7, #31]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d828      	bhi.n	800836a <UART_SetConfig+0x3aa>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x360>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800836b 	.word	0x0800836b
 8008338:	0800836b 	.word	0x0800836b
 800833c:	0800836b 	.word	0x0800836b
 8008340:	08008363 	.word	0x08008363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fd f888 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 8008348:	61b8      	str	r0, [r7, #24]
        break;
 800834a:	e013      	b.n	8008374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fd f898 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8008350:	61b8      	str	r0, [r7, #24]
        break;
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008354:	4b4b      	ldr	r3, [pc, #300]	; (8008484 <UART_SetConfig+0x4c4>)
 8008356:	61bb      	str	r3, [r7, #24]
        break;
 8008358:	e00c      	b.n	8008374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835a:	f7fc ff6b 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 800835e:	61b8      	str	r0, [r7, #24]
        break;
 8008360:	e008      	b.n	8008374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008366:	61bb      	str	r3, [r7, #24]
        break;
 8008368:	e004      	b.n	8008374 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	77bb      	strb	r3, [r7, #30]
        break;
 8008372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d074      	beq.n	8008464 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	005a      	lsls	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	441a      	add	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	fbb2 f3f3 	udiv	r3, r2, r3
 800838e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b0f      	cmp	r3, #15
 8008394:	d916      	bls.n	80083c4 <UART_SetConfig+0x404>
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839c:	d212      	bcs.n	80083c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f023 030f 	bic.w	r3, r3, #15
 80083a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	89fb      	ldrh	r3, [r7, #14]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	89fa      	ldrh	r2, [r7, #14]
 80083c0:	60da      	str	r2, [r3, #12]
 80083c2:	e04f      	b.n	8008464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	77bb      	strb	r3, [r7, #30]
 80083c8:	e04c      	b.n	8008464 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ca:	7ffb      	ldrb	r3, [r7, #31]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d828      	bhi.n	8008422 <UART_SetConfig+0x462>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <UART_SetConfig+0x418>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083fd 	.word	0x080083fd
 80083dc:	08008405 	.word	0x08008405
 80083e0:	0800840d 	.word	0x0800840d
 80083e4:	08008423 	.word	0x08008423
 80083e8:	08008413 	.word	0x08008413
 80083ec:	08008423 	.word	0x08008423
 80083f0:	08008423 	.word	0x08008423
 80083f4:	08008423 	.word	0x08008423
 80083f8:	0800841b 	.word	0x0800841b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fc:	f7fd f82c 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 8008400:	61b8      	str	r0, [r7, #24]
        break;
 8008402:	e013      	b.n	800842c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008404:	f7fd f83c 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8008408:	61b8      	str	r0, [r7, #24]
        break;
 800840a:	e00f      	b.n	800842c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800840c:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <UART_SetConfig+0x4c4>)
 800840e:	61bb      	str	r3, [r7, #24]
        break;
 8008410:	e00c      	b.n	800842c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008412:	f7fc ff0f 	bl	8005234 <HAL_RCC_GetSysClockFreq>
 8008416:	61b8      	str	r0, [r7, #24]
        break;
 8008418:	e008      	b.n	800842c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800841a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841e:	61bb      	str	r3, [r7, #24]
        break;
 8008420:	e004      	b.n	800842c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	77bb      	strb	r3, [r7, #30]
        break;
 800842a:	bf00      	nop
    }

    if (pclk != 0U)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d018      	beq.n	8008464 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085a      	lsrs	r2, r3, #1
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	441a      	add	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d909      	bls.n	8008460 <UART_SetConfig+0x4a0>
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008452:	d205      	bcs.n	8008460 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60da      	str	r2, [r3, #12]
 800845e:	e001      	b.n	8008464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008470:	7fbb      	ldrb	r3, [r7, #30]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40007c00 	.word	0x40007c00
 8008480:	40023800 	.word	0x40023800
 8008484:	00f42400 	.word	0x00f42400

08008488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01a      	beq.n	800859e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008586:	d10a      	bne.n	800859e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	605a      	str	r2, [r3, #4]
  }
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085dc:	f7fa fd6c 	bl	80030b8 <HAL_GetTick>
 80085e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d10e      	bne.n	800860e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f831 	bl	8008666 <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e027      	b.n	800865e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d10e      	bne.n	800863a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800861c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f81b 	bl	8008666 <UART_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e011      	b.n	800865e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b09c      	sub	sp, #112	; 0x70
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	603b      	str	r3, [r7, #0]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008676:	e0a7      	b.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	f000 80a3 	beq.w	80087c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008682:	f7fa fd19 	bl	80030b8 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800868e:	429a      	cmp	r2, r3
 8008690:	d302      	bcc.n	8008698 <UART_WaitOnFlagUntilTimeout+0x32>
 8008692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008694:	2b00      	cmp	r3, #0
 8008696:	d13f      	bne.n	8008718 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ac:	667b      	str	r3, [r7, #100]	; 0x64
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	663b      	str	r3, [r7, #96]	; 0x60
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e5      	bne.n	80086ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e068      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d050      	beq.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008734:	d148      	bne.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800873e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
 8008760:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	613b      	str	r3, [r7, #16]
   return(result);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	66bb      	str	r3, [r7, #104]	; 0x68
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008792:	623a      	str	r2, [r7, #32]
 8008794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	69f9      	ldr	r1, [r7, #28]
 8008798:	6a3a      	ldr	r2, [r7, #32]
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e5      	bne.n	8008772 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e010      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69da      	ldr	r2, [r3, #28]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f43f af48 	beq.w	8008678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3770      	adds	r7, #112	; 0x70
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b097      	sub	sp, #92	; 0x5c
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	88fa      	ldrh	r2, [r7, #6]
 800880c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008826:	d10e      	bne.n	8008846 <UART_Start_Receive_IT+0x52>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <UART_Start_Receive_IT+0x48>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800883a:	e02d      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	22ff      	movs	r2, #255	; 0xff
 8008840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008844:	e028      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <UART_Start_Receive_IT+0x76>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d104      	bne.n	8008860 <UART_Start_Receive_IT+0x6c>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800885e:	e01b      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	227f      	movs	r2, #127	; 0x7f
 8008864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008868:	e016      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008872:	d10d      	bne.n	8008890 <UART_Start_Receive_IT+0x9c>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <UART_Start_Receive_IT+0x92>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	227f      	movs	r2, #127	; 0x7f
 8008880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008884:	e008      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	223f      	movs	r2, #63	; 0x3f
 800888a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800888e:	e003      	b.n	8008898 <UART_Start_Receive_IT+0xa4>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2222      	movs	r2, #34	; 0x22
 80088a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	657b      	str	r3, [r7, #84]	; 0x54
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80088ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e5      	bne.n	80088a8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e4:	d107      	bne.n	80088f6 <UART_Start_Receive_IT+0x102>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a21      	ldr	r2, [pc, #132]	; (8008978 <UART_Start_Receive_IT+0x184>)
 80088f2:	669a      	str	r2, [r3, #104]	; 0x68
 80088f4:	e002      	b.n	80088fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4a20      	ldr	r2, [pc, #128]	; (800897c <UART_Start_Receive_IT+0x188>)
 80088fa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d019      	beq.n	8008938 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e6      	bne.n	8008904 <UART_Start_Receive_IT+0x110>
 8008936:	e018      	b.n	800896a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	613b      	str	r3, [r7, #16]
   return(result);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	653b      	str	r3, [r7, #80]	; 0x50
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	69f9      	ldr	r1, [r7, #28]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	61bb      	str	r3, [r7, #24]
   return(result);
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e6      	bne.n	8008938 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	375c      	adds	r7, #92	; 0x5c
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	08008c2f 	.word	0x08008c2f
 800897c:	08008ac9 	.word	0x08008ac9

08008980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b095      	sub	sp, #84	; 0x54
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3308      	adds	r3, #8
 80089d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d118      	bne.n	8008a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a3c:	bf00      	nop
 8008a3e:	3754      	adds	r7, #84	; 0x54
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fa8a 	bl	8007f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	61bb      	str	r3, [r7, #24]
 8008a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6979      	ldr	r1, [r7, #20]
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e6      	bne.n	8008a7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fa56 	bl	8007f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac0:	bf00      	nop
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b096      	sub	sp, #88	; 0x58
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ad6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ae0:	2b22      	cmp	r3, #34	; 0x22
 8008ae2:	f040 8098 	bne.w	8008c16 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008af0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008af4:	b2d9      	uxtb	r1, r3
 8008af6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b00:	400a      	ands	r2, r1
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d17b      	bne.n	8008c26 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b42:	653b      	str	r3, [r7, #80]	; 0x50
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3308      	adds	r3, #8
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	f023 0301 	bic.w	r3, r3, #1
 8008b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b80:	633a      	str	r2, [r7, #48]	; 0x30
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d12e      	bne.n	8008c0e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0310 	bic.w	r3, r3, #16
 8008bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	69b9      	ldr	r1, [r7, #24]
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	617b      	str	r3, [r7, #20]
   return(result);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d103      	bne.n	8008bfe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f9c4 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c0c:	e00b      	b.n	8008c26 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7f9 f8c0 	bl	8001d94 <HAL_UART_RxCpltCallback>
}
 8008c14:	e007      	b.n	8008c26 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0208 	orr.w	r2, r2, #8
 8008c24:	619a      	str	r2, [r3, #24]
}
 8008c26:	bf00      	nop
 8008c28:	3758      	adds	r7, #88	; 0x58
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b096      	sub	sp, #88	; 0x58
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c46:	2b22      	cmp	r3, #34	; 0x22
 8008c48:	f040 8098 	bne.w	8008d7c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c64:	4013      	ands	r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c70:	1c9a      	adds	r2, r3, #2
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d17b      	bne.n	8008d8c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d12e      	bne.n	8008d74 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f023 0310 	bic.w	r3, r3, #16
 8008d30:	647b      	str	r3, [r7, #68]	; 0x44
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6979      	ldr	r1, [r7, #20]
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	613b      	str	r3, [r7, #16]
   return(result);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e6      	bne.n	8008d1c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	d103      	bne.n	8008d64 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2210      	movs	r2, #16
 8008d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff f911 	bl	8007f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d72:	e00b      	b.n	8008d8c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7f9 f80d 	bl	8001d94 <HAL_UART_RxCpltCallback>
}
 8008d7a:	e007      	b.n	8008d8c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	619a      	str	r2, [r3, #24]
}
 8008d8c:	bf00      	nop
 8008d8e:	3758      	adds	r7, #88	; 0x58
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008daa:	f3ef 8305 	mrs	r3, IPSR
 8008dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10f      	bne.n	8008dd6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dba:	607b      	str	r3, [r7, #4]
  return(result);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8008dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <osKernelInitialize+0x3a>
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <osKernelInitialize+0x64>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d103      	bne.n	8008dde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008dd6:	f06f 0305 	mvn.w	r3, #5
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	e00c      	b.n	8008df8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <osKernelInitialize+0x64>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008de6:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <osKernelInitialize+0x64>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e002      	b.n	8008df8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008df8:	68fb      	ldr	r3, [r7, #12]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	200007f4 	.word	0x200007f4

08008e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e12:	f3ef 8305 	mrs	r3, IPSR
 8008e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10f      	bne.n	8008e3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e22:	607b      	str	r3, [r7, #4]
  return(result);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <osKernelStart+0x3a>
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <osKernelStart+0x68>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d103      	bne.n	8008e46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008e3e:	f06f 0305 	mvn.w	r3, #5
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e010      	b.n	8008e68 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <osKernelStart+0x68>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d109      	bne.n	8008e62 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e4e:	f7ff ffa1 	bl	8008d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e52:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <osKernelStart+0x68>)
 8008e54:	2202      	movs	r2, #2
 8008e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e58:	f001 fb9a 	bl	800a590 <vTaskStartScheduler>
      stat = osOK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e002      	b.n	8008e68 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295
 8008e66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200007f4 	.word	0x200007f4

08008e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b090      	sub	sp, #64	; 0x40
 8008e7c:	af04      	add	r7, sp, #16
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e88:	f3ef 8305 	mrs	r3, IPSR
 8008e8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 808f 	bne.w	8008fb4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e96:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <osThreadNew+0x3e>
 8008eae:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <osThreadNew+0x148>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d07e      	beq.n	8008fb4 <osThreadNew+0x13c>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d07b      	beq.n	8008fb4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008ebc:	2380      	movs	r3, #128	; 0x80
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008ec0:	2318      	movs	r3, #24
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d045      	beq.n	8008f60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <osThreadNew+0x6a>
        name = attr->name;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <osThreadNew+0x90>
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	2b38      	cmp	r3, #56	; 0x38
 8008efa:	d805      	bhi.n	8008f08 <osThreadNew+0x90>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <osThreadNew+0x94>
        return (NULL);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e054      	b.n	8008fb6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	089b      	lsrs	r3, r3, #2
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <osThreadNew+0xca>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2ba7      	cmp	r3, #167	; 0xa7
 8008f2a:	d90a      	bls.n	8008f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <osThreadNew+0xca>
        mem = 1;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	e010      	b.n	8008f64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10c      	bne.n	8008f64 <osThreadNew+0xec>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d108      	bne.n	8008f64 <osThreadNew+0xec>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <osThreadNew+0xec>
          mem = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	623b      	str	r3, [r7, #32]
 8008f5e:	e001      	b.n	8008f64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d110      	bne.n	8008f8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 ff19 	bl	8009db8 <xTaskCreateStatic>
 8008f86:	4603      	mov	r3, r0
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	e013      	b.n	8008fb4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d110      	bne.n	8008fb4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 ff6a 	bl	8009e7e <xTaskCreate>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <osThreadNew+0x13c>
          hTask = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fb4:	693b      	ldr	r3, [r7, #16]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3730      	adds	r7, #48	; 0x30
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200007f4 	.word	0x200007f4

08008fc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fcc:	f3ef 8305 	mrs	r3, IPSR
 8008fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <osDelay+0x3c>
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <osDelay+0x58>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d103      	bne.n	8009000 <osDelay+0x3c>
    stat = osErrorISR;
 8008ff8:	f06f 0305 	mvn.w	r3, #5
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e007      	b.n	8009010 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <osDelay+0x4c>
      vTaskDelay(ticks);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 f908 	bl	800a220 <vTaskDelay>
    }
  }

  return (stat);
 8009010:	697b      	ldr	r3, [r7, #20]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200007f4 	.word	0x200007f4

08009020 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f002 fc03 	bl	800b834 <pvTimerGetTimerID>
 800902e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	6852      	ldr	r2, [r2, #4]
 800903e:	4610      	mov	r0, r2
 8009040:	4798      	blx	r3
  }
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800904c:	b580      	push	{r7, lr}
 800904e:	b08e      	sub	sp, #56	; 0x38
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	460b      	mov	r3, r1
 800905a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009060:	f3ef 8305 	mrs	r3, IPSR
 8009064:	61bb      	str	r3, [r7, #24]
  return(result);
 8009066:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8009068:	2b00      	cmp	r3, #0
 800906a:	d16a      	bne.n	8009142 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906c:	f3ef 8310 	mrs	r3, PRIMASK
 8009070:	617b      	str	r3, [r7, #20]
  return(result);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d105      	bne.n	8009084 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009078:	f3ef 8311 	mrs	r3, BASEPRI
 800907c:	613b      	str	r3, [r7, #16]
  return(result);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <osTimerNew+0x40>
 8009084:	4b31      	ldr	r3, [pc, #196]	; (800914c <osTimerNew+0x100>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d05a      	beq.n	8009142 <osTimerNew+0xf6>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d057      	beq.n	8009142 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009092:	2008      	movs	r0, #8
 8009094:	f002 fe26 	bl	800bce4 <pvPortMalloc>
 8009098:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d050      	beq.n	8009142 <osTimerNew+0xf6>
      callb->func = func;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <osTimerNew+0x6c>
        reload = pdFALSE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
 80090b6:	e001      	b.n	80090bc <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80090bc:	f04f 33ff 	mov.w	r3, #4294967295
 80090c0:	623b      	str	r3, [r7, #32]
      name = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01c      	beq.n	8009106 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <osTimerNew+0x8e>
          name = attr->name;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d006      	beq.n	80090f0 <osTimerNew+0xa4>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b2b      	cmp	r3, #43	; 0x2b
 80090e8:	d902      	bls.n	80090f0 <osTimerNew+0xa4>
          mem = 1;
 80090ea:	2301      	movs	r3, #1
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	e00c      	b.n	800910a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <osTimerNew+0xbe>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <osTimerNew+0xbe>
            mem = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	623b      	str	r3, [r7, #32]
 8009104:	e001      	b.n	800910a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10c      	bne.n	800912a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	4b0e      	ldr	r3, [pc, #56]	; (8009150 <osTimerNew+0x104>)
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911e:	2101      	movs	r1, #1
 8009120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009122:	f001 fff6 	bl	800b112 <xTimerCreateStatic>
 8009126:	62b8      	str	r0, [r7, #40]	; 0x28
 8009128:	e00b      	b.n	8009142 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009130:	4b07      	ldr	r3, [pc, #28]	; (8009150 <osTimerNew+0x104>)
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009138:	2101      	movs	r1, #1
 800913a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800913c:	f001 ffc8 	bl	800b0d0 <xTimerCreate>
 8009140:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009144:	4618      	mov	r0, r3
 8009146:	3730      	adds	r7, #48	; 0x30
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200007f4 	.word	0x200007f4
 8009150:	08009021 	.word	0x08009021

08009154 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	; 0x28
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	617b      	str	r3, [r7, #20]
  return(result);
 8009168:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10f      	bne.n	800918e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916e:	f3ef 8310 	mrs	r3, PRIMASK
 8009172:	613b      	str	r3, [r7, #16]
  return(result);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800917a:	f3ef 8311 	mrs	r3, BASEPRI
 800917e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <osTimerStart+0x42>
 8009186:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <osTimerStart+0x7c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d103      	bne.n	8009196 <osTimerStart+0x42>
    stat = osErrorISR;
 800918e:	f06f 0305 	mvn.w	r3, #5
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	e017      	b.n	80091c6 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d103      	bne.n	80091a4 <osTimerStart+0x50>
    stat = osErrorParameter;
 800919c:	f06f 0303 	mvn.w	r3, #3
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e010      	b.n	80091c6 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80091a4:	2300      	movs	r3, #0
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	2300      	movs	r3, #0
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	2104      	movs	r1, #4
 80091ae:	69b8      	ldr	r0, [r7, #24]
 80091b0:	f002 f82e 	bl	800b210 <xTimerGenericCommand>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d102      	bne.n	80091c0 <osTimerStart+0x6c>
      stat = osOK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61fb      	str	r3, [r7, #28]
 80091be:	e002      	b.n	80091c6 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80091c0:	f06f 0302 	mvn.w	r3, #2
 80091c4:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80091c6:	69fb      	ldr	r3, [r7, #28]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3720      	adds	r7, #32
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200007f4 	.word	0x200007f4

080091d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4a07      	ldr	r2, [pc, #28]	; (8009200 <vApplicationGetIdleTaskMemory+0x2c>)
 80091e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4a06      	ldr	r2, [pc, #24]	; (8009204 <vApplicationGetIdleTaskMemory+0x30>)
 80091ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2280      	movs	r2, #128	; 0x80
 80091f0:	601a      	str	r2, [r3, #0]
}
 80091f2:	bf00      	nop
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	200007f8 	.word	0x200007f8
 8009204:	200008a0 	.word	0x200008a0

08009208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a07      	ldr	r2, [pc, #28]	; (8009234 <vApplicationGetTimerTaskMemory+0x2c>)
 8009218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4a06      	ldr	r2, [pc, #24]	; (8009238 <vApplicationGetTimerTaskMemory+0x30>)
 800921e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009226:	601a      	str	r2, [r3, #0]
}
 8009228:	bf00      	nop
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	20000aa0 	.word	0x20000aa0
 8009238:	20000b48 	.word	0x20000b48

0800923c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f103 0208 	add.w	r2, r3, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f103 0208 	add.w	r2, r3, #8
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f103 0208 	add.w	r2, r3, #8
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009296:	b480      	push	{r7}
 8009298:	b085      	sub	sp, #20
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092de:	b480      	push	{r7}
 80092e0:	b085      	sub	sp, #20
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d103      	bne.n	80092fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e00c      	b.n	8009318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3308      	adds	r3, #8
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e002      	b.n	800930c <vListInsert+0x2e>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	429a      	cmp	r2, r3
 8009316:	d2f6      	bcs.n	8009306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6892      	ldr	r2, [r2, #8]
 8009366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6852      	ldr	r2, [r2, #4]
 8009370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	429a      	cmp	r2, r3
 800937a:	d103      	bne.n	8009384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10c      	bne.n	80093d2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80093d2:	f002 fb5b 	bl	800ba8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	68f9      	ldr	r1, [r7, #12]
 80093e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	441a      	add	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	3b01      	subs	r3, #1
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	441a      	add	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	22ff      	movs	r2, #255	; 0xff
 800941e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d114      	bne.n	8009452 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01a      	beq.n	8009466 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f001 fb53 	bl	800aae0 <xTaskRemoveFromEventList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d012      	beq.n	8009466 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009440:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <xQueueGenericReset+0xd0>)
 8009442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	e009      	b.n	8009466 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3310      	adds	r3, #16
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff fef0 	bl	800923c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3324      	adds	r3, #36	; 0x24
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff feeb 	bl	800923c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009466:	f002 fb45 	bl	800baf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800946a:	2301      	movs	r3, #1
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	; 0x38
 800947c:	af02      	add	r7, sp, #8
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10c      	bne.n	80094a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	b672      	cpsid	i
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	b662      	cpsie	i
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10c      	bne.n	80094c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	b672      	cpsid	i
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	b662      	cpsie	i
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <xQueueGenericCreateStatic+0x5a>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <xQueueGenericCreateStatic+0x5e>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <xQueueGenericCreateStatic+0x60>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10c      	bne.n	80094f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	623b      	str	r3, [r7, #32]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d102      	bne.n	8009502 <xQueueGenericCreateStatic+0x8a>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <xQueueGenericCreateStatic+0x8e>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <xQueueGenericCreateStatic+0x90>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10c      	bne.n	8009526 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	b672      	cpsid	i
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	b662      	cpsie	i
 8009520:	61fb      	str	r3, [r7, #28]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009526:	2350      	movs	r3, #80	; 0x50
 8009528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b50      	cmp	r3, #80	; 0x50
 800952e:	d00c      	beq.n	800954a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	b672      	cpsid	i
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	b662      	cpsie	i
 8009544:	61bb      	str	r3, [r7, #24]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800954a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00d      	beq.n	8009572 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800955e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f805 	bl	800957c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3730      	adds	r7, #48	; 0x30
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e002      	b.n	800959e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095aa:	2101      	movs	r1, #1
 80095ac:	69b8      	ldr	r0, [r7, #24]
 80095ae:	f7ff fef9 	bl	80093a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095d2:	2300      	movs	r3, #0
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <xQueueGenericSend+0x36>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	b672      	cpsid	i
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	b662      	cpsie	i
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <xQueueGenericSend+0x44>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <xQueueGenericSend+0x48>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <xQueueGenericSend+0x4a>
 800960c:	2300      	movs	r3, #0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10c      	bne.n	800962c <xQueueGenericSend+0x68>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	b672      	cpsid	i
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	b662      	cpsie	i
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d103      	bne.n	800963a <xQueueGenericSend+0x76>
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <xQueueGenericSend+0x7a>
 800963a:	2301      	movs	r3, #1
 800963c:	e000      	b.n	8009640 <xQueueGenericSend+0x7c>
 800963e:	2300      	movs	r3, #0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10c      	bne.n	800965e <xQueueGenericSend+0x9a>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	b672      	cpsid	i
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	b662      	cpsie	i
 8009658:	623b      	str	r3, [r7, #32]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800965e:	f001 fc09 	bl	800ae74 <xTaskGetSchedulerState>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <xQueueGenericSend+0xaa>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <xQueueGenericSend+0xae>
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <xQueueGenericSend+0xb0>
 8009672:	2300      	movs	r3, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10c      	bne.n	8009692 <xQueueGenericSend+0xce>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	b672      	cpsid	i
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	b662      	cpsie	i
 800968c:	61fb      	str	r3, [r7, #28]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009692:	f002 f9fb 	bl	800ba8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d302      	bcc.n	80096a8 <xQueueGenericSend+0xe4>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d129      	bne.n	80096fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ae:	f000 fa15 	bl	8009adc <prvCopyDataToQueue>
 80096b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d010      	beq.n	80096de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	3324      	adds	r3, #36	; 0x24
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 fa0d 	bl	800aae0 <xTaskRemoveFromEventList>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d013      	beq.n	80096f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096cc:	4b3f      	ldr	r3, [pc, #252]	; (80097cc <xQueueGenericSend+0x208>)
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	e00a      	b.n	80096f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096e4:	4b39      	ldr	r3, [pc, #228]	; (80097cc <xQueueGenericSend+0x208>)
 80096e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096f4:	f002 f9fe 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e063      	b.n	80097c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009702:	f002 f9f7 	bl	800baf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009706:	2300      	movs	r3, #0
 8009708:	e05c      	b.n	80097c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800970a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970c:	2b00      	cmp	r3, #0
 800970e:	d106      	bne.n	800971e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fa49 	bl	800abac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800971a:	2301      	movs	r3, #1
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800971e:	f002 f9e9 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009722:	f000 ffa9 	bl	800a678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009726:	f002 f9b1 	bl	800ba8c <vPortEnterCritical>
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009730:	b25b      	sxtb	r3, r3
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d103      	bne.n	8009740 <xQueueGenericSend+0x17c>
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009746:	b25b      	sxtb	r3, r3
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974c:	d103      	bne.n	8009756 <xQueueGenericSend+0x192>
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009756:	f002 f9cd 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800975a:	1d3a      	adds	r2, r7, #4
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f001 fa38 	bl	800abd8 <xTaskCheckForTimeOut>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d124      	bne.n	80097b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800976e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009770:	f000 faac 	bl	8009ccc <prvIsQueueFull>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d018      	beq.n	80097ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	3310      	adds	r3, #16
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 f958 	bl	800aa38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800978a:	f000 fa37 	bl	8009bfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800978e:	f000 ff81 	bl	800a694 <xTaskResumeAll>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	f47f af7c 	bne.w	8009692 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <xQueueGenericSend+0x208>)
 800979c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	e772      	b.n	8009692 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ae:	f000 fa25 	bl	8009bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097b2:	f000 ff6f 	bl	800a694 <xTaskResumeAll>
 80097b6:	e76c      	b.n	8009692 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ba:	f000 fa1f 	bl	8009bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097be:	f000 ff69 	bl	800a694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3738      	adds	r7, #56	; 0x38
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	; 0x38
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10c      	bne.n	8009802 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	b672      	cpsid	i
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	b662      	cpsie	i
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <xQueueGenericSendFromISR+0x40>
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <xQueueGenericSendFromISR+0x44>
 8009810:	2301      	movs	r3, #1
 8009812:	e000      	b.n	8009816 <xQueueGenericSendFromISR+0x46>
 8009814:	2300      	movs	r3, #0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	b672      	cpsid	i
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	b662      	cpsie	i
 800982e:	623b      	str	r3, [r7, #32]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d103      	bne.n	8009842 <xQueueGenericSendFromISR+0x72>
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <xQueueGenericSendFromISR+0x76>
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <xQueueGenericSendFromISR+0x78>
 8009846:	2300      	movs	r3, #0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10c      	bne.n	8009866 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	b672      	cpsid	i
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	b662      	cpsie	i
 8009860:	61fb      	str	r3, [r7, #28]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009866:	f002 f9f9 	bl	800bc5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800986a:	f3ef 8211 	mrs	r2, BASEPRI
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	b672      	cpsid	i
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	b662      	cpsie	i
 8009882:	61ba      	str	r2, [r7, #24]
 8009884:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009886:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009892:	429a      	cmp	r2, r3
 8009894:	d302      	bcc.n	800989c <xQueueGenericSendFromISR+0xcc>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d12c      	bne.n	80098f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ac:	f000 f916 	bl	8009adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b8:	d112      	bne.n	80098e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d016      	beq.n	80098f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	3324      	adds	r3, #36	; 0x24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 f90a 	bl	800aae0 <xTaskRemoveFromEventList>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	e007      	b.n	80098f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098e4:	3301      	adds	r3, #1
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	b25a      	sxtb	r2, r3
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098f0:	2301      	movs	r3, #1
 80098f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80098f4:	e001      	b.n	80098fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009908:	4618      	mov	r0, r3
 800990a:	3738      	adds	r7, #56	; 0x38
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08c      	sub	sp, #48	; 0x30
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800991c:	2300      	movs	r3, #0
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10c      	bne.n	8009944 <xQueueReceive+0x34>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	b672      	cpsid	i
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	b662      	cpsie	i
 800993e:	623b      	str	r3, [r7, #32]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d103      	bne.n	8009952 <xQueueReceive+0x42>
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <xQueueReceive+0x46>
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <xQueueReceive+0x48>
 8009956:	2300      	movs	r3, #0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10c      	bne.n	8009976 <xQueueReceive+0x66>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	b672      	cpsid	i
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	b662      	cpsie	i
 8009970:	61fb      	str	r3, [r7, #28]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009976:	f001 fa7d 	bl	800ae74 <xTaskGetSchedulerState>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xQueueReceive+0x76>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <xQueueReceive+0x7a>
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <xQueueReceive+0x7c>
 800998a:	2300      	movs	r3, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10c      	bne.n	80099aa <xQueueReceive+0x9a>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	b672      	cpsid	i
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	b662      	cpsie	i
 80099a4:	61bb      	str	r3, [r7, #24]
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099aa:	f002 f86f 	bl	800ba8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01f      	beq.n	80099fa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099be:	f000 f8f7 	bl	8009bb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	1e5a      	subs	r2, r3, #1
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00f      	beq.n	80099f2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	3310      	adds	r3, #16
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 f882 	bl	800aae0 <xTaskRemoveFromEventList>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d007      	beq.n	80099f2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099e2:	4b3d      	ldr	r3, [pc, #244]	; (8009ad8 <xQueueReceive+0x1c8>)
 80099e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099f2:	f002 f87f 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e069      	b.n	8009ace <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a00:	f002 f878 	bl	800baf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e062      	b.n	8009ace <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a0e:	f107 0310 	add.w	r3, r7, #16
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f8ca 	bl	800abac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a1c:	f002 f86a 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a20:	f000 fe2a 	bl	800a678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a24:	f002 f832 	bl	800ba8c <vPortEnterCritical>
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a2e:	b25b      	sxtb	r3, r3
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d103      	bne.n	8009a3e <xQueueReceive+0x12e>
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d103      	bne.n	8009a54 <xQueueReceive+0x144>
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a54:	f002 f84e 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a58:	1d3a      	adds	r2, r7, #4
 8009a5a:	f107 0310 	add.w	r3, r7, #16
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 f8b9 	bl	800abd8 <xTaskCheckForTimeOut>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d123      	bne.n	8009ab4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6e:	f000 f917 	bl	8009ca0 <prvIsQueueEmpty>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d017      	beq.n	8009aa8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	3324      	adds	r3, #36	; 0x24
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4611      	mov	r1, r2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 ffd9 	bl	800aa38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a88:	f000 f8b8 	bl	8009bfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a8c:	f000 fe02 	bl	800a694 <xTaskResumeAll>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d189      	bne.n	80099aa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009a96:	4b10      	ldr	r3, [pc, #64]	; (8009ad8 <xQueueReceive+0x1c8>)
 8009a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	e780      	b.n	80099aa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aaa:	f000 f8a7 	bl	8009bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009aae:	f000 fdf1 	bl	800a694 <xTaskResumeAll>
 8009ab2:	e77a      	b.n	80099aa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab6:	f000 f8a1 	bl	8009bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aba:	f000 fdeb 	bl	800a694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac0:	f000 f8ee 	bl	8009ca0 <prvIsQueueEmpty>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f43f af6f 	beq.w	80099aa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3730      	adds	r7, #48	; 0x30
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d14d      	bne.n	8009b9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 f9d2 	bl	800aeb0 <xTaskPriorityDisinherit>
 8009b0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	609a      	str	r2, [r3, #8]
 8009b14:	e043      	b.n	8009b9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d119      	bne.n	8009b50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6858      	ldr	r0, [r3, #4]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	461a      	mov	r2, r3
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	f002 fcae 	bl	800c488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	441a      	add	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d32b      	bcc.n	8009b9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
 8009b4e:	e026      	b.n	8009b9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68d8      	ldr	r0, [r3, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	f002 fc94 	bl	800c488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b68:	425b      	negs	r3, r3
 8009b6a:	441a      	add	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d207      	bcs.n	8009b8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b84:	425b      	negs	r3, r3
 8009b86:	441a      	add	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d105      	bne.n	8009b9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ba6:	697b      	ldr	r3, [r7, #20]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d018      	beq.n	8009bf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	441a      	add	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d303      	bcc.n	8009be4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68d9      	ldr	r1, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bec:	461a      	mov	r2, r3
 8009bee:	6838      	ldr	r0, [r7, #0]
 8009bf0:	f002 fc4a 	bl	800c488 <memcpy>
	}
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c04:	f001 ff42 	bl	800ba8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c10:	e011      	b.n	8009c36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d012      	beq.n	8009c40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3324      	adds	r3, #36	; 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ff5e 	bl	800aae0 <xTaskRemoveFromEventList>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c2a:	f001 f83b 	bl	800aca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dce9      	bgt.n	8009c12 <prvUnlockQueue+0x16>
 8009c3e:	e000      	b.n	8009c42 <prvUnlockQueue+0x46>
					break;
 8009c40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	22ff      	movs	r2, #255	; 0xff
 8009c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c4a:	f001 ff53 	bl	800baf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c4e:	f001 ff1d 	bl	800ba8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c5a:	e011      	b.n	8009c80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d012      	beq.n	8009c8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3310      	adds	r3, #16
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 ff39 	bl	800aae0 <xTaskRemoveFromEventList>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c74:	f001 f816 	bl	800aca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dce9      	bgt.n	8009c5c <prvUnlockQueue+0x60>
 8009c88:	e000      	b.n	8009c8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c94:	f001 ff2e 	bl	800baf4 <vPortExitCritical>
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ca8:	f001 fef0 	bl	800ba8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e001      	b.n	8009cbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cbe:	f001 ff19 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cd4:	f001 feda 	bl	800ba8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d102      	bne.n	8009cea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e001      	b.n	8009cee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cee:	f001 ff01 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e014      	b.n	8009d36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d0c:	4a0f      	ldr	r2, [pc, #60]	; (8009d4c <vQueueAddToRegistry+0x50>)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d18:	490c      	ldr	r1, [pc, #48]	; (8009d4c <vQueueAddToRegistry+0x50>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <vQueueAddToRegistry+0x50>)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	4413      	add	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d2e:	e006      	b.n	8009d3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b07      	cmp	r3, #7
 8009d3a:	d9e7      	bls.n	8009d0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	20000f48 	.word	0x20000f48

08009d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d60:	f001 fe94 	bl	800ba8c <vPortEnterCritical>
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d6a:	b25b      	sxtb	r3, r3
 8009d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d70:	d103      	bne.n	8009d7a <vQueueWaitForMessageRestricted+0x2a>
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d80:	b25b      	sxtb	r3, r3
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d103      	bne.n	8009d90 <vQueueWaitForMessageRestricted+0x40>
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d90:	f001 feb0 	bl	800baf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d106      	bne.n	8009daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	3324      	adds	r3, #36	; 0x24
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	68b9      	ldr	r1, [r7, #8]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 fe6d 	bl	800aa84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009daa:	6978      	ldr	r0, [r7, #20]
 8009dac:	f7ff ff26 	bl	8009bfc <prvUnlockQueue>
	}
 8009db0:	bf00      	nop
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08e      	sub	sp, #56	; 0x38
 8009dbc:	af04      	add	r7, sp, #16
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10c      	bne.n	8009de6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	b672      	cpsid	i
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	b662      	cpsie	i
 8009de0:	623b      	str	r3, [r7, #32]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10c      	bne.n	8009e06 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	b672      	cpsid	i
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	b662      	cpsie	i
 8009e00:	61fb      	str	r3, [r7, #28]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e06:	23a8      	movs	r3, #168	; 0xa8
 8009e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2ba8      	cmp	r3, #168	; 0xa8
 8009e0e:	d00c      	beq.n	8009e2a <xTaskCreateStatic+0x72>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	b672      	cpsid	i
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	b662      	cpsie	i
 8009e24:	61bb      	str	r3, [r7, #24]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01e      	beq.n	8009e70 <xTaskCreateStatic+0xb8>
 8009e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01b      	beq.n	8009e70 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	2202      	movs	r2, #2
 8009e46:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	9302      	str	r3, [sp, #8]
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f850 	bl	8009f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e6a:	f000 f8f5 	bl	800a058 <prvAddNewTaskToReadyList>
 8009e6e:	e001      	b.n	8009e74 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e74:	697b      	ldr	r3, [r7, #20]
	}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3728      	adds	r7, #40	; 0x28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b08c      	sub	sp, #48	; 0x30
 8009e82:	af04      	add	r7, sp, #16
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	603b      	str	r3, [r7, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 ff26 	bl	800bce4 <pvPortMalloc>
 8009e98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ea0:	20a8      	movs	r0, #168	; 0xa8
 8009ea2:	f001 ff1f 	bl	800bce4 <pvPortMalloc>
 8009ea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8009eb4:	e005      	b.n	8009ec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009eb6:	6978      	ldr	r0, [r7, #20]
 8009eb8:	f001 ffde 	bl	800be78 <vPortFree>
 8009ebc:	e001      	b.n	8009ec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d017      	beq.n	8009ef8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9303      	str	r3, [sp, #12]
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f80e 	bl	8009f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eec:	69f8      	ldr	r0, [r7, #28]
 8009eee:	f000 f8b3 	bl	800a058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	61bb      	str	r3, [r7, #24]
 8009ef6:	e002      	b.n	8009efe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8009efc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009efe:	69bb      	ldr	r3, [r7, #24]
	}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3720      	adds	r7, #32
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	461a      	mov	r2, r3
 8009f20:	21a5      	movs	r1, #165	; 0xa5
 8009f22:	f002 f9c8 	bl	800c2b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009f30:	440b      	add	r3, r1
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	f023 0307 	bic.w	r3, r3, #7
 8009f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00c      	beq.n	8009f64 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	b672      	cpsid	i
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	b662      	cpsie	i
 8009f5e:	617b      	str	r3, [r7, #20]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d01f      	beq.n	8009faa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	e012      	b.n	8009f96 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	4413      	add	r3, r2
 8009f76:	7819      	ldrb	r1, [r3, #0]
 8009f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3334      	adds	r3, #52	; 0x34
 8009f80:	460a      	mov	r2, r1
 8009f82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3301      	adds	r3, #1
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	2b0f      	cmp	r3, #15
 8009f9a:	d9e9      	bls.n	8009f70 <prvInitialiseNewTask+0x68>
 8009f9c:	e000      	b.n	8009fa0 <prvInitialiseNewTask+0x98>
			{
				break;
 8009f9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fa8:	e003      	b.n	8009fb2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	2b37      	cmp	r3, #55	; 0x37
 8009fb6:	d901      	bls.n	8009fbc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fb8:	2337      	movs	r3, #55	; 0x37
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	2200      	movs	r2, #0
 8009fcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff f952 	bl	800927c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	3318      	adds	r3, #24
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff f94d 	bl	800927c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	2200      	movs	r2, #0
 800a004:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	3354      	adds	r3, #84	; 0x54
 800a00c:	224c      	movs	r2, #76	; 0x4c
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f002 f950 	bl	800c2b6 <memset>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	4a0c      	ldr	r2, [pc, #48]	; (800a04c <prvInitialiseNewTask+0x144>)
 800a01a:	659a      	str	r2, [r3, #88]	; 0x58
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <prvInitialiseNewTask+0x148>)
 800a020:	65da      	str	r2, [r3, #92]	; 0x5c
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <prvInitialiseNewTask+0x14c>)
 800a026:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	69b8      	ldr	r0, [r7, #24]
 800a02e:	f001 fc23 	bl	800b878 <pxPortInitialiseStack>
 800a032:	4602      	mov	r2, r0
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a042:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a044:	bf00      	nop
 800a046:	3720      	adds	r7, #32
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	200051d4 	.word	0x200051d4
 800a050:	2000523c 	.word	0x2000523c
 800a054:	200052a4 	.word	0x200052a4

0800a058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a060:	f001 fd14 	bl	800ba8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a064:	4b2d      	ldr	r3, [pc, #180]	; (800a11c <prvAddNewTaskToReadyList+0xc4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	4a2c      	ldr	r2, [pc, #176]	; (800a11c <prvAddNewTaskToReadyList+0xc4>)
 800a06c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a06e:	4b2c      	ldr	r3, [pc, #176]	; (800a120 <prvAddNewTaskToReadyList+0xc8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d109      	bne.n	800a08a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a076:	4a2a      	ldr	r2, [pc, #168]	; (800a120 <prvAddNewTaskToReadyList+0xc8>)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a07c:	4b27      	ldr	r3, [pc, #156]	; (800a11c <prvAddNewTaskToReadyList+0xc4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d110      	bne.n	800a0a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a084:	f000 fe32 	bl	800acec <prvInitialiseTaskLists>
 800a088:	e00d      	b.n	800a0a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a08a:	4b26      	ldr	r3, [pc, #152]	; (800a124 <prvAddNewTaskToReadyList+0xcc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d109      	bne.n	800a0a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a092:	4b23      	ldr	r3, [pc, #140]	; (800a120 <prvAddNewTaskToReadyList+0xc8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d802      	bhi.n	800a0a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0a0:	4a1f      	ldr	r2, [pc, #124]	; (800a120 <prvAddNewTaskToReadyList+0xc8>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0a6:	4b20      	ldr	r3, [pc, #128]	; (800a128 <prvAddNewTaskToReadyList+0xd0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	4a1e      	ldr	r2, [pc, #120]	; (800a128 <prvAddNewTaskToReadyList+0xd0>)
 800a0ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0b0:	4b1d      	ldr	r3, [pc, #116]	; (800a128 <prvAddNewTaskToReadyList+0xd0>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	; (800a12c <prvAddNewTaskToReadyList+0xd4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d903      	bls.n	800a0cc <prvAddNewTaskToReadyList+0x74>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a18      	ldr	r2, [pc, #96]	; (800a12c <prvAddNewTaskToReadyList+0xd4>)
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4a15      	ldr	r2, [pc, #84]	; (800a130 <prvAddNewTaskToReadyList+0xd8>)
 800a0da:	441a      	add	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f7ff f8d7 	bl	8009296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0e8:	f001 fd04 	bl	800baf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0ec:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <prvAddNewTaskToReadyList+0xcc>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00e      	beq.n	800a112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0f4:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <prvAddNewTaskToReadyList+0xc8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d207      	bcs.n	800a112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a102:	4b0c      	ldr	r3, [pc, #48]	; (800a134 <prvAddNewTaskToReadyList+0xdc>)
 800a104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000145c 	.word	0x2000145c
 800a120:	20000f88 	.word	0x20000f88
 800a124:	20001468 	.word	0x20001468
 800a128:	20001478 	.word	0x20001478
 800a12c:	20001464 	.word	0x20001464
 800a130:	20000f8c 	.word	0x20000f8c
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a140:	f001 fca4 	bl	800ba8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d102      	bne.n	800a150 <vTaskDelete+0x18>
 800a14a:	4b2d      	ldr	r3, [pc, #180]	; (800a200 <vTaskDelete+0xc8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	e000      	b.n	800a152 <vTaskDelete+0x1a>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3304      	adds	r3, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff f8f9 	bl	8009350 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3318      	adds	r3, #24
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff f8f0 	bl	8009350 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a170:	4b24      	ldr	r3, [pc, #144]	; (800a204 <vTaskDelete+0xcc>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	4a23      	ldr	r2, [pc, #140]	; (800a204 <vTaskDelete+0xcc>)
 800a178:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a17a:	4b21      	ldr	r3, [pc, #132]	; (800a200 <vTaskDelete+0xc8>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	429a      	cmp	r2, r3
 800a182:	d10b      	bne.n	800a19c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3304      	adds	r3, #4
 800a188:	4619      	mov	r1, r3
 800a18a:	481f      	ldr	r0, [pc, #124]	; (800a208 <vTaskDelete+0xd0>)
 800a18c:	f7ff f883 	bl	8009296 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a190:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <vTaskDelete+0xd4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3301      	adds	r3, #1
 800a196:	4a1d      	ldr	r2, [pc, #116]	; (800a20c <vTaskDelete+0xd4>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	e009      	b.n	800a1b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a19c:	4b1c      	ldr	r3, [pc, #112]	; (800a210 <vTaskDelete+0xd8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	4a1b      	ldr	r2, [pc, #108]	; (800a210 <vTaskDelete+0xd8>)
 800a1a4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fe0e 	bl	800adc8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a1ac:	f000 fe42 	bl	800ae34 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a1b0:	f001 fca0 	bl	800baf4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a1b4:	4b17      	ldr	r3, [pc, #92]	; (800a214 <vTaskDelete+0xdc>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01d      	beq.n	800a1f8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <vTaskDelete+0xc8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d118      	bne.n	800a1f8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a1c6:	4b14      	ldr	r3, [pc, #80]	; (800a218 <vTaskDelete+0xe0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00c      	beq.n	800a1e8 <vTaskDelete+0xb0>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	b672      	cpsid	i
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	b662      	cpsie	i
 800a1e2:	60bb      	str	r3, [r7, #8]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <vTaskDelete+0xe4>)
 800a1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000f88 	.word	0x20000f88
 800a204:	20001478 	.word	0x20001478
 800a208:	20001430 	.word	0x20001430
 800a20c:	20001444 	.word	0x20001444
 800a210:	2000145c 	.word	0x2000145c
 800a214:	20001468 	.word	0x20001468
 800a218:	20001484 	.word	0x20001484
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d019      	beq.n	800a266 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a232:	4b14      	ldr	r3, [pc, #80]	; (800a284 <vTaskDelay+0x64>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <vTaskDelay+0x34>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	b672      	cpsid	i
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	b662      	cpsie	i
 800a24e:	60bb      	str	r3, [r7, #8]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a254:	f000 fa10 	bl	800a678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a258:	2100      	movs	r1, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fe9a 	bl	800af94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a260:	f000 fa18 	bl	800a694 <xTaskResumeAll>
 800a264:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d107      	bne.n	800a27c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <vTaskDelay+0x68>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20001484 	.word	0x20001484
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a294:	f001 fbfa 	bl	800ba8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <vTaskSuspend+0x18>
 800a29e:	4b31      	ldr	r3, [pc, #196]	; (800a364 <vTaskSuspend+0xd8>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	e000      	b.n	800a2a6 <vTaskSuspend+0x1a>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff f84f 	bl	8009350 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3318      	adds	r3, #24
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff f846 	bl	8009350 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4827      	ldr	r0, [pc, #156]	; (800a368 <vTaskSuspend+0xdc>)
 800a2cc:	f7fe ffe3 	bl	8009296 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d103      	bne.n	800a2e4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a2e4:	f001 fc06 	bl	800baf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a2e8:	4b20      	ldr	r3, [pc, #128]	; (800a36c <vTaskSuspend+0xe0>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a2f0:	f001 fbcc 	bl	800ba8c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a2f4:	f000 fd9e 	bl	800ae34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a2f8:	f001 fbfc 	bl	800baf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a2fc:	4b19      	ldr	r3, [pc, #100]	; (800a364 <vTaskSuspend+0xd8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	429a      	cmp	r2, r3
 800a304:	d129      	bne.n	800a35a <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800a306:	4b19      	ldr	r3, [pc, #100]	; (800a36c <vTaskSuspend+0xe0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d019      	beq.n	800a342 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a30e:	4b18      	ldr	r3, [pc, #96]	; (800a370 <vTaskSuspend+0xe4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00c      	beq.n	800a330 <vTaskSuspend+0xa4>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	b672      	cpsid	i
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	b662      	cpsie	i
 800a32a:	60bb      	str	r3, [r7, #8]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800a330:	4b10      	ldr	r3, [pc, #64]	; (800a374 <vTaskSuspend+0xe8>)
 800a332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a340:	e00b      	b.n	800a35a <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <vTaskSuspend+0xdc>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <vTaskSuspend+0xec>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d103      	bne.n	800a356 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <vTaskSuspend+0xd8>)
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
	}
 800a354:	e001      	b.n	800a35a <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800a356:	f000 fb09 	bl	800a96c <vTaskSwitchContext>
	}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000f88 	.word	0x20000f88
 800a368:	20001448 	.word	0x20001448
 800a36c:	20001468 	.word	0x20001468
 800a370:	20001484 	.word	0x20001484
 800a374:	e000ed04 	.word	0xe000ed04
 800a378:	2000145c 	.word	0x2000145c

0800a37c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a384:	2300      	movs	r3, #0
 800a386:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10c      	bne.n	800a3ac <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	b672      	cpsid	i
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	b662      	cpsie	i
 800a3a6:	60fb      	str	r3, [r7, #12]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <prvTaskIsTaskSuspended+0x60>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d10a      	bne.n	800a3cc <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <prvTaskIsTaskSuspended+0x64>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d005      	beq.n	800a3cc <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20001448 	.word	0x20001448
 800a3e0:	2000141c 	.word	0x2000141c

0800a3e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10c      	bne.n	800a410 <vTaskResume+0x2c>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	b672      	cpsid	i
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	b662      	cpsie	i
 800a40a:	60bb      	str	r3, [r7, #8]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a410:	4b20      	ldr	r3, [pc, #128]	; (800a494 <vTaskResume+0xb0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	429a      	cmp	r2, r3
 800a418:	d038      	beq.n	800a48c <vTaskResume+0xa8>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d035      	beq.n	800a48c <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800a420:	f001 fb34 	bl	800ba8c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff ffa9 	bl	800a37c <prvTaskIsTaskSuspended>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d02b      	beq.n	800a488 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3304      	adds	r3, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe ff8b 	bl	8009350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43e:	4b16      	ldr	r3, [pc, #88]	; (800a498 <vTaskResume+0xb4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d903      	bls.n	800a44e <vTaskResume+0x6a>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	4a13      	ldr	r2, [pc, #76]	; (800a498 <vTaskResume+0xb4>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4a10      	ldr	r2, [pc, #64]	; (800a49c <vTaskResume+0xb8>)
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3304      	adds	r3, #4
 800a462:	4619      	mov	r1, r3
 800a464:	4610      	mov	r0, r2
 800a466:	f7fe ff16 	bl	8009296 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <vTaskResume+0xb0>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	429a      	cmp	r2, r3
 800a476:	d307      	bcc.n	800a488 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a478:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <vTaskResume+0xbc>)
 800a47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a488:	f001 fb34 	bl	800baf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000f88 	.word	0x20000f88
 800a498:	20001464 	.word	0x20001464
 800a49c:	20000f8c 	.word	0x20000f8c
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08a      	sub	sp, #40	; 0x28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <xTaskResumeFromISR+0x30>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	b672      	cpsid	i
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	b662      	cpsie	i
 800a4ce:	61bb      	str	r3, [r7, #24]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4d4:	f001 fbc2 	bl	800bc5c <vPortValidateInterruptPriority>
	__asm volatile
 800a4d8:	f3ef 8211 	mrs	r2, BASEPRI
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	b672      	cpsid	i
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	b662      	cpsie	i
 800a4f0:	617a      	str	r2, [r7, #20]
 800a4f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4f4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4f6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a4f8:	6a38      	ldr	r0, [r7, #32]
 800a4fa:	f7ff ff3f 	bl	800a37c <prvTaskIsTaskSuspended>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d030      	beq.n	800a566 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a504:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <xTaskResumeFromISR+0xd8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d126      	bne.n	800a55a <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a510:	4b1b      	ldr	r3, [pc, #108]	; (800a580 <xTaskResumeFromISR+0xdc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	429a      	cmp	r2, r3
 800a518:	d301      	bcc.n	800a51e <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800a51a:	2301      	movs	r3, #1
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	3304      	adds	r3, #4
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe ff14 	bl	8009350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b15      	ldr	r3, [pc, #84]	; (800a584 <xTaskResumeFromISR+0xe0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <xTaskResumeFromISR+0x98>
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4a12      	ldr	r2, [pc, #72]	; (800a584 <xTaskResumeFromISR+0xe0>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a0f      	ldr	r2, [pc, #60]	; (800a588 <xTaskResumeFromISR+0xe4>)
 800a54a:	441a      	add	r2, r3
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe fe9f 	bl	8009296 <vListInsertEnd>
 800a558:	e005      	b.n	800a566 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	3318      	adds	r3, #24
 800a55e:	4619      	mov	r1, r3
 800a560:	480a      	ldr	r0, [pc, #40]	; (800a58c <xTaskResumeFromISR+0xe8>)
 800a562:	f7fe fe98 	bl	8009296 <vListInsertEnd>
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f383 8811 	msr	BASEPRI, r3
}
 800a570:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a574:	4618      	mov	r0, r3
 800a576:	3728      	adds	r7, #40	; 0x28
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20001484 	.word	0x20001484
 800a580:	20000f88 	.word	0x20000f88
 800a584:	20001464 	.word	0x20001464
 800a588:	20000f8c 	.word	0x20000f8c
 800a58c:	2000141c 	.word	0x2000141c

0800a590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	; 0x28
 800a594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a59e:	463a      	mov	r2, r7
 800a5a0:	1d39      	adds	r1, r7, #4
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fe14 	bl	80091d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	9202      	str	r2, [sp, #8]
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	460a      	mov	r2, r1
 800a5be:	4926      	ldr	r1, [pc, #152]	; (800a658 <vTaskStartScheduler+0xc8>)
 800a5c0:	4826      	ldr	r0, [pc, #152]	; (800a65c <vTaskStartScheduler+0xcc>)
 800a5c2:	f7ff fbf9 	bl	8009db8 <xTaskCreateStatic>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4a25      	ldr	r2, [pc, #148]	; (800a660 <vTaskStartScheduler+0xd0>)
 800a5ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <vTaskStartScheduler+0xd0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e001      	b.n	800a5de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d102      	bne.n	800a5ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5e4:	f000 fd2a 	bl	800b03c <xTimerCreateTimerTask>
 800a5e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d11d      	bne.n	800a62c <vTaskStartScheduler+0x9c>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	b662      	cpsie	i
 800a604:	613b      	str	r3, [r7, #16]
}
 800a606:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a608:	4b16      	ldr	r3, [pc, #88]	; (800a664 <vTaskStartScheduler+0xd4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3354      	adds	r3, #84	; 0x54
 800a60e:	4a16      	ldr	r2, [pc, #88]	; (800a668 <vTaskStartScheduler+0xd8>)
 800a610:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <vTaskStartScheduler+0xdc>)
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a61a:	4b15      	ldr	r3, [pc, #84]	; (800a670 <vTaskStartScheduler+0xe0>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <vTaskStartScheduler+0xe4>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a626:	f001 f9b3 	bl	800b990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a62a:	e010      	b.n	800a64e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d10c      	bne.n	800a64e <vTaskStartScheduler+0xbe>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	b672      	cpsid	i
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	b662      	cpsie	i
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <vTaskStartScheduler+0xbc>
}
 800a64e:	bf00      	nop
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	0800d26c 	.word	0x0800d26c
 800a65c:	0800acbd 	.word	0x0800acbd
 800a660:	20001480 	.word	0x20001480
 800a664:	20000f88 	.word	0x20000f88
 800a668:	200000c0 	.word	0x200000c0
 800a66c:	2000147c 	.word	0x2000147c
 800a670:	20001468 	.word	0x20001468
 800a674:	20001460 	.word	0x20001460

0800a678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <vTaskSuspendAll+0x18>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	4a03      	ldr	r2, [pc, #12]	; (800a690 <vTaskSuspendAll+0x18>)
 800a684:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a686:	bf00      	nop
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20001484 	.word	0x20001484

0800a694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6a2:	4b43      	ldr	r3, [pc, #268]	; (800a7b0 <xTaskResumeAll+0x11c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10c      	bne.n	800a6c4 <xTaskResumeAll+0x30>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	b672      	cpsid	i
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	b662      	cpsie	i
 800a6be:	603b      	str	r3, [r7, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6c4:	f001 f9e2 	bl	800ba8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6c8:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <xTaskResumeAll+0x11c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	4a38      	ldr	r2, [pc, #224]	; (800a7b0 <xTaskResumeAll+0x11c>)
 800a6d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d2:	4b37      	ldr	r3, [pc, #220]	; (800a7b0 <xTaskResumeAll+0x11c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d162      	bne.n	800a7a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6da:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <xTaskResumeAll+0x120>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d05e      	beq.n	800a7a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6e2:	e02f      	b.n	800a744 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e4:	4b34      	ldr	r3, [pc, #208]	; (800a7b8 <xTaskResumeAll+0x124>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3318      	adds	r3, #24
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fe2d 	bl	8009350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fe28 	bl	8009350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a704:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <xTaskResumeAll+0x128>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d903      	bls.n	800a714 <xTaskResumeAll+0x80>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <xTaskResumeAll+0x128>)
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4a27      	ldr	r2, [pc, #156]	; (800a7c0 <xTaskResumeAll+0x12c>)
 800a722:	441a      	add	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fe fdb3 	bl	8009296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <xTaskResumeAll+0x130>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d302      	bcc.n	800a744 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a73e:	4b22      	ldr	r3, [pc, #136]	; (800a7c8 <xTaskResumeAll+0x134>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <xTaskResumeAll+0x124>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1cb      	bne.n	800a6e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a752:	f000 fb6f 	bl	800ae34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a756:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <xTaskResumeAll+0x138>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d010      	beq.n	800a784 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a762:	f000 f847 	bl	800a7f4 <xTaskIncrementTick>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a76c:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <xTaskResumeAll+0x134>)
 800a76e:	2201      	movs	r2, #1
 800a770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3b01      	subs	r3, #1
 800a776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1f1      	bne.n	800a762 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <xTaskResumeAll+0x138>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a784:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <xTaskResumeAll+0x134>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <xTaskResumeAll+0x13c>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7a0:	f001 f9a8 	bl	800baf4 <vPortExitCritical>

	return xAlreadyYielded;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20001484 	.word	0x20001484
 800a7b4:	2000145c 	.word	0x2000145c
 800a7b8:	2000141c 	.word	0x2000141c
 800a7bc:	20001464 	.word	0x20001464
 800a7c0:	20000f8c 	.word	0x20000f8c
 800a7c4:	20000f88 	.word	0x20000f88
 800a7c8:	20001470 	.word	0x20001470
 800a7cc:	2000146c 	.word	0x2000146c
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7da:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <xTaskGetTickCount+0x1c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7e0:	687b      	ldr	r3, [r7, #4]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20001460 	.word	0x20001460

0800a7f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7fe:	4b50      	ldr	r3, [pc, #320]	; (800a940 <xTaskIncrementTick+0x14c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 808b 	bne.w	800a91e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a808:	4b4e      	ldr	r3, [pc, #312]	; (800a944 <xTaskIncrementTick+0x150>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a810:	4a4c      	ldr	r2, [pc, #304]	; (800a944 <xTaskIncrementTick+0x150>)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d122      	bne.n	800a862 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a81c:	4b4a      	ldr	r3, [pc, #296]	; (800a948 <xTaskIncrementTick+0x154>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00c      	beq.n	800a840 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	b672      	cpsid	i
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	b662      	cpsie	i
 800a83a:	603b      	str	r3, [r7, #0]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xTaskIncrementTick+0x4a>
 800a840:	4b41      	ldr	r3, [pc, #260]	; (800a948 <xTaskIncrementTick+0x154>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	4b41      	ldr	r3, [pc, #260]	; (800a94c <xTaskIncrementTick+0x158>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a3f      	ldr	r2, [pc, #252]	; (800a948 <xTaskIncrementTick+0x154>)
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	4a3f      	ldr	r2, [pc, #252]	; (800a94c <xTaskIncrementTick+0x158>)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	4b3e      	ldr	r3, [pc, #248]	; (800a950 <xTaskIncrementTick+0x15c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	4a3d      	ldr	r2, [pc, #244]	; (800a950 <xTaskIncrementTick+0x15c>)
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	f000 fae9 	bl	800ae34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a862:	4b3c      	ldr	r3, [pc, #240]	; (800a954 <xTaskIncrementTick+0x160>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d349      	bcc.n	800a900 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a86c:	4b36      	ldr	r3, [pc, #216]	; (800a948 <xTaskIncrementTick+0x154>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d104      	bne.n	800a880 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a876:	4b37      	ldr	r3, [pc, #220]	; (800a954 <xTaskIncrementTick+0x160>)
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	601a      	str	r2, [r3, #0]
					break;
 800a87e:	e03f      	b.n	800a900 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a880:	4b31      	ldr	r3, [pc, #196]	; (800a948 <xTaskIncrementTick+0x154>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	429a      	cmp	r2, r3
 800a896:	d203      	bcs.n	800a8a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a898:	4a2e      	ldr	r2, [pc, #184]	; (800a954 <xTaskIncrementTick+0x160>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a89e:	e02f      	b.n	800a900 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fd53 	bl	8009350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	3318      	adds	r3, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fd4a 	bl	8009350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c0:	4b25      	ldr	r3, [pc, #148]	; (800a958 <xTaskIncrementTick+0x164>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d903      	bls.n	800a8d0 <xTaskIncrementTick+0xdc>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	4a22      	ldr	r2, [pc, #136]	; (800a958 <xTaskIncrementTick+0x164>)
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4a1f      	ldr	r2, [pc, #124]	; (800a95c <xTaskIncrementTick+0x168>)
 800a8de:	441a      	add	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f7fe fcd5 	bl	8009296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	4b1b      	ldr	r3, [pc, #108]	; (800a960 <xTaskIncrementTick+0x16c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d3b8      	bcc.n	800a86c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8fe:	e7b5      	b.n	800a86c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a900:	4b17      	ldr	r3, [pc, #92]	; (800a960 <xTaskIncrementTick+0x16c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4915      	ldr	r1, [pc, #84]	; (800a95c <xTaskIncrementTick+0x168>)
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d907      	bls.n	800a928 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a918:	2301      	movs	r3, #1
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e004      	b.n	800a928 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <xTaskIncrementTick+0x170>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a0f      	ldr	r2, [pc, #60]	; (800a964 <xTaskIncrementTick+0x170>)
 800a926:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a928:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <xTaskIncrementTick+0x174>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a934:	697b      	ldr	r3, [r7, #20]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20001484 	.word	0x20001484
 800a944:	20001460 	.word	0x20001460
 800a948:	20001414 	.word	0x20001414
 800a94c:	20001418 	.word	0x20001418
 800a950:	20001474 	.word	0x20001474
 800a954:	2000147c 	.word	0x2000147c
 800a958:	20001464 	.word	0x20001464
 800a95c:	20000f8c 	.word	0x20000f8c
 800a960:	20000f88 	.word	0x20000f88
 800a964:	2000146c 	.word	0x2000146c
 800a968:	20001470 	.word	0x20001470

0800a96c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a972:	4b2b      	ldr	r3, [pc, #172]	; (800aa20 <vTaskSwitchContext+0xb4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a97a:	4b2a      	ldr	r3, [pc, #168]	; (800aa24 <vTaskSwitchContext+0xb8>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a980:	e048      	b.n	800aa14 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a982:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <vTaskSwitchContext+0xb8>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a988:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <vTaskSwitchContext+0xbc>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e012      	b.n	800a9b6 <vTaskSwitchContext+0x4a>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10c      	bne.n	800a9b0 <vTaskSwitchContext+0x44>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	b672      	cpsid	i
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	b662      	cpsie	i
 800a9aa:	607b      	str	r3, [r7, #4]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <vTaskSwitchContext+0x42>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	491d      	ldr	r1, [pc, #116]	; (800aa2c <vTaskSwitchContext+0xc0>)
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0e2      	beq.n	800a990 <vTaskSwitchContext+0x24>
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <vTaskSwitchContext+0xc0>)
 800a9d6:	4413      	add	r3, r2
 800a9d8:	60bb      	str	r3, [r7, #8]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	605a      	str	r2, [r3, #4]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d104      	bne.n	800a9fa <vTaskSwitchContext+0x8e>
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	605a      	str	r2, [r3, #4]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4a0b      	ldr	r2, [pc, #44]	; (800aa30 <vTaskSwitchContext+0xc4>)
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <vTaskSwitchContext+0xbc>)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <vTaskSwitchContext+0xc4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3354      	adds	r3, #84	; 0x54
 800aa10:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <vTaskSwitchContext+0xc8>)
 800aa12:	6013      	str	r3, [r2, #0]
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20001484 	.word	0x20001484
 800aa24:	20001470 	.word	0x20001470
 800aa28:	20001464 	.word	0x20001464
 800aa2c:	20000f8c 	.word	0x20000f8c
 800aa30:	20000f88 	.word	0x20000f88
 800aa34:	200000c0 	.word	0x200000c0

0800aa38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10c      	bne.n	800aa62 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	b672      	cpsid	i
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	b662      	cpsie	i
 800aa5c:	60fb      	str	r3, [r7, #12]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <vTaskPlaceOnEventList+0x48>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3318      	adds	r3, #24
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7fe fc37 	bl	80092de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa70:	2101      	movs	r1, #1
 800aa72:	6838      	ldr	r0, [r7, #0]
 800aa74:	f000 fa8e 	bl	800af94 <prvAddCurrentTaskToDelayedList>
}
 800aa78:	bf00      	nop
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20000f88 	.word	0x20000f88

0800aa84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10c      	bne.n	800aab0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	b672      	cpsid	i
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	b662      	cpsie	i
 800aaaa:	617b      	str	r3, [r7, #20]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <vTaskPlaceOnEventListRestricted+0x58>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3318      	adds	r3, #24
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7fe fbec 	bl	8009296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	f000 fa61 	bl	800af94 <prvAddCurrentTaskToDelayedList>
	}
 800aad2:	bf00      	nop
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20000f88 	.word	0x20000f88

0800aae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10c      	bne.n	800ab10 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	b672      	cpsid	i
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	b662      	cpsie	i
 800ab0a:	60fb      	str	r3, [r7, #12]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3318      	adds	r3, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fc1b 	bl	8009350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab1a:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <xTaskRemoveFromEventList+0xb4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d11d      	bne.n	800ab5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fc12 	bl	8009350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab30:	4b19      	ldr	r3, [pc, #100]	; (800ab98 <xTaskRemoveFromEventList+0xb8>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d903      	bls.n	800ab40 <xTaskRemoveFromEventList+0x60>
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	4a16      	ldr	r2, [pc, #88]	; (800ab98 <xTaskRemoveFromEventList+0xb8>)
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4a13      	ldr	r2, [pc, #76]	; (800ab9c <xTaskRemoveFromEventList+0xbc>)
 800ab4e:	441a      	add	r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fe fb9d 	bl	8009296 <vListInsertEnd>
 800ab5c:	e005      	b.n	800ab6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3318      	adds	r3, #24
 800ab62:	4619      	mov	r1, r3
 800ab64:	480e      	ldr	r0, [pc, #56]	; (800aba0 <xTaskRemoveFromEventList+0xc0>)
 800ab66:	f7fe fb96 	bl	8009296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <xTaskRemoveFromEventList+0xc4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d905      	bls.n	800ab84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab7c:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <xTaskRemoveFromEventList+0xc8>)
 800ab7e:	2201      	movs	r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e001      	b.n	800ab88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab88:	697b      	ldr	r3, [r7, #20]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20001484 	.word	0x20001484
 800ab98:	20001464 	.word	0x20001464
 800ab9c:	20000f8c 	.word	0x20000f8c
 800aba0:	2000141c 	.word	0x2000141c
 800aba4:	20000f88 	.word	0x20000f88
 800aba8:	20001470 	.word	0x20001470

0800abac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <vTaskInternalSetTimeOutState+0x24>)
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abbc:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <vTaskInternalSetTimeOutState+0x28>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	605a      	str	r2, [r3, #4]
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20001474 	.word	0x20001474
 800abd4:	20001460 	.word	0x20001460

0800abd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10c      	bne.n	800ac02 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	b672      	cpsid	i
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	b662      	cpsie	i
 800abfc:	613b      	str	r3, [r7, #16]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10c      	bne.n	800ac22 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	b672      	cpsid	i
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	b662      	cpsie	i
 800ac1c:	60fb      	str	r3, [r7, #12]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ac22:	f000 ff33 	bl	800ba8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac26:	4b1d      	ldr	r3, [pc, #116]	; (800ac9c <xTaskCheckForTimeOut+0xc4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3e:	d102      	bne.n	800ac46 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
 800ac44:	e023      	b.n	800ac8e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <xTaskCheckForTimeOut+0xc8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d007      	beq.n	800ac62 <xTaskCheckForTimeOut+0x8a>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d302      	bcc.n	800ac62 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	e015      	b.n	800ac8e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d20b      	bcs.n	800ac84 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	1ad2      	subs	r2, r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff ff97 	bl	800abac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	61fb      	str	r3, [r7, #28]
 800ac82:	e004      	b.n	800ac8e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac8e:	f000 ff31 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 800ac92:	69fb      	ldr	r3, [r7, #28]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3720      	adds	r7, #32
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20001460 	.word	0x20001460
 800aca0:	20001474 	.word	0x20001474

0800aca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aca8:	4b03      	ldr	r3, [pc, #12]	; (800acb8 <vTaskMissedYield+0x14>)
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
}
 800acae:	bf00      	nop
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	20001470 	.word	0x20001470

0800acbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acc4:	f000 f852 	bl	800ad6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <prvIdleTask+0x28>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d9f9      	bls.n	800acc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <prvIdleTask+0x2c>)
 800acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ace0:	e7f0      	b.n	800acc4 <prvIdleTask+0x8>
 800ace2:	bf00      	nop
 800ace4:	20000f8c 	.word	0x20000f8c
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acf2:	2300      	movs	r3, #0
 800acf4:	607b      	str	r3, [r7, #4]
 800acf6:	e00c      	b.n	800ad12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <prvInitialiseTaskLists+0x60>)
 800ad04:	4413      	add	r3, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fa98 	bl	800923c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	607b      	str	r3, [r7, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b37      	cmp	r3, #55	; 0x37
 800ad16:	d9ef      	bls.n	800acf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad18:	480d      	ldr	r0, [pc, #52]	; (800ad50 <prvInitialiseTaskLists+0x64>)
 800ad1a:	f7fe fa8f 	bl	800923c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad1e:	480d      	ldr	r0, [pc, #52]	; (800ad54 <prvInitialiseTaskLists+0x68>)
 800ad20:	f7fe fa8c 	bl	800923c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad24:	480c      	ldr	r0, [pc, #48]	; (800ad58 <prvInitialiseTaskLists+0x6c>)
 800ad26:	f7fe fa89 	bl	800923c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad2a:	480c      	ldr	r0, [pc, #48]	; (800ad5c <prvInitialiseTaskLists+0x70>)
 800ad2c:	f7fe fa86 	bl	800923c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad30:	480b      	ldr	r0, [pc, #44]	; (800ad60 <prvInitialiseTaskLists+0x74>)
 800ad32:	f7fe fa83 	bl	800923c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <prvInitialiseTaskLists+0x78>)
 800ad38:	4a05      	ldr	r2, [pc, #20]	; (800ad50 <prvInitialiseTaskLists+0x64>)
 800ad3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <prvInitialiseTaskLists+0x7c>)
 800ad3e:	4a05      	ldr	r2, [pc, #20]	; (800ad54 <prvInitialiseTaskLists+0x68>)
 800ad40:	601a      	str	r2, [r3, #0]
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000f8c 	.word	0x20000f8c
 800ad50:	200013ec 	.word	0x200013ec
 800ad54:	20001400 	.word	0x20001400
 800ad58:	2000141c 	.word	0x2000141c
 800ad5c:	20001430 	.word	0x20001430
 800ad60:	20001448 	.word	0x20001448
 800ad64:	20001414 	.word	0x20001414
 800ad68:	20001418 	.word	0x20001418

0800ad6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad72:	e019      	b.n	800ada8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad74:	f000 fe8a 	bl	800ba8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad78:	4b10      	ldr	r3, [pc, #64]	; (800adbc <prvCheckTasksWaitingTermination+0x50>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fe fae3 	bl	8009350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <prvCheckTasksWaitingTermination+0x54>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	4a0b      	ldr	r2, [pc, #44]	; (800adc0 <prvCheckTasksWaitingTermination+0x54>)
 800ad92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <prvCheckTasksWaitingTermination+0x58>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	4a0a      	ldr	r2, [pc, #40]	; (800adc4 <prvCheckTasksWaitingTermination+0x58>)
 800ad9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad9e:	f000 fea9 	bl	800baf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f810 	bl	800adc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ada8:	4b06      	ldr	r3, [pc, #24]	; (800adc4 <prvCheckTasksWaitingTermination+0x58>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e1      	bne.n	800ad74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20001430 	.word	0x20001430
 800adc0:	2000145c 	.word	0x2000145c
 800adc4:	20001444 	.word	0x20001444

0800adc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3354      	adds	r3, #84	; 0x54
 800add4:	4618      	mov	r0, r3
 800add6:	f001 fa9b 	bl	800c310 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d108      	bne.n	800adf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	4618      	mov	r0, r3
 800adea:	f001 f845 	bl	800be78 <vPortFree>
				vPortFree( pxTCB );
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 f842 	bl	800be78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adf4:	e01a      	b.n	800ae2c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d103      	bne.n	800ae08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 f839 	bl	800be78 <vPortFree>
	}
 800ae06:	e011      	b.n	800ae2c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d00c      	beq.n	800ae2c <prvDeleteTCB+0x64>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	b672      	cpsid	i
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	b662      	cpsie	i
 800ae26:	60fb      	str	r3, [r7, #12]
}
 800ae28:	bf00      	nop
 800ae2a:	e7fe      	b.n	800ae2a <prvDeleteTCB+0x62>
	}
 800ae2c:	bf00      	nop
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae3a:	4b0c      	ldr	r3, [pc, #48]	; (800ae6c <prvResetNextTaskUnblockTime+0x38>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d104      	bne.n	800ae4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <prvResetNextTaskUnblockTime+0x3c>)
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae4c:	e008      	b.n	800ae60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae4e:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <prvResetNextTaskUnblockTime+0x38>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <prvResetNextTaskUnblockTime+0x3c>)
 800ae5e:	6013      	str	r3, [r2, #0]
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	20001414 	.word	0x20001414
 800ae70:	2000147c 	.word	0x2000147c

0800ae74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae7a:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <xTaskGetSchedulerState+0x34>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae82:	2301      	movs	r3, #1
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	e008      	b.n	800ae9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae88:	4b08      	ldr	r3, [pc, #32]	; (800aeac <xTaskGetSchedulerState+0x38>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae90:	2302      	movs	r3, #2
 800ae92:	607b      	str	r3, [r7, #4]
 800ae94:	e001      	b.n	800ae9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae96:	2300      	movs	r3, #0
 800ae98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae9a:	687b      	ldr	r3, [r7, #4]
	}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20001468 	.word	0x20001468
 800aeac:	20001484 	.word	0x20001484

0800aeb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d05a      	beq.n	800af7c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aec6:	4b30      	ldr	r3, [pc, #192]	; (800af88 <xTaskPriorityDisinherit+0xd8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d00c      	beq.n	800aeea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	b672      	cpsid	i
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	b662      	cpsie	i
 800aee4:	60fb      	str	r3, [r7, #12]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10c      	bne.n	800af0c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	b672      	cpsid	i
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	b662      	cpsie	i
 800af06:	60bb      	str	r3, [r7, #8]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af10:	1e5a      	subs	r2, r3, #1
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1e:	429a      	cmp	r2, r3
 800af20:	d02c      	beq.n	800af7c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af26:	2b00      	cmp	r3, #0
 800af28:	d128      	bne.n	800af7c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	3304      	adds	r3, #4
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fa0e 	bl	8009350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4c:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <xTaskPriorityDisinherit+0xdc>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d903      	bls.n	800af5c <xTaskPriorityDisinherit+0xac>
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	4a0c      	ldr	r2, [pc, #48]	; (800af8c <xTaskPriorityDisinherit+0xdc>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4a09      	ldr	r2, [pc, #36]	; (800af90 <xTaskPriorityDisinherit+0xe0>)
 800af6a:	441a      	add	r2, r3
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	3304      	adds	r3, #4
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fe f98f 	bl	8009296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af7c:	697b      	ldr	r3, [r7, #20]
	}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000f88 	.word	0x20000f88
 800af8c:	20001464 	.word	0x20001464
 800af90:	20000f8c 	.word	0x20000f8c

0800af94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af9e:	4b21      	ldr	r3, [pc, #132]	; (800b024 <prvAddCurrentTaskToDelayedList+0x90>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afa4:	4b20      	ldr	r3, [pc, #128]	; (800b028 <prvAddCurrentTaskToDelayedList+0x94>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe f9d0 	bl	8009350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d10a      	bne.n	800afce <prvAddCurrentTaskToDelayedList+0x3a>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afbe:	4b1a      	ldr	r3, [pc, #104]	; (800b028 <prvAddCurrentTaskToDelayedList+0x94>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4819      	ldr	r0, [pc, #100]	; (800b02c <prvAddCurrentTaskToDelayedList+0x98>)
 800afc8:	f7fe f965 	bl	8009296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800afcc:	e026      	b.n	800b01c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afd6:	4b14      	ldr	r3, [pc, #80]	; (800b028 <prvAddCurrentTaskToDelayedList+0x94>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d209      	bcs.n	800affa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afe6:	4b12      	ldr	r3, [pc, #72]	; (800b030 <prvAddCurrentTaskToDelayedList+0x9c>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <prvAddCurrentTaskToDelayedList+0x94>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fe f973 	bl	80092de <vListInsert>
}
 800aff8:	e010      	b.n	800b01c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800affa:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <prvAddCurrentTaskToDelayedList+0xa0>)
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <prvAddCurrentTaskToDelayedList+0x94>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3304      	adds	r3, #4
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7fe f969 	bl	80092de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	429a      	cmp	r2, r3
 800b014:	d202      	bcs.n	800b01c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b016:	4a08      	ldr	r2, [pc, #32]	; (800b038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6013      	str	r3, [r2, #0]
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20001460 	.word	0x20001460
 800b028:	20000f88 	.word	0x20000f88
 800b02c:	20001448 	.word	0x20001448
 800b030:	20001418 	.word	0x20001418
 800b034:	20001414 	.word	0x20001414
 800b038:	2000147c 	.word	0x2000147c

0800b03c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	; 0x28
 800b040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b042:	2300      	movs	r3, #0
 800b044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b046:	f000 fbb5 	bl	800b7b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b04a:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <xTimerCreateTimerTask+0x84>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d021      	beq.n	800b096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b05a:	1d3a      	adds	r2, r7, #4
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	f107 030c 	add.w	r3, r7, #12
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe f8cf 	bl	8009208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b06a:	6879      	ldr	r1, [r7, #4]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	9202      	str	r2, [sp, #8]
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	2302      	movs	r3, #2
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	2300      	movs	r3, #0
 800b07a:	460a      	mov	r2, r1
 800b07c:	4911      	ldr	r1, [pc, #68]	; (800b0c4 <xTimerCreateTimerTask+0x88>)
 800b07e:	4812      	ldr	r0, [pc, #72]	; (800b0c8 <xTimerCreateTimerTask+0x8c>)
 800b080:	f7fe fe9a 	bl	8009db8 <xTaskCreateStatic>
 800b084:	4603      	mov	r3, r0
 800b086:	4a11      	ldr	r2, [pc, #68]	; (800b0cc <xTimerCreateTimerTask+0x90>)
 800b088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b08a:	4b10      	ldr	r3, [pc, #64]	; (800b0cc <xTimerCreateTimerTask+0x90>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b092:	2301      	movs	r3, #1
 800b094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10c      	bne.n	800b0b6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	b672      	cpsid	i
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	b662      	cpsie	i
 800b0b0:	613b      	str	r3, [r7, #16]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b0b6:	697b      	ldr	r3, [r7, #20]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	200014b8 	.word	0x200014b8
 800b0c4:	0800d274 	.word	0x0800d274
 800b0c8:	0800b34d 	.word	0x0800b34d
 800b0cc:	200014bc 	.word	0x200014bc

0800b0d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b0de:	202c      	movs	r0, #44	; 0x2c
 800b0e0:	f000 fe00 	bl	800bce4 <pvPortMalloc>
 800b0e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00d      	beq.n	800b108 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	9301      	str	r3, [sp, #4]
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 f847 	bl	800b196 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b108:	697b      	ldr	r3, [r7, #20]
	}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b112:	b580      	push	{r7, lr}
 800b114:	b08a      	sub	sp, #40	; 0x28
 800b116:	af02      	add	r7, sp, #8
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
 800b11e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b120:	232c      	movs	r3, #44	; 0x2c
 800b122:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2b2c      	cmp	r3, #44	; 0x2c
 800b128:	d00c      	beq.n	800b144 <xTimerCreateStatic+0x32>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	b672      	cpsid	i
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	b662      	cpsie	i
 800b13e:	61bb      	str	r3, [r7, #24]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b144:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10c      	bne.n	800b166 <xTimerCreateStatic+0x54>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	b672      	cpsid	i
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	b662      	cpsie	i
 800b160:	617b      	str	r3, [r7, #20]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00d      	beq.n	800b18c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 f805 	bl	800b196 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b18c:	69fb      	ldr	r3, [r7, #28]
	}
 800b18e:	4618      	mov	r0, r3
 800b190:	3720      	adds	r7, #32
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b086      	sub	sp, #24
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10c      	bne.n	800b1c4 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ae:	b672      	cpsid	i
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	b662      	cpsie	i
 800b1be:	617b      	str	r3, [r7, #20]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01e      	beq.n	800b208 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b1ca:	f000 faf3 	bl	800b7b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	6a3a      	ldr	r2, [r7, #32]
 800b1e4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe f846 	bl	800927c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d008      	beq.n	800b208 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1fc:	f043 0304 	orr.w	r3, r3, #4
 800b200:	b2da      	uxtb	r2, r3
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b208:	bf00      	nop
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08a      	sub	sp, #40	; 0x28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b21e:	2300      	movs	r3, #0
 800b220:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10c      	bne.n	800b242 <xTimerGenericCommand+0x32>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	b672      	cpsid	i
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	b662      	cpsie	i
 800b23c:	623b      	str	r3, [r7, #32]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b242:	4b1a      	ldr	r3, [pc, #104]	; (800b2ac <xTimerGenericCommand+0x9c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d02a      	beq.n	800b2a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2b05      	cmp	r3, #5
 800b25a:	dc18      	bgt.n	800b28e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b25c:	f7ff fe0a 	bl	800ae74 <xTaskGetSchedulerState>
 800b260:	4603      	mov	r3, r0
 800b262:	2b02      	cmp	r3, #2
 800b264:	d109      	bne.n	800b27a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <xTimerGenericCommand+0x9c>)
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	f107 0110 	add.w	r1, r7, #16
 800b26e:	2300      	movs	r3, #0
 800b270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b272:	f7fe f9a7 	bl	80095c4 <xQueueGenericSend>
 800b276:	6278      	str	r0, [r7, #36]	; 0x24
 800b278:	e012      	b.n	800b2a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b27a:	4b0c      	ldr	r3, [pc, #48]	; (800b2ac <xTimerGenericCommand+0x9c>)
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f107 0110 	add.w	r1, r7, #16
 800b282:	2300      	movs	r3, #0
 800b284:	2200      	movs	r2, #0
 800b286:	f7fe f99d 	bl	80095c4 <xQueueGenericSend>
 800b28a:	6278      	str	r0, [r7, #36]	; 0x24
 800b28c:	e008      	b.n	800b2a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <xTimerGenericCommand+0x9c>)
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	f107 0110 	add.w	r1, r7, #16
 800b296:	2300      	movs	r3, #0
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	f7fe fa99 	bl	80097d0 <xQueueGenericSendFromISR>
 800b29e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3728      	adds	r7, #40	; 0x28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	200014b8 	.word	0x200014b8

0800b2b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ba:	4b23      	ldr	r3, [pc, #140]	; (800b348 <prvProcessExpiredTimer+0x98>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe f841 	bl	8009350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d024      	beq.n	800b326 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	18d1      	adds	r1, r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	6978      	ldr	r0, [r7, #20]
 800b2ea:	f000 f8d3 	bl	800b494 <prvInsertTimerInActiveList>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d021      	beq.n	800b338 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6978      	ldr	r0, [r7, #20]
 800b300:	f7ff ff86 	bl	800b210 <xTimerGenericCommand>
 800b304:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d115      	bne.n	800b338 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	b672      	cpsid	i
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	b662      	cpsie	i
 800b320:	60fb      	str	r3, [r7, #12]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b32c:	f023 0301 	bic.w	r3, r3, #1
 800b330:	b2da      	uxtb	r2, r3
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	6978      	ldr	r0, [r7, #20]
 800b33e:	4798      	blx	r3
}
 800b340:	bf00      	nop
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200014b0 	.word	0x200014b0

0800b34c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b354:	f107 0308 	add.w	r3, r7, #8
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 f857 	bl	800b40c <prvGetNextExpireTime>
 800b35e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	4619      	mov	r1, r3
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f803 	bl	800b370 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b36a:	f000 f8d5 	bl	800b518 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b36e:	e7f1      	b.n	800b354 <prvTimerTask+0x8>

0800b370 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b37a:	f7ff f97d 	bl	800a678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4618      	mov	r0, r3
 800b384:	f000 f866 	bl	800b454 <prvSampleTimeNow>
 800b388:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d130      	bne.n	800b3f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <prvProcessTimerOrBlockTask+0x3c>
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d806      	bhi.n	800b3ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b39e:	f7ff f979 	bl	800a694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3a2:	68f9      	ldr	r1, [r7, #12]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff ff83 	bl	800b2b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b3aa:	e024      	b.n	800b3f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d008      	beq.n	800b3c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b3b2:	4b13      	ldr	r3, [pc, #76]	; (800b400 <prvProcessTimerOrBlockTask+0x90>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <prvProcessTimerOrBlockTask+0x50>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e000      	b.n	800b3c2 <prvProcessTimerOrBlockTask+0x52>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <prvProcessTimerOrBlockTask+0x94>)
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7fe fcbd 	bl	8009d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b3d6:	f7ff f95d 	bl	800a694 <xTaskResumeAll>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b3e0:	4b09      	ldr	r3, [pc, #36]	; (800b408 <prvProcessTimerOrBlockTask+0x98>)
 800b3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	f3bf 8f6f 	isb	sy
}
 800b3f0:	e001      	b.n	800b3f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b3f2:	f7ff f94f 	bl	800a694 <xTaskResumeAll>
}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	200014b4 	.word	0x200014b4
 800b404:	200014b8 	.word	0x200014b8
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b414:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <prvGetNextExpireTime+0x44>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <prvGetNextExpireTime+0x16>
 800b41e:	2201      	movs	r2, #1
 800b420:	e000      	b.n	800b424 <prvGetNextExpireTime+0x18>
 800b422:	2200      	movs	r2, #0
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d105      	bne.n	800b43c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b430:	4b07      	ldr	r3, [pc, #28]	; (800b450 <prvGetNextExpireTime+0x44>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60fb      	str	r3, [r7, #12]
 800b43a:	e001      	b.n	800b440 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	200014b0 	.word	0x200014b0

0800b454 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b45c:	f7ff f9ba 	bl	800a7d4 <xTaskGetTickCount>
 800b460:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b462:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <prvSampleTimeNow+0x3c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d205      	bcs.n	800b478 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b46c:	f000 f93c 	bl	800b6e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	e002      	b.n	800b47e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b47e:	4a04      	ldr	r2, [pc, #16]	; (800b490 <prvSampleTimeNow+0x3c>)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b484:	68fb      	ldr	r3, [r7, #12]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	200014c0 	.word	0x200014c0

0800b494 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d812      	bhi.n	800b4e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d302      	bcc.n	800b4ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	617b      	str	r3, [r7, #20]
 800b4cc:	e01b      	b.n	800b506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4ce:	4b10      	ldr	r3, [pc, #64]	; (800b510 <prvInsertTimerInActiveList+0x7c>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fd ff00 	bl	80092de <vListInsert>
 800b4de:	e012      	b.n	800b506 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d206      	bcs.n	800b4f6 <prvInsertTimerInActiveList+0x62>
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d302      	bcc.n	800b4f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e007      	b.n	800b506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <prvInsertTimerInActiveList+0x80>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7fd feec 	bl	80092de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b506:	697b      	ldr	r3, [r7, #20]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	200014b4 	.word	0x200014b4
 800b514:	200014b0 	.word	0x200014b0

0800b518 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08e      	sub	sp, #56	; 0x38
 800b51c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b51e:	e0d0      	b.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	da1a      	bge.n	800b55c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b526:	1d3b      	adds	r3, r7, #4
 800b528:	3304      	adds	r3, #4
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10c      	bne.n	800b54c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	b672      	cpsid	i
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	b662      	cpsie	i
 800b546:	61fb      	str	r3, [r7, #28]
}
 800b548:	bf00      	nop
 800b54a:	e7fe      	b.n	800b54a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b552:	6850      	ldr	r0, [r2, #4]
 800b554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b556:	6892      	ldr	r2, [r2, #8]
 800b558:	4611      	mov	r1, r2
 800b55a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f2c0 80af 	blt.w	800b6c2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	3304      	adds	r3, #4
 800b574:	4618      	mov	r0, r3
 800b576:	f7fd feeb 	bl	8009350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b57a:	463b      	mov	r3, r7
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff ff69 	bl	800b454 <prvSampleTimeNow>
 800b582:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b09      	cmp	r3, #9
 800b588:	f200 809a 	bhi.w	800b6c0 <prvProcessReceivedCommands+0x1a8>
 800b58c:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <prvProcessReceivedCommands+0x7c>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b5bd 	.word	0x0800b5bd
 800b598:	0800b5bd 	.word	0x0800b5bd
 800b59c:	0800b5bd 	.word	0x0800b5bd
 800b5a0:	0800b635 	.word	0x0800b635
 800b5a4:	0800b649 	.word	0x0800b649
 800b5a8:	0800b697 	.word	0x0800b697
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b5bd 	.word	0x0800b5bd
 800b5b4:	0800b635 	.word	0x0800b635
 800b5b8:	0800b649 	.word	0x0800b649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c2:	f043 0301 	orr.w	r3, r3, #1
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	18d1      	adds	r1, r2, r3
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5dc:	f7ff ff5a 	bl	800b494 <prvInsertTimerInActiveList>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d06d      	beq.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d062      	beq.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	441a      	add	r2, r3
 800b604:	2300      	movs	r3, #0
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	2300      	movs	r3, #0
 800b60a:	2100      	movs	r1, #0
 800b60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b60e:	f7ff fdff 	bl	800b210 <xTimerGenericCommand>
 800b612:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d153      	bne.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	b672      	cpsid	i
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	b662      	cpsie	i
 800b62e:	61bb      	str	r3, [r7, #24]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b646:	e03c      	b.n	800b6c2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b64e:	f043 0301 	orr.w	r3, r3, #1
 800b652:	b2da      	uxtb	r2, r3
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10c      	bne.n	800b682 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	b672      	cpsid	i
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	b662      	cpsie	i
 800b67c:	617b      	str	r3, [r7, #20]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b684:	699a      	ldr	r2, [r3, #24]
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	18d1      	adds	r1, r2, r3
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b690:	f7ff ff00 	bl	800b494 <prvInsertTimerInActiveList>
					break;
 800b694:	e015      	b.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a6:	f000 fbe7 	bl	800be78 <vPortFree>
 800b6aa:	e00a      	b.n	800b6c2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b2:	f023 0301 	bic.w	r3, r3, #1
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6be:	e000      	b.n	800b6c2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b6c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6c2:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <prvProcessReceivedCommands+0x1cc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	1d39      	adds	r1, r7, #4
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe f920 	bl	8009910 <xQueueReceive>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f47f af24 	bne.w	800b520 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	3730      	adds	r7, #48	; 0x30
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	200014b8 	.word	0x200014b8

0800b6e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6ee:	e04a      	b.n	800b786 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6f0:	4b2e      	ldr	r3, [pc, #184]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6fa:	4b2c      	ldr	r3, [pc, #176]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	3304      	adds	r3, #4
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fd fe21 	bl	8009350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d030      	beq.n	800b786 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	429a      	cmp	r2, r3
 800b734:	d90e      	bls.n	800b754 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b742:	4b1a      	ldr	r3, [pc, #104]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3304      	adds	r3, #4
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7fd fdc6 	bl	80092de <vListInsert>
 800b752:	e018      	b.n	800b786 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b754:	2300      	movs	r3, #0
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	2100      	movs	r1, #0
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fd56 	bl	800b210 <xTimerGenericCommand>
 800b764:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10c      	bne.n	800b786 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	603b      	str	r3, [r7, #0]
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1af      	bne.n	800b6f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b796:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <prvSwitchTimerLists+0xc8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a04      	ldr	r2, [pc, #16]	; (800b7ac <prvSwitchTimerLists+0xc4>)
 800b79c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b79e:	4a04      	ldr	r2, [pc, #16]	; (800b7b0 <prvSwitchTimerLists+0xc8>)
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	6013      	str	r3, [r2, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200014b0 	.word	0x200014b0
 800b7b0:	200014b4 	.word	0x200014b4

0800b7b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7ba:	f000 f967 	bl	800ba8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7be:	4b15      	ldr	r3, [pc, #84]	; (800b814 <prvCheckForValidListAndQueue+0x60>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d120      	bne.n	800b808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7c6:	4814      	ldr	r0, [pc, #80]	; (800b818 <prvCheckForValidListAndQueue+0x64>)
 800b7c8:	f7fd fd38 	bl	800923c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7cc:	4813      	ldr	r0, [pc, #76]	; (800b81c <prvCheckForValidListAndQueue+0x68>)
 800b7ce:	f7fd fd35 	bl	800923c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7d2:	4b13      	ldr	r3, [pc, #76]	; (800b820 <prvCheckForValidListAndQueue+0x6c>)
 800b7d4:	4a10      	ldr	r2, [pc, #64]	; (800b818 <prvCheckForValidListAndQueue+0x64>)
 800b7d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <prvCheckForValidListAndQueue+0x70>)
 800b7da:	4a10      	ldr	r2, [pc, #64]	; (800b81c <prvCheckForValidListAndQueue+0x68>)
 800b7dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7de:	2300      	movs	r3, #0
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	4b11      	ldr	r3, [pc, #68]	; (800b828 <prvCheckForValidListAndQueue+0x74>)
 800b7e4:	4a11      	ldr	r2, [pc, #68]	; (800b82c <prvCheckForValidListAndQueue+0x78>)
 800b7e6:	2110      	movs	r1, #16
 800b7e8:	200a      	movs	r0, #10
 800b7ea:	f7fd fe45 	bl	8009478 <xQueueGenericCreateStatic>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4a08      	ldr	r2, [pc, #32]	; (800b814 <prvCheckForValidListAndQueue+0x60>)
 800b7f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7f4:	4b07      	ldr	r3, [pc, #28]	; (800b814 <prvCheckForValidListAndQueue+0x60>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d005      	beq.n	800b808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b7fc:	4b05      	ldr	r3, [pc, #20]	; (800b814 <prvCheckForValidListAndQueue+0x60>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	490b      	ldr	r1, [pc, #44]	; (800b830 <prvCheckForValidListAndQueue+0x7c>)
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fa7a 	bl	8009cfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b808:	f000 f974 	bl	800baf4 <vPortExitCritical>
}
 800b80c:	bf00      	nop
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	200014b8 	.word	0x200014b8
 800b818:	20001488 	.word	0x20001488
 800b81c:	2000149c 	.word	0x2000149c
 800b820:	200014b0 	.word	0x200014b0
 800b824:	200014b4 	.word	0x200014b4
 800b828:	20001564 	.word	0x20001564
 800b82c:	200014c4 	.word	0x200014c4
 800b830:	0800d27c 	.word	0x0800d27c

0800b834 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	b672      	cpsid	i
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	b662      	cpsie	i
 800b85a:	60fb      	str	r3, [r7, #12]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b860:	f000 f914 	bl	800ba8c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b86a:	f000 f943 	bl	800baf4 <vPortExitCritical>

	return pvReturn;
 800b86e:	693b      	ldr	r3, [r7, #16]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3b04      	subs	r3, #4
 800b888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3b04      	subs	r3, #4
 800b896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f023 0201 	bic.w	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8a8:	4a0c      	ldr	r2, [pc, #48]	; (800b8dc <pxPortInitialiseStack+0x64>)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3b14      	subs	r3, #20
 800b8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f06f 0202 	mvn.w	r2, #2
 800b8c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b20      	subs	r3, #32
 800b8cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	0800b8e1 	.word	0x0800b8e1

0800b8e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <prvTaskExitError+0x5c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f2:	d00c      	beq.n	800b90e <prvTaskExitError+0x2e>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	b672      	cpsid	i
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	b662      	cpsie	i
 800b908:	60fb      	str	r3, [r7, #12]
}
 800b90a:	bf00      	nop
 800b90c:	e7fe      	b.n	800b90c <prvTaskExitError+0x2c>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	b672      	cpsid	i
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	b662      	cpsie	i
 800b922:	60bb      	str	r3, [r7, #8]
}
 800b924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b926:	bf00      	nop
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0fc      	beq.n	800b928 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20000064 	.word	0x20000064

0800b940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b940:	4b07      	ldr	r3, [pc, #28]	; (800b960 <pxCurrentTCBConst2>)
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	6808      	ldr	r0, [r1, #0]
 800b946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	f380 8809 	msr	PSP, r0
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f04f 0000 	mov.w	r0, #0
 800b956:	f380 8811 	msr	BASEPRI, r0
 800b95a:	4770      	bx	lr
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst2>:
 800b960:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b968:	4808      	ldr	r0, [pc, #32]	; (800b98c <prvPortStartFirstTask+0x24>)
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f380 8808 	msr	MSP, r0
 800b972:	f04f 0000 	mov.w	r0, #0
 800b976:	f380 8814 	msr	CONTROL, r0
 800b97a:	b662      	cpsie	i
 800b97c:	b661      	cpsie	f
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	df00      	svc	0
 800b988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b98a:	bf00      	nop
 800b98c:	e000ed08 	.word	0xe000ed08

0800b990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b996:	4b37      	ldr	r3, [pc, #220]	; (800ba74 <xPortStartScheduler+0xe4>)
 800b998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	22ff      	movs	r2, #255	; 0xff
 800b9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	4b2f      	ldr	r3, [pc, #188]	; (800ba78 <xPortStartScheduler+0xe8>)
 800b9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9be:	4b2f      	ldr	r3, [pc, #188]	; (800ba7c <xPortStartScheduler+0xec>)
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9c4:	e009      	b.n	800b9da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ba7c <xPortStartScheduler+0xec>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	4a2b      	ldr	r2, [pc, #172]	; (800ba7c <xPortStartScheduler+0xec>)
 800b9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e2:	2b80      	cmp	r3, #128	; 0x80
 800b9e4:	d0ef      	beq.n	800b9c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9e6:	4b25      	ldr	r3, [pc, #148]	; (800ba7c <xPortStartScheduler+0xec>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f1c3 0307 	rsb	r3, r3, #7
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d00c      	beq.n	800ba0c <xPortStartScheduler+0x7c>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	b672      	cpsid	i
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	b662      	cpsie	i
 800ba06:	60bb      	str	r3, [r7, #8]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba0c:	4b1b      	ldr	r3, [pc, #108]	; (800ba7c <xPortStartScheduler+0xec>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	4a1a      	ldr	r2, [pc, #104]	; (800ba7c <xPortStartScheduler+0xec>)
 800ba14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba16:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <xPortStartScheduler+0xec>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba1e:	4a17      	ldr	r2, [pc, #92]	; (800ba7c <xPortStartScheduler+0xec>)
 800ba20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba2a:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <xPortStartScheduler+0xf0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a14      	ldr	r2, [pc, #80]	; (800ba80 <xPortStartScheduler+0xf0>)
 800ba30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba36:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <xPortStartScheduler+0xf0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <xPortStartScheduler+0xf0>)
 800ba3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba42:	f000 f8dd 	bl	800bc00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba46:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <xPortStartScheduler+0xf4>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba4c:	f000 f8fc 	bl	800bc48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba50:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <xPortStartScheduler+0xf8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a0c      	ldr	r2, [pc, #48]	; (800ba88 <xPortStartScheduler+0xf8>)
 800ba56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba5c:	f7ff ff84 	bl	800b968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba60:	f7fe ff84 	bl	800a96c <vTaskSwitchContext>
	prvTaskExitError();
 800ba64:	f7ff ff3c 	bl	800b8e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	e000e400 	.word	0xe000e400
 800ba78:	200015b4 	.word	0x200015b4
 800ba7c:	200015b8 	.word	0x200015b8
 800ba80:	e000ed20 	.word	0xe000ed20
 800ba84:	20000064 	.word	0x20000064
 800ba88:	e000ef34 	.word	0xe000ef34

0800ba8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	b672      	cpsid	i
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	b662      	cpsie	i
 800baa6:	607b      	str	r3, [r7, #4]
}
 800baa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baaa:	4b10      	ldr	r3, [pc, #64]	; (800baec <vPortEnterCritical+0x60>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3301      	adds	r3, #1
 800bab0:	4a0e      	ldr	r2, [pc, #56]	; (800baec <vPortEnterCritical+0x60>)
 800bab2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bab4:	4b0d      	ldr	r3, [pc, #52]	; (800baec <vPortEnterCritical+0x60>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d111      	bne.n	800bae0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800babc:	4b0c      	ldr	r3, [pc, #48]	; (800baf0 <vPortEnterCritical+0x64>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00c      	beq.n	800bae0 <vPortEnterCritical+0x54>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	b672      	cpsid	i
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	b662      	cpsie	i
 800bada:	603b      	str	r3, [r7, #0]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vPortEnterCritical+0x52>
	}
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	20000064 	.word	0x20000064
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bafa:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <vPortExitCritical+0x54>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10c      	bne.n	800bb1c <vPortExitCritical+0x28>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	b672      	cpsid	i
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	b662      	cpsie	i
 800bb16:	607b      	str	r3, [r7, #4]
}
 800bb18:	bf00      	nop
 800bb1a:	e7fe      	b.n	800bb1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <vPortExitCritical+0x54>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	4a09      	ldr	r2, [pc, #36]	; (800bb48 <vPortExitCritical+0x54>)
 800bb24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb26:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <vPortExitCritical+0x54>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d105      	bne.n	800bb3a <vPortExitCritical+0x46>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	f383 8811 	msr	BASEPRI, r3
}
 800bb38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20000064 	.word	0x20000064
 800bb4c:	00000000 	.word	0x00000000

0800bb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb50:	f3ef 8009 	mrs	r0, PSP
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <pxCurrentTCBConst>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f01e 0f10 	tst.w	lr, #16
 800bb60:	bf08      	it	eq
 800bb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb74:	b672      	cpsid	i
 800bb76:	f380 8811 	msr	BASEPRI, r0
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	b662      	cpsie	i
 800bb84:	f7fe fef2 	bl	800a96c <vTaskSwitchContext>
 800bb88:	f04f 0000 	mov.w	r0, #0
 800bb8c:	f380 8811 	msr	BASEPRI, r0
 800bb90:	bc09      	pop	{r0, r3}
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	6808      	ldr	r0, [r1, #0]
 800bb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9a:	f01e 0f10 	tst.w	lr, #16
 800bb9e:	bf08      	it	eq
 800bba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bba4:	f380 8809 	msr	PSP, r0
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop

0800bbb0 <pxCurrentTCBConst>:
 800bbb0:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	b672      	cpsid	i
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	b662      	cpsie	i
 800bbd2:	607b      	str	r3, [r7, #4]
}
 800bbd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbd6:	f7fe fe0d 	bl	800a7f4 <xTaskIncrementTick>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d003      	beq.n	800bbe8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbe0:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <SysTick_Handler+0x44>)
 800bbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	f383 8811 	msr	BASEPRI, r3
}
 800bbf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbf4:	bf00      	nop
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc00:	b480      	push	{r7}
 800bc02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc04:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <vPortSetupTimerInterrupt+0x34>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <vPortSetupTimerInterrupt+0x38>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <vPortSetupTimerInterrupt+0x3c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a0a      	ldr	r2, [pc, #40]	; (800bc40 <vPortSetupTimerInterrupt+0x40>)
 800bc16:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1a:	099b      	lsrs	r3, r3, #6
 800bc1c:	4a09      	ldr	r2, [pc, #36]	; (800bc44 <vPortSetupTimerInterrupt+0x44>)
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc22:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <vPortSetupTimerInterrupt+0x34>)
 800bc24:	2207      	movs	r2, #7
 800bc26:	601a      	str	r2, [r3, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	e000e010 	.word	0xe000e010
 800bc38:	e000e018 	.word	0xe000e018
 800bc3c:	20000058 	.word	0x20000058
 800bc40:	10624dd3 	.word	0x10624dd3
 800bc44:	e000e014 	.word	0xe000e014

0800bc48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc58 <vPortEnableVFP+0x10>
 800bc4c:	6801      	ldr	r1, [r0, #0]
 800bc4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc52:	6001      	str	r1, [r0, #0]
 800bc54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc56:	bf00      	nop
 800bc58:	e000ed88 	.word	0xe000ed88

0800bc5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc62:	f3ef 8305 	mrs	r3, IPSR
 800bc66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b0f      	cmp	r3, #15
 800bc6c:	d916      	bls.n	800bc9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc6e:	4a19      	ldr	r2, [pc, #100]	; (800bcd4 <vPortValidateInterruptPriority+0x78>)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <vPortValidateInterruptPriority+0x7c>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	7afa      	ldrb	r2, [r7, #11]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d20c      	bcs.n	800bc9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	607b      	str	r3, [r7, #4]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <vPortValidateInterruptPriority+0x80>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bca4:	4b0e      	ldr	r3, [pc, #56]	; (800bce0 <vPortValidateInterruptPriority+0x84>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d90c      	bls.n	800bcc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	b672      	cpsid	i
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	b662      	cpsie	i
 800bcc0:	603b      	str	r3, [r7, #0]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <vPortValidateInterruptPriority+0x68>
	}
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	e000e3f0 	.word	0xe000e3f0
 800bcd8:	200015b4 	.word	0x200015b4
 800bcdc:	e000ed0c 	.word	0xe000ed0c
 800bce0:	200015b8 	.word	0x200015b8

0800bce4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	; 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bcf0:	f7fe fcc2 	bl	800a678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bcf4:	4b5b      	ldr	r3, [pc, #364]	; (800be64 <pvPortMalloc+0x180>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcfc:	f000 f91a 	bl	800bf34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd00:	4b59      	ldr	r3, [pc, #356]	; (800be68 <pvPortMalloc+0x184>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4013      	ands	r3, r2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f040 8092 	bne.w	800be32 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01f      	beq.n	800bd54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bd14:	2208      	movs	r2, #8
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4413      	add	r3, r2
 800bd1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f003 0307 	and.w	r3, r3, #7
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d016      	beq.n	800bd54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00c      	beq.n	800bd54 <pvPortMalloc+0x70>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	b672      	cpsid	i
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	b662      	cpsie	i
 800bd4e:	617b      	str	r3, [r7, #20]
}
 800bd50:	bf00      	nop
 800bd52:	e7fe      	b.n	800bd52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d06b      	beq.n	800be32 <pvPortMalloc+0x14e>
 800bd5a:	4b44      	ldr	r3, [pc, #272]	; (800be6c <pvPortMalloc+0x188>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d866      	bhi.n	800be32 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd64:	4b42      	ldr	r3, [pc, #264]	; (800be70 <pvPortMalloc+0x18c>)
 800bd66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd68:	4b41      	ldr	r3, [pc, #260]	; (800be70 <pvPortMalloc+0x18c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd6e:	e004      	b.n	800bd7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d903      	bls.n	800bd8c <pvPortMalloc+0xa8>
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1f1      	bne.n	800bd70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd8c:	4b35      	ldr	r3, [pc, #212]	; (800be64 <pvPortMalloc+0x180>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d04d      	beq.n	800be32 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	4413      	add	r3, r2
 800bd9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	1ad2      	subs	r2, r2, r3
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d921      	bls.n	800bdfc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00c      	beq.n	800bde4 <pvPortMalloc+0x100>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	b672      	cpsid	i
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	b662      	cpsie	i
 800bdde:	613b      	str	r3, [r7, #16]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdf6:	69b8      	ldr	r0, [r7, #24]
 800bdf8:	f000 f8fe 	bl	800bff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdfc:	4b1b      	ldr	r3, [pc, #108]	; (800be6c <pvPortMalloc+0x188>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	4a19      	ldr	r2, [pc, #100]	; (800be6c <pvPortMalloc+0x188>)
 800be08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be0a:	4b18      	ldr	r3, [pc, #96]	; (800be6c <pvPortMalloc+0x188>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4b19      	ldr	r3, [pc, #100]	; (800be74 <pvPortMalloc+0x190>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d203      	bcs.n	800be1e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be16:	4b15      	ldr	r3, [pc, #84]	; (800be6c <pvPortMalloc+0x188>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a16      	ldr	r2, [pc, #88]	; (800be74 <pvPortMalloc+0x190>)
 800be1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	4b11      	ldr	r3, [pc, #68]	; (800be68 <pvPortMalloc+0x184>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	431a      	orrs	r2, r3
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be32:	f7fe fc2f 	bl	800a694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00c      	beq.n	800be5a <pvPortMalloc+0x176>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	b672      	cpsid	i
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	b662      	cpsie	i
 800be54:	60fb      	str	r3, [r7, #12]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <pvPortMalloc+0x174>
	return pvReturn;
 800be5a:	69fb      	ldr	r3, [r7, #28]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3728      	adds	r7, #40	; 0x28
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200051c4 	.word	0x200051c4
 800be68:	200051d0 	.word	0x200051d0
 800be6c:	200051c8 	.word	0x200051c8
 800be70:	200051bc 	.word	0x200051bc
 800be74:	200051cc 	.word	0x200051cc

0800be78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d04c      	beq.n	800bf24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be8a:	2308      	movs	r3, #8
 800be8c:	425b      	negs	r3, r3
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4413      	add	r3, r2
 800be92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <vPortFree+0xb4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4013      	ands	r3, r2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10c      	bne.n	800bec0 <vPortFree+0x48>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	b672      	cpsid	i
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	b662      	cpsie	i
 800beba:	60fb      	str	r3, [r7, #12]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00c      	beq.n	800bee2 <vPortFree+0x6a>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	b672      	cpsid	i
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	b662      	cpsie	i
 800bedc:	60bb      	str	r3, [r7, #8]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <vPortFree+0xb4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4013      	ands	r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d019      	beq.n	800bf24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d115      	bne.n	800bf24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <vPortFree+0xb4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	43db      	mvns	r3, r3
 800bf02:	401a      	ands	r2, r3
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf08:	f7fe fbb6 	bl	800a678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <vPortFree+0xb8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4413      	add	r3, r2
 800bf16:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <vPortFree+0xb8>)
 800bf18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf1a:	6938      	ldr	r0, [r7, #16]
 800bf1c:	f000 f86c 	bl	800bff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bf20:	f7fe fbb8 	bl	800a694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	200051d0 	.word	0x200051d0
 800bf30:	200051c8 	.word	0x200051c8

0800bf34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf40:	4b27      	ldr	r3, [pc, #156]	; (800bfe0 <prvHeapInit+0xac>)
 800bf42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f003 0307 	and.w	r3, r3, #7
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00c      	beq.n	800bf68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	4a1f      	ldr	r2, [pc, #124]	; (800bfe0 <prvHeapInit+0xac>)
 800bf64:	4413      	add	r3, r2
 800bf66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf80:	2208      	movs	r2, #8
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0307 	bic.w	r3, r3, #7
 800bf8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a15      	ldr	r2, [pc, #84]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf9e:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfb4:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <prvHeapInit+0xb8>)
 800bfc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <prvHeapInit+0xbc>)
 800bfca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <prvHeapInit+0xc0>)
 800bfce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfd2:	601a      	str	r2, [r3, #0]
}
 800bfd4:	bf00      	nop
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	200015bc 	.word	0x200015bc
 800bfe4:	200051bc 	.word	0x200051bc
 800bfe8:	200051c4 	.word	0x200051c4
 800bfec:	200051cc 	.word	0x200051cc
 800bff0:	200051c8 	.word	0x200051c8
 800bff4:	200051d0 	.word	0x200051d0

0800bff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c000:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <prvInsertBlockIntoFreeList+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e002      	b.n	800c00c <prvInsertBlockIntoFreeList+0x14>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d8f7      	bhi.n	800c006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	4413      	add	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d108      	bne.n	800c03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	441a      	add	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d118      	bne.n	800c080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d00d      	beq.n	800c076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	441a      	add	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	e008      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e003      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d002      	beq.n	800c096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c096:	bf00      	nop
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	200051bc 	.word	0x200051bc
 800c0a8:	200051c4 	.word	0x200051c4

0800c0ac <std>:
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	b510      	push	{r4, lr}
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ba:	6083      	str	r3, [r0, #8]
 800c0bc:	8181      	strh	r1, [r0, #12]
 800c0be:	6643      	str	r3, [r0, #100]	; 0x64
 800c0c0:	81c2      	strh	r2, [r0, #14]
 800c0c2:	6183      	str	r3, [r0, #24]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	2208      	movs	r2, #8
 800c0c8:	305c      	adds	r0, #92	; 0x5c
 800c0ca:	f000 f8f4 	bl	800c2b6 <memset>
 800c0ce:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <std+0x38>)
 800c0d0:	6263      	str	r3, [r4, #36]	; 0x24
 800c0d2:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <std+0x3c>)
 800c0d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <std+0x40>)
 800c0d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0da:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <std+0x44>)
 800c0dc:	6224      	str	r4, [r4, #32]
 800c0de:	6323      	str	r3, [r4, #48]	; 0x30
 800c0e0:	bd10      	pop	{r4, pc}
 800c0e2:	bf00      	nop
 800c0e4:	0800c231 	.word	0x0800c231
 800c0e8:	0800c253 	.word	0x0800c253
 800c0ec:	0800c28b 	.word	0x0800c28b
 800c0f0:	0800c2af 	.word	0x0800c2af

0800c0f4 <stdio_exit_handler>:
 800c0f4:	4a02      	ldr	r2, [pc, #8]	; (800c100 <stdio_exit_handler+0xc>)
 800c0f6:	4903      	ldr	r1, [pc, #12]	; (800c104 <stdio_exit_handler+0x10>)
 800c0f8:	4803      	ldr	r0, [pc, #12]	; (800c108 <stdio_exit_handler+0x14>)
 800c0fa:	f000 b869 	b.w	800c1d0 <_fwalk_sglue>
 800c0fe:	bf00      	nop
 800c100:	20000068 	.word	0x20000068
 800c104:	0800cd49 	.word	0x0800cd49
 800c108:	20000074 	.word	0x20000074

0800c10c <cleanup_stdio>:
 800c10c:	6841      	ldr	r1, [r0, #4]
 800c10e:	4b0c      	ldr	r3, [pc, #48]	; (800c140 <cleanup_stdio+0x34>)
 800c110:	4299      	cmp	r1, r3
 800c112:	b510      	push	{r4, lr}
 800c114:	4604      	mov	r4, r0
 800c116:	d001      	beq.n	800c11c <cleanup_stdio+0x10>
 800c118:	f000 fe16 	bl	800cd48 <_fflush_r>
 800c11c:	68a1      	ldr	r1, [r4, #8]
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <cleanup_stdio+0x38>)
 800c120:	4299      	cmp	r1, r3
 800c122:	d002      	beq.n	800c12a <cleanup_stdio+0x1e>
 800c124:	4620      	mov	r0, r4
 800c126:	f000 fe0f 	bl	800cd48 <_fflush_r>
 800c12a:	68e1      	ldr	r1, [r4, #12]
 800c12c:	4b06      	ldr	r3, [pc, #24]	; (800c148 <cleanup_stdio+0x3c>)
 800c12e:	4299      	cmp	r1, r3
 800c130:	d004      	beq.n	800c13c <cleanup_stdio+0x30>
 800c132:	4620      	mov	r0, r4
 800c134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c138:	f000 be06 	b.w	800cd48 <_fflush_r>
 800c13c:	bd10      	pop	{r4, pc}
 800c13e:	bf00      	nop
 800c140:	200051d4 	.word	0x200051d4
 800c144:	2000523c 	.word	0x2000523c
 800c148:	200052a4 	.word	0x200052a4

0800c14c <global_stdio_init.part.0>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	4b0b      	ldr	r3, [pc, #44]	; (800c17c <global_stdio_init.part.0+0x30>)
 800c150:	4c0b      	ldr	r4, [pc, #44]	; (800c180 <global_stdio_init.part.0+0x34>)
 800c152:	4a0c      	ldr	r2, [pc, #48]	; (800c184 <global_stdio_init.part.0+0x38>)
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	4620      	mov	r0, r4
 800c158:	2200      	movs	r2, #0
 800c15a:	2104      	movs	r1, #4
 800c15c:	f7ff ffa6 	bl	800c0ac <std>
 800c160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c164:	2201      	movs	r2, #1
 800c166:	2109      	movs	r1, #9
 800c168:	f7ff ffa0 	bl	800c0ac <std>
 800c16c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c170:	2202      	movs	r2, #2
 800c172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c176:	2112      	movs	r1, #18
 800c178:	f7ff bf98 	b.w	800c0ac <std>
 800c17c:	2000530c 	.word	0x2000530c
 800c180:	200051d4 	.word	0x200051d4
 800c184:	0800c0f5 	.word	0x0800c0f5

0800c188 <__sfp_lock_acquire>:
 800c188:	4801      	ldr	r0, [pc, #4]	; (800c190 <__sfp_lock_acquire+0x8>)
 800c18a:	f000 b97b 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800c18e:	bf00      	nop
 800c190:	20005315 	.word	0x20005315

0800c194 <__sfp_lock_release>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__sfp_lock_release+0x8>)
 800c196:	f000 b976 	b.w	800c486 <__retarget_lock_release_recursive>
 800c19a:	bf00      	nop
 800c19c:	20005315 	.word	0x20005315

0800c1a0 <__sinit>:
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	f7ff fff0 	bl	800c188 <__sfp_lock_acquire>
 800c1a8:	6a23      	ldr	r3, [r4, #32]
 800c1aa:	b11b      	cbz	r3, 800c1b4 <__sinit+0x14>
 800c1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1b0:	f7ff bff0 	b.w	800c194 <__sfp_lock_release>
 800c1b4:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <__sinit+0x28>)
 800c1b6:	6223      	str	r3, [r4, #32]
 800c1b8:	4b04      	ldr	r3, [pc, #16]	; (800c1cc <__sinit+0x2c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1f5      	bne.n	800c1ac <__sinit+0xc>
 800c1c0:	f7ff ffc4 	bl	800c14c <global_stdio_init.part.0>
 800c1c4:	e7f2      	b.n	800c1ac <__sinit+0xc>
 800c1c6:	bf00      	nop
 800c1c8:	0800c10d 	.word	0x0800c10d
 800c1cc:	2000530c 	.word	0x2000530c

0800c1d0 <_fwalk_sglue>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	4607      	mov	r7, r0
 800c1d6:	4688      	mov	r8, r1
 800c1d8:	4614      	mov	r4, r2
 800c1da:	2600      	movs	r6, #0
 800c1dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c1e4:	d505      	bpl.n	800c1f2 <_fwalk_sglue+0x22>
 800c1e6:	6824      	ldr	r4, [r4, #0]
 800c1e8:	2c00      	cmp	r4, #0
 800c1ea:	d1f7      	bne.n	800c1dc <_fwalk_sglue+0xc>
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	89ab      	ldrh	r3, [r5, #12]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d907      	bls.n	800c208 <_fwalk_sglue+0x38>
 800c1f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	d003      	beq.n	800c208 <_fwalk_sglue+0x38>
 800c200:	4629      	mov	r1, r5
 800c202:	4638      	mov	r0, r7
 800c204:	47c0      	blx	r8
 800c206:	4306      	orrs	r6, r0
 800c208:	3568      	adds	r5, #104	; 0x68
 800c20a:	e7e9      	b.n	800c1e0 <_fwalk_sglue+0x10>

0800c20c <iprintf>:
 800c20c:	b40f      	push	{r0, r1, r2, r3}
 800c20e:	b507      	push	{r0, r1, r2, lr}
 800c210:	4906      	ldr	r1, [pc, #24]	; (800c22c <iprintf+0x20>)
 800c212:	ab04      	add	r3, sp, #16
 800c214:	6808      	ldr	r0, [r1, #0]
 800c216:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21a:	6881      	ldr	r1, [r0, #8]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f000 fa63 	bl	800c6e8 <_vfiprintf_r>
 800c222:	b003      	add	sp, #12
 800c224:	f85d eb04 	ldr.w	lr, [sp], #4
 800c228:	b004      	add	sp, #16
 800c22a:	4770      	bx	lr
 800c22c:	200000c0 	.word	0x200000c0

0800c230 <__sread>:
 800c230:	b510      	push	{r4, lr}
 800c232:	460c      	mov	r4, r1
 800c234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c238:	f000 f8d2 	bl	800c3e0 <_read_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	bfab      	itete	ge
 800c240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c242:	89a3      	ldrhlt	r3, [r4, #12]
 800c244:	181b      	addge	r3, r3, r0
 800c246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c24a:	bfac      	ite	ge
 800c24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c24e:	81a3      	strhlt	r3, [r4, #12]
 800c250:	bd10      	pop	{r4, pc}

0800c252 <__swrite>:
 800c252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c256:	461f      	mov	r7, r3
 800c258:	898b      	ldrh	r3, [r1, #12]
 800c25a:	05db      	lsls	r3, r3, #23
 800c25c:	4605      	mov	r5, r0
 800c25e:	460c      	mov	r4, r1
 800c260:	4616      	mov	r6, r2
 800c262:	d505      	bpl.n	800c270 <__swrite+0x1e>
 800c264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c268:	2302      	movs	r3, #2
 800c26a:	2200      	movs	r2, #0
 800c26c:	f000 f8a6 	bl	800c3bc <_lseek_r>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	4632      	mov	r2, r6
 800c27e:	463b      	mov	r3, r7
 800c280:	4628      	mov	r0, r5
 800c282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c286:	f000 b8c1 	b.w	800c40c <_write_r>

0800c28a <__sseek>:
 800c28a:	b510      	push	{r4, lr}
 800c28c:	460c      	mov	r4, r1
 800c28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c292:	f000 f893 	bl	800c3bc <_lseek_r>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	bf15      	itete	ne
 800c29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2a6:	81a3      	strheq	r3, [r4, #12]
 800c2a8:	bf18      	it	ne
 800c2aa:	81a3      	strhne	r3, [r4, #12]
 800c2ac:	bd10      	pop	{r4, pc}

0800c2ae <__sclose>:
 800c2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b2:	f000 b81d 	b.w	800c2f0 <_close_r>

0800c2b6 <memset>:
 800c2b6:	4402      	add	r2, r0
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d100      	bne.n	800c2c0 <memset+0xa>
 800c2be:	4770      	bx	lr
 800c2c0:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c4:	e7f9      	b.n	800c2ba <memset+0x4>
	...

0800c2c8 <clock>:
 800c2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ca:	4b08      	ldr	r3, [pc, #32]	; (800c2ec <clock+0x24>)
 800c2cc:	4669      	mov	r1, sp
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	f000 f898 	bl	800c404 <_times_r>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d006      	beq.n	800c2e6 <clock+0x1e>
 800c2d8:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c2dc:	4418      	add	r0, r3
 800c2de:	9b02      	ldr	r3, [sp, #8]
 800c2e0:	4418      	add	r0, r3
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	4418      	add	r0, r3
 800c2e6:	b005      	add	sp, #20
 800c2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2ec:	200000c0 	.word	0x200000c0

0800c2f0 <_close_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	; (800c30c <_close_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f6 f9d5 	bl	80026aa <_close>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_close_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_close_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20005310 	.word	0x20005310

0800c310 <_reclaim_reent>:
 800c310:	4b29      	ldr	r3, [pc, #164]	; (800c3b8 <_reclaim_reent+0xa8>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4283      	cmp	r3, r0
 800c316:	b570      	push	{r4, r5, r6, lr}
 800c318:	4604      	mov	r4, r0
 800c31a:	d04b      	beq.n	800c3b4 <_reclaim_reent+0xa4>
 800c31c:	69c3      	ldr	r3, [r0, #28]
 800c31e:	b143      	cbz	r3, 800c332 <_reclaim_reent+0x22>
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d144      	bne.n	800c3b0 <_reclaim_reent+0xa0>
 800c326:	69e3      	ldr	r3, [r4, #28]
 800c328:	6819      	ldr	r1, [r3, #0]
 800c32a:	b111      	cbz	r1, 800c332 <_reclaim_reent+0x22>
 800c32c:	4620      	mov	r0, r4
 800c32e:	f000 f8b9 	bl	800c4a4 <_free_r>
 800c332:	6961      	ldr	r1, [r4, #20]
 800c334:	b111      	cbz	r1, 800c33c <_reclaim_reent+0x2c>
 800c336:	4620      	mov	r0, r4
 800c338:	f000 f8b4 	bl	800c4a4 <_free_r>
 800c33c:	69e1      	ldr	r1, [r4, #28]
 800c33e:	b111      	cbz	r1, 800c346 <_reclaim_reent+0x36>
 800c340:	4620      	mov	r0, r4
 800c342:	f000 f8af 	bl	800c4a4 <_free_r>
 800c346:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c348:	b111      	cbz	r1, 800c350 <_reclaim_reent+0x40>
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f8aa 	bl	800c4a4 <_free_r>
 800c350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c352:	b111      	cbz	r1, 800c35a <_reclaim_reent+0x4a>
 800c354:	4620      	mov	r0, r4
 800c356:	f000 f8a5 	bl	800c4a4 <_free_r>
 800c35a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c35c:	b111      	cbz	r1, 800c364 <_reclaim_reent+0x54>
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 f8a0 	bl	800c4a4 <_free_r>
 800c364:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c366:	b111      	cbz	r1, 800c36e <_reclaim_reent+0x5e>
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 f89b 	bl	800c4a4 <_free_r>
 800c36e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c370:	b111      	cbz	r1, 800c378 <_reclaim_reent+0x68>
 800c372:	4620      	mov	r0, r4
 800c374:	f000 f896 	bl	800c4a4 <_free_r>
 800c378:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c37a:	b111      	cbz	r1, 800c382 <_reclaim_reent+0x72>
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 f891 	bl	800c4a4 <_free_r>
 800c382:	6a23      	ldr	r3, [r4, #32]
 800c384:	b1b3      	cbz	r3, 800c3b4 <_reclaim_reent+0xa4>
 800c386:	4620      	mov	r0, r4
 800c388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c38c:	4718      	bx	r3
 800c38e:	5949      	ldr	r1, [r1, r5]
 800c390:	b941      	cbnz	r1, 800c3a4 <_reclaim_reent+0x94>
 800c392:	3504      	adds	r5, #4
 800c394:	69e3      	ldr	r3, [r4, #28]
 800c396:	2d80      	cmp	r5, #128	; 0x80
 800c398:	68d9      	ldr	r1, [r3, #12]
 800c39a:	d1f8      	bne.n	800c38e <_reclaim_reent+0x7e>
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f881 	bl	800c4a4 <_free_r>
 800c3a2:	e7c0      	b.n	800c326 <_reclaim_reent+0x16>
 800c3a4:	680e      	ldr	r6, [r1, #0]
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f000 f87c 	bl	800c4a4 <_free_r>
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	e7ef      	b.n	800c390 <_reclaim_reent+0x80>
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e7ef      	b.n	800c394 <_reclaim_reent+0x84>
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}
 800c3b6:	bf00      	nop
 800c3b8:	200000c0 	.word	0x200000c0

0800c3bc <_lseek_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d07      	ldr	r5, [pc, #28]	; (800c3dc <_lseek_r+0x20>)
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	602a      	str	r2, [r5, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f7f6 f994 	bl	80026f8 <_lseek>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_lseek_r+0x1e>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_lseek_r+0x1e>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20005310 	.word	0x20005310

0800c3e0 <_read_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	; (800c400 <_read_r+0x20>)
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	4608      	mov	r0, r1
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	602a      	str	r2, [r5, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f7f6 f922 	bl	8002638 <_read>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_read_r+0x1e>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_read_r+0x1e>
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20005310 	.word	0x20005310

0800c404 <_times_r>:
 800c404:	4608      	mov	r0, r1
 800c406:	f7f6 b984 	b.w	8002712 <_times>
	...

0800c40c <_write_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	; (800c42c <_write_r+0x20>)
 800c410:	4604      	mov	r4, r0
 800c412:	4608      	mov	r0, r1
 800c414:	4611      	mov	r1, r2
 800c416:	2200      	movs	r2, #0
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	461a      	mov	r2, r3
 800c41c:	f7f6 f929 	bl	8002672 <_write>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_write_r+0x1e>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_write_r+0x1e>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	20005310 	.word	0x20005310

0800c430 <__errno>:
 800c430:	4b01      	ldr	r3, [pc, #4]	; (800c438 <__errno+0x8>)
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	200000c0 	.word	0x200000c0

0800c43c <__libc_init_array>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4d0d      	ldr	r5, [pc, #52]	; (800c474 <__libc_init_array+0x38>)
 800c440:	4c0d      	ldr	r4, [pc, #52]	; (800c478 <__libc_init_array+0x3c>)
 800c442:	1b64      	subs	r4, r4, r5
 800c444:	10a4      	asrs	r4, r4, #2
 800c446:	2600      	movs	r6, #0
 800c448:	42a6      	cmp	r6, r4
 800c44a:	d109      	bne.n	800c460 <__libc_init_array+0x24>
 800c44c:	4d0b      	ldr	r5, [pc, #44]	; (800c47c <__libc_init_array+0x40>)
 800c44e:	4c0c      	ldr	r4, [pc, #48]	; (800c480 <__libc_init_array+0x44>)
 800c450:	f000 fdcc 	bl	800cfec <_init>
 800c454:	1b64      	subs	r4, r4, r5
 800c456:	10a4      	asrs	r4, r4, #2
 800c458:	2600      	movs	r6, #0
 800c45a:	42a6      	cmp	r6, r4
 800c45c:	d105      	bne.n	800c46a <__libc_init_array+0x2e>
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	f855 3b04 	ldr.w	r3, [r5], #4
 800c464:	4798      	blx	r3
 800c466:	3601      	adds	r6, #1
 800c468:	e7ee      	b.n	800c448 <__libc_init_array+0xc>
 800c46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46e:	4798      	blx	r3
 800c470:	3601      	adds	r6, #1
 800c472:	e7f2      	b.n	800c45a <__libc_init_array+0x1e>
 800c474:	0800ea1c 	.word	0x0800ea1c
 800c478:	0800ea1c 	.word	0x0800ea1c
 800c47c:	0800ea1c 	.word	0x0800ea1c
 800c480:	0800ea20 	.word	0x0800ea20

0800c484 <__retarget_lock_acquire_recursive>:
 800c484:	4770      	bx	lr

0800c486 <__retarget_lock_release_recursive>:
 800c486:	4770      	bx	lr

0800c488 <memcpy>:
 800c488:	440a      	add	r2, r1
 800c48a:	4291      	cmp	r1, r2
 800c48c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c490:	d100      	bne.n	800c494 <memcpy+0xc>
 800c492:	4770      	bx	lr
 800c494:	b510      	push	{r4, lr}
 800c496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c49a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c49e:	4291      	cmp	r1, r2
 800c4a0:	d1f9      	bne.n	800c496 <memcpy+0xe>
 800c4a2:	bd10      	pop	{r4, pc}

0800c4a4 <_free_r>:
 800c4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4a6:	2900      	cmp	r1, #0
 800c4a8:	d044      	beq.n	800c534 <_free_r+0x90>
 800c4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ae:	9001      	str	r0, [sp, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4b6:	bfb8      	it	lt
 800c4b8:	18e4      	addlt	r4, r4, r3
 800c4ba:	f000 f8df 	bl	800c67c <__malloc_lock>
 800c4be:	4a1e      	ldr	r2, [pc, #120]	; (800c538 <_free_r+0x94>)
 800c4c0:	9801      	ldr	r0, [sp, #4]
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	b933      	cbnz	r3, 800c4d4 <_free_r+0x30>
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	6014      	str	r4, [r2, #0]
 800c4ca:	b003      	add	sp, #12
 800c4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4d0:	f000 b8da 	b.w	800c688 <__malloc_unlock>
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	d908      	bls.n	800c4ea <_free_r+0x46>
 800c4d8:	6825      	ldr	r5, [r4, #0]
 800c4da:	1961      	adds	r1, r4, r5
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	bf01      	itttt	eq
 800c4e0:	6819      	ldreq	r1, [r3, #0]
 800c4e2:	685b      	ldreq	r3, [r3, #4]
 800c4e4:	1949      	addeq	r1, r1, r5
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	e7ed      	b.n	800c4c6 <_free_r+0x22>
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	b10b      	cbz	r3, 800c4f4 <_free_r+0x50>
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	d9fa      	bls.n	800c4ea <_free_r+0x46>
 800c4f4:	6811      	ldr	r1, [r2, #0]
 800c4f6:	1855      	adds	r5, r2, r1
 800c4f8:	42a5      	cmp	r5, r4
 800c4fa:	d10b      	bne.n	800c514 <_free_r+0x70>
 800c4fc:	6824      	ldr	r4, [r4, #0]
 800c4fe:	4421      	add	r1, r4
 800c500:	1854      	adds	r4, r2, r1
 800c502:	42a3      	cmp	r3, r4
 800c504:	6011      	str	r1, [r2, #0]
 800c506:	d1e0      	bne.n	800c4ca <_free_r+0x26>
 800c508:	681c      	ldr	r4, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	6053      	str	r3, [r2, #4]
 800c50e:	440c      	add	r4, r1
 800c510:	6014      	str	r4, [r2, #0]
 800c512:	e7da      	b.n	800c4ca <_free_r+0x26>
 800c514:	d902      	bls.n	800c51c <_free_r+0x78>
 800c516:	230c      	movs	r3, #12
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	e7d6      	b.n	800c4ca <_free_r+0x26>
 800c51c:	6825      	ldr	r5, [r4, #0]
 800c51e:	1961      	adds	r1, r4, r5
 800c520:	428b      	cmp	r3, r1
 800c522:	bf04      	itt	eq
 800c524:	6819      	ldreq	r1, [r3, #0]
 800c526:	685b      	ldreq	r3, [r3, #4]
 800c528:	6063      	str	r3, [r4, #4]
 800c52a:	bf04      	itt	eq
 800c52c:	1949      	addeq	r1, r1, r5
 800c52e:	6021      	streq	r1, [r4, #0]
 800c530:	6054      	str	r4, [r2, #4]
 800c532:	e7ca      	b.n	800c4ca <_free_r+0x26>
 800c534:	b003      	add	sp, #12
 800c536:	bd30      	pop	{r4, r5, pc}
 800c538:	20005318 	.word	0x20005318

0800c53c <sbrk_aligned>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	4e0e      	ldr	r6, [pc, #56]	; (800c578 <sbrk_aligned+0x3c>)
 800c540:	460c      	mov	r4, r1
 800c542:	6831      	ldr	r1, [r6, #0]
 800c544:	4605      	mov	r5, r0
 800c546:	b911      	cbnz	r1, 800c54e <sbrk_aligned+0x12>
 800c548:	f000 fcbc 	bl	800cec4 <_sbrk_r>
 800c54c:	6030      	str	r0, [r6, #0]
 800c54e:	4621      	mov	r1, r4
 800c550:	4628      	mov	r0, r5
 800c552:	f000 fcb7 	bl	800cec4 <_sbrk_r>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d00a      	beq.n	800c570 <sbrk_aligned+0x34>
 800c55a:	1cc4      	adds	r4, r0, #3
 800c55c:	f024 0403 	bic.w	r4, r4, #3
 800c560:	42a0      	cmp	r0, r4
 800c562:	d007      	beq.n	800c574 <sbrk_aligned+0x38>
 800c564:	1a21      	subs	r1, r4, r0
 800c566:	4628      	mov	r0, r5
 800c568:	f000 fcac 	bl	800cec4 <_sbrk_r>
 800c56c:	3001      	adds	r0, #1
 800c56e:	d101      	bne.n	800c574 <sbrk_aligned+0x38>
 800c570:	f04f 34ff 	mov.w	r4, #4294967295
 800c574:	4620      	mov	r0, r4
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	2000531c 	.word	0x2000531c

0800c57c <_malloc_r>:
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	1ccd      	adds	r5, r1, #3
 800c582:	f025 0503 	bic.w	r5, r5, #3
 800c586:	3508      	adds	r5, #8
 800c588:	2d0c      	cmp	r5, #12
 800c58a:	bf38      	it	cc
 800c58c:	250c      	movcc	r5, #12
 800c58e:	2d00      	cmp	r5, #0
 800c590:	4607      	mov	r7, r0
 800c592:	db01      	blt.n	800c598 <_malloc_r+0x1c>
 800c594:	42a9      	cmp	r1, r5
 800c596:	d905      	bls.n	800c5a4 <_malloc_r+0x28>
 800c598:	230c      	movs	r3, #12
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	2600      	movs	r6, #0
 800c59e:	4630      	mov	r0, r6
 800c5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c678 <_malloc_r+0xfc>
 800c5a8:	f000 f868 	bl	800c67c <__malloc_lock>
 800c5ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b0:	461c      	mov	r4, r3
 800c5b2:	bb5c      	cbnz	r4, 800c60c <_malloc_r+0x90>
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	f7ff ffc0 	bl	800c53c <sbrk_aligned>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	4604      	mov	r4, r0
 800c5c0:	d155      	bne.n	800c66e <_malloc_r+0xf2>
 800c5c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c5c6:	4626      	mov	r6, r4
 800c5c8:	2e00      	cmp	r6, #0
 800c5ca:	d145      	bne.n	800c658 <_malloc_r+0xdc>
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	d048      	beq.n	800c662 <_malloc_r+0xe6>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	eb04 0903 	add.w	r9, r4, r3
 800c5da:	f000 fc73 	bl	800cec4 <_sbrk_r>
 800c5de:	4581      	cmp	r9, r0
 800c5e0:	d13f      	bne.n	800c662 <_malloc_r+0xe6>
 800c5e2:	6821      	ldr	r1, [r4, #0]
 800c5e4:	1a6d      	subs	r5, r5, r1
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	f7ff ffa7 	bl	800c53c <sbrk_aligned>
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	d037      	beq.n	800c662 <_malloc_r+0xe6>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	442b      	add	r3, r5
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d038      	beq.n	800c672 <_malloc_r+0xf6>
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	42a2      	cmp	r2, r4
 800c604:	d12b      	bne.n	800c65e <_malloc_r+0xe2>
 800c606:	2200      	movs	r2, #0
 800c608:	605a      	str	r2, [r3, #4]
 800c60a:	e00f      	b.n	800c62c <_malloc_r+0xb0>
 800c60c:	6822      	ldr	r2, [r4, #0]
 800c60e:	1b52      	subs	r2, r2, r5
 800c610:	d41f      	bmi.n	800c652 <_malloc_r+0xd6>
 800c612:	2a0b      	cmp	r2, #11
 800c614:	d917      	bls.n	800c646 <_malloc_r+0xca>
 800c616:	1961      	adds	r1, r4, r5
 800c618:	42a3      	cmp	r3, r4
 800c61a:	6025      	str	r5, [r4, #0]
 800c61c:	bf18      	it	ne
 800c61e:	6059      	strne	r1, [r3, #4]
 800c620:	6863      	ldr	r3, [r4, #4]
 800c622:	bf08      	it	eq
 800c624:	f8c8 1000 	streq.w	r1, [r8]
 800c628:	5162      	str	r2, [r4, r5]
 800c62a:	604b      	str	r3, [r1, #4]
 800c62c:	4638      	mov	r0, r7
 800c62e:	f104 060b 	add.w	r6, r4, #11
 800c632:	f000 f829 	bl	800c688 <__malloc_unlock>
 800c636:	f026 0607 	bic.w	r6, r6, #7
 800c63a:	1d23      	adds	r3, r4, #4
 800c63c:	1af2      	subs	r2, r6, r3
 800c63e:	d0ae      	beq.n	800c59e <_malloc_r+0x22>
 800c640:	1b9b      	subs	r3, r3, r6
 800c642:	50a3      	str	r3, [r4, r2]
 800c644:	e7ab      	b.n	800c59e <_malloc_r+0x22>
 800c646:	42a3      	cmp	r3, r4
 800c648:	6862      	ldr	r2, [r4, #4]
 800c64a:	d1dd      	bne.n	800c608 <_malloc_r+0x8c>
 800c64c:	f8c8 2000 	str.w	r2, [r8]
 800c650:	e7ec      	b.n	800c62c <_malloc_r+0xb0>
 800c652:	4623      	mov	r3, r4
 800c654:	6864      	ldr	r4, [r4, #4]
 800c656:	e7ac      	b.n	800c5b2 <_malloc_r+0x36>
 800c658:	4634      	mov	r4, r6
 800c65a:	6876      	ldr	r6, [r6, #4]
 800c65c:	e7b4      	b.n	800c5c8 <_malloc_r+0x4c>
 800c65e:	4613      	mov	r3, r2
 800c660:	e7cc      	b.n	800c5fc <_malloc_r+0x80>
 800c662:	230c      	movs	r3, #12
 800c664:	603b      	str	r3, [r7, #0]
 800c666:	4638      	mov	r0, r7
 800c668:	f000 f80e 	bl	800c688 <__malloc_unlock>
 800c66c:	e797      	b.n	800c59e <_malloc_r+0x22>
 800c66e:	6025      	str	r5, [r4, #0]
 800c670:	e7dc      	b.n	800c62c <_malloc_r+0xb0>
 800c672:	605b      	str	r3, [r3, #4]
 800c674:	deff      	udf	#255	; 0xff
 800c676:	bf00      	nop
 800c678:	20005318 	.word	0x20005318

0800c67c <__malloc_lock>:
 800c67c:	4801      	ldr	r0, [pc, #4]	; (800c684 <__malloc_lock+0x8>)
 800c67e:	f7ff bf01 	b.w	800c484 <__retarget_lock_acquire_recursive>
 800c682:	bf00      	nop
 800c684:	20005314 	.word	0x20005314

0800c688 <__malloc_unlock>:
 800c688:	4801      	ldr	r0, [pc, #4]	; (800c690 <__malloc_unlock+0x8>)
 800c68a:	f7ff befc 	b.w	800c486 <__retarget_lock_release_recursive>
 800c68e:	bf00      	nop
 800c690:	20005314 	.word	0x20005314

0800c694 <__sfputc_r>:
 800c694:	6893      	ldr	r3, [r2, #8]
 800c696:	3b01      	subs	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	b410      	push	{r4}
 800c69c:	6093      	str	r3, [r2, #8]
 800c69e:	da08      	bge.n	800c6b2 <__sfputc_r+0x1e>
 800c6a0:	6994      	ldr	r4, [r2, #24]
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	db01      	blt.n	800c6aa <__sfputc_r+0x16>
 800c6a6:	290a      	cmp	r1, #10
 800c6a8:	d103      	bne.n	800c6b2 <__sfputc_r+0x1e>
 800c6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ae:	f000 bb73 	b.w	800cd98 <__swbuf_r>
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	1c58      	adds	r0, r3, #1
 800c6b6:	6010      	str	r0, [r2, #0]
 800c6b8:	7019      	strb	r1, [r3, #0]
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <__sfputs_r>:
 800c6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	18d5      	adds	r5, r2, r3
 800c6cc:	42ac      	cmp	r4, r5
 800c6ce:	d101      	bne.n	800c6d4 <__sfputs_r+0x12>
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	e007      	b.n	800c6e4 <__sfputs_r+0x22>
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	463a      	mov	r2, r7
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7ff ffda 	bl	800c694 <__sfputc_r>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d1f3      	bne.n	800c6cc <__sfputs_r+0xa>
 800c6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6e8 <_vfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	b09d      	sub	sp, #116	; 0x74
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	b118      	cbz	r0, 800c700 <_vfiprintf_r+0x18>
 800c6f8:	6a03      	ldr	r3, [r0, #32]
 800c6fa:	b90b      	cbnz	r3, 800c700 <_vfiprintf_r+0x18>
 800c6fc:	f7ff fd50 	bl	800c1a0 <__sinit>
 800c700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c702:	07d9      	lsls	r1, r3, #31
 800c704:	d405      	bmi.n	800c712 <_vfiprintf_r+0x2a>
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	059a      	lsls	r2, r3, #22
 800c70a:	d402      	bmi.n	800c712 <_vfiprintf_r+0x2a>
 800c70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c70e:	f7ff feb9 	bl	800c484 <__retarget_lock_acquire_recursive>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	071b      	lsls	r3, r3, #28
 800c716:	d501      	bpl.n	800c71c <_vfiprintf_r+0x34>
 800c718:	692b      	ldr	r3, [r5, #16]
 800c71a:	b99b      	cbnz	r3, 800c744 <_vfiprintf_r+0x5c>
 800c71c:	4629      	mov	r1, r5
 800c71e:	4630      	mov	r0, r6
 800c720:	f000 fb78 	bl	800ce14 <__swsetup_r>
 800c724:	b170      	cbz	r0, 800c744 <_vfiprintf_r+0x5c>
 800c726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c728:	07dc      	lsls	r4, r3, #31
 800c72a:	d504      	bpl.n	800c736 <_vfiprintf_r+0x4e>
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295
 800c730:	b01d      	add	sp, #116	; 0x74
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	0598      	lsls	r0, r3, #22
 800c73a:	d4f7      	bmi.n	800c72c <_vfiprintf_r+0x44>
 800c73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73e:	f7ff fea2 	bl	800c486 <__retarget_lock_release_recursive>
 800c742:	e7f3      	b.n	800c72c <_vfiprintf_r+0x44>
 800c744:	2300      	movs	r3, #0
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	2320      	movs	r3, #32
 800c74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c752:	2330      	movs	r3, #48	; 0x30
 800c754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c908 <_vfiprintf_r+0x220>
 800c758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c75c:	f04f 0901 	mov.w	r9, #1
 800c760:	4623      	mov	r3, r4
 800c762:	469a      	mov	sl, r3
 800c764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c768:	b10a      	cbz	r2, 800c76e <_vfiprintf_r+0x86>
 800c76a:	2a25      	cmp	r2, #37	; 0x25
 800c76c:	d1f9      	bne.n	800c762 <_vfiprintf_r+0x7a>
 800c76e:	ebba 0b04 	subs.w	fp, sl, r4
 800c772:	d00b      	beq.n	800c78c <_vfiprintf_r+0xa4>
 800c774:	465b      	mov	r3, fp
 800c776:	4622      	mov	r2, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ffa1 	bl	800c6c2 <__sfputs_r>
 800c780:	3001      	adds	r0, #1
 800c782:	f000 80a9 	beq.w	800c8d8 <_vfiprintf_r+0x1f0>
 800c786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c788:	445a      	add	r2, fp
 800c78a:	9209      	str	r2, [sp, #36]	; 0x24
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 80a1 	beq.w	800c8d8 <_vfiprintf_r+0x1f0>
 800c796:	2300      	movs	r3, #0
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a0:	f10a 0a01 	add.w	sl, sl, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9307      	str	r3, [sp, #28]
 800c7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ae:	4654      	mov	r4, sl
 800c7b0:	2205      	movs	r2, #5
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4854      	ldr	r0, [pc, #336]	; (800c908 <_vfiprintf_r+0x220>)
 800c7b8:	f7f3 fd42 	bl	8000240 <memchr>
 800c7bc:	9a04      	ldr	r2, [sp, #16]
 800c7be:	b9d8      	cbnz	r0, 800c7f8 <_vfiprintf_r+0x110>
 800c7c0:	06d1      	lsls	r1, r2, #27
 800c7c2:	bf44      	itt	mi
 800c7c4:	2320      	movmi	r3, #32
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ca:	0713      	lsls	r3, r2, #28
 800c7cc:	bf44      	itt	mi
 800c7ce:	232b      	movmi	r3, #43	; 0x2b
 800c7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7da:	d015      	beq.n	800c808 <_vfiprintf_r+0x120>
 800c7dc:	9a07      	ldr	r2, [sp, #28]
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f04f 0c0a 	mov.w	ip, #10
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ec:	3b30      	subs	r3, #48	; 0x30
 800c7ee:	2b09      	cmp	r3, #9
 800c7f0:	d94d      	bls.n	800c88e <_vfiprintf_r+0x1a6>
 800c7f2:	b1b0      	cbz	r0, 800c822 <_vfiprintf_r+0x13a>
 800c7f4:	9207      	str	r2, [sp, #28]
 800c7f6:	e014      	b.n	800c822 <_vfiprintf_r+0x13a>
 800c7f8:	eba0 0308 	sub.w	r3, r0, r8
 800c7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	46a2      	mov	sl, r4
 800c806:	e7d2      	b.n	800c7ae <_vfiprintf_r+0xc6>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	1d19      	adds	r1, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9103      	str	r1, [sp, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfbb      	ittet	lt
 800c814:	425b      	neglt	r3, r3
 800c816:	f042 0202 	orrlt.w	r2, r2, #2
 800c81a:	9307      	strge	r3, [sp, #28]
 800c81c:	9307      	strlt	r3, [sp, #28]
 800c81e:	bfb8      	it	lt
 800c820:	9204      	strlt	r2, [sp, #16]
 800c822:	7823      	ldrb	r3, [r4, #0]
 800c824:	2b2e      	cmp	r3, #46	; 0x2e
 800c826:	d10c      	bne.n	800c842 <_vfiprintf_r+0x15a>
 800c828:	7863      	ldrb	r3, [r4, #1]
 800c82a:	2b2a      	cmp	r3, #42	; 0x2a
 800c82c:	d134      	bne.n	800c898 <_vfiprintf_r+0x1b0>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	9203      	str	r2, [sp, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83e:	3402      	adds	r4, #2
 800c840:	9305      	str	r3, [sp, #20]
 800c842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c918 <_vfiprintf_r+0x230>
 800c846:	7821      	ldrb	r1, [r4, #0]
 800c848:	2203      	movs	r2, #3
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7f3 fcf8 	bl	8000240 <memchr>
 800c850:	b138      	cbz	r0, 800c862 <_vfiprintf_r+0x17a>
 800c852:	9b04      	ldr	r3, [sp, #16]
 800c854:	eba0 000a 	sub.w	r0, r0, sl
 800c858:	2240      	movs	r2, #64	; 0x40
 800c85a:	4082      	lsls	r2, r0
 800c85c:	4313      	orrs	r3, r2
 800c85e:	3401      	adds	r4, #1
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c866:	4829      	ldr	r0, [pc, #164]	; (800c90c <_vfiprintf_r+0x224>)
 800c868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86c:	2206      	movs	r2, #6
 800c86e:	f7f3 fce7 	bl	8000240 <memchr>
 800c872:	2800      	cmp	r0, #0
 800c874:	d03f      	beq.n	800c8f6 <_vfiprintf_r+0x20e>
 800c876:	4b26      	ldr	r3, [pc, #152]	; (800c910 <_vfiprintf_r+0x228>)
 800c878:	bb1b      	cbnz	r3, 800c8c2 <_vfiprintf_r+0x1da>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	3307      	adds	r3, #7
 800c87e:	f023 0307 	bic.w	r3, r3, #7
 800c882:	3308      	adds	r3, #8
 800c884:	9303      	str	r3, [sp, #12]
 800c886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c888:	443b      	add	r3, r7
 800c88a:	9309      	str	r3, [sp, #36]	; 0x24
 800c88c:	e768      	b.n	800c760 <_vfiprintf_r+0x78>
 800c88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c892:	460c      	mov	r4, r1
 800c894:	2001      	movs	r0, #1
 800c896:	e7a6      	b.n	800c7e6 <_vfiprintf_r+0xfe>
 800c898:	2300      	movs	r3, #0
 800c89a:	3401      	adds	r4, #1
 800c89c:	9305      	str	r3, [sp, #20]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	f04f 0c0a 	mov.w	ip, #10
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8aa:	3a30      	subs	r2, #48	; 0x30
 800c8ac:	2a09      	cmp	r2, #9
 800c8ae:	d903      	bls.n	800c8b8 <_vfiprintf_r+0x1d0>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0c6      	beq.n	800c842 <_vfiprintf_r+0x15a>
 800c8b4:	9105      	str	r1, [sp, #20]
 800c8b6:	e7c4      	b.n	800c842 <_vfiprintf_r+0x15a>
 800c8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e7f0      	b.n	800c8a4 <_vfiprintf_r+0x1bc>
 800c8c2:	ab03      	add	r3, sp, #12
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	462a      	mov	r2, r5
 800c8c8:	4b12      	ldr	r3, [pc, #72]	; (800c914 <_vfiprintf_r+0x22c>)
 800c8ca:	a904      	add	r1, sp, #16
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f3af 8000 	nop.w
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	1c78      	adds	r0, r7, #1
 800c8d6:	d1d6      	bne.n	800c886 <_vfiprintf_r+0x19e>
 800c8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8da:	07d9      	lsls	r1, r3, #31
 800c8dc:	d405      	bmi.n	800c8ea <_vfiprintf_r+0x202>
 800c8de:	89ab      	ldrh	r3, [r5, #12]
 800c8e0:	059a      	lsls	r2, r3, #22
 800c8e2:	d402      	bmi.n	800c8ea <_vfiprintf_r+0x202>
 800c8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e6:	f7ff fdce 	bl	800c486 <__retarget_lock_release_recursive>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	065b      	lsls	r3, r3, #25
 800c8ee:	f53f af1d 	bmi.w	800c72c <_vfiprintf_r+0x44>
 800c8f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f4:	e71c      	b.n	800c730 <_vfiprintf_r+0x48>
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <_vfiprintf_r+0x22c>)
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4630      	mov	r0, r6
 800c902:	f000 f879 	bl	800c9f8 <_printf_i>
 800c906:	e7e4      	b.n	800c8d2 <_vfiprintf_r+0x1ea>
 800c908:	0800e9e0 	.word	0x0800e9e0
 800c90c:	0800e9ea 	.word	0x0800e9ea
 800c910:	00000000 	.word	0x00000000
 800c914:	0800c6c3 	.word	0x0800c6c3
 800c918:	0800e9e6 	.word	0x0800e9e6

0800c91c <_printf_common>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	4616      	mov	r6, r2
 800c922:	4699      	mov	r9, r3
 800c924:	688a      	ldr	r2, [r1, #8]
 800c926:	690b      	ldr	r3, [r1, #16]
 800c928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c92c:	4293      	cmp	r3, r2
 800c92e:	bfb8      	it	lt
 800c930:	4613      	movlt	r3, r2
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c938:	4607      	mov	r7, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b10a      	cbz	r2, 800c942 <_printf_common+0x26>
 800c93e:	3301      	adds	r3, #1
 800c940:	6033      	str	r3, [r6, #0]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	0699      	lsls	r1, r3, #26
 800c946:	bf42      	ittt	mi
 800c948:	6833      	ldrmi	r3, [r6, #0]
 800c94a:	3302      	addmi	r3, #2
 800c94c:	6033      	strmi	r3, [r6, #0]
 800c94e:	6825      	ldr	r5, [r4, #0]
 800c950:	f015 0506 	ands.w	r5, r5, #6
 800c954:	d106      	bne.n	800c964 <_printf_common+0x48>
 800c956:	f104 0a19 	add.w	sl, r4, #25
 800c95a:	68e3      	ldr	r3, [r4, #12]
 800c95c:	6832      	ldr	r2, [r6, #0]
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	42ab      	cmp	r3, r5
 800c962:	dc26      	bgt.n	800c9b2 <_printf_common+0x96>
 800c964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c968:	1e13      	subs	r3, r2, #0
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	bf18      	it	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	0692      	lsls	r2, r2, #26
 800c972:	d42b      	bmi.n	800c9cc <_printf_common+0xb0>
 800c974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c978:	4649      	mov	r1, r9
 800c97a:	4638      	mov	r0, r7
 800c97c:	47c0      	blx	r8
 800c97e:	3001      	adds	r0, #1
 800c980:	d01e      	beq.n	800c9c0 <_printf_common+0xa4>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	6922      	ldr	r2, [r4, #16]
 800c986:	f003 0306 	and.w	r3, r3, #6
 800c98a:	2b04      	cmp	r3, #4
 800c98c:	bf02      	ittt	eq
 800c98e:	68e5      	ldreq	r5, [r4, #12]
 800c990:	6833      	ldreq	r3, [r6, #0]
 800c992:	1aed      	subeq	r5, r5, r3
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	bf0c      	ite	eq
 800c998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c99c:	2500      	movne	r5, #0
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	bfc4      	itt	gt
 800c9a2:	1a9b      	subgt	r3, r3, r2
 800c9a4:	18ed      	addgt	r5, r5, r3
 800c9a6:	2600      	movs	r6, #0
 800c9a8:	341a      	adds	r4, #26
 800c9aa:	42b5      	cmp	r5, r6
 800c9ac:	d11a      	bne.n	800c9e4 <_printf_common+0xc8>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e008      	b.n	800c9c4 <_printf_common+0xa8>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	47c0      	blx	r8
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d103      	bne.n	800c9c8 <_printf_common+0xac>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	e7c6      	b.n	800c95a <_printf_common+0x3e>
 800c9cc:	18e1      	adds	r1, r4, r3
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	2030      	movs	r0, #48	; 0x30
 800c9d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9d6:	4422      	add	r2, r4
 800c9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9e0:	3302      	adds	r3, #2
 800c9e2:	e7c7      	b.n	800c974 <_printf_common+0x58>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	47c0      	blx	r8
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d0e6      	beq.n	800c9c0 <_printf_common+0xa4>
 800c9f2:	3601      	adds	r6, #1
 800c9f4:	e7d9      	b.n	800c9aa <_printf_common+0x8e>
	...

0800c9f8 <_printf_i>:
 800c9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	7e0f      	ldrb	r7, [r1, #24]
 800c9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca00:	2f78      	cmp	r7, #120	; 0x78
 800ca02:	4691      	mov	r9, r2
 800ca04:	4680      	mov	r8, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	469a      	mov	sl, r3
 800ca0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca0e:	d807      	bhi.n	800ca20 <_printf_i+0x28>
 800ca10:	2f62      	cmp	r7, #98	; 0x62
 800ca12:	d80a      	bhi.n	800ca2a <_printf_i+0x32>
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	f000 80d4 	beq.w	800cbc2 <_printf_i+0x1ca>
 800ca1a:	2f58      	cmp	r7, #88	; 0x58
 800ca1c:	f000 80c0 	beq.w	800cba0 <_printf_i+0x1a8>
 800ca20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca28:	e03a      	b.n	800caa0 <_printf_i+0xa8>
 800ca2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca2e:	2b15      	cmp	r3, #21
 800ca30:	d8f6      	bhi.n	800ca20 <_printf_i+0x28>
 800ca32:	a101      	add	r1, pc, #4	; (adr r1, 800ca38 <_printf_i+0x40>)
 800ca34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca38:	0800ca91 	.word	0x0800ca91
 800ca3c:	0800caa5 	.word	0x0800caa5
 800ca40:	0800ca21 	.word	0x0800ca21
 800ca44:	0800ca21 	.word	0x0800ca21
 800ca48:	0800ca21 	.word	0x0800ca21
 800ca4c:	0800ca21 	.word	0x0800ca21
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800ca21 	.word	0x0800ca21
 800ca58:	0800ca21 	.word	0x0800ca21
 800ca5c:	0800ca21 	.word	0x0800ca21
 800ca60:	0800ca21 	.word	0x0800ca21
 800ca64:	0800cba9 	.word	0x0800cba9
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800cb63 	.word	0x0800cb63
 800ca70:	0800ca21 	.word	0x0800ca21
 800ca74:	0800ca21 	.word	0x0800ca21
 800ca78:	0800cbcb 	.word	0x0800cbcb
 800ca7c:	0800ca21 	.word	0x0800ca21
 800ca80:	0800cad1 	.word	0x0800cad1
 800ca84:	0800ca21 	.word	0x0800ca21
 800ca88:	0800ca21 	.word	0x0800ca21
 800ca8c:	0800cb6b 	.word	0x0800cb6b
 800ca90:	682b      	ldr	r3, [r5, #0]
 800ca92:	1d1a      	adds	r2, r3, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	602a      	str	r2, [r5, #0]
 800ca98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caa0:	2301      	movs	r3, #1
 800caa2:	e09f      	b.n	800cbe4 <_printf_i+0x1ec>
 800caa4:	6820      	ldr	r0, [r4, #0]
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	0607      	lsls	r7, r0, #24
 800caaa:	f103 0104 	add.w	r1, r3, #4
 800caae:	6029      	str	r1, [r5, #0]
 800cab0:	d501      	bpl.n	800cab6 <_printf_i+0xbe>
 800cab2:	681e      	ldr	r6, [r3, #0]
 800cab4:	e003      	b.n	800cabe <_printf_i+0xc6>
 800cab6:	0646      	lsls	r6, r0, #25
 800cab8:	d5fb      	bpl.n	800cab2 <_printf_i+0xba>
 800caba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	da03      	bge.n	800caca <_printf_i+0xd2>
 800cac2:	232d      	movs	r3, #45	; 0x2d
 800cac4:	4276      	negs	r6, r6
 800cac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caca:	485a      	ldr	r0, [pc, #360]	; (800cc34 <_printf_i+0x23c>)
 800cacc:	230a      	movs	r3, #10
 800cace:	e012      	b.n	800caf6 <_printf_i+0xfe>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	6820      	ldr	r0, [r4, #0]
 800cad4:	1d19      	adds	r1, r3, #4
 800cad6:	6029      	str	r1, [r5, #0]
 800cad8:	0605      	lsls	r5, r0, #24
 800cada:	d501      	bpl.n	800cae0 <_printf_i+0xe8>
 800cadc:	681e      	ldr	r6, [r3, #0]
 800cade:	e002      	b.n	800cae6 <_printf_i+0xee>
 800cae0:	0641      	lsls	r1, r0, #25
 800cae2:	d5fb      	bpl.n	800cadc <_printf_i+0xe4>
 800cae4:	881e      	ldrh	r6, [r3, #0]
 800cae6:	4853      	ldr	r0, [pc, #332]	; (800cc34 <_printf_i+0x23c>)
 800cae8:	2f6f      	cmp	r7, #111	; 0x6f
 800caea:	bf0c      	ite	eq
 800caec:	2308      	moveq	r3, #8
 800caee:	230a      	movne	r3, #10
 800caf0:	2100      	movs	r1, #0
 800caf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caf6:	6865      	ldr	r5, [r4, #4]
 800caf8:	60a5      	str	r5, [r4, #8]
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	bfa2      	ittt	ge
 800cafe:	6821      	ldrge	r1, [r4, #0]
 800cb00:	f021 0104 	bicge.w	r1, r1, #4
 800cb04:	6021      	strge	r1, [r4, #0]
 800cb06:	b90e      	cbnz	r6, 800cb0c <_printf_i+0x114>
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	d04b      	beq.n	800cba4 <_printf_i+0x1ac>
 800cb0c:	4615      	mov	r5, r2
 800cb0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb12:	fb03 6711 	mls	r7, r3, r1, r6
 800cb16:	5dc7      	ldrb	r7, [r0, r7]
 800cb18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb1c:	4637      	mov	r7, r6
 800cb1e:	42bb      	cmp	r3, r7
 800cb20:	460e      	mov	r6, r1
 800cb22:	d9f4      	bls.n	800cb0e <_printf_i+0x116>
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d10b      	bne.n	800cb40 <_printf_i+0x148>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	07de      	lsls	r6, r3, #31
 800cb2c:	d508      	bpl.n	800cb40 <_printf_i+0x148>
 800cb2e:	6923      	ldr	r3, [r4, #16]
 800cb30:	6861      	ldr	r1, [r4, #4]
 800cb32:	4299      	cmp	r1, r3
 800cb34:	bfde      	ittt	le
 800cb36:	2330      	movle	r3, #48	; 0x30
 800cb38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb40:	1b52      	subs	r2, r2, r5
 800cb42:	6122      	str	r2, [r4, #16]
 800cb44:	f8cd a000 	str.w	sl, [sp]
 800cb48:	464b      	mov	r3, r9
 800cb4a:	aa03      	add	r2, sp, #12
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4640      	mov	r0, r8
 800cb50:	f7ff fee4 	bl	800c91c <_printf_common>
 800cb54:	3001      	adds	r0, #1
 800cb56:	d14a      	bne.n	800cbee <_printf_i+0x1f6>
 800cb58:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5c:	b004      	add	sp, #16
 800cb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f043 0320 	orr.w	r3, r3, #32
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	4833      	ldr	r0, [pc, #204]	; (800cc38 <_printf_i+0x240>)
 800cb6c:	2778      	movs	r7, #120	; 0x78
 800cb6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	6829      	ldr	r1, [r5, #0]
 800cb76:	061f      	lsls	r7, r3, #24
 800cb78:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb7c:	d402      	bmi.n	800cb84 <_printf_i+0x18c>
 800cb7e:	065f      	lsls	r7, r3, #25
 800cb80:	bf48      	it	mi
 800cb82:	b2b6      	uxthmi	r6, r6
 800cb84:	07df      	lsls	r7, r3, #31
 800cb86:	bf48      	it	mi
 800cb88:	f043 0320 	orrmi.w	r3, r3, #32
 800cb8c:	6029      	str	r1, [r5, #0]
 800cb8e:	bf48      	it	mi
 800cb90:	6023      	strmi	r3, [r4, #0]
 800cb92:	b91e      	cbnz	r6, 800cb9c <_printf_i+0x1a4>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	f023 0320 	bic.w	r3, r3, #32
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	2310      	movs	r3, #16
 800cb9e:	e7a7      	b.n	800caf0 <_printf_i+0xf8>
 800cba0:	4824      	ldr	r0, [pc, #144]	; (800cc34 <_printf_i+0x23c>)
 800cba2:	e7e4      	b.n	800cb6e <_printf_i+0x176>
 800cba4:	4615      	mov	r5, r2
 800cba6:	e7bd      	b.n	800cb24 <_printf_i+0x12c>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	6826      	ldr	r6, [r4, #0]
 800cbac:	6961      	ldr	r1, [r4, #20]
 800cbae:	1d18      	adds	r0, r3, #4
 800cbb0:	6028      	str	r0, [r5, #0]
 800cbb2:	0635      	lsls	r5, r6, #24
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	d501      	bpl.n	800cbbc <_printf_i+0x1c4>
 800cbb8:	6019      	str	r1, [r3, #0]
 800cbba:	e002      	b.n	800cbc2 <_printf_i+0x1ca>
 800cbbc:	0670      	lsls	r0, r6, #25
 800cbbe:	d5fb      	bpl.n	800cbb8 <_printf_i+0x1c0>
 800cbc0:	8019      	strh	r1, [r3, #0]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	e7bc      	b.n	800cb44 <_printf_i+0x14c>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	1d1a      	adds	r2, r3, #4
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	681d      	ldr	r5, [r3, #0]
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f7f3 fb32 	bl	8000240 <memchr>
 800cbdc:	b108      	cbz	r0, 800cbe2 <_printf_i+0x1ea>
 800cbde:	1b40      	subs	r0, r0, r5
 800cbe0:	6060      	str	r0, [r4, #4]
 800cbe2:	6863      	ldr	r3, [r4, #4]
 800cbe4:	6123      	str	r3, [r4, #16]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbec:	e7aa      	b.n	800cb44 <_printf_i+0x14c>
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	47d0      	blx	sl
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d0ad      	beq.n	800cb58 <_printf_i+0x160>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	079b      	lsls	r3, r3, #30
 800cc00:	d413      	bmi.n	800cc2a <_printf_i+0x232>
 800cc02:	68e0      	ldr	r0, [r4, #12]
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	4298      	cmp	r0, r3
 800cc08:	bfb8      	it	lt
 800cc0a:	4618      	movlt	r0, r3
 800cc0c:	e7a6      	b.n	800cb5c <_printf_i+0x164>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4632      	mov	r2, r6
 800cc12:	4649      	mov	r1, r9
 800cc14:	4640      	mov	r0, r8
 800cc16:	47d0      	blx	sl
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d09d      	beq.n	800cb58 <_printf_i+0x160>
 800cc1c:	3501      	adds	r5, #1
 800cc1e:	68e3      	ldr	r3, [r4, #12]
 800cc20:	9903      	ldr	r1, [sp, #12]
 800cc22:	1a5b      	subs	r3, r3, r1
 800cc24:	42ab      	cmp	r3, r5
 800cc26:	dcf2      	bgt.n	800cc0e <_printf_i+0x216>
 800cc28:	e7eb      	b.n	800cc02 <_printf_i+0x20a>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	f104 0619 	add.w	r6, r4, #25
 800cc30:	e7f5      	b.n	800cc1e <_printf_i+0x226>
 800cc32:	bf00      	nop
 800cc34:	0800e9f1 	.word	0x0800e9f1
 800cc38:	0800ea02 	.word	0x0800ea02

0800cc3c <__sflush_r>:
 800cc3c:	898a      	ldrh	r2, [r1, #12]
 800cc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc42:	4605      	mov	r5, r0
 800cc44:	0710      	lsls	r0, r2, #28
 800cc46:	460c      	mov	r4, r1
 800cc48:	d458      	bmi.n	800ccfc <__sflush_r+0xc0>
 800cc4a:	684b      	ldr	r3, [r1, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dc05      	bgt.n	800cc5c <__sflush_r+0x20>
 800cc50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	dc02      	bgt.n	800cc5c <__sflush_r+0x20>
 800cc56:	2000      	movs	r0, #0
 800cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc5e:	2e00      	cmp	r6, #0
 800cc60:	d0f9      	beq.n	800cc56 <__sflush_r+0x1a>
 800cc62:	2300      	movs	r3, #0
 800cc64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc68:	682f      	ldr	r7, [r5, #0]
 800cc6a:	6a21      	ldr	r1, [r4, #32]
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	d032      	beq.n	800ccd6 <__sflush_r+0x9a>
 800cc70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	075a      	lsls	r2, r3, #29
 800cc76:	d505      	bpl.n	800cc84 <__sflush_r+0x48>
 800cc78:	6863      	ldr	r3, [r4, #4]
 800cc7a:	1ac0      	subs	r0, r0, r3
 800cc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc7e:	b10b      	cbz	r3, 800cc84 <__sflush_r+0x48>
 800cc80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc82:	1ac0      	subs	r0, r0, r3
 800cc84:	2300      	movs	r3, #0
 800cc86:	4602      	mov	r2, r0
 800cc88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc8a:	6a21      	ldr	r1, [r4, #32]
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b0      	blx	r6
 800cc90:	1c43      	adds	r3, r0, #1
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	d106      	bne.n	800cca4 <__sflush_r+0x68>
 800cc96:	6829      	ldr	r1, [r5, #0]
 800cc98:	291d      	cmp	r1, #29
 800cc9a:	d82b      	bhi.n	800ccf4 <__sflush_r+0xb8>
 800cc9c:	4a29      	ldr	r2, [pc, #164]	; (800cd44 <__sflush_r+0x108>)
 800cc9e:	410a      	asrs	r2, r1
 800cca0:	07d6      	lsls	r6, r2, #31
 800cca2:	d427      	bmi.n	800ccf4 <__sflush_r+0xb8>
 800cca4:	2200      	movs	r2, #0
 800cca6:	6062      	str	r2, [r4, #4]
 800cca8:	04d9      	lsls	r1, r3, #19
 800ccaa:	6922      	ldr	r2, [r4, #16]
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	d504      	bpl.n	800ccba <__sflush_r+0x7e>
 800ccb0:	1c42      	adds	r2, r0, #1
 800ccb2:	d101      	bne.n	800ccb8 <__sflush_r+0x7c>
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	b903      	cbnz	r3, 800ccba <__sflush_r+0x7e>
 800ccb8:	6560      	str	r0, [r4, #84]	; 0x54
 800ccba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccbc:	602f      	str	r7, [r5, #0]
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	d0c9      	beq.n	800cc56 <__sflush_r+0x1a>
 800ccc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccc6:	4299      	cmp	r1, r3
 800ccc8:	d002      	beq.n	800ccd0 <__sflush_r+0x94>
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7ff fbea 	bl	800c4a4 <_free_r>
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	6360      	str	r0, [r4, #52]	; 0x34
 800ccd4:	e7c0      	b.n	800cc58 <__sflush_r+0x1c>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b0      	blx	r6
 800ccdc:	1c41      	adds	r1, r0, #1
 800ccde:	d1c8      	bne.n	800cc72 <__sflush_r+0x36>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d0c5      	beq.n	800cc72 <__sflush_r+0x36>
 800cce6:	2b1d      	cmp	r3, #29
 800cce8:	d001      	beq.n	800ccee <__sflush_r+0xb2>
 800ccea:	2b16      	cmp	r3, #22
 800ccec:	d101      	bne.n	800ccf2 <__sflush_r+0xb6>
 800ccee:	602f      	str	r7, [r5, #0]
 800ccf0:	e7b1      	b.n	800cc56 <__sflush_r+0x1a>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	e7ad      	b.n	800cc58 <__sflush_r+0x1c>
 800ccfc:	690f      	ldr	r7, [r1, #16]
 800ccfe:	2f00      	cmp	r7, #0
 800cd00:	d0a9      	beq.n	800cc56 <__sflush_r+0x1a>
 800cd02:	0793      	lsls	r3, r2, #30
 800cd04:	680e      	ldr	r6, [r1, #0]
 800cd06:	bf08      	it	eq
 800cd08:	694b      	ldreq	r3, [r1, #20]
 800cd0a:	600f      	str	r7, [r1, #0]
 800cd0c:	bf18      	it	ne
 800cd0e:	2300      	movne	r3, #0
 800cd10:	eba6 0807 	sub.w	r8, r6, r7
 800cd14:	608b      	str	r3, [r1, #8]
 800cd16:	f1b8 0f00 	cmp.w	r8, #0
 800cd1a:	dd9c      	ble.n	800cc56 <__sflush_r+0x1a>
 800cd1c:	6a21      	ldr	r1, [r4, #32]
 800cd1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd20:	4643      	mov	r3, r8
 800cd22:	463a      	mov	r2, r7
 800cd24:	4628      	mov	r0, r5
 800cd26:	47b0      	blx	r6
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	dc06      	bgt.n	800cd3a <__sflush_r+0xfe>
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	f04f 30ff 	mov.w	r0, #4294967295
 800cd38:	e78e      	b.n	800cc58 <__sflush_r+0x1c>
 800cd3a:	4407      	add	r7, r0
 800cd3c:	eba8 0800 	sub.w	r8, r8, r0
 800cd40:	e7e9      	b.n	800cd16 <__sflush_r+0xda>
 800cd42:	bf00      	nop
 800cd44:	dfbffffe 	.word	0xdfbffffe

0800cd48 <_fflush_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	690b      	ldr	r3, [r1, #16]
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	b913      	cbnz	r3, 800cd58 <_fflush_r+0x10>
 800cd52:	2500      	movs	r5, #0
 800cd54:	4628      	mov	r0, r5
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	b118      	cbz	r0, 800cd62 <_fflush_r+0x1a>
 800cd5a:	6a03      	ldr	r3, [r0, #32]
 800cd5c:	b90b      	cbnz	r3, 800cd62 <_fflush_r+0x1a>
 800cd5e:	f7ff fa1f 	bl	800c1a0 <__sinit>
 800cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0f3      	beq.n	800cd52 <_fflush_r+0xa>
 800cd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd6c:	07d0      	lsls	r0, r2, #31
 800cd6e:	d404      	bmi.n	800cd7a <_fflush_r+0x32>
 800cd70:	0599      	lsls	r1, r3, #22
 800cd72:	d402      	bmi.n	800cd7a <_fflush_r+0x32>
 800cd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd76:	f7ff fb85 	bl	800c484 <__retarget_lock_acquire_recursive>
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7ff ff5d 	bl	800cc3c <__sflush_r>
 800cd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd84:	07da      	lsls	r2, r3, #31
 800cd86:	4605      	mov	r5, r0
 800cd88:	d4e4      	bmi.n	800cd54 <_fflush_r+0xc>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	059b      	lsls	r3, r3, #22
 800cd8e:	d4e1      	bmi.n	800cd54 <_fflush_r+0xc>
 800cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd92:	f7ff fb78 	bl	800c486 <__retarget_lock_release_recursive>
 800cd96:	e7dd      	b.n	800cd54 <_fflush_r+0xc>

0800cd98 <__swbuf_r>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	460e      	mov	r6, r1
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	4605      	mov	r5, r0
 800cda0:	b118      	cbz	r0, 800cdaa <__swbuf_r+0x12>
 800cda2:	6a03      	ldr	r3, [r0, #32]
 800cda4:	b90b      	cbnz	r3, 800cdaa <__swbuf_r+0x12>
 800cda6:	f7ff f9fb 	bl	800c1a0 <__sinit>
 800cdaa:	69a3      	ldr	r3, [r4, #24]
 800cdac:	60a3      	str	r3, [r4, #8]
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	071a      	lsls	r2, r3, #28
 800cdb2:	d525      	bpl.n	800ce00 <__swbuf_r+0x68>
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	b31b      	cbz	r3, 800ce00 <__swbuf_r+0x68>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	6922      	ldr	r2, [r4, #16]
 800cdbc:	1a98      	subs	r0, r3, r2
 800cdbe:	6963      	ldr	r3, [r4, #20]
 800cdc0:	b2f6      	uxtb	r6, r6
 800cdc2:	4283      	cmp	r3, r0
 800cdc4:	4637      	mov	r7, r6
 800cdc6:	dc04      	bgt.n	800cdd2 <__swbuf_r+0x3a>
 800cdc8:	4621      	mov	r1, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f7ff ffbc 	bl	800cd48 <_fflush_r>
 800cdd0:	b9e0      	cbnz	r0, 800ce0c <__swbuf_r+0x74>
 800cdd2:	68a3      	ldr	r3, [r4, #8]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	60a3      	str	r3, [r4, #8]
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	6022      	str	r2, [r4, #0]
 800cdde:	701e      	strb	r6, [r3, #0]
 800cde0:	6962      	ldr	r2, [r4, #20]
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d004      	beq.n	800cdf2 <__swbuf_r+0x5a>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	07db      	lsls	r3, r3, #31
 800cdec:	d506      	bpl.n	800cdfc <__swbuf_r+0x64>
 800cdee:	2e0a      	cmp	r6, #10
 800cdf0:	d104      	bne.n	800cdfc <__swbuf_r+0x64>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f7ff ffa7 	bl	800cd48 <_fflush_r>
 800cdfa:	b938      	cbnz	r0, 800ce0c <__swbuf_r+0x74>
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce00:	4621      	mov	r1, r4
 800ce02:	4628      	mov	r0, r5
 800ce04:	f000 f806 	bl	800ce14 <__swsetup_r>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d0d5      	beq.n	800cdb8 <__swbuf_r+0x20>
 800ce0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ce10:	e7f4      	b.n	800cdfc <__swbuf_r+0x64>
	...

0800ce14 <__swsetup_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <__swsetup_r+0xac>)
 800ce18:	4605      	mov	r5, r0
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	b118      	cbz	r0, 800ce28 <__swsetup_r+0x14>
 800ce20:	6a03      	ldr	r3, [r0, #32]
 800ce22:	b90b      	cbnz	r3, 800ce28 <__swsetup_r+0x14>
 800ce24:	f7ff f9bc 	bl	800c1a0 <__sinit>
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce2e:	0718      	lsls	r0, r3, #28
 800ce30:	d422      	bmi.n	800ce78 <__swsetup_r+0x64>
 800ce32:	06d9      	lsls	r1, r3, #27
 800ce34:	d407      	bmi.n	800ce46 <__swsetup_r+0x32>
 800ce36:	2309      	movs	r3, #9
 800ce38:	602b      	str	r3, [r5, #0]
 800ce3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce3e:	81a3      	strh	r3, [r4, #12]
 800ce40:	f04f 30ff 	mov.w	r0, #4294967295
 800ce44:	e034      	b.n	800ceb0 <__swsetup_r+0x9c>
 800ce46:	0758      	lsls	r0, r3, #29
 800ce48:	d512      	bpl.n	800ce70 <__swsetup_r+0x5c>
 800ce4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce4c:	b141      	cbz	r1, 800ce60 <__swsetup_r+0x4c>
 800ce4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce52:	4299      	cmp	r1, r3
 800ce54:	d002      	beq.n	800ce5c <__swsetup_r+0x48>
 800ce56:	4628      	mov	r0, r5
 800ce58:	f7ff fb24 	bl	800c4a4 <_free_r>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	6363      	str	r3, [r4, #52]	; 0x34
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6063      	str	r3, [r4, #4]
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f043 0308 	orr.w	r3, r3, #8
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	b94b      	cbnz	r3, 800ce90 <__swsetup_r+0x7c>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce86:	d003      	beq.n	800ce90 <__swsetup_r+0x7c>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f000 f850 	bl	800cf30 <__smakebuf_r>
 800ce90:	89a0      	ldrh	r0, [r4, #12]
 800ce92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce96:	f010 0301 	ands.w	r3, r0, #1
 800ce9a:	d00a      	beq.n	800ceb2 <__swsetup_r+0x9e>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	6963      	ldr	r3, [r4, #20]
 800cea2:	425b      	negs	r3, r3
 800cea4:	61a3      	str	r3, [r4, #24]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	b943      	cbnz	r3, 800cebc <__swsetup_r+0xa8>
 800ceaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ceae:	d1c4      	bne.n	800ce3a <__swsetup_r+0x26>
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	0781      	lsls	r1, r0, #30
 800ceb4:	bf58      	it	pl
 800ceb6:	6963      	ldrpl	r3, [r4, #20]
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	e7f4      	b.n	800cea6 <__swsetup_r+0x92>
 800cebc:	2000      	movs	r0, #0
 800cebe:	e7f7      	b.n	800ceb0 <__swsetup_r+0x9c>
 800cec0:	200000c0 	.word	0x200000c0

0800cec4 <_sbrk_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d06      	ldr	r5, [pc, #24]	; (800cee0 <_sbrk_r+0x1c>)
 800cec8:	2300      	movs	r3, #0
 800ceca:	4604      	mov	r4, r0
 800cecc:	4608      	mov	r0, r1
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	f7f5 fc2c 	bl	800272c <_sbrk>
 800ced4:	1c43      	adds	r3, r0, #1
 800ced6:	d102      	bne.n	800cede <_sbrk_r+0x1a>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	b103      	cbz	r3, 800cede <_sbrk_r+0x1a>
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	bd38      	pop	{r3, r4, r5, pc}
 800cee0:	20005310 	.word	0x20005310

0800cee4 <__swhatbuf_r>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	460c      	mov	r4, r1
 800cee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceec:	2900      	cmp	r1, #0
 800ceee:	b096      	sub	sp, #88	; 0x58
 800cef0:	4615      	mov	r5, r2
 800cef2:	461e      	mov	r6, r3
 800cef4:	da0d      	bge.n	800cf12 <__swhatbuf_r+0x2e>
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cefc:	f04f 0100 	mov.w	r1, #0
 800cf00:	bf0c      	ite	eq
 800cf02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cf06:	2340      	movne	r3, #64	; 0x40
 800cf08:	2000      	movs	r0, #0
 800cf0a:	6031      	str	r1, [r6, #0]
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	b016      	add	sp, #88	; 0x58
 800cf10:	bd70      	pop	{r4, r5, r6, pc}
 800cf12:	466a      	mov	r2, sp
 800cf14:	f000 f848 	bl	800cfa8 <_fstat_r>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	dbec      	blt.n	800cef6 <__swhatbuf_r+0x12>
 800cf1c:	9901      	ldr	r1, [sp, #4]
 800cf1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cf22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cf26:	4259      	negs	r1, r3
 800cf28:	4159      	adcs	r1, r3
 800cf2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf2e:	e7eb      	b.n	800cf08 <__swhatbuf_r+0x24>

0800cf30 <__smakebuf_r>:
 800cf30:	898b      	ldrh	r3, [r1, #12]
 800cf32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf34:	079d      	lsls	r5, r3, #30
 800cf36:	4606      	mov	r6, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	d507      	bpl.n	800cf4c <__smakebuf_r+0x1c>
 800cf3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	6123      	str	r3, [r4, #16]
 800cf44:	2301      	movs	r3, #1
 800cf46:	6163      	str	r3, [r4, #20]
 800cf48:	b002      	add	sp, #8
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	ab01      	add	r3, sp, #4
 800cf4e:	466a      	mov	r2, sp
 800cf50:	f7ff ffc8 	bl	800cee4 <__swhatbuf_r>
 800cf54:	9900      	ldr	r1, [sp, #0]
 800cf56:	4605      	mov	r5, r0
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7ff fb0f 	bl	800c57c <_malloc_r>
 800cf5e:	b948      	cbnz	r0, 800cf74 <__smakebuf_r+0x44>
 800cf60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf64:	059a      	lsls	r2, r3, #22
 800cf66:	d4ef      	bmi.n	800cf48 <__smakebuf_r+0x18>
 800cf68:	f023 0303 	bic.w	r3, r3, #3
 800cf6c:	f043 0302 	orr.w	r3, r3, #2
 800cf70:	81a3      	strh	r3, [r4, #12]
 800cf72:	e7e3      	b.n	800cf3c <__smakebuf_r+0xc>
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	6020      	str	r0, [r4, #0]
 800cf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	9b00      	ldr	r3, [sp, #0]
 800cf80:	6163      	str	r3, [r4, #20]
 800cf82:	9b01      	ldr	r3, [sp, #4]
 800cf84:	6120      	str	r0, [r4, #16]
 800cf86:	b15b      	cbz	r3, 800cfa0 <__smakebuf_r+0x70>
 800cf88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f000 f81d 	bl	800cfcc <_isatty_r>
 800cf92:	b128      	cbz	r0, 800cfa0 <__smakebuf_r+0x70>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f023 0303 	bic.w	r3, r3, #3
 800cf9a:	f043 0301 	orr.w	r3, r3, #1
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	431d      	orrs	r5, r3
 800cfa4:	81a5      	strh	r5, [r4, #12]
 800cfa6:	e7cf      	b.n	800cf48 <__smakebuf_r+0x18>

0800cfa8 <_fstat_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_fstat_r+0x20>)
 800cfac:	2300      	movs	r3, #0
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	602b      	str	r3, [r5, #0]
 800cfb6:	f7f5 fb84 	bl	80026c2 <_fstat>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	d102      	bne.n	800cfc4 <_fstat_r+0x1c>
 800cfbe:	682b      	ldr	r3, [r5, #0]
 800cfc0:	b103      	cbz	r3, 800cfc4 <_fstat_r+0x1c>
 800cfc2:	6023      	str	r3, [r4, #0]
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20005310 	.word	0x20005310

0800cfcc <_isatty_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_isatty_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f5 fb83 	bl	80026e2 <_isatty>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_isatty_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_isatty_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20005310 	.word	0x20005310

0800cfec <_init>:
 800cfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfee:	bf00      	nop
 800cff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff2:	bc08      	pop	{r3}
 800cff4:	469e      	mov	lr, r3
 800cff6:	4770      	bx	lr

0800cff8 <_fini>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	bf00      	nop
 800cffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffe:	bc08      	pop	{r3}
 800d000:	469e      	mov	lr, r3
 800d002:	4770      	bx	lr
